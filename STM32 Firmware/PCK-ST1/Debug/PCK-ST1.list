
PCK-ST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010198  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08010328  08010328  00011328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108b0  080108b0  000123c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080108b0  080108b0  000118b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108b8  080108b8  000123c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108b8  080108b8  000118b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080108bc  080108bc  000118bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c4  20000000  080108c0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002464  200003c8  08010c84  000123c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000282c  08010c84  0001282c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000123c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a36  00000000  00000000  000123f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000493a  00000000  00000000  00032e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  00037768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001506  00000000  00000000  000392a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0cf  00000000  00000000  0003a7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c0b  00000000  00000000  00066875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc4e9  00000000  00000000  0008a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186969  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086a0  00000000  00000000  001869ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0018f04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003c8 	.word	0x200003c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010310 	.word	0x08010310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	08010310 	.word	0x08010310

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <nmea_to_decimal>:
static uint8_t dma_rx_buf[GPS_DMA_RX_BUF_SIZE];
static GPS_Data_t gps_data;

// Utility: convert NMEA lat/lon to decimal degrees
static double nmea_to_decimal(char *nmea_coord)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    if (!nmea_coord || strlen(nmea_coord) < 6) return 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <nmea_to_decimal+0x1a>
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff f91e 	bl	8000290 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	2b05      	cmp	r3, #5
 8001058:	d804      	bhi.n	8001064 <nmea_to_decimal+0x24>
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	e038      	b.n	80010d6 <nmea_to_decimal+0x96>
    double raw = atof(nmea_coord);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f00b f911 	bl	800c28c <atof>
 800106a:	ed87 0b06 	vstr	d0, [r7, #24]
    int deg = (int)(raw / 100);
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <nmea_to_decimal+0xa8>)
 8001074:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001078:	f7ff fbf8 	bl	800086c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd78 	bl	8000b78 <__aeabi_d2iz>
 8001088:	4603      	mov	r3, r0
 800108a:	617b      	str	r3, [r7, #20]
    double min = raw - deg * 100;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2264      	movs	r2, #100	@ 0x64
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa55 	bl	8000544 <__aeabi_i2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010a2:	f7ff f901 	bl	80002a8 <__aeabi_dsub>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return deg + (min / 60.0);
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff fa48 	bl	8000544 <__aeabi_i2d>
 80010b4:	4604      	mov	r4, r0
 80010b6:	460d      	mov	r5, r1
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <nmea_to_decimal+0xac>)
 80010be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010c2:	f7ff fbd3 	bl	800086c <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4620      	mov	r0, r4
 80010cc:	4629      	mov	r1, r5
 80010ce:	f7ff f8ed 	bl	80002ac <__adddf3>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
}
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bdb0      	pop	{r4, r5, r7, pc}
 80010e8:	40590000 	.word	0x40590000
 80010ec:	404e0000 	.word	0x404e0000

080010f0 <GPS_ParseLine>:

// Parse a GGA sentence into gps_data
static void GPS_ParseLine(char *line)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b08c      	sub	sp, #48	@ 0x30
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    if (line[0] != '$') return;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b24      	cmp	r3, #36	@ 0x24
 80010fe:	f040 80e9 	bne.w	80012d4 <GPS_ParseLine+0x1e4>
    printf("DEBUG: Raw GPS sentence: %s\n", line);
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4877      	ldr	r0, [pc, #476]	@ (80012e4 <GPS_ParseLine+0x1f4>)
 8001106:	f00c fd2b 	bl	800db60 <iprintf>

    char *type = strtok(line, ",");
 800110a:	4977      	ldr	r1, [pc, #476]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f00c fdc7 	bl	800dca0 <strtok>
 8001112:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (!type) return;
 8001114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 80de 	beq.w	80012d8 <GPS_ParseLine+0x1e8>

    if (strcasecmp(type, "$GNGGA") != 0 && strcasecmp(type, "$GPGGA") != 0) return;
 800111c:	4973      	ldr	r1, [pc, #460]	@ (80012ec <GPS_ParseLine+0x1fc>)
 800111e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001120:	f00c fd7c 	bl	800dc1c <strcasecmp>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <GPS_ParseLine+0x4a>
 800112a:	4971      	ldr	r1, [pc, #452]	@ (80012f0 <GPS_ParseLine+0x200>)
 800112c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800112e:	f00c fd75 	bl	800dc1c <strcasecmp>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	f040 80d1 	bne.w	80012dc <GPS_ParseLine+0x1ec>

    char *time     = strtok(NULL, ",");
 800113a:	496b      	ldr	r1, [pc, #428]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 800113c:	2000      	movs	r0, #0
 800113e:	f00c fdaf 	bl	800dca0 <strtok>
 8001142:	62b8      	str	r0, [r7, #40]	@ 0x28
    char *lat      = strtok(NULL, ",");
 8001144:	4968      	ldr	r1, [pc, #416]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 8001146:	2000      	movs	r0, #0
 8001148:	f00c fdaa 	bl	800dca0 <strtok>
 800114c:	6278      	str	r0, [r7, #36]	@ 0x24
    char *lat_dir  = strtok(NULL, ",");
 800114e:	4966      	ldr	r1, [pc, #408]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 8001150:	2000      	movs	r0, #0
 8001152:	f00c fda5 	bl	800dca0 <strtok>
 8001156:	6238      	str	r0, [r7, #32]
    char *lon      = strtok(NULL, ",");
 8001158:	4963      	ldr	r1, [pc, #396]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 800115a:	2000      	movs	r0, #0
 800115c:	f00c fda0 	bl	800dca0 <strtok>
 8001160:	61f8      	str	r0, [r7, #28]
    char *lon_dir  = strtok(NULL, ",");
 8001162:	4961      	ldr	r1, [pc, #388]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 8001164:	2000      	movs	r0, #0
 8001166:	f00c fd9b 	bl	800dca0 <strtok>
 800116a:	61b8      	str	r0, [r7, #24]
    char *fix      = strtok(NULL, ",");
 800116c:	495e      	ldr	r1, [pc, #376]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 800116e:	2000      	movs	r0, #0
 8001170:	f00c fd96 	bl	800dca0 <strtok>
 8001174:	6178      	str	r0, [r7, #20]
    char *sats     = strtok(NULL, ",");
 8001176:	495c      	ldr	r1, [pc, #368]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 8001178:	2000      	movs	r0, #0
 800117a:	f00c fd91 	bl	800dca0 <strtok>
 800117e:	6138      	str	r0, [r7, #16]
    char *hdop     = strtok(NULL, ",");
 8001180:	4959      	ldr	r1, [pc, #356]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 8001182:	2000      	movs	r0, #0
 8001184:	f00c fd8c 	bl	800dca0 <strtok>
 8001188:	60f8      	str	r0, [r7, #12]
    char *alt      = strtok(NULL, ",");
 800118a:	4957      	ldr	r1, [pc, #348]	@ (80012e8 <GPS_ParseLine+0x1f8>)
 800118c:	2000      	movs	r0, #0
 800118e:	f00c fd87 	bl	800dca0 <strtok>
 8001192:	60b8      	str	r0, [r7, #8]


   //Always get number of satellites and HDOP
    gps_data.satellites = sats ? (uint8_t)atoi(sats) : 0;
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <GPS_ParseLine+0xb6>
 800119a:	6938      	ldr	r0, [r7, #16]
 800119c:	f00b f879 	bl	800c292 <atoi>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	e000      	b.n	80011a8 <GPS_ParseLine+0xb8>
 80011a6:	2300      	movs	r3, #0
 80011a8:	4a52      	ldr	r2, [pc, #328]	@ (80012f4 <GPS_ParseLine+0x204>)
 80011aa:	7513      	strb	r3, [r2, #20]
	gps_data.hdop       = hdop ? atof(hdop) : 0;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00a      	beq.n	80011c8 <GPS_ParseLine+0xd8>
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f00b f86a 	bl	800c28c <atof>
 80011b8:	ec53 2b10 	vmov	r2, r3, d0
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fd22 	bl	8000c08 <__aeabi_d2f>
 80011c4:	4603      	mov	r3, r0
 80011c6:	e001      	b.n	80011cc <GPS_ParseLine+0xdc>
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	4a49      	ldr	r2, [pc, #292]	@ (80012f4 <GPS_ParseLine+0x204>)
 80011ce:	6193      	str	r3, [r2, #24]

	//Get UTC time if available
	if (time)
 80011d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <GPS_ParseLine+0xfa>
	{
		strncpy(gps_data.time, time, sizeof(gps_data.time) - 1);
 80011d6:	220f      	movs	r2, #15
 80011d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011da:	4847      	ldr	r0, [pc, #284]	@ (80012f8 <GPS_ParseLine+0x208>)
 80011dc:	f00c fd4c 	bl	800dc78 <strncpy>
		gps_data.time[sizeof(gps_data.time)-1] = '\0';
 80011e0:	4b44      	ldr	r3, [pc, #272]	@ (80012f4 <GPS_ParseLine+0x204>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80011e8:	e002      	b.n	80011f0 <GPS_ParseLine+0x100>
	}
	else
	{
		gps_data.time[0] = '\0';
 80011ea:	4b42      	ldr	r3, [pc, #264]	@ (80012f4 <GPS_ParseLine+0x204>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	775a      	strb	r2, [r3, #29]
	}

	if (!fix || strcmp(fix, "0") == 0) {
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <GPS_ParseLine+0x114>
 80011f6:	4941      	ldr	r1, [pc, #260]	@ (80012fc <GPS_ParseLine+0x20c>)
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f7fe ffe9 	bl	80001d0 <strcmp>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d115      	bne.n	8001230 <GPS_ParseLine+0x140>
		gps_data.fix = 0;
 8001204:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <GPS_ParseLine+0x204>)
 8001206:	2200      	movs	r2, #0
 8001208:	771a      	strb	r2, [r3, #28]
		gps_data.latitude  = 0;
 800120a:	493a      	ldr	r1, [pc, #232]	@ (80012f4 <GPS_ParseLine+0x204>)
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e9c1 2300 	strd	r2, r3, [r1]
		gps_data.longitude = 0;
 8001218:	4936      	ldr	r1, [pc, #216]	@ (80012f4 <GPS_ParseLine+0x204>)
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	e9c1 2302 	strd	r2, r3, [r1, #8]
		gps_data.altitude  = 0;
 8001226:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <GPS_ParseLine+0x204>)
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
		return;
 800122e:	e056      	b.n	80012de <GPS_ParseLine+0x1ee>
	}

	gps_data.fix = atoi(fix);
 8001230:	6978      	ldr	r0, [r7, #20]
 8001232:	f00b f82e 	bl	800c292 <atoi>
 8001236:	4603      	mov	r3, r0
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <GPS_ParseLine+0x204>)
 800123c:	771a      	strb	r2, [r3, #28]
	gps_data.latitude  = nmea_to_decimal(lat)  * ((lat_dir && lat_dir[0]=='S') ? -1 : 1);
 800123e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001240:	f7ff fefe 	bl	8001040 <nmea_to_decimal>
 8001244:	ec55 4b10 	vmov	r4, r5, d0
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <GPS_ParseLine+0x16e>
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b53      	cmp	r3, #83	@ 0x53
 8001254:	d103      	bne.n	800125e <GPS_ParseLine+0x16e>
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4929      	ldr	r1, [pc, #164]	@ (8001300 <GPS_ParseLine+0x210>)
 800125c:	e002      	b.n	8001264 <GPS_ParseLine+0x174>
 800125e:	f04f 0000 	mov.w	r0, #0
 8001262:	4928      	ldr	r1, [pc, #160]	@ (8001304 <GPS_ParseLine+0x214>)
 8001264:	4622      	mov	r2, r4
 8001266:	462b      	mov	r3, r5
 8001268:	f7ff f9d6 	bl	8000618 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4920      	ldr	r1, [pc, #128]	@ (80012f4 <GPS_ParseLine+0x204>)
 8001272:	e9c1 2300 	strd	r2, r3, [r1]
	gps_data.longitude = nmea_to_decimal(lon)  * ((lon_dir && lon_dir[0]=='W') ? -1 : 1);
 8001276:	69f8      	ldr	r0, [r7, #28]
 8001278:	f7ff fee2 	bl	8001040 <nmea_to_decimal>
 800127c:	ec55 4b10 	vmov	r4, r5, d0
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <GPS_ParseLine+0x1a6>
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b57      	cmp	r3, #87	@ 0x57
 800128c:	d103      	bne.n	8001296 <GPS_ParseLine+0x1a6>
 800128e:	f04f 0000 	mov.w	r0, #0
 8001292:	491b      	ldr	r1, [pc, #108]	@ (8001300 <GPS_ParseLine+0x210>)
 8001294:	e002      	b.n	800129c <GPS_ParseLine+0x1ac>
 8001296:	f04f 0000 	mov.w	r0, #0
 800129a:	491a      	ldr	r1, [pc, #104]	@ (8001304 <GPS_ParseLine+0x214>)
 800129c:	4622      	mov	r2, r4
 800129e:	462b      	mov	r3, r5
 80012a0:	f7ff f9ba 	bl	8000618 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4912      	ldr	r1, [pc, #72]	@ (80012f4 <GPS_ParseLine+0x204>)
 80012aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gps_data.altitude  = alt ? atof(alt) : 0;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00a      	beq.n	80012ca <GPS_ParseLine+0x1da>
 80012b4:	68b8      	ldr	r0, [r7, #8]
 80012b6:	f00a ffe9 	bl	800c28c <atof>
 80012ba:	ec53 2b10 	vmov	r2, r3, d0
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fca1 	bl	8000c08 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	e001      	b.n	80012ce <GPS_ParseLine+0x1de>
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <GPS_ParseLine+0x204>)
 80012d0:	6113      	str	r3, [r2, #16]
 80012d2:	e004      	b.n	80012de <GPS_ParseLine+0x1ee>
    if (line[0] != '$') return;
 80012d4:	bf00      	nop
 80012d6:	e002      	b.n	80012de <GPS_ParseLine+0x1ee>
    if (!type) return;
 80012d8:	bf00      	nop
 80012da:	e000      	b.n	80012de <GPS_ParseLine+0x1ee>
    if (strcasecmp(type, "$GNGGA") != 0 && strcasecmp(type, "$GPGGA") != 0) return;
 80012dc:	bf00      	nop
}
 80012de:	3730      	adds	r7, #48	@ 0x30
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bdb0      	pop	{r4, r5, r7, pc}
 80012e4:	08010328 	.word	0x08010328
 80012e8:	08010348 	.word	0x08010348
 80012ec:	0801034c 	.word	0x0801034c
 80012f0:	08010354 	.word	0x08010354
 80012f4:	200005e8 	.word	0x200005e8
 80012f8:	20000605 	.word	0x20000605
 80012fc:	0801035c 	.word	0x0801035c
 8001300:	bff00000 	.word	0xbff00000
 8001304:	3ff00000 	.word	0x3ff00000

08001308 <Get_GPS_Data>:
    HAL_UART_Receive_DMA(GPS_UART, dma_rx_buf, GPS_DMA_RX_BUF_SIZE);
}

// Read latest complete NMEA sentence from DMA buffer safely
GPS_Data_t Get_GPS_Data(void)
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b0a8      	sub	sp, #160	@ 0xa0
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    static uint16_t last_read_ptr = 0;
    uint16_t dma_write_ptr = GPS_DMA_RX_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8001310:	4b5c      	ldr	r3, [pc, #368]	@ (8001484 <Get_GPS_Data+0x17c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	b29b      	uxth	r3, r3
 8001318:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800131c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

    int start_idx = -1, end_idx = -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    uint16_t i = last_read_ptr;
 8001330:	4b55      	ldr	r3, [pc, #340]	@ (8001488 <Get_GPS_Data+0x180>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    uint16_t count = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    // Safety: limit max iterations to buffer size
    while (i != dma_write_ptr && count < GPS_DMA_RX_BUF_SIZE)
 800133e:	e028      	b.n	8001392 <Get_GPS_Data+0x8a>
    {
        if (dma_rx_buf[i] == '$') start_idx = i;
 8001340:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001344:	4a51      	ldr	r2, [pc, #324]	@ (800148c <Get_GPS_Data+0x184>)
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	2b24      	cmp	r3, #36	@ 0x24
 800134a:	d103      	bne.n	8001354 <Get_GPS_Data+0x4c>
 800134c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        if (dma_rx_buf[i] == '\n' && start_idx >= 0)
 8001354:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001358:	4a4c      	ldr	r2, [pc, #304]	@ (800148c <Get_GPS_Data+0x184>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d107      	bne.n	8001370 <Get_GPS_Data+0x68>
 8001360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001364:	2b00      	cmp	r3, #0
 8001366:	db03      	blt.n	8001370 <Get_GPS_Data+0x68>
        {
            end_idx = i;
 8001368:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800136c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        }
        i = (i + 1) % GPS_DMA_RX_BUF_SIZE;
 8001370:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001374:	3301      	adds	r3, #1
 8001376:	425a      	negs	r2, r3
 8001378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800137c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001380:	bf58      	it	pl
 8001382:	4253      	negpl	r3, r2
 8001384:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
        count++;
 8001388:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800138c:	3301      	adds	r3, #1
 800138e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    while (i != dma_write_ptr && count < GPS_DMA_RX_BUF_SIZE)
 8001392:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8001396:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800139a:	429a      	cmp	r2, r3
 800139c:	d004      	beq.n	80013a8 <Get_GPS_Data+0xa0>
 800139e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80013a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013a6:	d3cb      	bcc.n	8001340 <Get_GPS_Data+0x38>
    }

    if (start_idx >= 0 && end_idx >= 0)
 80013a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db59      	blt.n	8001464 <Get_GPS_Data+0x15c>
 80013b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db55      	blt.n	8001464 <Get_GPS_Data+0x15c>
    {
        char sentence[128];
        int len;

        if (end_idx >= start_idx)
 80013b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80013bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013c0:	429a      	cmp	r2, r3
 80013c2:	db08      	blt.n	80013d6 <Get_GPS_Data+0xce>
            len = end_idx - start_idx + 1;
 80013c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80013c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	3301      	adds	r3, #1
 80013d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013d4:	e009      	b.n	80013ea <Get_GPS_Data+0xe2>
        else
            len = GPS_DMA_RX_BUF_SIZE - start_idx + end_idx + 1;
 80013d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013da:	f5c3 7200 	rsb	r2, r3, #512	@ 0x200
 80013de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013e2:	4413      	add	r3, r2
 80013e4:	3301      	adds	r3, #1
 80013e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        // Copy safely from circular buffer
        for (int j = 0; j < len; j++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80013f0:	e019      	b.n	8001426 <Get_GPS_Data+0x11e>
            sentence[j] = dma_rx_buf[(start_idx + j) % GPS_DMA_RX_BUF_SIZE];
 80013f2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80013f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013fa:	4413      	add	r3, r2
 80013fc:	425a      	negs	r2, r3
 80013fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001406:	bf58      	it	pl
 8001408:	4253      	negpl	r3, r2
 800140a:	4a20      	ldr	r2, [pc, #128]	@ (800148c <Get_GPS_Data+0x184>)
 800140c:	5cd1      	ldrb	r1, [r2, r3]
 800140e:	f107 0208 	add.w	r2, r7, #8
 8001412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001416:	4413      	add	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < len; j++)
 800141c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001420:	3301      	adds	r3, #1
 8001422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001426:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800142a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800142e:	429a      	cmp	r2, r3
 8001430:	dbdf      	blt.n	80013f2 <Get_GPS_Data+0xea>
        sentence[len] = '\0';
 8001432:	f107 0208 	add.w	r2, r7, #8
 8001436:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800143a:	4413      	add	r3, r2
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]

        last_read_ptr = (end_idx + 1) % GPS_DMA_RX_BUF_SIZE;
 8001440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001444:	3301      	adds	r3, #1
 8001446:	425a      	negs	r2, r3
 8001448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800144c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001450:	bf58      	it	pl
 8001452:	4253      	negpl	r3, r2
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <Get_GPS_Data+0x180>)
 8001458:	801a      	strh	r2, [r3, #0]

        GPS_ParseLine(sentence);
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe46 	bl	80010f0 <GPS_ParseLine>
    }

    return gps_data;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <Get_GPS_Data+0x188>)
 8001468:	461c      	mov	r4, r3
 800146a:	4615      	mov	r5, r2
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	37a0      	adds	r7, #160	@ 0xa0
 8001480:	46bd      	mov	sp, r7
 8001482:	bdb0      	pop	{r4, r5, r7, pc}
 8001484:	20000a1c 	.word	0x20000a1c
 8001488:	20000618 	.word	0x20000618
 800148c:	200003e4 	.word	0x200003e4
 8001490:	200005e8 	.word	0x200005e8

08001494 <LED_IT_Handeler>:
#include "stm32l4xx_hal.h"
#include "main.h"


void LED_IT_Handeler()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001498:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <LED_IT_Handeler+0x14>)
 800149e:	f001 ff3f 	bl	8003320 <HAL_GPIO_TogglePin>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	48000800 	.word	0x48000800

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b0:	b097      	sub	sp, #92	@ 0x5c
 80014b2:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b4:	f001 fa5f 	bl	8002976 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b8:	f000 f850 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014bc:	f000 fc66 	bl	8001d8c <MX_GPIO_Init>
  MX_DMA_Init();
 80014c0:	f000 fc2a 	bl	8001d18 <MX_DMA_Init>
  MX_I2C3_Init();
 80014c4:	f000 f89a 	bl	80015fc <MX_I2C3_Init>
  MX_UART4_Init();
 80014c8:	f000 fb96 	bl	8001bf8 <MX_UART4_Init>
  MX_UART5_Init();
 80014cc:	f000 fbc4 	bl	8001c58 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80014d0:	f000 fbf2 	bl	8001cb8 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 80014d4:	f000 fb6a 	bl	8001bac <MX_TIM17_Init>
  MX_USB_DEVICE_Init();
 80014d8:	f00a f86c 	bl	800b5b4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80014dc:	f000 f9ca 	bl	8001874 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014e0:	f000 fa16 	bl	8001910 <MX_TIM4_Init>
  MX_TIM5_Init();
 80014e4:	f000 fa64 	bl	80019b0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80014e8:	f000 fab2 	bl	8001a50 <MX_TIM8_Init>
  MX_TIM1_Init();
 80014ec:	f000 f8c6 	bl	800167c <MX_TIM1_Init>
  MX_TIM2_Init();
 80014f0:	f000 f970 	bl	80017d4 <MX_TIM2_Init>


  //LED_Tim_Enable();
  //Stepper_IT_Enable();

  Stepper_nSleep(GPIO_PIN_SET);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f000 fd79 	bl	8001fec <Stepper_nSleep>
  //Stepper_Enable(&EL_Axis_motor);
  Stepper_Enable(&AZ_Axis_motor);
 80014fa:	4816      	ldr	r0, [pc, #88]	@ (8001554 <main+0xa8>)
 80014fc:	f000 fd0a 	bl	8001f14 <Stepper_Enable>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  GPS_Data = Get_GPS_Data();
 8001500:	463b      	mov	r3, r7
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff00 	bl	8001308 <Get_GPS_Data>
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001508:	e9d7 8900 	ldrd	r8, r9, [r7]
 800150c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
	         GPS_Data.latitude,
	         GPS_Data.longitude,
	         GPS_Data.altitude,
 8001510:	693b      	ldr	r3, [r7, #16]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f828 	bl	8000568 <__aeabi_f2d>
 8001518:	4682      	mov	sl, r0
 800151a:	468b      	mov	fp, r1
	         GPS_Data.satellites,
 800151c:	7d3b      	ldrb	r3, [r7, #20]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 800151e:	461e      	mov	r6, r3
	         GPS_Data.hdop,
 8001520:	69bb      	ldr	r3, [r7, #24]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f820 	bl	8000568 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
	         GPS_Data.fix);
 800152c:	7f39      	ldrb	r1, [r7, #28]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 800152e:	9108      	str	r1, [sp, #32]
 8001530:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001534:	9604      	str	r6, [sp, #16]
 8001536:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800153a:	e9cd 4500 	strd	r4, r5, [sp]
 800153e:	4642      	mov	r2, r8
 8001540:	464b      	mov	r3, r9
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <main+0xac>)
 8001544:	f00c fb0c 	bl	800db60 <iprintf>
	  HAL_Delay(1000);
 8001548:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154c:	f001 fa88 	bl	8002a60 <HAL_Delay>
	  GPS_Data = Get_GPS_Data();
 8001550:	bf00      	nop
 8001552:	e7d5      	b.n	8001500 <main+0x54>
 8001554:	2000003c 	.word	0x2000003c
 8001558:	08010360 	.word	0x08010360

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b096      	sub	sp, #88	@ 0x58
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2244      	movs	r2, #68	@ 0x44
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f00c fb4d 	bl	800dc0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800157e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001582:	f003 f9bd 	bl	8004900 <HAL_PWREx_ControlVoltageScaling>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800158c:	f000 fc9c 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001590:	2301      	movs	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2302      	movs	r3, #2
 800159c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159e:	2303      	movs	r3, #3
 80015a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80015a6:	2308      	movs	r3, #8
 80015a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015aa:	2307      	movs	r3, #7
 80015ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fa06 	bl	80049cc <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015c6:	f000 fc7f 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2303      	movs	r3, #3
 80015d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	2103      	movs	r1, #3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fdce 	bl	8005184 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015ee:	f000 fc6b 	bl	8001ec8 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3758      	adds	r7, #88	@ 0x58
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_I2C3_Init+0x74>)
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <MX_I2C3_Init+0x78>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <MX_I2C3_Init+0x74>)
 8001608:	4a1b      	ldr	r2, [pc, #108]	@ (8001678 <MX_I2C3_Init+0x7c>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_I2C3_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001612:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <MX_I2C3_Init+0x74>)
 8001614:	2201      	movs	r2, #1
 8001616:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <MX_I2C3_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_I2C3_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_I2C3_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_I2C3_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_I2C3_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001636:	480e      	ldr	r0, [pc, #56]	@ (8001670 <MX_I2C3_Init+0x74>)
 8001638:	f001 fe8c 	bl	8003354 <HAL_I2C_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001642:	f000 fc41 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001646:	2100      	movs	r1, #0
 8001648:	4809      	ldr	r0, [pc, #36]	@ (8001670 <MX_I2C3_Init+0x74>)
 800164a:	f001 ff1e 	bl	800348a <HAL_I2CEx_ConfigAnalogFilter>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001654:	f000 fc38 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_I2C3_Init+0x74>)
 800165c:	f001 ff60 	bl	8003520 <HAL_I2CEx_ConfigDigitalFilter>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001666:	f000 fc2f 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000061c 	.word	0x2000061c
 8001674:	40005c00 	.word	0x40005c00
 8001678:	10b17db5 	.word	0x10b17db5

0800167c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b09a      	sub	sp, #104	@ 0x68
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	222c      	movs	r2, #44	@ 0x2c
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00c faa7 	bl	800dc0a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016bc:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <MX_TIM1_Init+0x150>)
 80016be:	4a44      	ldr	r2, [pc, #272]	@ (80017d0 <MX_TIM1_Init+0x154>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80016c2:	4b42      	ldr	r3, [pc, #264]	@ (80017cc <MX_TIM1_Init+0x150>)
 80016c4:	221f      	movs	r2, #31
 80016c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b40      	ldr	r3, [pc, #256]	@ (80017cc <MX_TIM1_Init+0x150>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 80016ce:	4b3f      	ldr	r3, [pc, #252]	@ (80017cc <MX_TIM1_Init+0x150>)
 80016d0:	2213      	movs	r2, #19
 80016d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <MX_TIM1_Init+0x150>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016da:	4b3c      	ldr	r3, [pc, #240]	@ (80017cc <MX_TIM1_Init+0x150>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e0:	4b3a      	ldr	r3, [pc, #232]	@ (80017cc <MX_TIM1_Init+0x150>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016e6:	4839      	ldr	r0, [pc, #228]	@ (80017cc <MX_TIM1_Init+0x150>)
 80016e8:	f004 fc2a 	bl	8005f40 <HAL_TIM_Base_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016f2:	f000 fbe9 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016fc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001700:	4619      	mov	r1, r3
 8001702:	4832      	ldr	r0, [pc, #200]	@ (80017cc <MX_TIM1_Init+0x150>)
 8001704:	f005 f826 	bl	8006754 <HAL_TIM_ConfigClockSource>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800170e:	f000 fbdb 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001712:	482e      	ldr	r0, [pc, #184]	@ (80017cc <MX_TIM1_Init+0x150>)
 8001714:	f004 fd0b 	bl	800612e <HAL_TIM_PWM_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800171e:	f000 fbd3 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001722:	2320      	movs	r3, #32
 8001724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001732:	4619      	mov	r1, r3
 8001734:	4825      	ldr	r0, [pc, #148]	@ (80017cc <MX_TIM1_Init+0x150>)
 8001736:	f005 fe6d 	bl	8007414 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001740:	f000 fbc2 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001744:	2360      	movs	r3, #96	@ 0x60
 8001746:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 10;
 8001748:	230a      	movs	r3, #10
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001750:	2308      	movs	r3, #8
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001760:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001764:	2204      	movs	r2, #4
 8001766:	4619      	mov	r1, r3
 8001768:	4818      	ldr	r0, [pc, #96]	@ (80017cc <MX_TIM1_Init+0x150>)
 800176a:	f004 fedf 	bl	800652c <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001774:	f000 fba8 	bl	8001ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800178c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001790:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800179a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <MX_TIM1_Init+0x150>)
 80017ae:	f005 feb9 	bl	8007524 <HAL_TIMEx_ConfigBreakDeadTime>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80017b8:	f000 fb86 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017bc:	4803      	ldr	r0, [pc, #12]	@ (80017cc <MX_TIM1_Init+0x150>)
 80017be:	f000 fd55 	bl	800226c <HAL_TIM_MspPostInit>

}
 80017c2:	bf00      	nop
 80017c4:	3768      	adds	r7, #104	@ 0x68
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000670 	.word	0x20000670
 80017d0:	40012c00 	.word	0x40012c00

080017d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <MX_TIM2_Init+0x9c>)
 80017f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <MX_TIM2_Init+0x9c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <MX_TIM2_Init+0x9c>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <MX_TIM2_Init+0x9c>)
 800180a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800180e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <MX_TIM2_Init+0x9c>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <MX_TIM2_Init+0x9c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800181c:	4814      	ldr	r0, [pc, #80]	@ (8001870 <MX_TIM2_Init+0x9c>)
 800181e:	f004 fb8f 	bl	8005f40 <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001828:	f000 fb4e 	bl	8001ec8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800182c:	2307      	movs	r3, #7
 800182e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	480d      	ldr	r0, [pc, #52]	@ (8001870 <MX_TIM2_Init+0x9c>)
 800183c:	f005 f853 	bl	80068e6 <HAL_TIM_SlaveConfigSynchro>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001846:	f000 fb3f 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001852:	463b      	mov	r3, r7
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	@ (8001870 <MX_TIM2_Init+0x9c>)
 8001858:	f005 fddc 	bl	8007414 <HAL_TIMEx_MasterConfigSynchronization>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001862:	f000 fb31 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200006bc 	.word	0x200006bc

08001874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001892:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <MX_TIM3_Init+0x94>)
 8001894:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <MX_TIM3_Init+0x98>)
 8001896:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <MX_TIM3_Init+0x94>)
 800189a:	223f      	movs	r2, #63	@ 0x3f
 800189c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80018a4:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018a6:	2263      	movs	r2, #99	@ 0x63
 80018a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018aa:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018b0:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018b6:	4814      	ldr	r0, [pc, #80]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018b8:	f004 fb42 	bl	8005f40 <HAL_TIM_Base_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80018c2:	f000 fb01 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4619      	mov	r1, r3
 80018d2:	480d      	ldr	r0, [pc, #52]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018d4:	f004 ff3e 	bl	8006754 <HAL_TIM_ConfigClockSource>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018de:	f000 faf3 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	4806      	ldr	r0, [pc, #24]	@ (8001908 <MX_TIM3_Init+0x94>)
 80018f0:	f005 fd90 	bl	8007414 <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018fa:	f000 fae5 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000708 	.word	0x20000708
 800190c:	40000400 	.word	0x40000400

08001910 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800192e:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <MX_TIM4_Init+0x98>)
 8001930:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <MX_TIM4_Init+0x9c>)
 8001932:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8001934:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <MX_TIM4_Init+0x98>)
 8001936:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800193a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <MX_TIM4_Init+0x98>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 8001942:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <MX_TIM4_Init+0x98>)
 8001944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001948:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <MX_TIM4_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <MX_TIM4_Init+0x98>)
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001956:	4814      	ldr	r0, [pc, #80]	@ (80019a8 <MX_TIM4_Init+0x98>)
 8001958:	f004 faf2 	bl	8005f40 <HAL_TIM_Base_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001962:	f000 fab1 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800196a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <MX_TIM4_Init+0x98>)
 8001974:	f004 feee 	bl	8006754 <HAL_TIM_ConfigClockSource>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800197e:	f000 faa3 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4806      	ldr	r0, [pc, #24]	@ (80019a8 <MX_TIM4_Init+0x98>)
 8001990:	f005 fd40 	bl	8007414 <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800199a:	f000 fa95 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000754 	.word	0x20000754
 80019ac:	40000800 	.word	0x40000800

080019b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c6:	463b      	mov	r3, r7
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <MX_TIM5_Init+0x98>)
 80019d2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a4c <MX_TIM5_Init+0x9c>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <MX_TIM5_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <MX_TIM5_Init+0x98>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <MX_TIM5_Init+0x98>)
 80019e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <MX_TIM5_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <MX_TIM5_Init+0x98>)
 80019f2:	2280      	movs	r2, #128	@ 0x80
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019f6:	4814      	ldr	r0, [pc, #80]	@ (8001a48 <MX_TIM5_Init+0x98>)
 80019f8:	f004 faa2 	bl	8005f40 <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001a02:	f000 fa61 	bl	8001ec8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001a06:	2307      	movs	r3, #7
 8001a08:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001a0a:	2330      	movs	r3, #48	@ 0x30
 8001a0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	480c      	ldr	r0, [pc, #48]	@ (8001a48 <MX_TIM5_Init+0x98>)
 8001a16:	f004 ff66 	bl	80068e6 <HAL_TIM_SlaveConfigSynchro>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001a20:	f000 fa52 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_TIM5_Init+0x98>)
 8001a32:	f005 fcef 	bl	8007414 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001a3c:	f000 fa44 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200007a0 	.word	0x200007a0
 8001a4c:	40000c00 	.word	0x40000c00

08001a50 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b09a      	sub	sp, #104	@ 0x68
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	222c      	movs	r2, #44	@ 0x2c
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00c f8bd 	bl	800dc0a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a90:	4b44      	ldr	r3, [pc, #272]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001a92:	4a45      	ldr	r2, [pc, #276]	@ (8001ba8 <MX_TIM8_Init+0x158>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8001a96:	4b43      	ldr	r3, [pc, #268]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001a98:	221f      	movs	r2, #31
 8001a9a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001aa2:	4b40      	ldr	r3, [pc, #256]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001aa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001aa8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001abc:	4839      	ldr	r0, [pc, #228]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001abe:	f004 fa3f 	bl	8005f40 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001ac8:	f000 f9fe 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4832      	ldr	r0, [pc, #200]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001ada:	f004 fe3b 	bl	8006754 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001ae4:	f000 f9f0 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ae8:	482e      	ldr	r0, [pc, #184]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001aea:	f004 fb20 	bl	800612e <HAL_TIM_PWM_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001af4:	f000 f9e8 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001af8:	2320      	movs	r3, #32
 8001afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4826      	ldr	r0, [pc, #152]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001b0c:	f005 fc82 	bl	8007414 <HAL_TIMEx_MasterConfigSynchronization>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001b16:	f000 f9d7 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1a:	2360      	movs	r3, #96	@ 0x60
 8001b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 8001b1e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b24:	2300      	movs	r3, #0
 8001b26:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4818      	ldr	r0, [pc, #96]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001b42:	f004 fcf3 	bl	800652c <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001b4c:	f000 f9bc 	bl	8001ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4807      	ldr	r0, [pc, #28]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001b86:	f005 fccd 	bl	8007524 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001b90:	f000 f99a 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b94:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <MX_TIM8_Init+0x154>)
 8001b96:	f000 fb69 	bl	800226c <HAL_TIM_MspPostInit>

}
 8001b9a:	bf00      	nop
 8001b9c:	3768      	adds	r7, #104	@ 0x68
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200007ec 	.word	0x200007ec
 8001ba8:	40013400 	.word	0x40013400

08001bac <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <MX_TIM17_Init+0x44>)
 8001bb2:	4a10      	ldr	r2, [pc, #64]	@ (8001bf4 <MX_TIM17_Init+0x48>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_TIM17_Init+0x44>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <MX_TIM17_Init+0x44>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <MX_TIM17_Init+0x44>)
 8001bc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <MX_TIM17_Init+0x44>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <MX_TIM17_Init+0x44>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <MX_TIM17_Init+0x44>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bdc:	4804      	ldr	r0, [pc, #16]	@ (8001bf0 <MX_TIM17_Init+0x44>)
 8001bde:	f004 f9af 	bl	8005f40 <HAL_TIM_Base_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001be8:	f000 f96e 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000838 	.word	0x20000838
 8001bf4:	40014800 	.word	0x40014800

08001bf8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001bfe:	4a15      	ldr	r2, [pc, #84]	@ (8001c54 <MX_UART4_Init+0x5c>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c02:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <MX_UART4_Init+0x58>)
 8001c3c:	f005 fd33 	bl	80076a6 <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c46:	f000 f93f 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000884 	.word	0x20000884
 8001c54:	40004c00 	.word	0x40004c00

08001c58 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c5e:	4a15      	ldr	r2, [pc, #84]	@ (8001cb4 <MX_UART5_Init+0x5c>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <MX_UART5_Init+0x58>)
 8001c9c:	f005 fd03 	bl	80076a6 <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001ca6:	f000 f90f 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000090c 	.word	0x2000090c
 8001cb4:	40005000 	.word	0x40005000

08001cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <MX_USART1_UART_Init+0x5c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cfc:	f005 fcd3 	bl	80076a6 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d06:	f000 f8df 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000994 	.word	0x20000994
 8001d14:	40013800 	.word	0x40013800

08001d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <MX_DMA_Init+0x70>)
 8001d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d22:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <MX_DMA_Init+0x70>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <MX_DMA_Init+0x70>)
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <MX_DMA_Init+0x70>)
 8001d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3a:	4a13      	ldr	r2, [pc, #76]	@ (8001d88 <MX_DMA_Init+0x70>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_DMA_Init+0x70>)
 8001d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	200e      	movs	r0, #14
 8001d54:	f000 ff83 	bl	8002c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001d58:	200e      	movs	r0, #14
 8001d5a:	f000 ff9c 	bl	8002c96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	200f      	movs	r0, #15
 8001d64:	f000 ff7b 	bl	8002c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d68:	200f      	movs	r0, #15
 8001d6a:	f000 ff94 	bl	8002c96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	203c      	movs	r0, #60	@ 0x3c
 8001d74:	f000 ff73 	bl	8002c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001d78:	203c      	movs	r0, #60	@ 0x3c
 8001d7a:	f000 ff8c 	bl	8002c96 <HAL_NVIC_EnableIRQ>

}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000

08001d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	4b46      	ldr	r3, [pc, #280]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	4a45      	ldr	r2, [pc, #276]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dae:	4b43      	ldr	r3, [pc, #268]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dba:	4b40      	ldr	r3, [pc, #256]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	4a39      	ldr	r2, [pc, #228]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dde:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	4b34      	ldr	r3, [pc, #208]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	4a33      	ldr	r2, [pc, #204]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df6:	4b31      	ldr	r3, [pc, #196]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e02:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e06:	4a2d      	ldr	r2, [pc, #180]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWR_BTN_LED_Pin|DEC_EN_Pin|DEC_DIR_Pin|LED2_Pin
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f44f 5133 	mov.w	r1, #11456	@ 0x2cc0
 8001e20:	4827      	ldr	r0, [pc, #156]	@ (8001ec0 <MX_GPIO_Init+0x134>)
 8001e22:	f001 fa65 	bl	80032f0 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8001e26:	2200      	movs	r2, #0
 8001e28:	f24c 01e0 	movw	r1, #49376	@ 0xc0e0
 8001e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e30:	f001 fa5e 	bl	80032f0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8001e34:	2200      	movs	r2, #0
 8001e36:	f243 4137 	movw	r1, #13367	@ 0x3437
 8001e3a:	4822      	ldr	r0, [pc, #136]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001e3c:	f001 fa58 	bl	80032f0 <HAL_GPIO_WritePin>
                          |RA_EN_Pin|RA_DIR_Pin|LED_USB_Pin|LED_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PWR_BTN_LED_Pin DEC_EN_Pin DEC_DIR_Pin LED2_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = PWR_BTN_LED_Pin|DEC_EN_Pin|DEC_DIR_Pin|LED2_Pin
 8001e40:	f44f 5333 	mov.w	r3, #11456	@ 0x2cc0
 8001e44:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4819      	ldr	r0, [pc, #100]	@ (8001ec0 <MX_GPIO_Init+0x134>)
 8001e5a:	f001 f89f 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : AZ_EN_Pin AZ_DIR_Pin AZ_STEP_Pin LED4_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8001e5e:	f24c 03e0 	movw	r3, #49376	@ 0xc0e0
 8001e62:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e7a:	f001 f88f 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_SLEEP_n_Pin EL_EN_Pin EL_DIR_Pin EL_STEP_Pin
                           RA_EN_Pin RA_DIR_Pin LED_USB_Pin LED_DC_Pin */
  GPIO_InitStruct.Pin = STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8001e7e:	f243 4337 	movw	r3, #13367	@ 0x3437
 8001e82:	617b      	str	r3, [r7, #20]
                          |RA_EN_Pin|RA_DIR_Pin|LED_USB_Pin|LED_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	480b      	ldr	r0, [pc, #44]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001e98:	f001 f880 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_STATE_Pin */
  GPIO_InitStruct.Pin = PWR_STATE_Pin;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_STATE_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	4619      	mov	r1, r3
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001eb0:	f001 f874 	bl	8002f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	@ 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	48000800 	.word	0x48000800
 8001ec4:	48000400 	.word	0x48000400

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <Error_Handler+0x8>

08001ed4 <Stepper_IT_Handeler>:
	.PWM_Type = PWM_OUT_P,
};


void Stepper_IT_Handeler()
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
    if (EL_Axis_motor.enabled)
 8001ed8:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <Stepper_IT_Handeler+0x24>)
 8001eda:	7f1b      	ldrb	r3, [r3, #28]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <Stepper_IT_Handeler+0x12>
    {
    	STEP_Generating(&EL_Axis_motor);
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <Stepper_IT_Handeler+0x24>)
 8001ee2:	f000 f858 	bl	8001f96 <STEP_Generating>
    }

    if (AZ_Axis_motor.enabled)
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <Stepper_IT_Handeler+0x28>)
 8001ee8:	7f1b      	ldrb	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <Stepper_IT_Handeler+0x20>
    {
        STEP_Generating(&AZ_Axis_motor);
 8001eee:	4803      	ldr	r0, [pc, #12]	@ (8001efc <Stepper_IT_Handeler+0x28>)
 8001ef0:	f000 f851 	bl	8001f96 <STEP_Generating>
    }
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	2000003c 	.word	0x2000003c

08001f00 <Stepper_IT_Enable>:

void Stepper_IT_Enable()
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <Stepper_IT_Enable+0x10>)
 8001f06:	f004 f873 	bl	8005ff0 <HAL_TIM_Base_Start_IT>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000708 	.word	0x20000708

08001f14 <Stepper_Enable>:

void Stepper_Enable(Stepper_motor *Axis)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Axis->EN_Port,Axis->EN_Pin, GPIO_PIN_SET);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6898      	ldr	r0, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	899b      	ldrh	r3, [r3, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4619      	mov	r1, r3
 8001f28:	f001 f9e2 	bl	80032f0 <HAL_GPIO_WritePin>
	if(!Axis->High_precision)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7f9b      	ldrb	r3, [r3, #30]
 8001f30:	f083 0301 	eor.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <Stepper_Enable+0x2a>
	{
		Stepper_IT_Enable();
 8001f3a:	f7ff ffe1 	bl	8001f00 <Stepper_IT_Enable>
	}
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <Stepper_Stop>:


}

void Stepper_Stop(Stepper_motor *Axis)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
	//Stop PWM timer
	if (Axis->PWM_Type == PWM_OUT_P)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d108      	bne.n	8001f6a <Stepper_Stop+0x24>
	{
		HAL_TIM_PWM_Stop(Axis->PWM_Timer, Axis->PWM_Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f004 f944 	bl	80061f0 <HAL_TIM_PWM_Stop>
 8001f68:	e00c      	b.n	8001f84 <Stepper_Stop+0x3e>
	}
	else if (Axis->PWM_Type == PWM_OUT_N)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <Stepper_Stop+0x3e>
	{
		HAL_TIMEx_PWMN_Stop(Axis->PWM_Timer, Axis->PWM_Channel);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f005 f9ea 	bl	8007358 <HAL_TIMEx_PWMN_Stop>
	}
	//Stop STEP counting timer
	HAL_TIM_Base_Stop_IT(Axis->Step_Counter_Timer);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 f8a1 	bl	80060d0 <HAL_TIM_Base_Stop_IT>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <STEP_Generating>:

void STEP_Generating(Stepper_motor *Axis)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
	if (Axis->Steps_remaining == 0)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d103      	bne.n	8001fae <STEP_Generating+0x18>
	        {
				Axis->enabled= false;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
	            return;
 8001fac:	e01a      	b.n	8001fe4 <STEP_Generating+0x4e>
	        }
	        if (Axis->Tick_counter == 0)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d111      	bne.n	8001fda <STEP_Generating+0x44>
	        {
	            // Generate one step pulse
	            HAL_GPIO_TogglePin(Axis->STEP_Port, Axis->STEP_Pin);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	889b      	ldrh	r3, [r3, #4]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f001 f9ad 	bl	8003320 <HAL_GPIO_TogglePin>

	            Axis->Steps_remaining--;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	1e5a      	subs	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	621a      	str	r2, [r3, #32]
	            Axis->Tick_counter = Axis->Step_interval_ticks;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fd8:	e004      	b.n	8001fe4 <STEP_Generating+0x4e>
	        }
	        else
	        {
	        	Axis->Tick_counter--;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28
	        }
}
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <Stepper_nSleep>:


void Stepper_nSleep(bool n_sleep)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(STEP_SLEEP_n_GPIO_Port,STEP_SLEEP_n_Pin, n_sleep); //1 = enabled
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	4803      	ldr	r0, [pc, #12]	@ (800200c <Stepper_nSleep+0x20>)
 8001ffe:	f001 f977 	bl	80032f0 <HAL_GPIO_WritePin>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	48000400 	.word	0x48000400

08002010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <HAL_MspInit+0x44>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	4a0e      	ldr	r2, [pc, #56]	@ (8002054 <HAL_MspInit+0x44>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6613      	str	r3, [r2, #96]	@ 0x60
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <HAL_MspInit+0x44>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_MspInit+0x44>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	4a08      	ldr	r2, [pc, #32]	@ (8002054 <HAL_MspInit+0x44>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002038:	6593      	str	r3, [r2, #88]	@ 0x58
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_MspInit+0x44>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0ac      	sub	sp, #176	@ 0xb0
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2288      	movs	r2, #136	@ 0x88
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f00b fdc6 	bl	800dc0a <memset>
  if(hi2c->Instance==I2C3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a21      	ldr	r2, [pc, #132]	@ (8002108 <HAL_I2C_MspInit+0xb0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d13b      	bne.n	8002100 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800208c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800208e:	2300      	movs	r3, #0
 8002090:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4618      	mov	r0, r3
 8002098:	f003 fa96 	bl	80055c8 <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020a2:	f7ff ff11 	bl	8001ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4b19      	ldr	r3, [pc, #100]	@ (800210c <HAL_I2C_MspInit+0xb4>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	4a18      	ldr	r2, [pc, #96]	@ (800210c <HAL_I2C_MspInit+0xb4>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <HAL_I2C_MspInit+0xb4>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020be:	2303      	movs	r3, #3
 80020c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c4:	2312      	movs	r3, #18
 80020c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020d6:	2304      	movs	r3, #4
 80020d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020e0:	4619      	mov	r1, r3
 80020e2:	480b      	ldr	r0, [pc, #44]	@ (8002110 <HAL_I2C_MspInit+0xb8>)
 80020e4:	f000 ff5a 	bl	8002f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_I2C_MspInit+0xb4>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	4a07      	ldr	r2, [pc, #28]	@ (800210c <HAL_I2C_MspInit+0xb4>)
 80020ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020f4:	4b05      	ldr	r3, [pc, #20]	@ (800210c <HAL_I2C_MspInit+0xb4>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002100:	bf00      	nop
 8002102:	37b0      	adds	r7, #176	@ 0xb0
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40005c00 	.word	0x40005c00
 800210c:	40021000 	.word	0x40021000
 8002110:	48000800 	.word	0x48000800

08002114 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a4b      	ldr	r2, [pc, #300]	@ (8002250 <HAL_TIM_Base_MspInit+0x13c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10c      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002126:	4b4b      	ldr	r3, [pc, #300]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212a:	4a4a      	ldr	r2, [pc, #296]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 800212c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002130:	6613      	str	r3, [r2, #96]	@ 0x60
 8002132:	4b48      	ldr	r3, [pc, #288]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 800213e:	e082      	b.n	8002246 <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002148:	d114      	bne.n	8002174 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800214a:	4b42      	ldr	r3, [pc, #264]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	4a41      	ldr	r2, [pc, #260]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6593      	str	r3, [r2, #88]	@ 0x58
 8002156:	4b3f      	ldr	r3, [pc, #252]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	201c      	movs	r0, #28
 8002168:	f000 fd79 	bl	8002c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800216c:	201c      	movs	r0, #28
 800216e:	f000 fd92 	bl	8002c96 <HAL_NVIC_EnableIRQ>
}
 8002172:	e068      	b.n	8002246 <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a37      	ldr	r2, [pc, #220]	@ (8002258 <HAL_TIM_Base_MspInit+0x144>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d114      	bne.n	80021a8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217e:	4b35      	ldr	r3, [pc, #212]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	4a34      	ldr	r2, [pc, #208]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6593      	str	r3, [r2, #88]	@ 0x58
 800218a:	4b32      	ldr	r3, [pc, #200]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	201d      	movs	r0, #29
 800219c:	f000 fd5f 	bl	8002c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021a0:	201d      	movs	r0, #29
 80021a2:	f000 fd78 	bl	8002c96 <HAL_NVIC_EnableIRQ>
}
 80021a6:	e04e      	b.n	8002246 <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM4)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2b      	ldr	r2, [pc, #172]	@ (800225c <HAL_TIM_Base_MspInit+0x148>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10c      	bne.n	80021cc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021b2:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	4a27      	ldr	r2, [pc, #156]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021be:	4b25      	ldr	r3, [pc, #148]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]
}
 80021ca:	e03c      	b.n	8002246 <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM5)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <HAL_TIM_Base_MspInit+0x14c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d114      	bne.n	8002200 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	4a1e      	ldr	r2, [pc, #120]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	2032      	movs	r0, #50	@ 0x32
 80021f4:	f000 fd33 	bl	8002c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80021f8:	2032      	movs	r0, #50	@ 0x32
 80021fa:	f000 fd4c 	bl	8002c96 <HAL_NVIC_EnableIRQ>
}
 80021fe:	e022      	b.n	8002246 <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM8)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_TIM_Base_MspInit+0x150>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10c      	bne.n	8002224 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800220a:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 800220c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220e:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002210:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002214:	6613      	str	r3, [r2, #96]	@ 0x60
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
}
 8002222:	e010      	b.n	8002246 <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM17)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0f      	ldr	r2, [pc, #60]	@ (8002268 <HAL_TIM_Base_MspInit+0x154>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10b      	bne.n	8002246 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	4a08      	ldr	r2, [pc, #32]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002238:	6613      	str	r3, [r2, #96]	@ 0x60
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 800223c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	bf00      	nop
 8002248:	3728      	adds	r7, #40	@ 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800
 8002260:	40000c00 	.word	0x40000c00
 8002264:	40013400 	.word	0x40013400
 8002268:	40014800 	.word	0x40014800

0800226c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	@ 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a23      	ldr	r2, [pc, #140]	@ (8002318 <HAL_TIM_MspPostInit+0xac>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d11d      	bne.n	80022ca <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	4b23      	ldr	r3, [pc, #140]	@ (800231c <HAL_TIM_MspPostInit+0xb0>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002292:	4a22      	ldr	r2, [pc, #136]	@ (800231c <HAL_TIM_MspPostInit+0xb0>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229a:	4b20      	ldr	r3, [pc, #128]	@ (800231c <HAL_TIM_MspPostInit+0xb0>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = RA_STEP_Pin;
 80022a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RA_STEP_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4817      	ldr	r0, [pc, #92]	@ (8002320 <HAL_TIM_MspPostInit+0xb4>)
 80022c4:	f000 fe6a 	bl	8002f9c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80022c8:	e021      	b.n	800230e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a15      	ldr	r2, [pc, #84]	@ (8002324 <HAL_TIM_MspPostInit+0xb8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d11c      	bne.n	800230e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <HAL_TIM_MspPostInit+0xb0>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d8:	4a10      	ldr	r2, [pc, #64]	@ (800231c <HAL_TIM_MspPostInit+0xb0>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e0:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <HAL_TIM_MspPostInit+0xb0>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEC_STEP_Pin;
 80022ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fa:	2302      	movs	r3, #2
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022fe:	2303      	movs	r3, #3
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEC_STEP_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4807      	ldr	r0, [pc, #28]	@ (8002328 <HAL_TIM_MspPostInit+0xbc>)
 800230a:	f000 fe47 	bl	8002f9c <HAL_GPIO_Init>
}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	@ 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40012c00 	.word	0x40012c00
 800231c:	40021000 	.word	0x40021000
 8002320:	48000400 	.word	0x48000400
 8002324:	40013400 	.word	0x40013400
 8002328:	48000800 	.word	0x48000800

0800232c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0b0      	sub	sp, #192	@ 0xc0
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002348:	2288      	movs	r2, #136	@ 0x88
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f00b fc5c 	bl	800dc0a <memset>
  if(huart->Instance==UART4)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a66      	ldr	r2, [pc, #408]	@ (80024f0 <HAL_UART_MspInit+0x1c4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d165      	bne.n	8002428 <HAL_UART_MspInit+0xfc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800235c:	2308      	movs	r3, #8
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002360:	2300      	movs	r3, #0
 8002362:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002368:	4618      	mov	r0, r3
 800236a:	f003 f92d 	bl	80055c8 <HAL_RCCEx_PeriphCLKConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002374:	f7ff fda8 	bl	8001ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002378:	4b5e      	ldr	r3, [pc, #376]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	4a5d      	ldr	r2, [pc, #372]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 800237e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002382:	6593      	str	r3, [r2, #88]	@ 0x58
 8002384:	4b5b      	ldr	r3, [pc, #364]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b58      	ldr	r3, [pc, #352]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002394:	4a57      	ldr	r2, [pc, #348]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800239c:	4b55      	ldr	r3, [pc, #340]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023a8:	2303      	movs	r3, #3
 80023aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023c0:	2308      	movs	r3, #8
 80023c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80023ca:	4619      	mov	r1, r3
 80023cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d0:	f000 fde4 	bl	8002f9c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80023d4:	4b48      	ldr	r3, [pc, #288]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 80023d6:	4a49      	ldr	r2, [pc, #292]	@ (80024fc <HAL_UART_MspInit+0x1d0>)
 80023d8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 80023da:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 80023dc:	2202      	movs	r2, #2
 80023de:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023e0:	4b45      	ldr	r3, [pc, #276]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e6:	4b44      	ldr	r3, [pc, #272]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023ec:	4b42      	ldr	r3, [pc, #264]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 80023ee:	2280      	movs	r2, #128	@ 0x80
 80023f0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023f2:	4b41      	ldr	r3, [pc, #260]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f8:	4b3f      	ldr	r3, [pc, #252]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80023fe:	4b3e      	ldr	r3, [pc, #248]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 8002400:	2220      	movs	r2, #32
 8002402:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002404:	4b3c      	ldr	r3, [pc, #240]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 8002406:	2200      	movs	r2, #0
 8002408:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800240a:	483b      	ldr	r0, [pc, #236]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 800240c:	f000 fc5e 	bl	8002ccc <HAL_DMA_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002416:	f7ff fd57 	bl	8001ec8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a36      	ldr	r2, [pc, #216]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 800241e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002420:	4a35      	ldr	r2, [pc, #212]	@ (80024f8 <HAL_UART_MspInit+0x1cc>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6293      	str	r3, [r2, #40]	@ 0x28
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8002426:	e106      	b.n	8002636 <HAL_UART_MspInit+0x30a>
  else if(huart->Instance==UART5)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a34      	ldr	r2, [pc, #208]	@ (8002500 <HAL_UART_MspInit+0x1d4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d16c      	bne.n	800250c <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002432:	2310      	movs	r3, #16
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002436:	2300      	movs	r3, #0
 8002438:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800243e:	4618      	mov	r0, r3
 8002440:	f003 f8c2 	bl	80055c8 <HAL_RCCEx_PeriphCLKConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_UART_MspInit+0x122>
      Error_Handler();
 800244a:	f7ff fd3d 	bl	8001ec8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800244e:	4b29      	ldr	r3, [pc, #164]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	4a28      	ldr	r2, [pc, #160]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 8002454:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002458:	6593      	str	r3, [r2, #88]	@ 0x58
 800245a:	4b26      	ldr	r3, [pc, #152]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002466:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a22      	ldr	r2, [pc, #136]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800247e:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	4a1c      	ldr	r2, [pc, #112]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248a:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <HAL_UART_MspInit+0x1c8>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002496:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800249a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024b0:	2308      	movs	r3, #8
 80024b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024ba:	4619      	mov	r1, r3
 80024bc:	4811      	ldr	r0, [pc, #68]	@ (8002504 <HAL_UART_MspInit+0x1d8>)
 80024be:	f000 fd6d 	bl	8002f9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024c2:	2304      	movs	r3, #4
 80024c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024da:	2308      	movs	r3, #8
 80024dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024e4:	4619      	mov	r1, r3
 80024e6:	4808      	ldr	r0, [pc, #32]	@ (8002508 <HAL_UART_MspInit+0x1dc>)
 80024e8:	f000 fd58 	bl	8002f9c <HAL_GPIO_Init>
}
 80024ec:	e0a3      	b.n	8002636 <HAL_UART_MspInit+0x30a>
 80024ee:	bf00      	nop
 80024f0:	40004c00 	.word	0x40004c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	20000a1c 	.word	0x20000a1c
 80024fc:	40020458 	.word	0x40020458
 8002500:	40005000 	.word	0x40005000
 8002504:	48000800 	.word	0x48000800
 8002508:	48000c00 	.word	0x48000c00
  else if(huart->Instance==USART1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a4b      	ldr	r2, [pc, #300]	@ (8002640 <HAL_UART_MspInit+0x314>)
 8002512:	4293      	cmp	r3, r2
 8002514:	f040 808f 	bne.w	8002636 <HAL_UART_MspInit+0x30a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002518:	2301      	movs	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800251c:	2300      	movs	r3, #0
 800251e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002524:	4618      	mov	r0, r3
 8002526:	f003 f84f 	bl	80055c8 <HAL_RCCEx_PeriphCLKConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8002530:	f7ff fcca 	bl	8001ec8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002534:	4b43      	ldr	r3, [pc, #268]	@ (8002644 <HAL_UART_MspInit+0x318>)
 8002536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002538:	4a42      	ldr	r2, [pc, #264]	@ (8002644 <HAL_UART_MspInit+0x318>)
 800253a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800253e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002540:	4b40      	ldr	r3, [pc, #256]	@ (8002644 <HAL_UART_MspInit+0x318>)
 8002542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254c:	4b3d      	ldr	r3, [pc, #244]	@ (8002644 <HAL_UART_MspInit+0x318>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	4a3c      	ldr	r2, [pc, #240]	@ (8002644 <HAL_UART_MspInit+0x318>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002558:	4b3a      	ldr	r3, [pc, #232]	@ (8002644 <HAL_UART_MspInit+0x318>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002564:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800257e:	2307      	movs	r3, #7
 8002580:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002588:	4619      	mov	r1, r3
 800258a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800258e:	f000 fd05 	bl	8002f9c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002592:	4b2d      	ldr	r3, [pc, #180]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 8002594:	4a2d      	ldr	r2, [pc, #180]	@ (800264c <HAL_UART_MspInit+0x320>)
 8002596:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002598:	4b2b      	ldr	r3, [pc, #172]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 800259a:	2202      	movs	r2, #2
 800259c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800259e:	4b2a      	ldr	r3, [pc, #168]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a4:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025aa:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025ac:	2280      	movs	r2, #128	@ 0x80
 80025ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025b6:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80025bc:	4b22      	ldr	r3, [pc, #136]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025be:	2220      	movs	r2, #32
 80025c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025c2:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025c8:	481f      	ldr	r0, [pc, #124]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025ca:	f000 fb7f 	bl	8002ccc <HAL_DMA_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 80025d4:	f7ff fc78 	bl	8001ec8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a1b      	ldr	r2, [pc, #108]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80025de:	4a1a      	ldr	r2, [pc, #104]	@ (8002648 <HAL_UART_MspInit+0x31c>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80025e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <HAL_UART_MspInit+0x324>)
 80025e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002654 <HAL_UART_MspInit+0x328>)
 80025e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80025ea:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <HAL_UART_MspInit+0x324>)
 80025ec:	2202      	movs	r2, #2
 80025ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025f0:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <HAL_UART_MspInit+0x324>)
 80025f2:	2210      	movs	r2, #16
 80025f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f6:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <HAL_UART_MspInit+0x324>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025fc:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <HAL_UART_MspInit+0x324>)
 80025fe:	2280      	movs	r2, #128	@ 0x80
 8002600:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002602:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <HAL_UART_MspInit+0x324>)
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002608:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <HAL_UART_MspInit+0x324>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800260e:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_UART_MspInit+0x324>)
 8002610:	2200      	movs	r2, #0
 8002612:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002614:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <HAL_UART_MspInit+0x324>)
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800261a:	480d      	ldr	r0, [pc, #52]	@ (8002650 <HAL_UART_MspInit+0x324>)
 800261c:	f000 fb56 	bl	8002ccc <HAL_DMA_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 8002626:	f7ff fc4f 	bl	8001ec8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a08      	ldr	r2, [pc, #32]	@ (8002650 <HAL_UART_MspInit+0x324>)
 800262e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002630:	4a07      	ldr	r2, [pc, #28]	@ (8002650 <HAL_UART_MspInit+0x324>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002636:	bf00      	nop
 8002638:	37c0      	adds	r7, #192	@ 0xc0
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40013800 	.word	0x40013800
 8002644:	40021000 	.word	0x40021000
 8002648:	20000a64 	.word	0x20000a64
 800264c:	40020058 	.word	0x40020058
 8002650:	20000aac 	.word	0x20000aac
 8002654:	40020044 	.word	0x40020044

08002658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <NMI_Handler+0x4>

08002660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <HardFault_Handler+0x4>

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <MemManage_Handler+0x4>

08002670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <BusFault_Handler+0x4>

08002678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <UsageFault_Handler+0x4>

08002680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ae:	f000 f9b7 	bl	8002a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80026bc:	4802      	ldr	r0, [pc, #8]	@ (80026c8 <DMA1_Channel4_IRQHandler+0x10>)
 80026be:	f000 fbbd 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000aac 	.word	0x20000aac

080026cc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <DMA1_Channel5_IRQHandler+0x10>)
 80026d2:	f000 fbb3 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000a64 	.word	0x20000a64

080026e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026e4:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <TIM2_IRQHandler+0x10>)
 80026e6:	f003 fe19 	bl	800631c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200006bc 	.word	0x200006bc

080026f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026f8:	4802      	ldr	r0, [pc, #8]	@ (8002704 <TIM3_IRQHandler+0x10>)
 80026fa:	f003 fe0f 	bl	800631c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000708 	.word	0x20000708

08002708 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800270c:	4802      	ldr	r0, [pc, #8]	@ (8002718 <TIM5_IRQHandler+0x10>)
 800270e:	f003 fe05 	bl	800631c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200007a0 	.word	0x200007a0

0800271c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <DMA2_Channel5_IRQHandler+0x10>)
 8002722:	f000 fb8b 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000a1c 	.word	0x20000a1c

08002730 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <OTG_FS_IRQHandler+0x10>)
 8002736:	f001 f87d 	bl	8003834 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20001fdc 	.word	0x20001fdc

08002744 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return 1;
 8002748:	2301      	movs	r3, #1
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_kill>:

int _kill(int pid, int sig)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800275e:	f00b fb55 	bl	800de0c <__errno>
 8002762:	4603      	mov	r3, r0
 8002764:	2216      	movs	r2, #22
 8002766:	601a      	str	r2, [r3, #0]
  return -1;
 8002768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_exit>:

void _exit (int status)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ffe7 	bl	8002754 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002786:	bf00      	nop
 8002788:	e7fd      	b.n	8002786 <_exit+0x12>

0800278a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e00a      	b.n	80027b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800279c:	f3af 8000 	nop.w
 80027a0:	4601      	mov	r1, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	60ba      	str	r2, [r7, #8]
 80027a8:	b2ca      	uxtb	r2, r1
 80027aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3301      	adds	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dbf0      	blt.n	800279c <_read+0x12>
  }

  return len;
 80027ba:	687b      	ldr	r3, [r7, #4]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ec:	605a      	str	r2, [r3, #4]
  return 0;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_isatty>:

int _isatty(int file)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002804:	2301      	movs	r3, #1
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002834:	4a14      	ldr	r2, [pc, #80]	@ (8002888 <_sbrk+0x5c>)
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <_sbrk+0x60>)
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002840:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <_sbrk+0x64>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <_sbrk+0x64>)
 800284a:	4a12      	ldr	r2, [pc, #72]	@ (8002894 <_sbrk+0x68>)
 800284c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800284e:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <_sbrk+0x64>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	429a      	cmp	r2, r3
 800285a:	d207      	bcs.n	800286c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800285c:	f00b fad6 	bl	800de0c <__errno>
 8002860:	4603      	mov	r3, r0
 8002862:	220c      	movs	r2, #12
 8002864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
 800286a:	e009      	b.n	8002880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800286c:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <_sbrk+0x64>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002872:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <_sbrk+0x64>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	4a05      	ldr	r2, [pc, #20]	@ (8002890 <_sbrk+0x64>)
 800287c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800287e:	68fb      	ldr	r3, [r7, #12]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20018000 	.word	0x20018000
 800288c:	00000400 	.word	0x00000400
 8002890:	20000af4 	.word	0x20000af4
 8002894:	20002830 	.word	0x20002830

08002898 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800289c:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <SystemInit+0x20>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	4a05      	ldr	r2, [pc, #20]	@ (80028b8 <SystemInit+0x20>)
 80028a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <HAL_TIM_PeriodElapsedCallback>:
 *      Author: pecka
 */
#include "timers.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == LED_TIMER)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a11      	ldr	r2, [pc, #68]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d102      	bne.n	80028d4 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  //LEDs timer
	  LED_IT_Handeler();
 80028ce:	f7fe fde1 	bl	8001494 <LED_IT_Handeler>
	  Stepper_Stop(&RA_Axis_motor);
	  //HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
	  //HAL_TIM_Base_Stop_IT(&htim2);
  }

}
 80028d2:	e018      	b.n	8002906 <HAL_TIM_PeriodElapsedCallback+0x4a>
  else if(htim->Instance == STEPPER_TIMER)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002914 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d102      	bne.n	80028e4 <HAL_TIM_PeriodElapsedCallback+0x28>
	  Stepper_IT_Handeler();
 80028de:	f7ff faf9 	bl	8001ed4 <Stepper_IT_Handeler>
}
 80028e2:	e010      	b.n	8002906 <HAL_TIM_PeriodElapsedCallback+0x4a>
  else if (htim->Instance == DEC_TIM)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002918 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d103      	bne.n	80028f6 <HAL_TIM_PeriodElapsedCallback+0x3a>
	  Stepper_Stop(&DEC_Axis_motor);
 80028ee:	480b      	ldr	r0, [pc, #44]	@ (800291c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80028f0:	f7ff fb29 	bl	8001f46 <Stepper_Stop>
}
 80028f4:	e007      	b.n	8002906 <HAL_TIM_PeriodElapsedCallback+0x4a>
  else if(htim->Instance == RA_TIM)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028fe:	d102      	bne.n	8002906 <HAL_TIM_PeriodElapsedCallback+0x4a>
	  Stepper_Stop(&RA_Axis_motor);
 8002900:	4807      	ldr	r0, [pc, #28]	@ (8002920 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002902:	f7ff fb20 	bl	8001f46 <Stepper_Stop>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40000800 	.word	0x40000800
 8002914:	40000400 	.word	0x40000400
 8002918:	40000c00 	.word	0x40000c00
 800291c:	200000b4 	.word	0x200000b4
 8002920:	20000078 	.word	0x20000078

08002924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800295c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002928:	f7ff ffb6 	bl	8002898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800292c:	480c      	ldr	r0, [pc, #48]	@ (8002960 <LoopForever+0x6>)
  ldr r1, =_edata
 800292e:	490d      	ldr	r1, [pc, #52]	@ (8002964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002930:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <LoopForever+0xe>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002944:	4c0a      	ldr	r4, [pc, #40]	@ (8002970 <LoopForever+0x16>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002952:	f00b fa61 	bl	800de18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002956:	f7fe fda9 	bl	80014ac <main>

0800295a <LoopForever>:

LoopForever:
    b LoopForever
 800295a:	e7fe      	b.n	800295a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800295c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8002968:	080108c0 	.word	0x080108c0
  ldr r2, =_sbss
 800296c:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8002970:	2000282c 	.word	0x2000282c

08002974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC1_2_IRQHandler>

08002976 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002980:	2003      	movs	r0, #3
 8002982:	f000 f961 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002986:	200f      	movs	r0, #15
 8002988:	f000 f80e 	bl	80029a8 <HAL_InitTick>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	71fb      	strb	r3, [r7, #7]
 8002996:	e001      	b.n	800299c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002998:	f7ff fb3a 	bl	8002010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800299c:	79fb      	ldrb	r3, [r7, #7]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029b4:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <HAL_InitTick+0x6c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d023      	beq.n	8002a04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029bc:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_InitTick+0x70>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <HAL_InitTick+0x6c>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f96d 	bl	8002cb2 <HAL_SYSTICK_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b0f      	cmp	r3, #15
 80029e2:	d809      	bhi.n	80029f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e4:	2200      	movs	r2, #0
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f000 f937 	bl	8002c5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029f0:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <HAL_InitTick+0x74>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e007      	b.n	8002a08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e004      	b.n	8002a08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e001      	b.n	8002a08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200000f8 	.word	0x200000f8
 8002a18:	200000f0 	.word	0x200000f0
 8002a1c:	200000f4 	.word	0x200000f4

08002a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_IncTick+0x20>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <HAL_IncTick+0x24>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <HAL_IncTick+0x24>)
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200000f8 	.word	0x200000f8
 8002a44:	20000af8 	.word	0x20000af8

08002a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <HAL_GetTick+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000af8 	.word	0x20000af8

08002a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a68:	f7ff ffee 	bl	8002a48 <HAL_GetTick>
 8002a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d005      	beq.n	8002a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <HAL_Delay+0x44>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a86:	bf00      	nop
 8002a88:	f7ff ffde 	bl	8002a48 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d8f7      	bhi.n	8002a88 <HAL_Delay+0x28>
  {
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200000f8 	.word	0x200000f8

08002aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <__NVIC_SetPriorityGrouping+0x44>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ada:	4a04      	ldr	r2, [pc, #16]	@ (8002aec <__NVIC_SetPriorityGrouping+0x44>)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	60d3      	str	r3, [r2, #12]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af4:	4b04      	ldr	r3, [pc, #16]	@ (8002b08 <__NVIC_GetPriorityGrouping+0x18>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	f003 0307 	and.w	r3, r3, #7
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	db0b      	blt.n	8002b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4907      	ldr	r1, [pc, #28]	@ (8002b44 <__NVIC_EnableIRQ+0x38>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0a      	blt.n	8002b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	490c      	ldr	r1, [pc, #48]	@ (8002b94 <__NVIC_SetPriority+0x4c>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b70:	e00a      	b.n	8002b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4908      	ldr	r1, [pc, #32]	@ (8002b98 <__NVIC_SetPriority+0x50>)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	440b      	add	r3, r1
 8002b86:	761a      	strb	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	@ 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f1c3 0307 	rsb	r3, r3, #7
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	bf28      	it	cs
 8002bba:	2304      	movcs	r3, #4
 8002bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d902      	bls.n	8002bcc <NVIC_EncodePriority+0x30>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3b03      	subs	r3, #3
 8002bca:	e000      	b.n	8002bce <NVIC_EncodePriority+0x32>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	401a      	ands	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43d9      	mvns	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	4313      	orrs	r3, r2
         );
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	@ 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c14:	d301      	bcc.n	8002c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00f      	b.n	8002c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <SysTick_Config+0x40>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c22:	210f      	movs	r1, #15
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f7ff ff8e 	bl	8002b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <SysTick_Config+0x40>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c32:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <SysTick_Config+0x40>)
 8002c34:	2207      	movs	r2, #7
 8002c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff29 	bl	8002aa8 <__NVIC_SetPriorityGrouping>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c70:	f7ff ff3e 	bl	8002af0 <__NVIC_GetPriorityGrouping>
 8002c74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7ff ff8e 	bl	8002b9c <NVIC_EncodePriority>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff5d 	bl	8002b48 <__NVIC_SetPriority>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff31 	bl	8002b0c <__NVIC_EnableIRQ>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffa2 	bl	8002c04 <SysTick_Config>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e098      	b.n	8002e10 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e1c <HAL_DMA_Init+0x150>)
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d80f      	bhi.n	8002d0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e20 <HAL_DMA_Init+0x154>)
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e24 <HAL_DMA_Init+0x158>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a48      	ldr	r2, [pc, #288]	@ (8002e28 <HAL_DMA_Init+0x15c>)
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d08:	e00e      	b.n	8002d28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b46      	ldr	r3, [pc, #280]	@ (8002e2c <HAL_DMA_Init+0x160>)
 8002d12:	4413      	add	r3, r2
 8002d14:	4a43      	ldr	r2, [pc, #268]	@ (8002e24 <HAL_DMA_Init+0x158>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	009a      	lsls	r2, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a42      	ldr	r2, [pc, #264]	@ (8002e30 <HAL_DMA_Init+0x164>)
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d82:	d039      	beq.n	8002df8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	4a27      	ldr	r2, [pc, #156]	@ (8002e28 <HAL_DMA_Init+0x15c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d11a      	bne.n	8002dc4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d8e:	4b29      	ldr	r3, [pc, #164]	@ (8002e34 <HAL_DMA_Init+0x168>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	f003 031c 	and.w	r3, r3, #28
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4924      	ldr	r1, [pc, #144]	@ (8002e34 <HAL_DMA_Init+0x168>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002da8:	4b22      	ldr	r3, [pc, #136]	@ (8002e34 <HAL_DMA_Init+0x168>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	f003 031c 	and.w	r3, r3, #28
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	491d      	ldr	r1, [pc, #116]	@ (8002e34 <HAL_DMA_Init+0x168>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
 8002dc2:	e019      	b.n	8002df8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e38 <HAL_DMA_Init+0x16c>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dcc:	f003 031c 	and.w	r3, r3, #28
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	4917      	ldr	r1, [pc, #92]	@ (8002e38 <HAL_DMA_Init+0x16c>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dde:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <HAL_DMA_Init+0x16c>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	f003 031c 	and.w	r3, r3, #28
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	4911      	ldr	r1, [pc, #68]	@ (8002e38 <HAL_DMA_Init+0x16c>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40020407 	.word	0x40020407
 8002e20:	bffdfff8 	.word	0xbffdfff8
 8002e24:	cccccccd 	.word	0xcccccccd
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	bffdfbf8 	.word	0xbffdfbf8
 8002e30:	40020400 	.word	0x40020400
 8002e34:	400200a8 	.word	0x400200a8
 8002e38:	400204a8 	.word	0x400204a8

08002e3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e58:	f003 031c 	and.w	r3, r3, #28
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d026      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x7a>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d021      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0204 	bic.w	r2, r2, #4
 8002e8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e94:	f003 021c 	and.w	r2, r3, #28
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d071      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002eb4:	e06c      	b.n	8002f90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f003 031c 	and.w	r3, r3, #28
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d02e      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xec>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d029      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 020a 	bic.w	r2, r2, #10
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	f003 021c 	and.w	r2, r3, #28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	2102      	movs	r1, #2
 8002f08:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d038      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f26:	e033      	b.n	8002f90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2c:	f003 031c 	and.w	r3, r3, #28
 8002f30:	2208      	movs	r2, #8
 8002f32:	409a      	lsls	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d02a      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x156>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d025      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 020e 	bic.w	r2, r2, #14
 8002f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	f003 021c 	and.w	r2, r3, #28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
}
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002faa:	e17f      	b.n	80032ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8171 	beq.w	80032a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d005      	beq.n	8002fdc <HAL_GPIO_Init+0x40>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d130      	bne.n	800303e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003012:	2201      	movs	r2, #1
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	f003 0201 	and.w	r2, r3, #1
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b03      	cmp	r3, #3
 8003048:	d118      	bne.n	800307c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003050:	2201      	movs	r2, #1
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	08db      	lsrs	r3, r3, #3
 8003066:	f003 0201 	and.w	r2, r3, #1
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b03      	cmp	r3, #3
 8003086:	d017      	beq.n	80030b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d123      	bne.n	800310c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	08da      	lsrs	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3208      	adds	r2, #8
 8003106:	6939      	ldr	r1, [r7, #16]
 8003108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0203 	and.w	r2, r3, #3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80ac 	beq.w	80032a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314e:	4b5f      	ldr	r3, [pc, #380]	@ (80032cc <HAL_GPIO_Init+0x330>)
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	4a5e      	ldr	r2, [pc, #376]	@ (80032cc <HAL_GPIO_Init+0x330>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6613      	str	r3, [r2, #96]	@ 0x60
 800315a:	4b5c      	ldr	r3, [pc, #368]	@ (80032cc <HAL_GPIO_Init+0x330>)
 800315c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003166:	4a5a      	ldr	r2, [pc, #360]	@ (80032d0 <HAL_GPIO_Init+0x334>)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003190:	d025      	beq.n	80031de <HAL_GPIO_Init+0x242>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4f      	ldr	r2, [pc, #316]	@ (80032d4 <HAL_GPIO_Init+0x338>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01f      	beq.n	80031da <HAL_GPIO_Init+0x23e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4e      	ldr	r2, [pc, #312]	@ (80032d8 <HAL_GPIO_Init+0x33c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d019      	beq.n	80031d6 <HAL_GPIO_Init+0x23a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4d      	ldr	r2, [pc, #308]	@ (80032dc <HAL_GPIO_Init+0x340>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_GPIO_Init+0x236>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4c      	ldr	r2, [pc, #304]	@ (80032e0 <HAL_GPIO_Init+0x344>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00d      	beq.n	80031ce <HAL_GPIO_Init+0x232>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4b      	ldr	r2, [pc, #300]	@ (80032e4 <HAL_GPIO_Init+0x348>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d007      	beq.n	80031ca <HAL_GPIO_Init+0x22e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4a      	ldr	r2, [pc, #296]	@ (80032e8 <HAL_GPIO_Init+0x34c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <HAL_GPIO_Init+0x22a>
 80031c2:	2306      	movs	r3, #6
 80031c4:	e00c      	b.n	80031e0 <HAL_GPIO_Init+0x244>
 80031c6:	2307      	movs	r3, #7
 80031c8:	e00a      	b.n	80031e0 <HAL_GPIO_Init+0x244>
 80031ca:	2305      	movs	r3, #5
 80031cc:	e008      	b.n	80031e0 <HAL_GPIO_Init+0x244>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x244>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e004      	b.n	80031e0 <HAL_GPIO_Init+0x244>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_Init+0x244>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_GPIO_Init+0x244>
 80031de:	2300      	movs	r3, #0
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	f002 0203 	and.w	r2, r2, #3
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	4093      	lsls	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031f0:	4937      	ldr	r1, [pc, #220]	@ (80032d0 <HAL_GPIO_Init+0x334>)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	3302      	adds	r3, #2
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031fe:	4b3b      	ldr	r3, [pc, #236]	@ (80032ec <HAL_GPIO_Init+0x350>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003222:	4a32      	ldr	r2, [pc, #200]	@ (80032ec <HAL_GPIO_Init+0x350>)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003228:	4b30      	ldr	r3, [pc, #192]	@ (80032ec <HAL_GPIO_Init+0x350>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800324c:	4a27      	ldr	r2, [pc, #156]	@ (80032ec <HAL_GPIO_Init+0x350>)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003252:	4b26      	ldr	r3, [pc, #152]	@ (80032ec <HAL_GPIO_Init+0x350>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003276:	4a1d      	ldr	r2, [pc, #116]	@ (80032ec <HAL_GPIO_Init+0x350>)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800327c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ec <HAL_GPIO_Init+0x350>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032a0:	4a12      	ldr	r2, [pc, #72]	@ (80032ec <HAL_GPIO_Init+0x350>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3301      	adds	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f47f ae78 	bne.w	8002fac <HAL_GPIO_Init+0x10>
  }
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40010000 	.word	0x40010000
 80032d4:	48000400 	.word	0x48000400
 80032d8:	48000800 	.word	0x48000800
 80032dc:	48000c00 	.word	0x48000c00
 80032e0:	48001000 	.word	0x48001000
 80032e4:	48001400 	.word	0x48001400
 80032e8:	48001800 	.word	0x48001800
 80032ec:	40010400 	.word	0x40010400

080032f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
 80032fc:	4613      	mov	r3, r2
 80032fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003300:	787b      	ldrb	r3, [r7, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800330c:	e002      	b.n	8003314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43d9      	mvns	r1, r3
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	400b      	ands	r3, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e08d      	b.n	8003482 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fe fe6c 	bl	8002058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2224      	movs	r2, #36	@ 0x24
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d107      	bne.n	80033ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	e006      	b.n	80033dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d108      	bne.n	80033f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	e007      	b.n	8003406 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69d9      	ldr	r1, [r3, #28]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b20      	cmp	r3, #32
 800349e:	d138      	bne.n	8003512 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e032      	b.n	8003514 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2224      	movs	r2, #36	@ 0x24
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	d139      	bne.n	80035aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003540:	2302      	movs	r3, #2
 8003542:	e033      	b.n	80035ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	@ 0x24
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003572:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e101      	b.n	80037ce <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f008 fa10 	bl	800ba04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2203      	movs	r2, #3
 80035e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 fe51 	bl	800829e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7c1a      	ldrb	r2, [r3, #16]
 8003604:	f88d 2000 	strb.w	r2, [sp]
 8003608:	3304      	adds	r3, #4
 800360a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800360c:	f004 fd6d 	bl	80080ea <USB_CoreInit>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0d5      	b.n	80037ce <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f004 fe49 	bl	80082c0 <USB_SetCurrentMode>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0c6      	b.n	80037ce <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e04a      	b.n	80036dc <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	3315      	adds	r3, #21
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	3314      	adds	r3, #20
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	b298      	uxth	r0, r3
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	332e      	adds	r3, #46	@ 0x2e
 8003682:	4602      	mov	r2, r0
 8003684:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3318      	adds	r3, #24
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	331c      	adds	r3, #28
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3320      	adds	r3, #32
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3324      	adds	r3, #36	@ 0x24
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	3301      	adds	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	791b      	ldrb	r3, [r3, #4]
 80036e0:	7bfa      	ldrb	r2, [r7, #15]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d3af      	bcc.n	8003646 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	e044      	b.n	8003776 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	3301      	adds	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	791b      	ldrb	r3, [r3, #4]
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	429a      	cmp	r2, r3
 800377e:	d3b5      	bcc.n	80036ec <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7c1a      	ldrb	r2, [r3, #16]
 8003788:	f88d 2000 	strb.w	r2, [sp]
 800378c:	3304      	adds	r3, #4
 800378e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003790:	f004 fde2 	bl	8008358 <USB_DevInit>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e013      	b.n	80037ce <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7b1b      	ldrb	r3, [r3, #12]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d102      	bne.n	80037c2 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f001 f86d 	bl	800489c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f005 fd99 	bl	80092fe <USB_DevDisconnect>

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_PCD_Start+0x1c>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e01c      	b.n	800382c <HAL_PCD_Start+0x56>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7b5b      	ldrb	r3, [r3, #13]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d105      	bne.n	800380e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003806:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f004 fd32 	bl	800827c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f005 fd4d 	bl	80092bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b08d      	sub	sp, #52	@ 0x34
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f005 fe0b 	bl	8009466 <USB_GetMode>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 8481 	bne.w	800415a <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f005 fd6f 	bl	8009340 <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8477 	beq.w	8004158 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f005 fd5c 	bl	8009340 <USB_ReadInterrupts>
 8003888:	4603      	mov	r3, r0
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f002 0202 	and.w	r2, r2, #2
 80038a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f005 fd4a 	bl	8009340 <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d161      	bne.n	800397a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0210 	bic.w	r2, r2, #16
 80038c4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 020f 	and.w	r2, r3, #15
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	3304      	adds	r3, #4
 80038e4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80038ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038f0:	d124      	bne.n	800393c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d035      	beq.n	800396a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800390c:	b29b      	uxth	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	6a38      	ldr	r0, [r7, #32]
 8003912:	f005 fb81 	bl	8009018 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003922:	441a      	add	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003934:	441a      	add	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	615a      	str	r2, [r3, #20]
 800393a:	e016      	b.n	800396a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003942:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003946:	d110      	bne.n	800396a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800394e:	2208      	movs	r2, #8
 8003950:	4619      	mov	r1, r3
 8003952:	6a38      	ldr	r0, [r7, #32]
 8003954:	f005 fb60 	bl	8009018 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003964:	441a      	add	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0210 	orr.w	r2, r2, #16
 8003978:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f005 fcde 	bl	8009340 <USB_ReadInterrupts>
 8003984:	4603      	mov	r3, r0
 8003986:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800398a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800398e:	f040 80a7 	bne.w	8003ae0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f005 fce3 	bl	8009366 <USB_ReadDevAllOutEpInterrupt>
 80039a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80039a2:	e099      	b.n	8003ad8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 808e 	beq.w	8003acc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f005 fd07 	bl	80093ce <USB_ReadDevOutEPInterrupt>
 80039c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00c      	beq.n	80039e6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d8:	461a      	mov	r2, r3
 80039da:	2301      	movs	r3, #1
 80039dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fe81 	bl	80046e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00c      	beq.n	8003a0a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039fc:	461a      	mov	r2, r3
 80039fe:	2308      	movs	r3, #8
 8003a00:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 febd 	bl	8004784 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	2310      	movs	r3, #16
 8003a24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d030      	beq.n	8003a92 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a38:	2b80      	cmp	r3, #128	@ 0x80
 8003a3a:	d109      	bne.n	8003a50 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a4e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	3304      	adds	r3, #4
 8003a64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	78db      	ldrb	r3, [r3, #3]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d108      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f008 f916 	bl	800bcac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2302      	movs	r3, #2
 8003a90:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2320      	movs	r3, #32
 8003aac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d009      	beq.n	8003acc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003aca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	3301      	adds	r3, #1
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f47f af62 	bne.w	80039a4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f005 fc2b 	bl	8009340 <USB_ReadInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003af4:	f040 80a4 	bne.w	8003c40 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f005 fc4c 	bl	800939a <USB_ReadDevAllInEpInterrupt>
 8003b02:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003b08:	e096      	b.n	8003c38 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 808b 	beq.w	8003c2c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f005 fc72 	bl	800940a <USB_ReadDevInEPInterrupt>
 8003b26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d020      	beq.n	8003b74 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	2201      	movs	r2, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69f9      	ldr	r1, [r7, #28]
 8003b4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b52:	4013      	ands	r3, r2
 8003b54:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b62:	461a      	mov	r2, r3
 8003b64:	2301      	movs	r3, #1
 8003b66:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f008 f807 	bl	800bb82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2310      	movs	r3, #16
 8003baa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2340      	movs	r3, #64	@ 0x40
 8003bc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d023      	beq.n	8003c1a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bd4:	6a38      	ldr	r0, [r7, #32]
 8003bd6:	f004 fd07 	bl	80085e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	3310      	adds	r3, #16
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	3304      	adds	r3, #4
 8003bec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	78db      	ldrb	r3, [r3, #3]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d108      	bne.n	8003c08 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f008 f864 	bl	800bcd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c14:	461a      	mov	r2, r3
 8003c16:	2302      	movs	r3, #2
 8003c18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fcd6 	bl	80045d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	3301      	adds	r3, #1
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f47f af65 	bne.w	8003b0a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f005 fb7b 	bl	8009340 <USB_ReadInterrupts>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c54:	d122      	bne.n	8003c9c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d108      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f008 fa98 	bl	800c1b4 <HAL_PCDEx_LPM_Callback>
 8003c84:	e002      	b.n	8003c8c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f007 ffe8 	bl	800bc5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f005 fb4d 	bl	8009340 <USB_ReadInterrupts>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb0:	d112      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f007 ffa4 	bl	800bc10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f005 fb2f 	bl	8009340 <USB_ReadInterrupts>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cec:	d121      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003cfc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d111      	bne.n	8003d2c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d22:	2101      	movs	r1, #1
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f008 fa45 	bl	800c1b4 <HAL_PCDEx_LPM_Callback>
 8003d2a:	e002      	b.n	8003d32 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f007 ff6f 	bl	800bc10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f005 fb02 	bl	8009340 <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d46:	f040 80b6 	bne.w	8003eb6 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2110      	movs	r1, #16
 8003d64:	4618      	mov	r0, r3
 8003d66:	f004 fc3f 	bl	80085e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d6e:	e046      	b.n	8003dfe <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003da2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003db6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003df2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003df6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	791b      	ldrb	r3, [r3, #4]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d3b2      	bcc.n	8003d70 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e18:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003e1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	7bdb      	ldrb	r3, [r3, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e36:	f043 030b 	orr.w	r3, r3, #11
 8003e3a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e4c:	f043 030b 	orr.w	r3, r3, #11
 8003e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e52:	e015      	b.n	8003e80 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e66:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003e6a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e7a:	f043 030b 	orr.w	r3, r3, #11
 8003e7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e8e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f005 fb11 	bl	80094c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f005 fa40 	bl	8009340 <USB_ReadInterrupts>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eca:	d123      	bne.n	8003f14 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 fad6 	bl	8009482 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f004 fbfd 	bl	80086da <USB_GetDevSpeed>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681c      	ldr	r4, [r3, #0]
 8003eec:	f001 fad4 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f004 f923 	bl	8008144 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f007 fe67 	bl	800bbd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f005 fa11 	bl	8009340 <USB_ReadInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d10a      	bne.n	8003f3e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f007 fe44 	bl	800bbb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f002 0208 	and.w	r2, r2, #8
 8003f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f005 f9fc 	bl	8009340 <USB_ReadInterrupts>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4e:	2b80      	cmp	r3, #128	@ 0x80
 8003f50:	d123      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f5e:	2301      	movs	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f62:	e014      	b.n	8003f8e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 faf7 	bl	8004576 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	791b      	ldrb	r3, [r3, #4]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d3e4      	bcc.n	8003f64 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f005 f9ce 	bl	8009340 <USB_ReadInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fae:	d13c      	bne.n	800402a <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb4:	e02b      	b.n	800400e <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3318      	adds	r3, #24
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d115      	bne.n	8004008 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003fdc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da12      	bge.n	8004008 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	3317      	adds	r3, #23
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	4619      	mov	r1, r3
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fab7 	bl	8004576 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	3301      	adds	r3, #1
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	791b      	ldrb	r3, [r3, #4]
 8004012:	461a      	mov	r2, r3
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	4293      	cmp	r3, r2
 8004018:	d3cd      	bcc.n	8003fb6 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f005 f986 	bl	8009340 <USB_ReadInterrupts>
 8004034:	4603      	mov	r3, r0
 8004036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800403a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800403e:	d156      	bne.n	80040ee <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004040:	2301      	movs	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
 8004044:	e045      	b.n	80040d2 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d12e      	bne.n	80040cc <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800406e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	da2b      	bge.n	80040cc <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004080:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004084:	429a      	cmp	r2, r3
 8004086:	d121      	bne.n	80040cc <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040c8:	6053      	str	r3, [r2, #4]
            break;
 80040ca:	e008      	b.n	80040de <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	3301      	adds	r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	791b      	ldrb	r3, [r3, #4]
 80040d6:	461a      	mov	r2, r3
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	4293      	cmp	r3, r2
 80040dc:	d3b3      	bcc.n	8004046 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80040ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f005 f924 	bl	8009340 <USB_ReadInterrupts>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004102:	d10a      	bne.n	800411a <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f007 fdf5 	bl	800bcf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f005 f90e 	bl	8009340 <USB_ReadInterrupts>
 8004124:	4603      	mov	r3, r0
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b04      	cmp	r3, #4
 800412c:	d115      	bne.n	800415a <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f007 fde5 	bl	800bd10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	e000      	b.n	800415a <HAL_PCD_IRQHandler+0x926>
      return;
 8004158:	bf00      	nop
    }
  }
}
 800415a:	3734      	adds	r7, #52	@ 0x34
 800415c:	46bd      	mov	sp, r7
 800415e:	bd90      	pop	{r4, r7, pc}

08004160 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_PCD_SetAddress+0x1a>
 8004176:	2302      	movs	r3, #2
 8004178:	e012      	b.n	80041a0 <HAL_PCD_SetAddress+0x40>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f005 f86d 	bl	8009270 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	4608      	mov	r0, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	461a      	mov	r2, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	70fb      	strb	r3, [r7, #3]
 80041ba:	460b      	mov	r3, r1
 80041bc:	803b      	strh	r3, [r7, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	da0f      	bge.n	80041ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	3310      	adds	r3, #16
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	3304      	adds	r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	705a      	strb	r2, [r3, #1]
 80041ec:	e00f      	b.n	800420e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	f003 020f 	and.w	r2, r3, #15
 80041f4:	4613      	mov	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4413      	add	r3, r2
 8004204:	3304      	adds	r3, #4
 8004206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800421a:	883b      	ldrh	r3, [r7, #0]
 800421c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	78ba      	ldrb	r2, [r7, #2]
 8004228:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	785b      	ldrb	r3, [r3, #1]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800423c:	78bb      	ldrb	r3, [r7, #2]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d102      	bne.n	8004248 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_PCD_EP_Open+0xae>
 8004252:	2302      	movs	r3, #2
 8004254:	e00e      	b.n	8004274 <HAL_PCD_EP_Open+0xcc>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	4618      	mov	r0, r3
 8004266:	f004 fa57 	bl	8008718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004272:	7afb      	ldrb	r3, [r7, #11]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800428c:	2b00      	cmp	r3, #0
 800428e:	da0f      	bge.n	80042b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	f003 020f 	and.w	r2, r3, #15
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	3310      	adds	r3, #16
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	4413      	add	r3, r2
 80042a4:	3304      	adds	r3, #4
 80042a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	705a      	strb	r2, [r3, #1]
 80042ae:	e00f      	b.n	80042d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	f003 020f 	and.w	r2, r3, #15
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	4413      	add	r3, r2
 80042c6:	3304      	adds	r3, #4
 80042c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_PCD_EP_Close+0x6e>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e00e      	b.n	8004308 <HAL_PCD_EP_Close+0x8c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 fa95 	bl	8008828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	460b      	mov	r3, r1
 800431e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004320:	7afb      	ldrb	r3, [r7, #11]
 8004322:	f003 020f 	and.w	r2, r3, #15
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4413      	add	r3, r2
 8004336:	3304      	adds	r3, #4
 8004338:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2200      	movs	r2, #0
 800434a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004352:	7afb      	ldrb	r3, [r7, #11]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	b2da      	uxtb	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	4618      	mov	r0, r3
 8004366:	f004 fb3b 	bl	80089e0 <USB_EPStartXfer>

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 020f 	and.w	r2, r3, #15
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	460b      	mov	r3, r1
 80043b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b4:	7afb      	ldrb	r3, [r7, #11]
 80043b6:	f003 020f 	and.w	r2, r3, #15
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	3310      	adds	r3, #16
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	3304      	adds	r3, #4
 80043ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2200      	movs	r2, #0
 80043dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2201      	movs	r2, #1
 80043e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e4:	7afb      	ldrb	r3, [r7, #11]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6979      	ldr	r1, [r7, #20]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f004 faf2 	bl	80089e0 <USB_EPStartXfer>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	7912      	ldrb	r2, [r2, #4]
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e04e      	b.n	80044c2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004428:	2b00      	cmp	r3, #0
 800442a:	da0f      	bge.n	800444c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	f003 020f 	and.w	r2, r3, #15
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	3310      	adds	r3, #16
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4413      	add	r3, r2
 8004440:	3304      	adds	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	705a      	strb	r2, [r3, #1]
 800444a:	e00d      	b.n	8004468 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	3304      	adds	r3, #4
 8004460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_PCD_EP_SetStall+0x82>
 8004484:	2302      	movs	r3, #2
 8004486:	e01c      	b.n	80044c2 <HAL_PCD_EP_SetStall+0xbc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68f9      	ldr	r1, [r7, #12]
 8004496:	4618      	mov	r0, r3
 8004498:	f004 fe16 	bl	80090c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f005 f808 	bl	80094c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	7912      	ldrb	r2, [r2, #4]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e042      	b.n	800456e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	da0f      	bge.n	8004510 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 020f 	and.w	r2, r3, #15
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	3310      	adds	r3, #16
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	705a      	strb	r2, [r3, #1]
 800450e:	e00f      	b.n	8004530 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	3304      	adds	r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_PCD_EP_ClrStall+0x86>
 800454c:	2302      	movs	r3, #2
 800454e:	e00e      	b.n	800456e <HAL_PCD_EP_ClrStall+0xa4>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68f9      	ldr	r1, [r7, #12]
 800455e:	4618      	mov	r0, r3
 8004560:	f004 fe20 	bl	80091a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004586:	2b00      	cmp	r3, #0
 8004588:	da0c      	bge.n	80045a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	f003 020f 	and.w	r2, r3, #15
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	3310      	adds	r3, #16
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	3304      	adds	r3, #4
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e00c      	b.n	80045be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	f003 020f 	and.w	r2, r3, #15
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4413      	add	r3, r2
 80045ba:	3304      	adds	r3, #4
 80045bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68f9      	ldr	r1, [r7, #12]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f004 fc43 	bl	8008e50 <USB_EPStopXfer>
 80045ca:	4603      	mov	r3, r0
 80045cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045ce:	7afb      	ldrb	r3, [r7, #11]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	3310      	adds	r3, #16
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	4413      	add	r3, r2
 80045fc:	3304      	adds	r3, #4
 80045fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	429a      	cmp	r2, r3
 800460a:	d901      	bls.n	8004610 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e067      	b.n	80046e0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	429a      	cmp	r2, r3
 8004624:	d902      	bls.n	800462c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	3303      	adds	r3, #3
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004634:	e026      	b.n	8004684 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	429a      	cmp	r2, r3
 800464a:	d902      	bls.n	8004652 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3303      	adds	r3, #3
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	68d9      	ldr	r1, [r3, #12]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	b29b      	uxth	r3, r3
 8004666:	6978      	ldr	r0, [r7, #20]
 8004668:	f004 fc9c 	bl	8008fa4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	441a      	add	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	441a      	add	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	429a      	cmp	r2, r3
 8004698:	d809      	bhi.n	80046ae <PCD_WriteEmptyTxFifo+0xd6>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d203      	bcs.n	80046ae <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1c3      	bne.n	8004636 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d811      	bhi.n	80046de <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	2201      	movs	r2, #1
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	6939      	ldr	r1, [r7, #16]
 80046d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046da:	4013      	ands	r3, r2
 80046dc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	333c      	adds	r3, #60	@ 0x3c
 8004700:	3304      	adds	r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a19      	ldr	r2, [pc, #100]	@ (8004780 <PCD_EP_OutXfrComplete_int+0x98>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d124      	bne.n	8004768 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800473a:	6093      	str	r3, [r2, #8]
 800473c:	e01a      	b.n	8004774 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004754:	461a      	mov	r2, r3
 8004756:	2320      	movs	r3, #32
 8004758:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f007 f9f3 	bl	800bb4c <HAL_PCD_DataOutStageCallback>
 8004766:	e005      	b.n	8004774 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	4619      	mov	r1, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f007 f9ec 	bl	800bb4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	4f54310a 	.word	0x4f54310a

08004784 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	333c      	adds	r3, #60	@ 0x3c
 800479c:	3304      	adds	r3, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a0c      	ldr	r2, [pc, #48]	@ (80047e8 <PCD_EP_OutSetupPacket_int+0x64>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d90e      	bls.n	80047d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d0:	461a      	mov	r2, r3
 80047d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f007 f9a5 	bl	800bb28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	4f54300a 	.word	0x4f54300a

080047ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
 80047f8:	4613      	mov	r3, r2
 80047fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d107      	bne.n	800481a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800480a:	883b      	ldrh	r3, [r7, #0]
 800480c:	0419      	lsls	r1, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	430a      	orrs	r2, r1
 8004816:	629a      	str	r2, [r3, #40]	@ 0x28
 8004818:	e028      	b.n	800486c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4413      	add	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004828:	2300      	movs	r3, #0
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e00d      	b.n	800484a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	3340      	adds	r3, #64	@ 0x40
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4413      	add	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	3301      	adds	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	3b01      	subs	r3, #1
 8004850:	429a      	cmp	r2, r3
 8004852:	d3ec      	bcc.n	800482e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004854:	883b      	ldrh	r3, [r7, #0]
 8004856:	0418      	lsls	r0, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	3b01      	subs	r3, #1
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	4302      	orrs	r2, r0
 8004864:	3340      	adds	r3, #64	@ 0x40
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	f043 0303 	orr.w	r3, r3, #3
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048e8:	4b04      	ldr	r3, [pc, #16]	@ (80048fc <HAL_PWREx_GetVoltageRange+0x18>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40007000 	.word	0x40007000

08004900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800490e:	d130      	bne.n	8004972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004910:	4b23      	ldr	r3, [pc, #140]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800491c:	d038      	beq.n	8004990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800491e:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004926:	4a1e      	ldr	r2, [pc, #120]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004928:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800492c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800492e:	4b1d      	ldr	r3, [pc, #116]	@ (80049a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2232      	movs	r2, #50	@ 0x32
 8004934:	fb02 f303 	mul.w	r3, r2, r3
 8004938:	4a1b      	ldr	r2, [pc, #108]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	0c9b      	lsrs	r3, r3, #18
 8004940:	3301      	adds	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004944:	e002      	b.n	800494c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b01      	subs	r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800494c:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004958:	d102      	bne.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f2      	bne.n	8004946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004960:	4b0f      	ldr	r3, [pc, #60]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496c:	d110      	bne.n	8004990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e00f      	b.n	8004992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497e:	d007      	beq.n	8004990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004988:	4a05      	ldr	r2, [pc, #20]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800498e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40007000 	.word	0x40007000
 80049a4:	200000f0 	.word	0x200000f0
 80049a8:	431bde83 	.word	0x431bde83

080049ac <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80049b0:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	4a04      	ldr	r2, [pc, #16]	@ (80049c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049ba:	6053      	str	r3, [r2, #4]
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40007000 	.word	0x40007000

080049cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e3ca      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049de:	4b97      	ldr	r3, [pc, #604]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e8:	4b94      	ldr	r3, [pc, #592]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80e4 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_RCC_OscConfig+0x4a>
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	f040 808b 	bne.w	8004b24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 8087 	bne.w	8004b24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a16:	4b89      	ldr	r3, [pc, #548]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_RCC_OscConfig+0x62>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e3a2      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1a      	ldr	r2, [r3, #32]
 8004a32:	4b82      	ldr	r3, [pc, #520]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <HAL_RCC_OscConfig+0x7c>
 8004a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a46:	e005      	b.n	8004a54 <HAL_RCC_OscConfig+0x88>
 8004a48:	4b7c      	ldr	r3, [pc, #496]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d223      	bcs.n	8004aa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fd53 	bl	8005508 <RCC_SetFlashLatencyFromMSIRange>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e383      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a6c:	4b73      	ldr	r3, [pc, #460]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a72      	ldr	r2, [pc, #456]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a72:	f043 0308 	orr.w	r3, r3, #8
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b70      	ldr	r3, [pc, #448]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	496d      	ldr	r1, [pc, #436]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	4968      	ldr	r1, [pc, #416]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	604b      	str	r3, [r1, #4]
 8004a9e:	e025      	b.n	8004aec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aa0:	4b66      	ldr	r3, [pc, #408]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a65      	ldr	r2, [pc, #404]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004aa6:	f043 0308 	orr.w	r3, r3, #8
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4b63      	ldr	r3, [pc, #396]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	4960      	ldr	r1, [pc, #384]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004abe:	4b5f      	ldr	r3, [pc, #380]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	495b      	ldr	r1, [pc, #364]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fd13 	bl	8005508 <RCC_SetFlashLatencyFromMSIRange>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e343      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aec:	f000 fc4a 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b52      	ldr	r3, [pc, #328]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	4950      	ldr	r1, [pc, #320]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	4a4e      	ldr	r2, [pc, #312]	@ (8004c44 <HAL_RCC_OscConfig+0x278>)
 8004b0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b0c:	4b4e      	ldr	r3, [pc, #312]	@ (8004c48 <HAL_RCC_OscConfig+0x27c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fd ff49 	bl	80029a8 <HAL_InitTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d052      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	e327      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d032      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b2c:	4b43      	ldr	r3, [pc, #268]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a42      	ldr	r2, [pc, #264]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b38:	f7fd ff86 	bl	8002a48 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b40:	f7fd ff82 	bl	8002a48 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e310      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b52:	4b3a      	ldr	r3, [pc, #232]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b5e:	4b37      	ldr	r3, [pc, #220]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a36      	ldr	r2, [pc, #216]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b64:	f043 0308 	orr.w	r3, r3, #8
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b34      	ldr	r3, [pc, #208]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4931      	ldr	r1, [pc, #196]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	492c      	ldr	r1, [pc, #176]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	604b      	str	r3, [r1, #4]
 8004b90:	e01a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b92:	4b2a      	ldr	r3, [pc, #168]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a29      	ldr	r2, [pc, #164]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b9e:	f7fd ff53 	bl	8002a48 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ba6:	f7fd ff4f 	bl	8002a48 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e2dd      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bb8:	4b20      	ldr	r3, [pc, #128]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x1da>
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d074      	beq.n	8004cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d005      	beq.n	8004be6 <HAL_RCC_OscConfig+0x21a>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d10e      	bne.n	8004bfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d10b      	bne.n	8004bfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be6:	4b15      	ldr	r3, [pc, #84]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d064      	beq.n	8004cbc <HAL_RCC_OscConfig+0x2f0>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d160      	bne.n	8004cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e2ba      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c06:	d106      	bne.n	8004c16 <HAL_RCC_OscConfig+0x24a>
 8004c08:	4b0c      	ldr	r3, [pc, #48]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e026      	b.n	8004c64 <HAL_RCC_OscConfig+0x298>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c1e:	d115      	bne.n	8004c4c <HAL_RCC_OscConfig+0x280>
 8004c20:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a05      	ldr	r2, [pc, #20]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004c26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b03      	ldr	r3, [pc, #12]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a02      	ldr	r2, [pc, #8]	@ (8004c3c <HAL_RCC_OscConfig+0x270>)
 8004c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	e014      	b.n	8004c64 <HAL_RCC_OscConfig+0x298>
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	080103ec 	.word	0x080103ec
 8004c44:	200000f0 	.word	0x200000f0
 8004c48:	200000f4 	.word	0x200000f4
 8004c4c:	4ba0      	ldr	r3, [pc, #640]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a9f      	ldr	r2, [pc, #636]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	4b9d      	ldr	r3, [pc, #628]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a9c      	ldr	r2, [pc, #624]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d013      	beq.n	8004c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fd feec 	bl	8002a48 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c74:	f7fd fee8 	bl	8002a48 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b64      	cmp	r3, #100	@ 0x64
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e276      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c86:	4b92      	ldr	r3, [pc, #584]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x2a8>
 8004c92:	e014      	b.n	8004cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fd fed8 	bl	8002a48 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c9c:	f7fd fed4 	bl	8002a48 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b64      	cmp	r3, #100	@ 0x64
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e262      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cae:	4b88      	ldr	r3, [pc, #544]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x2d0>
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d060      	beq.n	8004d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_OscConfig+0x310>
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d119      	bne.n	8004d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d116      	bne.n	8004d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x328>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e23f      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b76      	ldr	r3, [pc, #472]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	061b      	lsls	r3, r3, #24
 8004d02:	4973      	ldr	r1, [pc, #460]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d08:	e040      	b.n	8004d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d023      	beq.n	8004d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d12:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1e:	f7fd fe93 	bl	8002a48 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d26:	f7fd fe8f 	bl	8002a48 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e21d      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d38:	4b65      	ldr	r3, [pc, #404]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d44:	4b62      	ldr	r3, [pc, #392]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	061b      	lsls	r3, r3, #24
 8004d52:	495f      	ldr	r1, [pc, #380]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]
 8004d58:	e018      	b.n	8004d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fd fe6f 	bl	8002a48 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6e:	f7fd fe6b 	bl	8002a48 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e1f9      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d80:	4b53      	ldr	r3, [pc, #332]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d03c      	beq.n	8004e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01c      	beq.n	8004dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004da0:	4b4b      	ldr	r3, [pc, #300]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db0:	f7fd fe4a 	bl	8002a48 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db8:	f7fd fe46 	bl	8002a48 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e1d4      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dca:	4b41      	ldr	r3, [pc, #260]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ef      	beq.n	8004db8 <HAL_RCC_OscConfig+0x3ec>
 8004dd8:	e01b      	b.n	8004e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dda:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dea:	f7fd fe2d 	bl	8002a48 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df2:	f7fd fe29 	bl	8002a48 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e1b7      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e04:	4b32      	ldr	r3, [pc, #200]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1ef      	bne.n	8004df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80a6 	beq.w	8004f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e20:	2300      	movs	r3, #0
 8004e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e24:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e30:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e34:	4a26      	ldr	r2, [pc, #152]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e3c:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e4c:	4b21      	ldr	r3, [pc, #132]	@ (8004ed4 <HAL_RCC_OscConfig+0x508>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d118      	bne.n	8004e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e58:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed4 <HAL_RCC_OscConfig+0x508>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed4 <HAL_RCC_OscConfig+0x508>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e64:	f7fd fdf0 	bl	8002a48 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fd fdec 	bl	8002a48 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e17a      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_RCC_OscConfig+0x508>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d108      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4d8>
 8004e92:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e98:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea2:	e029      	b.n	8004ef8 <HAL_RCC_OscConfig+0x52c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d115      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x50c>
 8004eac:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb2:	4a07      	ldr	r2, [pc, #28]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ebc:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	4a03      	ldr	r2, [pc, #12]	@ (8004ed0 <HAL_RCC_OscConfig+0x504>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ecc:	e014      	b.n	8004ef8 <HAL_RCC_OscConfig+0x52c>
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	4b9c      	ldr	r3, [pc, #624]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ede:	4a9b      	ldr	r2, [pc, #620]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee8:	4b98      	ldr	r3, [pc, #608]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eee:	4a97      	ldr	r2, [pc, #604]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004ef0:	f023 0304 	bic.w	r3, r3, #4
 8004ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d016      	beq.n	8004f2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fd fda2 	bl	8002a48 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f08:	f7fd fd9e 	bl	8002a48 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e12a      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1e:	4b8b      	ldr	r3, [pc, #556]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0ed      	beq.n	8004f08 <HAL_RCC_OscConfig+0x53c>
 8004f2c:	e015      	b.n	8004f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2e:	f7fd fd8b 	bl	8002a48 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f36:	f7fd fd87 	bl	8002a48 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e113      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f4c:	4b7f      	ldr	r3, [pc, #508]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ed      	bne.n	8004f36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f5a:	7ffb      	ldrb	r3, [r7, #31]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f60:	4b7a      	ldr	r3, [pc, #488]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f64:	4a79      	ldr	r2, [pc, #484]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80fe 	beq.w	8005172 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	f040 80d0 	bne.w	8005120 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f80:	4b72      	ldr	r3, [pc, #456]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f003 0203 	and.w	r2, r3, #3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d130      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d127      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d11f      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fc0:	2a07      	cmp	r2, #7
 8004fc2:	bf14      	ite	ne
 8004fc4:	2201      	movne	r2, #1
 8004fc6:	2200      	moveq	r2, #0
 8004fc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d113      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d109      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d06e      	beq.n	80050d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b0c      	cmp	r3, #12
 8004ffa:	d069      	beq.n	80050d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ffc:	4b53      	ldr	r3, [pc, #332]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d105      	bne.n	8005014 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005008:	4b50      	ldr	r3, [pc, #320]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0ad      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005018:	4b4c      	ldr	r3, [pc, #304]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a4b      	ldr	r2, [pc, #300]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 800501e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005022:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005024:	f7fd fd10 	bl	8002a48 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502c:	f7fd fd0c 	bl	8002a48 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e09a      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800503e:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800504a:	4b40      	ldr	r3, [pc, #256]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	4b40      	ldr	r3, [pc, #256]	@ (8005150 <HAL_RCC_OscConfig+0x784>)
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800505a:	3a01      	subs	r2, #1
 800505c:	0112      	lsls	r2, r2, #4
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005064:	0212      	lsls	r2, r2, #8
 8005066:	4311      	orrs	r1, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800506c:	0852      	lsrs	r2, r2, #1
 800506e:	3a01      	subs	r2, #1
 8005070:	0552      	lsls	r2, r2, #21
 8005072:	4311      	orrs	r1, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005078:	0852      	lsrs	r2, r2, #1
 800507a:	3a01      	subs	r2, #1
 800507c:	0652      	lsls	r2, r2, #25
 800507e:	4311      	orrs	r1, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005084:	0912      	lsrs	r2, r2, #4
 8005086:	0452      	lsls	r2, r2, #17
 8005088:	430a      	orrs	r2, r1
 800508a:	4930      	ldr	r1, [pc, #192]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 800508c:	4313      	orrs	r3, r2
 800508e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005090:	4b2e      	ldr	r3, [pc, #184]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2d      	ldr	r2, [pc, #180]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8005096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800509a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800509c:	4b2b      	ldr	r3, [pc, #172]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a2a      	ldr	r2, [pc, #168]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 80050a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050a8:	f7fd fcce 	bl	8002a48 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b0:	f7fd fcca 	bl	8002a48 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e058      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c2:	4b22      	ldr	r3, [pc, #136]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050ce:	e050      	b.n	8005172 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e04f      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d4:	4b1d      	ldr	r3, [pc, #116]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d148      	bne.n	8005172 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050e0:	4b1a      	ldr	r3, [pc, #104]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a19      	ldr	r2, [pc, #100]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 80050e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050ec:	4b17      	ldr	r3, [pc, #92]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a16      	ldr	r2, [pc, #88]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 80050f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050f8:	f7fd fca6 	bl	8002a48 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005100:	f7fd fca2 	bl	8002a48 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e030      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005112:	4b0e      	ldr	r3, [pc, #56]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0x734>
 800511e:	e028      	b.n	8005172 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b0c      	cmp	r3, #12
 8005124:	d023      	beq.n	800516e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005126:	4b09      	ldr	r3, [pc, #36]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a08      	ldr	r2, [pc, #32]	@ (800514c <HAL_RCC_OscConfig+0x780>)
 800512c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	f7fd fc89 	bl	8002a48 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005138:	e00c      	b.n	8005154 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513a:	f7fd fc85 	bl	8002a48 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d905      	bls.n	8005154 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e013      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
 800514c:	40021000 	.word	0x40021000
 8005150:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005154:	4b09      	ldr	r3, [pc, #36]	@ (800517c <HAL_RCC_OscConfig+0x7b0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ec      	bne.n	800513a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005160:	4b06      	ldr	r3, [pc, #24]	@ (800517c <HAL_RCC_OscConfig+0x7b0>)
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	4905      	ldr	r1, [pc, #20]	@ (800517c <HAL_RCC_OscConfig+0x7b0>)
 8005166:	4b06      	ldr	r3, [pc, #24]	@ (8005180 <HAL_RCC_OscConfig+0x7b4>)
 8005168:	4013      	ands	r3, r2
 800516a:	60cb      	str	r3, [r1, #12]
 800516c:	e001      	b.n	8005172 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40021000 	.word	0x40021000
 8005180:	feeefffc 	.word	0xfeeefffc

08005184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0e7      	b.n	8005368 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005198:	4b75      	ldr	r3, [pc, #468]	@ (8005370 <HAL_RCC_ClockConfig+0x1ec>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d910      	bls.n	80051c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b72      	ldr	r3, [pc, #456]	@ (8005370 <HAL_RCC_ClockConfig+0x1ec>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 0207 	bic.w	r2, r3, #7
 80051ae:	4970      	ldr	r1, [pc, #448]	@ (8005370 <HAL_RCC_ClockConfig+0x1ec>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005370 <HAL_RCC_ClockConfig+0x1ec>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e0cf      	b.n	8005368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d010      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	4b66      	ldr	r3, [pc, #408]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d908      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e4:	4b63      	ldr	r3, [pc, #396]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4960      	ldr	r1, [pc, #384]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d04c      	beq.n	800529c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d107      	bne.n	800521a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520a:	4b5a      	ldr	r3, [pc, #360]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d121      	bne.n	800525a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0a6      	b.n	8005368 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005222:	4b54      	ldr	r3, [pc, #336]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d115      	bne.n	800525a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e09a      	b.n	8005368 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800523a:	4b4e      	ldr	r3, [pc, #312]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e08e      	b.n	8005368 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800524a:	4b4a      	ldr	r3, [pc, #296]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e086      	b.n	8005368 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b46      	ldr	r3, [pc, #280]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4943      	ldr	r1, [pc, #268]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526c:	f7fd fbec 	bl	8002a48 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fd fbe8 	bl	8002a48 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e06e      	b.n	8005368 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b3a      	ldr	r3, [pc, #232]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	4b31      	ldr	r3, [pc, #196]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d208      	bcs.n	80052ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	492b      	ldr	r1, [pc, #172]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052ca:	4b29      	ldr	r3, [pc, #164]	@ (8005370 <HAL_RCC_ClockConfig+0x1ec>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d210      	bcs.n	80052fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d8:	4b25      	ldr	r3, [pc, #148]	@ (8005370 <HAL_RCC_ClockConfig+0x1ec>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f023 0207 	bic.w	r2, r3, #7
 80052e0:	4923      	ldr	r1, [pc, #140]	@ (8005370 <HAL_RCC_ClockConfig+0x1ec>)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e8:	4b21      	ldr	r3, [pc, #132]	@ (8005370 <HAL_RCC_ClockConfig+0x1ec>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d001      	beq.n	80052fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e036      	b.n	8005368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005306:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	4918      	ldr	r1, [pc, #96]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 8005314:	4313      	orrs	r3, r2
 8005316:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005324:	4b13      	ldr	r3, [pc, #76]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	4910      	ldr	r1, [pc, #64]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 8005334:	4313      	orrs	r3, r2
 8005336:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005338:	f000 f824 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 800533c:	4602      	mov	r2, r0
 800533e:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <HAL_RCC_ClockConfig+0x1f0>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	490b      	ldr	r1, [pc, #44]	@ (8005378 <HAL_RCC_ClockConfig+0x1f4>)
 800534a:	5ccb      	ldrb	r3, [r1, r3]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
 8005354:	4a09      	ldr	r2, [pc, #36]	@ (800537c <HAL_RCC_ClockConfig+0x1f8>)
 8005356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005358:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <HAL_RCC_ClockConfig+0x1fc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f7fd fb23 	bl	80029a8 <HAL_InitTick>
 8005362:	4603      	mov	r3, r0
 8005364:	72fb      	strb	r3, [r7, #11]

  return status;
 8005366:	7afb      	ldrb	r3, [r7, #11]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40022000 	.word	0x40022000
 8005374:	40021000 	.word	0x40021000
 8005378:	080103ec 	.word	0x080103ec
 800537c:	200000f0 	.word	0x200000f0
 8005380:	200000f4 	.word	0x200000f4

08005384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	@ 0x24
 8005388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	2300      	movs	r3, #0
 8005390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005392:	4b3e      	ldr	r3, [pc, #248]	@ (800548c <HAL_RCC_GetSysClockFreq+0x108>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800539c:	4b3b      	ldr	r3, [pc, #236]	@ (800548c <HAL_RCC_GetSysClockFreq+0x108>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0x34>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b0c      	cmp	r3, #12
 80053b0:	d121      	bne.n	80053f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d11e      	bne.n	80053f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053b8:	4b34      	ldr	r3, [pc, #208]	@ (800548c <HAL_RCC_GetSysClockFreq+0x108>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d107      	bne.n	80053d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053c4:	4b31      	ldr	r3, [pc, #196]	@ (800548c <HAL_RCC_GetSysClockFreq+0x108>)
 80053c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ca:	0a1b      	lsrs	r3, r3, #8
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	e005      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053d4:	4b2d      	ldr	r3, [pc, #180]	@ (800548c <HAL_RCC_GetSysClockFreq+0x108>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10d      	bne.n	800540c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053f4:	e00a      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d102      	bne.n	8005402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053fc:	4b25      	ldr	r3, [pc, #148]	@ (8005494 <HAL_RCC_GetSysClockFreq+0x110>)
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e004      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d101      	bne.n	800540c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005408:	4b22      	ldr	r3, [pc, #136]	@ (8005494 <HAL_RCC_GetSysClockFreq+0x110>)
 800540a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d134      	bne.n	800547c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005412:	4b1e      	ldr	r3, [pc, #120]	@ (800548c <HAL_RCC_GetSysClockFreq+0x108>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d003      	beq.n	800542a <HAL_RCC_GetSysClockFreq+0xa6>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d003      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0xac>
 8005428:	e005      	b.n	8005436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800542a:	4b1a      	ldr	r3, [pc, #104]	@ (8005494 <HAL_RCC_GetSysClockFreq+0x110>)
 800542c:	617b      	str	r3, [r7, #20]
      break;
 800542e:	e005      	b.n	800543c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005430:	4b18      	ldr	r3, [pc, #96]	@ (8005494 <HAL_RCC_GetSysClockFreq+0x110>)
 8005432:	617b      	str	r3, [r7, #20]
      break;
 8005434:	e002      	b.n	800543c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	617b      	str	r3, [r7, #20]
      break;
 800543a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800543c:	4b13      	ldr	r3, [pc, #76]	@ (800548c <HAL_RCC_GetSysClockFreq+0x108>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	091b      	lsrs	r3, r3, #4
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	3301      	adds	r3, #1
 8005448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800544a:	4b10      	ldr	r3, [pc, #64]	@ (800548c <HAL_RCC_GetSysClockFreq+0x108>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	fb03 f202 	mul.w	r2, r3, r2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005462:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <HAL_RCC_GetSysClockFreq+0x108>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	0e5b      	lsrs	r3, r3, #25
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	3301      	adds	r3, #1
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
 800547a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800547c:	69bb      	ldr	r3, [r7, #24]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3724      	adds	r7, #36	@ 0x24
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40021000 	.word	0x40021000
 8005490:	08010404 	.word	0x08010404
 8005494:	00f42400 	.word	0x00f42400

08005498 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800549c:	4b03      	ldr	r3, [pc, #12]	@ (80054ac <HAL_RCC_GetHCLKFreq+0x14>)
 800549e:	681b      	ldr	r3, [r3, #0]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	200000f0 	.word	0x200000f0

080054b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054b4:	f7ff fff0 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 80054b8:	4602      	mov	r2, r0
 80054ba:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	4904      	ldr	r1, [pc, #16]	@ (80054d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054c6:	5ccb      	ldrb	r3, [r1, r3]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40021000 	.word	0x40021000
 80054d8:	080103fc 	.word	0x080103fc

080054dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054e0:	f7ff ffda 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 80054e4:	4602      	mov	r2, r0
 80054e6:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	0adb      	lsrs	r3, r3, #11
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	4904      	ldr	r1, [pc, #16]	@ (8005504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054f2:	5ccb      	ldrb	r3, [r1, r3]
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40021000 	.word	0x40021000
 8005504:	080103fc 	.word	0x080103fc

08005508 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005514:	4b2a      	ldr	r3, [pc, #168]	@ (80055c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005520:	f7ff f9e0 	bl	80048e4 <HAL_PWREx_GetVoltageRange>
 8005524:	6178      	str	r0, [r7, #20]
 8005526:	e014      	b.n	8005552 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005528:	4b25      	ldr	r3, [pc, #148]	@ (80055c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800552a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552c:	4a24      	ldr	r2, [pc, #144]	@ (80055c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800552e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005532:	6593      	str	r3, [r2, #88]	@ 0x58
 8005534:	4b22      	ldr	r3, [pc, #136]	@ (80055c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005540:	f7ff f9d0 	bl	80048e4 <HAL_PWREx_GetVoltageRange>
 8005544:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005546:	4b1e      	ldr	r3, [pc, #120]	@ (80055c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554a:	4a1d      	ldr	r2, [pc, #116]	@ (80055c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800554c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005550:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005558:	d10b      	bne.n	8005572 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b80      	cmp	r3, #128	@ 0x80
 800555e:	d919      	bls.n	8005594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2ba0      	cmp	r3, #160	@ 0xa0
 8005564:	d902      	bls.n	800556c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005566:	2302      	movs	r3, #2
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	e013      	b.n	8005594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800556c:	2301      	movs	r3, #1
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	e010      	b.n	8005594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b80      	cmp	r3, #128	@ 0x80
 8005576:	d902      	bls.n	800557e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005578:	2303      	movs	r3, #3
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	e00a      	b.n	8005594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b80      	cmp	r3, #128	@ 0x80
 8005582:	d102      	bne.n	800558a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005584:	2302      	movs	r3, #2
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	e004      	b.n	8005594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b70      	cmp	r3, #112	@ 0x70
 800558e:	d101      	bne.n	8005594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005590:	2301      	movs	r3, #1
 8005592:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005594:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 0207 	bic.w	r2, r3, #7
 800559c:	4909      	ldr	r1, [pc, #36]	@ (80055c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055a4:	4b07      	ldr	r3, [pc, #28]	@ (80055c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d001      	beq.n	80055b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40022000 	.word	0x40022000

080055c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055d0:	2300      	movs	r3, #0
 80055d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055d4:	2300      	movs	r3, #0
 80055d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d041      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055ec:	d02a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055f2:	d824      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055f8:	d008      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055fe:	d81e      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005608:	d010      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800560a:	e018      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800560c:	4b86      	ldr	r3, [pc, #536]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a85      	ldr	r2, [pc, #532]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005616:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005618:	e015      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3304      	adds	r3, #4
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fabb 	bl	8005b9c <RCCEx_PLLSAI1_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800562a:	e00c      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3320      	adds	r3, #32
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fba6 	bl	8005d84 <RCCEx_PLLSAI2_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800563c:	e003      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	74fb      	strb	r3, [r7, #19]
      break;
 8005642:	e000      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800564c:	4b76      	ldr	r3, [pc, #472]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005652:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800565a:	4973      	ldr	r1, [pc, #460]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005662:	e001      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d041      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005678:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800567c:	d02a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800567e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005682:	d824      	bhi.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005684:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005688:	d008      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800568a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800568e:	d81e      	bhi.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005694:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005698:	d010      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800569a:	e018      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800569c:	4b62      	ldr	r3, [pc, #392]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a61      	ldr	r2, [pc, #388]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056a8:	e015      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	2100      	movs	r1, #0
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fa73 	bl	8005b9c <RCCEx_PLLSAI1_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056ba:	e00c      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3320      	adds	r3, #32
 80056c0:	2100      	movs	r1, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fb5e 	bl	8005d84 <RCCEx_PLLSAI2_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	74fb      	strb	r3, [r7, #19]
      break;
 80056d2:	e000      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80056d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d6:	7cfb      	ldrb	r3, [r7, #19]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056dc:	4b52      	ldr	r3, [pc, #328]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056ea:	494f      	ldr	r1, [pc, #316]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056f2:	e001      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f4:	7cfb      	ldrb	r3, [r7, #19]
 80056f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80a0 	beq.w	8005846 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005706:	2300      	movs	r3, #0
 8005708:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800570a:	4b47      	ldr	r3, [pc, #284]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800571a:	2300      	movs	r3, #0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005720:	4b41      	ldr	r3, [pc, #260]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005724:	4a40      	ldr	r2, [pc, #256]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800572a:	6593      	str	r3, [r2, #88]	@ 0x58
 800572c:	4b3e      	ldr	r3, [pc, #248]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005738:	2301      	movs	r3, #1
 800573a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800573c:	4b3b      	ldr	r3, [pc, #236]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a3a      	ldr	r2, [pc, #232]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005746:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005748:	f7fd f97e 	bl	8002a48 <HAL_GetTick>
 800574c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800574e:	e009      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005750:	f7fd f97a 	bl	8002a48 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d902      	bls.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	74fb      	strb	r3, [r7, #19]
        break;
 8005762:	e005      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005764:	4b31      	ldr	r3, [pc, #196]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ef      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005770:	7cfb      	ldrb	r3, [r7, #19]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d15c      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005776:	4b2c      	ldr	r3, [pc, #176]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005780:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01f      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	429a      	cmp	r2, r3
 8005792:	d019      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005794:	4b24      	ldr	r3, [pc, #144]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057a0:	4b21      	ldr	r3, [pc, #132]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a6:	4a20      	ldr	r2, [pc, #128]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057c0:	4a19      	ldr	r2, [pc, #100]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d016      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d2:	f7fd f939 	bl	8002a48 <HAL_GetTick>
 80057d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d8:	e00b      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057da:	f7fd f935 	bl	8002a48 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d902      	bls.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	74fb      	strb	r3, [r7, #19]
            break;
 80057f0:	e006      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ec      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005800:	7cfb      	ldrb	r3, [r7, #19]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10c      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005806:	4b08      	ldr	r3, [pc, #32]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005816:	4904      	ldr	r1, [pc, #16]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800581e:	e009      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	74bb      	strb	r3, [r7, #18]
 8005824:	e006      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000
 800582c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	7cfb      	ldrb	r3, [r7, #19]
 8005832:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005834:	7c7b      	ldrb	r3, [r7, #17]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d105      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800583a:	4b9e      	ldr	r3, [pc, #632]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583e:	4a9d      	ldr	r2, [pc, #628]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005844:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005852:	4b98      	ldr	r3, [pc, #608]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005858:	f023 0203 	bic.w	r2, r3, #3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	4994      	ldr	r1, [pc, #592]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005874:	4b8f      	ldr	r3, [pc, #572]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587a:	f023 020c 	bic.w	r2, r3, #12
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005882:	498c      	ldr	r1, [pc, #560]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005896:	4b87      	ldr	r3, [pc, #540]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	4983      	ldr	r1, [pc, #524]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058b8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c6:	497b      	ldr	r1, [pc, #492]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058da:	4b76      	ldr	r3, [pc, #472]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e8:	4972      	ldr	r1, [pc, #456]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058fc:	4b6d      	ldr	r3, [pc, #436]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590a:	496a      	ldr	r1, [pc, #424]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800591e:	4b65      	ldr	r3, [pc, #404]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005924:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592c:	4961      	ldr	r1, [pc, #388]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005940:	4b5c      	ldr	r3, [pc, #368]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594e:	4959      	ldr	r1, [pc, #356]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005962:	4b54      	ldr	r3, [pc, #336]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005968:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005970:	4950      	ldr	r1, [pc, #320]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005984:	4b4b      	ldr	r3, [pc, #300]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005992:	4948      	ldr	r1, [pc, #288]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059a6:	4b43      	ldr	r3, [pc, #268]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b4:	493f      	ldr	r1, [pc, #252]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d028      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059c8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d6:	4937      	ldr	r1, [pc, #220]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059e6:	d106      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e8:	4b32      	ldr	r3, [pc, #200]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4a31      	ldr	r2, [pc, #196]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059f2:	60d3      	str	r3, [r2, #12]
 80059f4:	e011      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059fe:	d10c      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	2101      	movs	r1, #1
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f8c8 	bl	8005b9c <RCCEx_PLLSAI1_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d028      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a26:	4b23      	ldr	r3, [pc, #140]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a34:	491f      	ldr	r1, [pc, #124]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a44:	d106      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a46:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a50:	60d3      	str	r3, [r2, #12]
 8005a52:	e011      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3304      	adds	r3, #4
 8005a62:	2101      	movs	r1, #1
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 f899 	bl	8005b9c <RCCEx_PLLSAI1_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a6e:	7cfb      	ldrb	r3, [r7, #19]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d02b      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a84:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a92:	4908      	ldr	r1, [pc, #32]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aa2:	d109      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa4:	4b03      	ldr	r3, [pc, #12]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4a02      	ldr	r2, [pc, #8]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aae:	60d3      	str	r3, [r2, #12]
 8005ab0:	e014      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005ab2:	bf00      	nop
 8005ab4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005abc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ac0:	d10c      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 f867 	bl	8005b9c <RCCEx_PLLSAI1_Config>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ad2:	7cfb      	ldrb	r3, [r7, #19]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005ad8:	7cfb      	ldrb	r3, [r7, #19]
 8005ada:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d02f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005af6:	4928      	ldr	r1, [pc, #160]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b06:	d10d      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	2102      	movs	r1, #2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 f844 	bl	8005b9c <RCCEx_PLLSAI1_Config>
 8005b14:	4603      	mov	r3, r0
 8005b16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b18:	7cfb      	ldrb	r3, [r7, #19]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d014      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b1e:	7cfb      	ldrb	r3, [r7, #19]
 8005b20:	74bb      	strb	r3, [r7, #18]
 8005b22:	e011      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b2c:	d10c      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3320      	adds	r3, #32
 8005b32:	2102      	movs	r1, #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 f925 	bl	8005d84 <RCCEx_PLLSAI2_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b3e:	7cfb      	ldrb	r3, [r7, #19]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b44:	7cfb      	ldrb	r3, [r7, #19]
 8005b46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b54:	4b10      	ldr	r3, [pc, #64]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b62:	490d      	ldr	r1, [pc, #52]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b76:	4b08      	ldr	r3, [pc, #32]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b86:	4904      	ldr	r1, [pc, #16]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40021000 	.word	0x40021000

08005b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005baa:	4b75      	ldr	r3, [pc, #468]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d018      	beq.n	8005be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005bb6:	4b72      	ldr	r3, [pc, #456]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0203 	and.w	r2, r3, #3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d10d      	bne.n	8005be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005bce:	4b6c      	ldr	r3, [pc, #432]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d047      	beq.n	8005c72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	73fb      	strb	r3, [r7, #15]
 8005be6:	e044      	b.n	8005c72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d018      	beq.n	8005c22 <RCCEx_PLLSAI1_Config+0x86>
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d825      	bhi.n	8005c40 <RCCEx_PLLSAI1_Config+0xa4>
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d002      	beq.n	8005bfe <RCCEx_PLLSAI1_Config+0x62>
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d009      	beq.n	8005c10 <RCCEx_PLLSAI1_Config+0x74>
 8005bfc:	e020      	b.n	8005c40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bfe:	4b60      	ldr	r3, [pc, #384]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d11d      	bne.n	8005c46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c0e:	e01a      	b.n	8005c46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c10:	4b5b      	ldr	r3, [pc, #364]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d116      	bne.n	8005c4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c20:	e013      	b.n	8005c4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c22:	4b57      	ldr	r3, [pc, #348]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c2e:	4b54      	ldr	r3, [pc, #336]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c3e:	e006      	b.n	8005c4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
      break;
 8005c44:	e004      	b.n	8005c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c46:	bf00      	nop
 8005c48:	e002      	b.n	8005c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e000      	b.n	8005c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10d      	bne.n	8005c72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c56:	4b4a      	ldr	r3, [pc, #296]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6819      	ldr	r1, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	4944      	ldr	r1, [pc, #272]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d17d      	bne.n	8005d74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c78:	4b41      	ldr	r3, [pc, #260]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a40      	ldr	r2, [pc, #256]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c84:	f7fc fee0 	bl	8002a48 <HAL_GetTick>
 8005c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c8a:	e009      	b.n	8005ca0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c8c:	f7fc fedc 	bl	8002a48 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d902      	bls.n	8005ca0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c9e:	e005      	b.n	8005cac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ca0:	4b37      	ldr	r3, [pc, #220]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1ef      	bne.n	8005c8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d160      	bne.n	8005d74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d111      	bne.n	8005cdc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cb8:	4b31      	ldr	r3, [pc, #196]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6892      	ldr	r2, [r2, #8]
 8005cc8:	0211      	lsls	r1, r2, #8
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68d2      	ldr	r2, [r2, #12]
 8005cce:	0912      	lsrs	r2, r2, #4
 8005cd0:	0452      	lsls	r2, r2, #17
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	492a      	ldr	r1, [pc, #168]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	610b      	str	r3, [r1, #16]
 8005cda:	e027      	b.n	8005d2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d112      	bne.n	8005d08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ce2:	4b27      	ldr	r3, [pc, #156]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005cea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6892      	ldr	r2, [r2, #8]
 8005cf2:	0211      	lsls	r1, r2, #8
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6912      	ldr	r2, [r2, #16]
 8005cf8:	0852      	lsrs	r2, r2, #1
 8005cfa:	3a01      	subs	r2, #1
 8005cfc:	0552      	lsls	r2, r2, #21
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	491f      	ldr	r1, [pc, #124]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	610b      	str	r3, [r1, #16]
 8005d06:	e011      	b.n	8005d2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d08:	4b1d      	ldr	r3, [pc, #116]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6892      	ldr	r2, [r2, #8]
 8005d18:	0211      	lsls	r1, r2, #8
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6952      	ldr	r2, [r2, #20]
 8005d1e:	0852      	lsrs	r2, r2, #1
 8005d20:	3a01      	subs	r2, #1
 8005d22:	0652      	lsls	r2, r2, #25
 8005d24:	430a      	orrs	r2, r1
 8005d26:	4916      	ldr	r1, [pc, #88]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d2c:	4b14      	ldr	r3, [pc, #80]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a13      	ldr	r2, [pc, #76]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d38:	f7fc fe86 	bl	8002a48 <HAL_GetTick>
 8005d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d3e:	e009      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d40:	f7fc fe82 	bl	8002a48 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d902      	bls.n	8005d54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	73fb      	strb	r3, [r7, #15]
          break;
 8005d52:	e005      	b.n	8005d60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d54:	4b0a      	ldr	r3, [pc, #40]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ef      	beq.n	8005d40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d66:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	4904      	ldr	r1, [pc, #16]	@ (8005d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40021000 	.word	0x40021000

08005d84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d92:	4b6a      	ldr	r3, [pc, #424]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d018      	beq.n	8005dd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d9e:	4b67      	ldr	r3, [pc, #412]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0203 	and.w	r2, r3, #3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d10d      	bne.n	8005dca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
       ||
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005db6:	4b61      	ldr	r3, [pc, #388]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	091b      	lsrs	r3, r3, #4
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d047      	beq.n	8005e5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
 8005dce:	e044      	b.n	8005e5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d018      	beq.n	8005e0a <RCCEx_PLLSAI2_Config+0x86>
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d825      	bhi.n	8005e28 <RCCEx_PLLSAI2_Config+0xa4>
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d002      	beq.n	8005de6 <RCCEx_PLLSAI2_Config+0x62>
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d009      	beq.n	8005df8 <RCCEx_PLLSAI2_Config+0x74>
 8005de4:	e020      	b.n	8005e28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005de6:	4b55      	ldr	r3, [pc, #340]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d11d      	bne.n	8005e2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df6:	e01a      	b.n	8005e2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005df8:	4b50      	ldr	r3, [pc, #320]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d116      	bne.n	8005e32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e08:	e013      	b.n	8005e32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10f      	bne.n	8005e36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e16:	4b49      	ldr	r3, [pc, #292]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e26:	e006      	b.n	8005e36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2c:	e004      	b.n	8005e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e002      	b.n	8005e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e32:	bf00      	nop
 8005e34:	e000      	b.n	8005e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10d      	bne.n	8005e5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6819      	ldr	r1, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	430b      	orrs	r3, r1
 8005e54:	4939      	ldr	r1, [pc, #228]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d167      	bne.n	8005f30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e60:	4b36      	ldr	r3, [pc, #216]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a35      	ldr	r2, [pc, #212]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6c:	f7fc fdec 	bl	8002a48 <HAL_GetTick>
 8005e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e72:	e009      	b.n	8005e88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e74:	f7fc fde8 	bl	8002a48 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d902      	bls.n	8005e88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	73fb      	strb	r3, [r7, #15]
        break;
 8005e86:	e005      	b.n	8005e94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e88:	4b2c      	ldr	r3, [pc, #176]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1ef      	bne.n	8005e74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d14a      	bne.n	8005f30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d111      	bne.n	8005ec4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ea0:	4b26      	ldr	r3, [pc, #152]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6892      	ldr	r2, [r2, #8]
 8005eb0:	0211      	lsls	r1, r2, #8
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68d2      	ldr	r2, [r2, #12]
 8005eb6:	0912      	lsrs	r2, r2, #4
 8005eb8:	0452      	lsls	r2, r2, #17
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	491f      	ldr	r1, [pc, #124]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	614b      	str	r3, [r1, #20]
 8005ec2:	e011      	b.n	8005ee8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ecc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6892      	ldr	r2, [r2, #8]
 8005ed4:	0211      	lsls	r1, r2, #8
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6912      	ldr	r2, [r2, #16]
 8005eda:	0852      	lsrs	r2, r2, #1
 8005edc:	3a01      	subs	r2, #1
 8005ede:	0652      	lsls	r2, r2, #25
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	4916      	ldr	r1, [pc, #88]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ee8:	4b14      	ldr	r3, [pc, #80]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a13      	ldr	r2, [pc, #76]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef4:	f7fc fda8 	bl	8002a48 <HAL_GetTick>
 8005ef8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005efa:	e009      	b.n	8005f10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005efc:	f7fc fda4 	bl	8002a48 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d902      	bls.n	8005f10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	73fb      	strb	r3, [r7, #15]
          break;
 8005f0e:	e005      	b.n	8005f1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f10:	4b0a      	ldr	r3, [pc, #40]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ef      	beq.n	8005efc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f22:	4b06      	ldr	r3, [pc, #24]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	4904      	ldr	r1, [pc, #16]	@ (8005f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40021000 	.word	0x40021000

08005f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e049      	b.n	8005fe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fc f8d4 	bl	8002114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f000 fd1c 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d001      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e04f      	b.n	80060a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a23      	ldr	r2, [pc, #140]	@ (80060b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01d      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006032:	d018      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1f      	ldr	r2, [pc, #124]	@ (80060b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1e      	ldr	r2, [pc, #120]	@ (80060bc <HAL_TIM_Base_Start_IT+0xcc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1b      	ldr	r2, [pc, #108]	@ (80060c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d115      	bne.n	8006092 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <HAL_TIM_Base_Start_IT+0xdc>)
 800606e:	4013      	ands	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d015      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0xb4>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800607e:	d011      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006090:	e008      	b.n	80060a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0201 	orr.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e000      	b.n	80060a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	00010007 	.word	0x00010007

080060d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a1a      	ldr	r2, [r3, #32]
 80060ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10f      	bne.n	8006118 <HAL_TIM_Base_Stop_IT+0x48>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6a1a      	ldr	r2, [r3, #32]
 80060fe:	f240 4344 	movw	r3, #1092	@ 0x444
 8006102:	4013      	ands	r3, r2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d107      	bne.n	8006118 <HAL_TIM_Base_Stop_IT+0x48>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e049      	b.n	80061d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f841 	bl	80061dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f000 fc25 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f001 f883 	bl	800730e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a3e      	ldr	r2, [pc, #248]	@ (8006308 <HAL_TIM_PWM_Stop+0x118>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <HAL_TIM_PWM_Stop+0x4a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a3d      	ldr	r2, [pc, #244]	@ (800630c <HAL_TIM_PWM_Stop+0x11c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00e      	beq.n	800623a <HAL_TIM_PWM_Stop+0x4a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a3b      	ldr	r2, [pc, #236]	@ (8006310 <HAL_TIM_PWM_Stop+0x120>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d009      	beq.n	800623a <HAL_TIM_PWM_Stop+0x4a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a3a      	ldr	r2, [pc, #232]	@ (8006314 <HAL_TIM_PWM_Stop+0x124>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d004      	beq.n	800623a <HAL_TIM_PWM_Stop+0x4a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a38      	ldr	r2, [pc, #224]	@ (8006318 <HAL_TIM_PWM_Stop+0x128>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d101      	bne.n	800623e <HAL_TIM_PWM_Stop+0x4e>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <HAL_TIM_PWM_Stop+0x50>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10f      	bne.n	8006274 <HAL_TIM_PWM_Stop+0x84>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6a1a      	ldr	r2, [r3, #32]
 800625a:	f240 4344 	movw	r3, #1092	@ 0x444
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d107      	bne.n	8006274 <HAL_TIM_PWM_Stop+0x84>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006272:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6a1a      	ldr	r2, [r3, #32]
 800627a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800627e:	4013      	ands	r3, r2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10f      	bne.n	80062a4 <HAL_TIM_PWM_Stop+0xb4>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6a1a      	ldr	r2, [r3, #32]
 800628a:	f240 4344 	movw	r3, #1092	@ 0x444
 800628e:	4013      	ands	r3, r2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d107      	bne.n	80062a4 <HAL_TIM_PWM_Stop+0xb4>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0201 	bic.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <HAL_TIM_PWM_Stop+0xc4>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062b2:	e023      	b.n	80062fc <HAL_TIM_PWM_Stop+0x10c>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d104      	bne.n	80062c4 <HAL_TIM_PWM_Stop+0xd4>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c2:	e01b      	b.n	80062fc <HAL_TIM_PWM_Stop+0x10c>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d104      	bne.n	80062d4 <HAL_TIM_PWM_Stop+0xe4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062d2:	e013      	b.n	80062fc <HAL_TIM_PWM_Stop+0x10c>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b0c      	cmp	r3, #12
 80062d8:	d104      	bne.n	80062e4 <HAL_TIM_PWM_Stop+0xf4>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062e2:	e00b      	b.n	80062fc <HAL_TIM_PWM_Stop+0x10c>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d104      	bne.n	80062f4 <HAL_TIM_PWM_Stop+0x104>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062f2:	e003      	b.n	80062fc <HAL_TIM_PWM_Stop+0x10c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40013400 	.word	0x40013400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800

0800631c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d020      	beq.n	8006380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01b      	beq.n	8006380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0202 	mvn.w	r2, #2
 8006350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb09 	bl	800697e <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fafb 	bl	800696a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fb0c 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d020      	beq.n	80063cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01b      	beq.n	80063cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0204 	mvn.w	r2, #4
 800639c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fae3 	bl	800697e <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fad5 	bl	800696a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fae6 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d020      	beq.n	8006418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01b      	beq.n	8006418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0208 	mvn.w	r2, #8
 80063e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2204      	movs	r2, #4
 80063ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fabd 	bl	800697e <HAL_TIM_IC_CaptureCallback>
 8006404:	e005      	b.n	8006412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 faaf 	bl	800696a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fac0 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b00      	cmp	r3, #0
 8006420:	d020      	beq.n	8006464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01b      	beq.n	8006464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0210 	mvn.w	r2, #16
 8006434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2208      	movs	r2, #8
 800643a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa97 	bl	800697e <HAL_TIM_IC_CaptureCallback>
 8006450:	e005      	b.n	800645e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa89 	bl	800696a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fa9a 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00c      	beq.n	8006488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0201 	mvn.w	r2, #1
 8006480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fc fa1a 	bl	80028bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00c      	beq.n	80064b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d007      	beq.n	80064b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80064ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 f8bf 	bl	8007634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00c      	beq.n	80064da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 f8b7 	bl	8007648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00c      	beq.n	80064fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fa54 	bl	80069a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00c      	beq.n	8006522 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f06f 0220 	mvn.w	r2, #32
 800651a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 f87f 	bl	8007620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006546:	2302      	movs	r3, #2
 8006548:	e0ff      	b.n	800674a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b14      	cmp	r3, #20
 8006556:	f200 80f0 	bhi.w	800673a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800655a:	a201      	add	r2, pc, #4	@ (adr r2, 8006560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	080065b5 	.word	0x080065b5
 8006564:	0800673b 	.word	0x0800673b
 8006568:	0800673b 	.word	0x0800673b
 800656c:	0800673b 	.word	0x0800673b
 8006570:	080065f5 	.word	0x080065f5
 8006574:	0800673b 	.word	0x0800673b
 8006578:	0800673b 	.word	0x0800673b
 800657c:	0800673b 	.word	0x0800673b
 8006580:	08006637 	.word	0x08006637
 8006584:	0800673b 	.word	0x0800673b
 8006588:	0800673b 	.word	0x0800673b
 800658c:	0800673b 	.word	0x0800673b
 8006590:	08006677 	.word	0x08006677
 8006594:	0800673b 	.word	0x0800673b
 8006598:	0800673b 	.word	0x0800673b
 800659c:	0800673b 	.word	0x0800673b
 80065a0:	080066b9 	.word	0x080066b9
 80065a4:	0800673b 	.word	0x0800673b
 80065a8:	0800673b 	.word	0x0800673b
 80065ac:	0800673b 	.word	0x0800673b
 80065b0:	080066f9 	.word	0x080066f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 faa4 	bl	8006b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0208 	orr.w	r2, r2, #8
 80065ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0204 	bic.w	r2, r2, #4
 80065de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6999      	ldr	r1, [r3, #24]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	619a      	str	r2, [r3, #24]
      break;
 80065f2:	e0a5      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fb14 	bl	8006c28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800660e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800661e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6999      	ldr	r1, [r3, #24]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	021a      	lsls	r2, r3, #8
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	619a      	str	r2, [r3, #24]
      break;
 8006634:	e084      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fb7d 	bl	8006d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0208 	orr.w	r2, r2, #8
 8006650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0204 	bic.w	r2, r2, #4
 8006660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69d9      	ldr	r1, [r3, #28]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	61da      	str	r2, [r3, #28]
      break;
 8006674:	e064      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fbe5 	bl	8006e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69da      	ldr	r2, [r3, #28]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69d9      	ldr	r1, [r3, #28]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	021a      	lsls	r2, r3, #8
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	61da      	str	r2, [r3, #28]
      break;
 80066b6:	e043      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fc2e 	bl	8006f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0208 	orr.w	r2, r2, #8
 80066d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0204 	bic.w	r2, r2, #4
 80066e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80066f6:	e023      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fc72 	bl	8006fe8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006712:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006722:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	021a      	lsls	r2, r3, #8
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006738:	e002      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	75fb      	strb	r3, [r7, #23]
      break;
 800673e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006748:	7dfb      	ldrb	r3, [r7, #23]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop

08006754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIM_ConfigClockSource+0x1c>
 800676c:	2302      	movs	r3, #2
 800676e:	e0b6      	b.n	80068de <HAL_TIM_ConfigClockSource+0x18a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800678e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800679a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ac:	d03e      	beq.n	800682c <HAL_TIM_ConfigClockSource+0xd8>
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067b2:	f200 8087 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x170>
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ba:	f000 8086 	beq.w	80068ca <HAL_TIM_ConfigClockSource+0x176>
 80067be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c2:	d87f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x170>
 80067c4:	2b70      	cmp	r3, #112	@ 0x70
 80067c6:	d01a      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0xaa>
 80067c8:	2b70      	cmp	r3, #112	@ 0x70
 80067ca:	d87b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x170>
 80067cc:	2b60      	cmp	r3, #96	@ 0x60
 80067ce:	d050      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x11e>
 80067d0:	2b60      	cmp	r3, #96	@ 0x60
 80067d2:	d877      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x170>
 80067d4:	2b50      	cmp	r3, #80	@ 0x50
 80067d6:	d03c      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0xfe>
 80067d8:	2b50      	cmp	r3, #80	@ 0x50
 80067da:	d873      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x170>
 80067dc:	2b40      	cmp	r3, #64	@ 0x40
 80067de:	d058      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x13e>
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	d86f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x170>
 80067e4:	2b30      	cmp	r3, #48	@ 0x30
 80067e6:	d064      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x15e>
 80067e8:	2b30      	cmp	r3, #48	@ 0x30
 80067ea:	d86b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x170>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d060      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x15e>
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d867      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x170>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d05c      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x15e>
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d05a      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x15e>
 80067fc:	e062      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800680e:	f000 fd5e 	bl	80072ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	609a      	str	r2, [r3, #8]
      break;
 800682a:	e04f      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800683c:	f000 fd47 	bl	80072ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800684e:	609a      	str	r2, [r3, #8]
      break;
 8006850:	e03c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685e:	461a      	mov	r2, r3
 8006860:	f000 fcbb 	bl	80071da <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2150      	movs	r1, #80	@ 0x50
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fd14 	bl	8007298 <TIM_ITRx_SetConfig>
      break;
 8006870:	e02c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800687e:	461a      	mov	r2, r3
 8006880:	f000 fcda 	bl	8007238 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2160      	movs	r1, #96	@ 0x60
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fd04 	bl	8007298 <TIM_ITRx_SetConfig>
      break;
 8006890:	e01c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 fc9b 	bl	80071da <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2140      	movs	r1, #64	@ 0x40
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fcf4 	bl	8007298 <TIM_ITRx_SetConfig>
      break;
 80068b0:	e00c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4619      	mov	r1, r3
 80068bc:	4610      	mov	r0, r2
 80068be:	f000 fceb 	bl	8007298 <TIM_ITRx_SetConfig>
      break;
 80068c2:	e003      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	e000      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_TIM_SlaveConfigSynchro+0x18>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e031      	b.n	8006962 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fbcf 	bl	80070b4 <TIM_SlaveTimer_SetConfig>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d009      	beq.n	8006930 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e018      	b.n	8006962 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800693e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800694e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a46      	ldr	r2, [pc, #280]	@ (8006ae8 <TIM_Base_SetConfig+0x12c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069da:	d00f      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a43      	ldr	r2, [pc, #268]	@ (8006aec <TIM_Base_SetConfig+0x130>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a42      	ldr	r2, [pc, #264]	@ (8006af0 <TIM_Base_SetConfig+0x134>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a41      	ldr	r2, [pc, #260]	@ (8006af4 <TIM_Base_SetConfig+0x138>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a40      	ldr	r2, [pc, #256]	@ (8006af8 <TIM_Base_SetConfig+0x13c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a35      	ldr	r2, [pc, #212]	@ (8006ae8 <TIM_Base_SetConfig+0x12c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01f      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a1c:	d01b      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a32      	ldr	r2, [pc, #200]	@ (8006aec <TIM_Base_SetConfig+0x130>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d017      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a31      	ldr	r2, [pc, #196]	@ (8006af0 <TIM_Base_SetConfig+0x134>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a30      	ldr	r2, [pc, #192]	@ (8006af4 <TIM_Base_SetConfig+0x138>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00f      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2f      	ldr	r2, [pc, #188]	@ (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00b      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2e      	ldr	r2, [pc, #184]	@ (8006afc <TIM_Base_SetConfig+0x140>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d007      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2d      	ldr	r2, [pc, #180]	@ (8006b00 <TIM_Base_SetConfig+0x144>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2c      	ldr	r2, [pc, #176]	@ (8006b04 <TIM_Base_SetConfig+0x148>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d108      	bne.n	8006a68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ae8 <TIM_Base_SetConfig+0x12c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00f      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a18      	ldr	r2, [pc, #96]	@ (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	@ (8006afc <TIM_Base_SetConfig+0x140>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a16      	ldr	r2, [pc, #88]	@ (8006b00 <TIM_Base_SetConfig+0x144>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a15      	ldr	r2, [pc, #84]	@ (8006b04 <TIM_Base_SetConfig+0x148>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d103      	bne.n	8006abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d105      	bne.n	8006ada <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	611a      	str	r2, [r3, #16]
  }
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800

08006b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	f023 0201 	bic.w	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 0302 	bic.w	r3, r3, #2
 8006b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a2c      	ldr	r2, [pc, #176]	@ (8006c14 <TIM_OC1_SetConfig+0x10c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00f      	beq.n	8006b88 <TIM_OC1_SetConfig+0x80>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8006c18 <TIM_OC1_SetConfig+0x110>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00b      	beq.n	8006b88 <TIM_OC1_SetConfig+0x80>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2a      	ldr	r2, [pc, #168]	@ (8006c1c <TIM_OC1_SetConfig+0x114>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d007      	beq.n	8006b88 <TIM_OC1_SetConfig+0x80>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a29      	ldr	r2, [pc, #164]	@ (8006c20 <TIM_OC1_SetConfig+0x118>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_OC1_SetConfig+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a28      	ldr	r2, [pc, #160]	@ (8006c24 <TIM_OC1_SetConfig+0x11c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d10c      	bne.n	8006ba2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f023 0308 	bic.w	r3, r3, #8
 8006b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f023 0304 	bic.w	r3, r3, #4
 8006ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c14 <TIM_OC1_SetConfig+0x10c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00f      	beq.n	8006bca <TIM_OC1_SetConfig+0xc2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1a      	ldr	r2, [pc, #104]	@ (8006c18 <TIM_OC1_SetConfig+0x110>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00b      	beq.n	8006bca <TIM_OC1_SetConfig+0xc2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <TIM_OC1_SetConfig+0x114>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d007      	beq.n	8006bca <TIM_OC1_SetConfig+0xc2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a18      	ldr	r2, [pc, #96]	@ (8006c20 <TIM_OC1_SetConfig+0x118>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_OC1_SetConfig+0xc2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a17      	ldr	r2, [pc, #92]	@ (8006c24 <TIM_OC1_SetConfig+0x11c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d111      	bne.n	8006bee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	621a      	str	r2, [r3, #32]
}
 8006c08:	bf00      	nop
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	40012c00 	.word	0x40012c00
 8006c18:	40013400 	.word	0x40013400
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40014400 	.word	0x40014400
 8006c24:	40014800 	.word	0x40014800

08006c28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	f023 0210 	bic.w	r2, r3, #16
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0320 	bic.w	r3, r3, #32
 8006c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a28      	ldr	r2, [pc, #160]	@ (8006d28 <TIM_OC2_SetConfig+0x100>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d003      	beq.n	8006c94 <TIM_OC2_SetConfig+0x6c>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a27      	ldr	r2, [pc, #156]	@ (8006d2c <TIM_OC2_SetConfig+0x104>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d10d      	bne.n	8006cb0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <TIM_OC2_SetConfig+0x100>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00f      	beq.n	8006cd8 <TIM_OC2_SetConfig+0xb0>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a1c      	ldr	r2, [pc, #112]	@ (8006d2c <TIM_OC2_SetConfig+0x104>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00b      	beq.n	8006cd8 <TIM_OC2_SetConfig+0xb0>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006d30 <TIM_OC2_SetConfig+0x108>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <TIM_OC2_SetConfig+0xb0>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a1a      	ldr	r2, [pc, #104]	@ (8006d34 <TIM_OC2_SetConfig+0x10c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_OC2_SetConfig+0xb0>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a19      	ldr	r2, [pc, #100]	@ (8006d38 <TIM_OC2_SetConfig+0x110>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d113      	bne.n	8006d00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40013400 	.word	0x40013400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40014400 	.word	0x40014400
 8006d38:	40014800 	.word	0x40014800

08006d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a27      	ldr	r2, [pc, #156]	@ (8006e38 <TIM_OC3_SetConfig+0xfc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d003      	beq.n	8006da6 <TIM_OC3_SetConfig+0x6a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a26      	ldr	r2, [pc, #152]	@ (8006e3c <TIM_OC3_SetConfig+0x100>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d10d      	bne.n	8006dc2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e38 <TIM_OC3_SetConfig+0xfc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_OC3_SetConfig+0xae>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e3c <TIM_OC3_SetConfig+0x100>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_OC3_SetConfig+0xae>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e40 <TIM_OC3_SetConfig+0x104>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_OC3_SetConfig+0xae>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a19      	ldr	r2, [pc, #100]	@ (8006e44 <TIM_OC3_SetConfig+0x108>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_OC3_SetConfig+0xae>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a18      	ldr	r2, [pc, #96]	@ (8006e48 <TIM_OC3_SetConfig+0x10c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d113      	bne.n	8006e12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	621a      	str	r2, [r3, #32]
}
 8006e2c:	bf00      	nop
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800

08006e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a18      	ldr	r2, [pc, #96]	@ (8006f0c <TIM_OC4_SetConfig+0xc0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00f      	beq.n	8006ed0 <TIM_OC4_SetConfig+0x84>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a17      	ldr	r2, [pc, #92]	@ (8006f10 <TIM_OC4_SetConfig+0xc4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00b      	beq.n	8006ed0 <TIM_OC4_SetConfig+0x84>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a16      	ldr	r2, [pc, #88]	@ (8006f14 <TIM_OC4_SetConfig+0xc8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d007      	beq.n	8006ed0 <TIM_OC4_SetConfig+0x84>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a15      	ldr	r2, [pc, #84]	@ (8006f18 <TIM_OC4_SetConfig+0xcc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_OC4_SetConfig+0x84>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a14      	ldr	r2, [pc, #80]	@ (8006f1c <TIM_OC4_SetConfig+0xd0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d109      	bne.n	8006ee4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	019b      	lsls	r3, r3, #6
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800

08006f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a17      	ldr	r2, [pc, #92]	@ (8006fd4 <TIM_OC5_SetConfig+0xb4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00f      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a16      	ldr	r2, [pc, #88]	@ (8006fd8 <TIM_OC5_SetConfig+0xb8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00b      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a15      	ldr	r2, [pc, #84]	@ (8006fdc <TIM_OC5_SetConfig+0xbc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a14      	ldr	r2, [pc, #80]	@ (8006fe0 <TIM_OC5_SetConfig+0xc0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a13      	ldr	r2, [pc, #76]	@ (8006fe4 <TIM_OC5_SetConfig+0xc4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d109      	bne.n	8006fae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	40012c00 	.word	0x40012c00
 8006fd8:	40013400 	.word	0x40013400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40014400 	.word	0x40014400
 8006fe4:	40014800 	.word	0x40014800

08006fe8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800701a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800702e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	051b      	lsls	r3, r3, #20
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <TIM_OC6_SetConfig+0xb8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00f      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a17      	ldr	r2, [pc, #92]	@ (80070a4 <TIM_OC6_SetConfig+0xbc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00b      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a16      	ldr	r2, [pc, #88]	@ (80070a8 <TIM_OC6_SetConfig+0xc0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a15      	ldr	r2, [pc, #84]	@ (80070ac <TIM_OC6_SetConfig+0xc4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a14      	ldr	r2, [pc, #80]	@ (80070b0 <TIM_OC6_SetConfig+0xc8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d109      	bne.n	8007078 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800706a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	029b      	lsls	r3, r3, #10
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40013400 	.word	0x40013400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400
 80070b0:	40014800 	.word	0x40014800

080070b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070e2:	f023 0307 	bic.w	r3, r3, #7
 80070e6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b70      	cmp	r3, #112	@ 0x70
 8007100:	d01a      	beq.n	8007138 <TIM_SlaveTimer_SetConfig+0x84>
 8007102:	2b70      	cmp	r3, #112	@ 0x70
 8007104:	d860      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 8007106:	2b60      	cmp	r3, #96	@ 0x60
 8007108:	d054      	beq.n	80071b4 <TIM_SlaveTimer_SetConfig+0x100>
 800710a:	2b60      	cmp	r3, #96	@ 0x60
 800710c:	d85c      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 800710e:	2b50      	cmp	r3, #80	@ 0x50
 8007110:	d046      	beq.n	80071a0 <TIM_SlaveTimer_SetConfig+0xec>
 8007112:	2b50      	cmp	r3, #80	@ 0x50
 8007114:	d858      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 8007116:	2b40      	cmp	r3, #64	@ 0x40
 8007118:	d019      	beq.n	800714e <TIM_SlaveTimer_SetConfig+0x9a>
 800711a:	2b40      	cmp	r3, #64	@ 0x40
 800711c:	d854      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 800711e:	2b30      	cmp	r3, #48	@ 0x30
 8007120:	d055      	beq.n	80071ce <TIM_SlaveTimer_SetConfig+0x11a>
 8007122:	2b30      	cmp	r3, #48	@ 0x30
 8007124:	d850      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 8007126:	2b20      	cmp	r3, #32
 8007128:	d051      	beq.n	80071ce <TIM_SlaveTimer_SetConfig+0x11a>
 800712a:	2b20      	cmp	r3, #32
 800712c:	d84c      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d04d      	beq.n	80071ce <TIM_SlaveTimer_SetConfig+0x11a>
 8007132:	2b10      	cmp	r3, #16
 8007134:	d04b      	beq.n	80071ce <TIM_SlaveTimer_SetConfig+0x11a>
 8007136:	e047      	b.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007148:	f000 f8c1 	bl	80072ce <TIM_ETR_SetConfig>
      break;
 800714c:	e040      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b05      	cmp	r3, #5
 8007154:	d101      	bne.n	800715a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e03b      	b.n	80071d2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6a1a      	ldr	r2, [r3, #32]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0201 	bic.w	r2, r2, #1
 8007170:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007180:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	4313      	orrs	r3, r2
 800718c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	621a      	str	r2, [r3, #32]
      break;
 800719e:	e017      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ac:	461a      	mov	r2, r3
 80071ae:	f000 f814 	bl	80071da <TIM_TI1_ConfigInputStage>
      break;
 80071b2:	e00d      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c0:	461a      	mov	r2, r3
 80071c2:	f000 f839 	bl	8007238 <TIM_TI2_ConfigInputStage>
      break;
 80071c6:	e003      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
      break;
 80071cc:	e000      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80071ce:	bf00      	nop
  }

  return status;
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071da:	b480      	push	{r7}
 80071dc:	b087      	sub	sp, #28
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	f023 0201 	bic.w	r2, r3, #1
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 030a 	bic.w	r3, r3, #10
 8007216:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	621a      	str	r2, [r3, #32]
}
 800722c:	bf00      	nop
 800722e:	371c      	adds	r7, #28
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f023 0210 	bic.w	r2, r3, #16
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	031b      	lsls	r3, r3, #12
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007274:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	621a      	str	r2, [r3, #32]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f043 0307 	orr.w	r3, r3, #7
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	609a      	str	r2, [r3, #8]
}
 80072c2:	bf00      	nop
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b087      	sub	sp, #28
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	021a      	lsls	r2, r3, #8
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	431a      	orrs	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	609a      	str	r2, [r3, #8]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800730e:	b480      	push	{r7}
 8007310:	b087      	sub	sp, #28
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2201      	movs	r2, #1
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a1a      	ldr	r2, [r3, #32]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	43db      	mvns	r3, r3
 8007330:	401a      	ands	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a1a      	ldr	r2, [r3, #32]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	fa01 f303 	lsl.w	r3, r1, r3
 8007346:	431a      	orrs	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	621a      	str	r2, [r3, #32]
}
 800734c:	bf00      	nop
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2200      	movs	r2, #0
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 f976 	bl	800765c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6a1a      	ldr	r2, [r3, #32]
 8007376:	f241 1311 	movw	r3, #4369	@ 0x1111
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10f      	bne.n	80073a0 <HAL_TIMEx_PWMN_Stop+0x48>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6a1a      	ldr	r2, [r3, #32]
 8007386:	f240 4344 	movw	r3, #1092	@ 0x444
 800738a:	4013      	ands	r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d107      	bne.n	80073a0 <HAL_TIMEx_PWMN_Stop+0x48>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800739e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6a1a      	ldr	r2, [r3, #32]
 80073a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10f      	bne.n	80073d0 <HAL_TIMEx_PWMN_Stop+0x78>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a1a      	ldr	r2, [r3, #32]
 80073b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d107      	bne.n	80073d0 <HAL_TIMEx_PWMN_Stop+0x78>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0201 	bic.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <HAL_TIMEx_PWMN_Stop+0x88>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073de:	e013      	b.n	8007408 <HAL_TIMEx_PWMN_Stop+0xb0>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d104      	bne.n	80073f0 <HAL_TIMEx_PWMN_Stop+0x98>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073ee:	e00b      	b.n	8007408 <HAL_TIMEx_PWMN_Stop+0xb0>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d104      	bne.n	8007400 <HAL_TIMEx_PWMN_Stop+0xa8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073fe:	e003      	b.n	8007408 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007428:	2302      	movs	r3, #2
 800742a:	e068      	b.n	80074fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a2e      	ldr	r2, [pc, #184]	@ (800750c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d004      	beq.n	8007460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a2d      	ldr	r2, [pc, #180]	@ (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d108      	bne.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007478:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1e      	ldr	r2, [pc, #120]	@ (800750c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d01d      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749e:	d018      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00e      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a18      	ldr	r2, [pc, #96]	@ (800751c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d009      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a13      	ldr	r2, [pc, #76]	@ (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a14      	ldr	r2, [pc, #80]	@ (8007520 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10c      	bne.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	40012c00 	.word	0x40012c00
 8007510:	40013400 	.word	0x40013400
 8007514:	40000400 	.word	0x40000400
 8007518:	40000800 	.word	0x40000800
 800751c:	40000c00 	.word	0x40000c00
 8007520:	40014000 	.word	0x40014000

08007524 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800753c:	2302      	movs	r3, #2
 800753e:	e065      	b.n	800760c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	041b      	lsls	r3, r3, #16
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a16      	ldr	r2, [pc, #88]	@ (8007618 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d004      	beq.n	80075ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a14      	ldr	r2, [pc, #80]	@ (800761c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d115      	bne.n	80075fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d8:	051b      	lsls	r3, r3, #20
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	40012c00 	.word	0x40012c00
 800761c:	40013400 	.word	0x40013400

08007620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	2204      	movs	r2, #4
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a1a      	ldr	r2, [r3, #32]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	43db      	mvns	r3, r3
 800767e:	401a      	ands	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a1a      	ldr	r2, [r3, #32]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	fa01 f303 	lsl.w	r3, r1, r3
 8007694:	431a      	orrs	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]
}
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e040      	b.n	800773a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d106      	bne.n	80076ce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7fa fe2f 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2224      	movs	r2, #36	@ 0x24
 80076d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0201 	bic.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fae1 	bl	8007cb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f826 	bl	8007744 <UART_SetConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e01b      	b.n	800773a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007710:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007720:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fb60 	bl	8007df8 <UART_CheckIdleState>
 8007738:	4603      	mov	r3, r0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007748:	b08a      	sub	sp, #40	@ 0x28
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	431a      	orrs	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	431a      	orrs	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	4313      	orrs	r3, r2
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4ba4      	ldr	r3, [pc, #656]	@ (8007a04 <UART_SetConfig+0x2c0>)
 8007774:	4013      	ands	r3, r2
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800777c:	430b      	orrs	r3, r1
 800777e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a99      	ldr	r2, [pc, #612]	@ (8007a08 <UART_SetConfig+0x2c4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ac:	4313      	orrs	r3, r2
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c0:	430a      	orrs	r2, r1
 80077c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a90      	ldr	r2, [pc, #576]	@ (8007a0c <UART_SetConfig+0x2c8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d126      	bne.n	800781c <UART_SetConfig+0xd8>
 80077ce:	4b90      	ldr	r3, [pc, #576]	@ (8007a10 <UART_SetConfig+0x2cc>)
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d4:	f003 0303 	and.w	r3, r3, #3
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d81b      	bhi.n	8007814 <UART_SetConfig+0xd0>
 80077dc:	a201      	add	r2, pc, #4	@ (adr r2, 80077e4 <UART_SetConfig+0xa0>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	080077f5 	.word	0x080077f5
 80077e8:	08007805 	.word	0x08007805
 80077ec:	080077fd 	.word	0x080077fd
 80077f0:	0800780d 	.word	0x0800780d
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fa:	e116      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80077fc:	2302      	movs	r3, #2
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007802:	e112      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007804:	2304      	movs	r3, #4
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e10e      	b.n	8007a2a <UART_SetConfig+0x2e6>
 800780c:	2308      	movs	r3, #8
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007812:	e10a      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007814:	2310      	movs	r3, #16
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800781a:	e106      	b.n	8007a2a <UART_SetConfig+0x2e6>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a7c      	ldr	r2, [pc, #496]	@ (8007a14 <UART_SetConfig+0x2d0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d138      	bne.n	8007898 <UART_SetConfig+0x154>
 8007826:	4b7a      	ldr	r3, [pc, #488]	@ (8007a10 <UART_SetConfig+0x2cc>)
 8007828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782c:	f003 030c 	and.w	r3, r3, #12
 8007830:	2b0c      	cmp	r3, #12
 8007832:	d82d      	bhi.n	8007890 <UART_SetConfig+0x14c>
 8007834:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <UART_SetConfig+0xf8>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	08007871 	.word	0x08007871
 8007840:	08007891 	.word	0x08007891
 8007844:	08007891 	.word	0x08007891
 8007848:	08007891 	.word	0x08007891
 800784c:	08007881 	.word	0x08007881
 8007850:	08007891 	.word	0x08007891
 8007854:	08007891 	.word	0x08007891
 8007858:	08007891 	.word	0x08007891
 800785c:	08007879 	.word	0x08007879
 8007860:	08007891 	.word	0x08007891
 8007864:	08007891 	.word	0x08007891
 8007868:	08007891 	.word	0x08007891
 800786c:	08007889 	.word	0x08007889
 8007870:	2300      	movs	r3, #0
 8007872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007876:	e0d8      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007878:	2302      	movs	r3, #2
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800787e:	e0d4      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007886:	e0d0      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800788e:	e0cc      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007896:	e0c8      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a5e      	ldr	r2, [pc, #376]	@ (8007a18 <UART_SetConfig+0x2d4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d125      	bne.n	80078ee <UART_SetConfig+0x1aa>
 80078a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007a10 <UART_SetConfig+0x2cc>)
 80078a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078ac:	2b30      	cmp	r3, #48	@ 0x30
 80078ae:	d016      	beq.n	80078de <UART_SetConfig+0x19a>
 80078b0:	2b30      	cmp	r3, #48	@ 0x30
 80078b2:	d818      	bhi.n	80078e6 <UART_SetConfig+0x1a2>
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d00a      	beq.n	80078ce <UART_SetConfig+0x18a>
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d814      	bhi.n	80078e6 <UART_SetConfig+0x1a2>
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <UART_SetConfig+0x182>
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d008      	beq.n	80078d6 <UART_SetConfig+0x192>
 80078c4:	e00f      	b.n	80078e6 <UART_SetConfig+0x1a2>
 80078c6:	2300      	movs	r3, #0
 80078c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078cc:	e0ad      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80078ce:	2302      	movs	r3, #2
 80078d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078d4:	e0a9      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80078d6:	2304      	movs	r3, #4
 80078d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078dc:	e0a5      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80078de:	2308      	movs	r3, #8
 80078e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078e4:	e0a1      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80078e6:	2310      	movs	r3, #16
 80078e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ec:	e09d      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a4a      	ldr	r2, [pc, #296]	@ (8007a1c <UART_SetConfig+0x2d8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d125      	bne.n	8007944 <UART_SetConfig+0x200>
 80078f8:	4b45      	ldr	r3, [pc, #276]	@ (8007a10 <UART_SetConfig+0x2cc>)
 80078fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007902:	2bc0      	cmp	r3, #192	@ 0xc0
 8007904:	d016      	beq.n	8007934 <UART_SetConfig+0x1f0>
 8007906:	2bc0      	cmp	r3, #192	@ 0xc0
 8007908:	d818      	bhi.n	800793c <UART_SetConfig+0x1f8>
 800790a:	2b80      	cmp	r3, #128	@ 0x80
 800790c:	d00a      	beq.n	8007924 <UART_SetConfig+0x1e0>
 800790e:	2b80      	cmp	r3, #128	@ 0x80
 8007910:	d814      	bhi.n	800793c <UART_SetConfig+0x1f8>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <UART_SetConfig+0x1d8>
 8007916:	2b40      	cmp	r3, #64	@ 0x40
 8007918:	d008      	beq.n	800792c <UART_SetConfig+0x1e8>
 800791a:	e00f      	b.n	800793c <UART_SetConfig+0x1f8>
 800791c:	2300      	movs	r3, #0
 800791e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007922:	e082      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007924:	2302      	movs	r3, #2
 8007926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792a:	e07e      	b.n	8007a2a <UART_SetConfig+0x2e6>
 800792c:	2304      	movs	r3, #4
 800792e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007932:	e07a      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007934:	2308      	movs	r3, #8
 8007936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793a:	e076      	b.n	8007a2a <UART_SetConfig+0x2e6>
 800793c:	2310      	movs	r3, #16
 800793e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007942:	e072      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a35      	ldr	r2, [pc, #212]	@ (8007a20 <UART_SetConfig+0x2dc>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d12a      	bne.n	80079a4 <UART_SetConfig+0x260>
 800794e:	4b30      	ldr	r3, [pc, #192]	@ (8007a10 <UART_SetConfig+0x2cc>)
 8007950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007958:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800795c:	d01a      	beq.n	8007994 <UART_SetConfig+0x250>
 800795e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007962:	d81b      	bhi.n	800799c <UART_SetConfig+0x258>
 8007964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007968:	d00c      	beq.n	8007984 <UART_SetConfig+0x240>
 800796a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800796e:	d815      	bhi.n	800799c <UART_SetConfig+0x258>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <UART_SetConfig+0x238>
 8007974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007978:	d008      	beq.n	800798c <UART_SetConfig+0x248>
 800797a:	e00f      	b.n	800799c <UART_SetConfig+0x258>
 800797c:	2300      	movs	r3, #0
 800797e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007982:	e052      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007984:	2302      	movs	r3, #2
 8007986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800798a:	e04e      	b.n	8007a2a <UART_SetConfig+0x2e6>
 800798c:	2304      	movs	r3, #4
 800798e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007992:	e04a      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007994:	2308      	movs	r3, #8
 8007996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800799a:	e046      	b.n	8007a2a <UART_SetConfig+0x2e6>
 800799c:	2310      	movs	r3, #16
 800799e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a2:	e042      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a17      	ldr	r2, [pc, #92]	@ (8007a08 <UART_SetConfig+0x2c4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d13a      	bne.n	8007a24 <UART_SetConfig+0x2e0>
 80079ae:	4b18      	ldr	r3, [pc, #96]	@ (8007a10 <UART_SetConfig+0x2cc>)
 80079b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80079b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079bc:	d01a      	beq.n	80079f4 <UART_SetConfig+0x2b0>
 80079be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079c2:	d81b      	bhi.n	80079fc <UART_SetConfig+0x2b8>
 80079c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079c8:	d00c      	beq.n	80079e4 <UART_SetConfig+0x2a0>
 80079ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079ce:	d815      	bhi.n	80079fc <UART_SetConfig+0x2b8>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d003      	beq.n	80079dc <UART_SetConfig+0x298>
 80079d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d8:	d008      	beq.n	80079ec <UART_SetConfig+0x2a8>
 80079da:	e00f      	b.n	80079fc <UART_SetConfig+0x2b8>
 80079dc:	2300      	movs	r3, #0
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e2:	e022      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80079e4:	2302      	movs	r3, #2
 80079e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ea:	e01e      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80079ec:	2304      	movs	r3, #4
 80079ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079f2:	e01a      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80079f4:	2308      	movs	r3, #8
 80079f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079fa:	e016      	b.n	8007a2a <UART_SetConfig+0x2e6>
 80079fc:	2310      	movs	r3, #16
 80079fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a02:	e012      	b.n	8007a2a <UART_SetConfig+0x2e6>
 8007a04:	efff69f3 	.word	0xefff69f3
 8007a08:	40008000 	.word	0x40008000
 8007a0c:	40013800 	.word	0x40013800
 8007a10:	40021000 	.word	0x40021000
 8007a14:	40004400 	.word	0x40004400
 8007a18:	40004800 	.word	0x40004800
 8007a1c:	40004c00 	.word	0x40004c00
 8007a20:	40005000 	.word	0x40005000
 8007a24:	2310      	movs	r3, #16
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a9f      	ldr	r2, [pc, #636]	@ (8007cac <UART_SetConfig+0x568>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d17a      	bne.n	8007b2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d824      	bhi.n	8007a86 <UART_SetConfig+0x342>
 8007a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <UART_SetConfig+0x300>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a69 	.word	0x08007a69
 8007a48:	08007a87 	.word	0x08007a87
 8007a4c:	08007a71 	.word	0x08007a71
 8007a50:	08007a87 	.word	0x08007a87
 8007a54:	08007a77 	.word	0x08007a77
 8007a58:	08007a87 	.word	0x08007a87
 8007a5c:	08007a87 	.word	0x08007a87
 8007a60:	08007a87 	.word	0x08007a87
 8007a64:	08007a7f 	.word	0x08007a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a68:	f7fd fd22 	bl	80054b0 <HAL_RCC_GetPCLK1Freq>
 8007a6c:	61f8      	str	r0, [r7, #28]
        break;
 8007a6e:	e010      	b.n	8007a92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a70:	4b8f      	ldr	r3, [pc, #572]	@ (8007cb0 <UART_SetConfig+0x56c>)
 8007a72:	61fb      	str	r3, [r7, #28]
        break;
 8007a74:	e00d      	b.n	8007a92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a76:	f7fd fc85 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 8007a7a:	61f8      	str	r0, [r7, #28]
        break;
 8007a7c:	e009      	b.n	8007a92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a82:	61fb      	str	r3, [r7, #28]
        break;
 8007a84:	e005      	b.n	8007a92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80fb 	beq.w	8007c90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	4413      	add	r3, r2
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d305      	bcc.n	8007ab6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d903      	bls.n	8007abe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007abc:	e0e8      	b.n	8007c90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	461c      	mov	r4, r3
 8007ac4:	4615      	mov	r5, r2
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	022b      	lsls	r3, r5, #8
 8007ad0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ad4:	0222      	lsls	r2, r4, #8
 8007ad6:	68f9      	ldr	r1, [r7, #12]
 8007ad8:	6849      	ldr	r1, [r1, #4]
 8007ada:	0849      	lsrs	r1, r1, #1
 8007adc:	2000      	movs	r0, #0
 8007ade:	4688      	mov	r8, r1
 8007ae0:	4681      	mov	r9, r0
 8007ae2:	eb12 0a08 	adds.w	sl, r2, r8
 8007ae6:	eb43 0b09 	adc.w	fp, r3, r9
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af8:	4650      	mov	r0, sl
 8007afa:	4659      	mov	r1, fp
 8007afc:	f7f9 f8d4 	bl	8000ca8 <__aeabi_uldivmod>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4613      	mov	r3, r2
 8007b06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b0e:	d308      	bcc.n	8007b22 <UART_SetConfig+0x3de>
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b16:	d204      	bcs.n	8007b22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	60da      	str	r2, [r3, #12]
 8007b20:	e0b6      	b.n	8007c90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b28:	e0b2      	b.n	8007c90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b32:	d15e      	bne.n	8007bf2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007b34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d828      	bhi.n	8007b8e <UART_SetConfig+0x44a>
 8007b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <UART_SetConfig+0x400>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b69 	.word	0x08007b69
 8007b48:	08007b71 	.word	0x08007b71
 8007b4c:	08007b79 	.word	0x08007b79
 8007b50:	08007b8f 	.word	0x08007b8f
 8007b54:	08007b7f 	.word	0x08007b7f
 8007b58:	08007b8f 	.word	0x08007b8f
 8007b5c:	08007b8f 	.word	0x08007b8f
 8007b60:	08007b8f 	.word	0x08007b8f
 8007b64:	08007b87 	.word	0x08007b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b68:	f7fd fca2 	bl	80054b0 <HAL_RCC_GetPCLK1Freq>
 8007b6c:	61f8      	str	r0, [r7, #28]
        break;
 8007b6e:	e014      	b.n	8007b9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b70:	f7fd fcb4 	bl	80054dc <HAL_RCC_GetPCLK2Freq>
 8007b74:	61f8      	str	r0, [r7, #28]
        break;
 8007b76:	e010      	b.n	8007b9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b78:	4b4d      	ldr	r3, [pc, #308]	@ (8007cb0 <UART_SetConfig+0x56c>)
 8007b7a:	61fb      	str	r3, [r7, #28]
        break;
 8007b7c:	e00d      	b.n	8007b9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7e:	f7fd fc01 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 8007b82:	61f8      	str	r0, [r7, #28]
        break;
 8007b84:	e009      	b.n	8007b9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b8a:	61fb      	str	r3, [r7, #28]
        break;
 8007b8c:	e005      	b.n	8007b9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d077      	beq.n	8007c90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	005a      	lsls	r2, r3, #1
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	085b      	lsrs	r3, r3, #1
 8007baa:	441a      	add	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b0f      	cmp	r3, #15
 8007bba:	d916      	bls.n	8007bea <UART_SetConfig+0x4a6>
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bc2:	d212      	bcs.n	8007bea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f023 030f 	bic.w	r3, r3, #15
 8007bcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	085b      	lsrs	r3, r3, #1
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f003 0307 	and.w	r3, r3, #7
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	8afb      	ldrh	r3, [r7, #22]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	8afa      	ldrh	r2, [r7, #22]
 8007be6:	60da      	str	r2, [r3, #12]
 8007be8:	e052      	b.n	8007c90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bf0:	e04e      	b.n	8007c90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d827      	bhi.n	8007c4a <UART_SetConfig+0x506>
 8007bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007c00 <UART_SetConfig+0x4bc>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c2d 	.word	0x08007c2d
 8007c08:	08007c35 	.word	0x08007c35
 8007c0c:	08007c4b 	.word	0x08007c4b
 8007c10:	08007c3b 	.word	0x08007c3b
 8007c14:	08007c4b 	.word	0x08007c4b
 8007c18:	08007c4b 	.word	0x08007c4b
 8007c1c:	08007c4b 	.word	0x08007c4b
 8007c20:	08007c43 	.word	0x08007c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c24:	f7fd fc44 	bl	80054b0 <HAL_RCC_GetPCLK1Freq>
 8007c28:	61f8      	str	r0, [r7, #28]
        break;
 8007c2a:	e014      	b.n	8007c56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c2c:	f7fd fc56 	bl	80054dc <HAL_RCC_GetPCLK2Freq>
 8007c30:	61f8      	str	r0, [r7, #28]
        break;
 8007c32:	e010      	b.n	8007c56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c34:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb0 <UART_SetConfig+0x56c>)
 8007c36:	61fb      	str	r3, [r7, #28]
        break;
 8007c38:	e00d      	b.n	8007c56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c3a:	f7fd fba3 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 8007c3e:	61f8      	str	r0, [r7, #28]
        break;
 8007c40:	e009      	b.n	8007c56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c46:	61fb      	str	r3, [r7, #28]
        break;
 8007c48:	e005      	b.n	8007c56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c54:	bf00      	nop
    }

    if (pclk != 0U)
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d019      	beq.n	8007c90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	085a      	lsrs	r2, r3, #1
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	441a      	add	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	2b0f      	cmp	r3, #15
 8007c74:	d909      	bls.n	8007c8a <UART_SetConfig+0x546>
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c7c:	d205      	bcs.n	8007c8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	e002      	b.n	8007c90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007c9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3728      	adds	r7, #40	@ 0x28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007caa:	bf00      	nop
 8007cac:	40008000 	.word	0x40008000
 8007cb0:	00f42400 	.word	0x00f42400

08007cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d01a      	beq.n	8007dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007db2:	d10a      	bne.n	8007dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	605a      	str	r2, [r3, #4]
  }
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b098      	sub	sp, #96	@ 0x60
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e08:	f7fa fe1e 	bl	8002a48 <HAL_GetTick>
 8007e0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d12e      	bne.n	8007e7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e24:	2200      	movs	r2, #0
 8007e26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f88c 	bl	8007f48 <UART_WaitOnFlagUntilTimeout>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d021      	beq.n	8007e7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	461a      	mov	r2, r3
 8007e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e6      	bne.n	8007e36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e062      	b.n	8007f40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0304 	and.w	r3, r3, #4
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d149      	bne.n	8007f1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e90:	2200      	movs	r2, #0
 8007e92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f856 	bl	8007f48 <UART_WaitOnFlagUntilTimeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d03c      	beq.n	8007f1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	623b      	str	r3, [r7, #32]
   return(result);
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e6      	bne.n	8007ea2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3308      	adds	r3, #8
 8007eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ef4:	61fa      	str	r2, [r7, #28]
 8007ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	69b9      	ldr	r1, [r7, #24]
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	617b      	str	r3, [r7, #20]
   return(result);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e5      	bne.n	8007ed4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e011      	b.n	8007f40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3758      	adds	r7, #88	@ 0x58
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	4613      	mov	r3, r2
 8007f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f58:	e04f      	b.n	8007ffa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f60:	d04b      	beq.n	8007ffa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f62:	f7fa fd71 	bl	8002a48 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d302      	bcc.n	8007f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e04e      	b.n	800801a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d037      	beq.n	8007ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b80      	cmp	r3, #128	@ 0x80
 8007f8e:	d034      	beq.n	8007ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b40      	cmp	r3, #64	@ 0x40
 8007f94:	d031      	beq.n	8007ffa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	f003 0308 	and.w	r3, r3, #8
 8007fa0:	2b08      	cmp	r3, #8
 8007fa2:	d110      	bne.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2208      	movs	r2, #8
 8007faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 f838 	bl	8008022 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e029      	b.n	800801a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fd4:	d111      	bne.n	8007ffa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f81e 	bl	8008022 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e00f      	b.n	800801a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69da      	ldr	r2, [r3, #28]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	4013      	ands	r3, r2
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	429a      	cmp	r2, r3
 8008008:	bf0c      	ite	eq
 800800a:	2301      	moveq	r3, #1
 800800c:	2300      	movne	r3, #0
 800800e:	b2db      	uxtb	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	429a      	cmp	r2, r3
 8008016:	d0a0      	beq.n	8007f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008022:	b480      	push	{r7}
 8008024:	b095      	sub	sp, #84	@ 0x54
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800803e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008048:	643b      	str	r3, [r7, #64]	@ 0x40
 800804a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800804e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e6      	bne.n	800802a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3308      	adds	r3, #8
 8008062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	61fb      	str	r3, [r7, #28]
   return(result);
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	f023 0301 	bic.w	r3, r3, #1
 8008072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3308      	adds	r3, #8
 800807a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800807c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800807e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e5      	bne.n	800805c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008094:	2b01      	cmp	r3, #1
 8008096:	d118      	bne.n	80080ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f023 0310 	bic.w	r3, r3, #16
 80080ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6979      	ldr	r1, [r7, #20]
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	613b      	str	r3, [r7, #16]
   return(result);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e6      	bne.n	8008098 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80080de:	bf00      	nop
 80080e0:	3754      	adds	r7, #84	@ 0x54
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080ea:	b084      	sub	sp, #16
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	f107 001c 	add.w	r0, r7, #28
 80080f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 fa25 	bl	8009558 <USB_CoreReset>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008112:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38
 8008126:	e005      	b.n	8008134 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008134:	7bfb      	ldrb	r3, [r7, #15]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008140:	b004      	add	sp, #16
 8008142:	4770      	bx	lr

08008144 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d165      	bne.n	8008224 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4a3e      	ldr	r2, [pc, #248]	@ (8008254 <USB_SetTurnaroundTime+0x110>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d906      	bls.n	800816e <USB_SetTurnaroundTime+0x2a>
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4a3d      	ldr	r2, [pc, #244]	@ (8008258 <USB_SetTurnaroundTime+0x114>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d202      	bcs.n	800816e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008168:	230f      	movs	r3, #15
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	e05c      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4a39      	ldr	r2, [pc, #228]	@ (8008258 <USB_SetTurnaroundTime+0x114>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d306      	bcc.n	8008184 <USB_SetTurnaroundTime+0x40>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4a38      	ldr	r2, [pc, #224]	@ (800825c <USB_SetTurnaroundTime+0x118>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d202      	bcs.n	8008184 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800817e:	230e      	movs	r3, #14
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	e051      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4a35      	ldr	r2, [pc, #212]	@ (800825c <USB_SetTurnaroundTime+0x118>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d306      	bcc.n	800819a <USB_SetTurnaroundTime+0x56>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4a34      	ldr	r2, [pc, #208]	@ (8008260 <USB_SetTurnaroundTime+0x11c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d202      	bcs.n	800819a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008194:	230d      	movs	r3, #13
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e046      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	4a30      	ldr	r2, [pc, #192]	@ (8008260 <USB_SetTurnaroundTime+0x11c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d306      	bcc.n	80081b0 <USB_SetTurnaroundTime+0x6c>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4a2f      	ldr	r2, [pc, #188]	@ (8008264 <USB_SetTurnaroundTime+0x120>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d802      	bhi.n	80081b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081aa:	230c      	movs	r3, #12
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	e03b      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008264 <USB_SetTurnaroundTime+0x120>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d906      	bls.n	80081c6 <USB_SetTurnaroundTime+0x82>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4a2b      	ldr	r2, [pc, #172]	@ (8008268 <USB_SetTurnaroundTime+0x124>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d802      	bhi.n	80081c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081c0:	230b      	movs	r3, #11
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	e030      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4a27      	ldr	r2, [pc, #156]	@ (8008268 <USB_SetTurnaroundTime+0x124>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d906      	bls.n	80081dc <USB_SetTurnaroundTime+0x98>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4a26      	ldr	r2, [pc, #152]	@ (800826c <USB_SetTurnaroundTime+0x128>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d802      	bhi.n	80081dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081d6:	230a      	movs	r3, #10
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	e025      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4a23      	ldr	r2, [pc, #140]	@ (800826c <USB_SetTurnaroundTime+0x128>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d906      	bls.n	80081f2 <USB_SetTurnaroundTime+0xae>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4a22      	ldr	r2, [pc, #136]	@ (8008270 <USB_SetTurnaroundTime+0x12c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d202      	bcs.n	80081f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081ec:	2309      	movs	r3, #9
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e01a      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4a1e      	ldr	r2, [pc, #120]	@ (8008270 <USB_SetTurnaroundTime+0x12c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d306      	bcc.n	8008208 <USB_SetTurnaroundTime+0xc4>
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008274 <USB_SetTurnaroundTime+0x130>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d802      	bhi.n	8008208 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008202:	2308      	movs	r3, #8
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	e00f      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4a1a      	ldr	r2, [pc, #104]	@ (8008274 <USB_SetTurnaroundTime+0x130>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d906      	bls.n	800821e <USB_SetTurnaroundTime+0xda>
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	4a19      	ldr	r2, [pc, #100]	@ (8008278 <USB_SetTurnaroundTime+0x134>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d202      	bcs.n	800821e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008218:	2307      	movs	r3, #7
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	e004      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800821e:	2306      	movs	r3, #6
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	e001      	b.n	8008228 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008224:	2309      	movs	r3, #9
 8008226:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	029b      	lsls	r3, r3, #10
 800823c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008240:	431a      	orrs	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	371c      	adds	r7, #28
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	00d8acbf 	.word	0x00d8acbf
 8008258:	00e4e1c0 	.word	0x00e4e1c0
 800825c:	00f42400 	.word	0x00f42400
 8008260:	01067380 	.word	0x01067380
 8008264:	011a499f 	.word	0x011a499f
 8008268:	01312cff 	.word	0x01312cff
 800826c:	014ca43f 	.word	0x014ca43f
 8008270:	016e3600 	.word	0x016e3600
 8008274:	01a6ab1f 	.word	0x01a6ab1f
 8008278:	01e84800 	.word	0x01e84800

0800827c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f043 0201 	orr.w	r2, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f023 0201 	bic.w	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d115      	bne.n	800830e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082ee:	200a      	movs	r0, #10
 80082f0:	f7fa fbb6 	bl	8002a60 <HAL_Delay>
      ms += 10U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	330a      	adds	r3, #10
 80082f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 f8b3 	bl	8009466 <USB_GetMode>
 8008300:	4603      	mov	r3, r0
 8008302:	2b01      	cmp	r3, #1
 8008304:	d01e      	beq.n	8008344 <USB_SetCurrentMode+0x84>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2bc7      	cmp	r3, #199	@ 0xc7
 800830a:	d9f0      	bls.n	80082ee <USB_SetCurrentMode+0x2e>
 800830c:	e01a      	b.n	8008344 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d115      	bne.n	8008340 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008320:	200a      	movs	r0, #10
 8008322:	f7fa fb9d 	bl	8002a60 <HAL_Delay>
      ms += 10U;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	330a      	adds	r3, #10
 800832a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 f89a 	bl	8009466 <USB_GetMode>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <USB_SetCurrentMode+0x84>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2bc7      	cmp	r3, #199	@ 0xc7
 800833c:	d9f0      	bls.n	8008320 <USB_SetCurrentMode+0x60>
 800833e:	e001      	b.n	8008344 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e005      	b.n	8008350 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2bc8      	cmp	r3, #200	@ 0xc8
 8008348:	d101      	bne.n	800834e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e000      	b.n	8008350 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008358:	b084      	sub	sp, #16
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	e009      	b.n	800838c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	3340      	adds	r3, #64	@ 0x40
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	2200      	movs	r2, #0
 8008384:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3301      	adds	r3, #1
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2b0e      	cmp	r3, #14
 8008390:	d9f2      	bls.n	8008378 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008392:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008396:	2b00      	cmp	r3, #0
 8008398:	d11c      	bne.n	80083d4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083a8:	f043 0302 	orr.w	r3, r3, #2
 80083ac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	e005      	b.n	80083e0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083e6:	461a      	mov	r2, r3
 80083e8:	2300      	movs	r3, #0
 80083ea:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083ec:	2103      	movs	r1, #3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f95a 	bl	80086a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083f4:	2110      	movs	r1, #16
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f8f6 	bl	80085e8 <USB_FlushTxFifo>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f920 	bl	800864c <USB_FlushRxFifo>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800841c:	461a      	mov	r2, r3
 800841e:	2300      	movs	r3, #0
 8008420:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008428:	461a      	mov	r2, r3
 800842a:	2300      	movs	r3, #0
 800842c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008434:	461a      	mov	r2, r3
 8008436:	2300      	movs	r3, #0
 8008438:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800843a:	2300      	movs	r3, #0
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	e043      	b.n	80084c8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008456:	d118      	bne.n	800848a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800846a:	461a      	mov	r2, r3
 800846c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	e013      	b.n	800849c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008480:	461a      	mov	r2, r3
 8008482:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	e008      	b.n	800849c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008496:	461a      	mov	r2, r3
 8008498:	2300      	movs	r3, #0
 800849a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a8:	461a      	mov	r2, r3
 80084aa:	2300      	movs	r3, #0
 80084ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ba:	461a      	mov	r2, r3
 80084bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	3301      	adds	r3, #1
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084cc:	461a      	mov	r2, r3
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d3b5      	bcc.n	8008440 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084d4:	2300      	movs	r3, #0
 80084d6:	613b      	str	r3, [r7, #16]
 80084d8:	e043      	b.n	8008562 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084f0:	d118      	bne.n	8008524 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	e013      	b.n	8008536 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800851a:	461a      	mov	r2, r3
 800851c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	e008      	b.n	8008536 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008530:	461a      	mov	r2, r3
 8008532:	2300      	movs	r3, #0
 8008534:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008542:	461a      	mov	r2, r3
 8008544:	2300      	movs	r3, #0
 8008546:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008554:	461a      	mov	r2, r3
 8008556:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800855a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	3301      	adds	r3, #1
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008566:	461a      	mov	r2, r3
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	4293      	cmp	r3, r2
 800856c:	d3b5      	bcc.n	80084da <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800857c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008580:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800858e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	f043 0210 	orr.w	r2, r3, #16
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699a      	ldr	r2, [r3, #24]
 80085a0:	4b10      	ldr	r3, [pc, #64]	@ (80085e4 <USB_DevInit+0x28c>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d005      	beq.n	80085bc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	f043 0208 	orr.w	r2, r3, #8
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d107      	bne.n	80085d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085cc:	f043 0304 	orr.w	r3, r3, #4
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085e0:	b004      	add	sp, #16
 80085e2:	4770      	bx	lr
 80085e4:	803c3800 	.word	0x803c3800

080085e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008602:	d901      	bls.n	8008608 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e01b      	b.n	8008640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	daf2      	bge.n	80085f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	019b      	lsls	r3, r3, #6
 8008618:	f043 0220 	orr.w	r2, r3, #32
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3301      	adds	r3, #1
 8008624:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800862c:	d901      	bls.n	8008632 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e006      	b.n	8008640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b20      	cmp	r3, #32
 800863c:	d0f0      	beq.n	8008620 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008664:	d901      	bls.n	800866a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e018      	b.n	800869c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	daf2      	bge.n	8008658 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2210      	movs	r2, #16
 800867a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	3301      	adds	r3, #1
 8008680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008688:	d901      	bls.n	800868e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e006      	b.n	800869c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f003 0310 	and.w	r3, r3, #16
 8008696:	2b10      	cmp	r3, #16
 8008698:	d0f0      	beq.n	800867c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086c8:	4313      	orrs	r3, r2
 80086ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80086da:	b480      	push	{r7}
 80086dc:	b087      	sub	sp, #28
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 0306 	and.w	r3, r3, #6
 80086f2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d002      	beq.n	8008700 <USB_GetDevSpeed+0x26>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b06      	cmp	r3, #6
 80086fe:	d102      	bne.n	8008706 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008700:	2302      	movs	r3, #2
 8008702:	75fb      	strb	r3, [r7, #23]
 8008704:	e001      	b.n	800870a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008706:	230f      	movs	r3, #15
 8008708:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
}
 800870c:	4618      	mov	r0, r3
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	785b      	ldrb	r3, [r3, #1]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d13a      	bne.n	80087aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800873a:	69da      	ldr	r2, [r3, #28]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	f003 030f 	and.w	r3, r3, #15
 8008744:	2101      	movs	r1, #1
 8008746:	fa01 f303 	lsl.w	r3, r1, r3
 800874a:	b29b      	uxth	r3, r3
 800874c:	68f9      	ldr	r1, [r7, #12]
 800874e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008752:	4313      	orrs	r3, r2
 8008754:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d155      	bne.n	8008818 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	791b      	ldrb	r3, [r3, #4]
 8008786:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008788:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	059b      	lsls	r3, r3, #22
 800878e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008790:	4313      	orrs	r3, r2
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	0151      	lsls	r1, r2, #5
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	440a      	add	r2, r1
 800879a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800879e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	e036      	b.n	8008818 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087b0:	69da      	ldr	r2, [r3, #28]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f003 030f 	and.w	r3, r3, #15
 80087ba:	2101      	movs	r1, #1
 80087bc:	fa01 f303 	lsl.w	r3, r1, r3
 80087c0:	041b      	lsls	r3, r3, #16
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087c8:	4313      	orrs	r3, r2
 80087ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d11a      	bne.n	8008818 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	791b      	ldrb	r3, [r3, #4]
 80087fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087fe:	430b      	orrs	r3, r1
 8008800:	4313      	orrs	r3, r2
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	0151      	lsls	r1, r2, #5
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	440a      	add	r2, r1
 800880a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800880e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008816:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
	...

08008828 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	785b      	ldrb	r3, [r3, #1]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d161      	bne.n	8008908 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800885a:	d11f      	bne.n	800889c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008876:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800887a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008896:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800889a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	2101      	movs	r1, #1
 80088ae:	fa01 f303 	lsl.w	r3, r1, r3
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	43db      	mvns	r3, r3
 80088b6:	68f9      	ldr	r1, [r7, #12]
 80088b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088bc:	4013      	ands	r3, r2
 80088be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088c6:	69da      	ldr	r2, [r3, #28]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	2101      	movs	r1, #1
 80088d2:	fa01 f303 	lsl.w	r3, r1, r3
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	43db      	mvns	r3, r3
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088e0:	4013      	ands	r3, r2
 80088e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	0159      	lsls	r1, r3, #5
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	440b      	add	r3, r1
 80088fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088fe:	4619      	mov	r1, r3
 8008900:	4b35      	ldr	r3, [pc, #212]	@ (80089d8 <USB_DeactivateEndpoint+0x1b0>)
 8008902:	4013      	ands	r3, r2
 8008904:	600b      	str	r3, [r1, #0]
 8008906:	e060      	b.n	80089ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800891a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800891e:	d11f      	bne.n	8008960 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	0151      	lsls	r1, r2, #5
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	440a      	add	r2, r1
 8008936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800893a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800893e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	440a      	add	r2, r1
 8008956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800895a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800895e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	2101      	movs	r1, #1
 8008972:	fa01 f303 	lsl.w	r3, r1, r3
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	43db      	mvns	r3, r3
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008980:	4013      	ands	r3, r2
 8008982:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800898a:	69da      	ldr	r2, [r3, #28]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	f003 030f 	and.w	r3, r3, #15
 8008994:	2101      	movs	r1, #1
 8008996:	fa01 f303 	lsl.w	r3, r1, r3
 800899a:	041b      	lsls	r3, r3, #16
 800899c:	43db      	mvns	r3, r3
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089a4:	4013      	ands	r3, r2
 80089a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	0159      	lsls	r1, r3, #5
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	440b      	add	r3, r1
 80089be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c2:	4619      	mov	r1, r3
 80089c4:	4b05      	ldr	r3, [pc, #20]	@ (80089dc <USB_DeactivateEndpoint+0x1b4>)
 80089c6:	4013      	ands	r3, r2
 80089c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	ec337800 	.word	0xec337800
 80089dc:	eff37800 	.word	0xeff37800

080089e0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	f040 812d 	bne.w	8008c58 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d132      	bne.n	8008a6c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	0151      	lsls	r1, r2, #5
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	440a      	add	r2, r1
 8008a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a20:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a24:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	0151      	lsls	r1, r2, #5
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	440a      	add	r2, r1
 8008a60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a64:	0cdb      	lsrs	r3, r3, #19
 8008a66:	04db      	lsls	r3, r3, #19
 8008a68:	6113      	str	r3, [r2, #16]
 8008a6a:	e097      	b.n	8008b9c <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	0151      	lsls	r1, r2, #5
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	440a      	add	r2, r1
 8008a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a86:	0cdb      	lsrs	r3, r3, #19
 8008a88:	04db      	lsls	r3, r3, #19
 8008a8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aa6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008aaa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008aae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d11a      	bne.n	8008aec <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	691a      	ldr	r2, [r3, #16]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d903      	bls.n	8008aca <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ae4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ae8:	6113      	str	r3, [r2, #16]
 8008aea:	e044      	b.n	8008b76 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	691a      	ldr	r2, [r3, #16]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	4413      	add	r3, r2
 8008af6:	1e5a      	subs	r2, r3, #1
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	89fb      	ldrh	r3, [r7, #14]
 8008b12:	04d9      	lsls	r1, r3, #19
 8008b14:	4b8f      	ldr	r3, [pc, #572]	@ (8008d54 <USB_EPStartXfer+0x374>)
 8008b16:	400b      	ands	r3, r1
 8008b18:	6939      	ldr	r1, [r7, #16]
 8008b1a:	0148      	lsls	r0, r1, #5
 8008b1c:	6979      	ldr	r1, [r7, #20]
 8008b1e:	4401      	add	r1, r0
 8008b20:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b24:	4313      	orrs	r3, r2
 8008b26:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	791b      	ldrb	r3, [r3, #4]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d122      	bne.n	8008b76 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b4a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008b4e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b5c:	691a      	ldr	r2, [r3, #16]
 8008b5e:	89fb      	ldrh	r3, [r7, #14]
 8008b60:	075b      	lsls	r3, r3, #29
 8008b62:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008b66:	6939      	ldr	r1, [r7, #16]
 8008b68:	0148      	lsls	r0, r1, #5
 8008b6a:	6979      	ldr	r1, [r7, #20]
 8008b6c:	4401      	add	r1, r0
 8008b6e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b72:	4313      	orrs	r3, r2
 8008b74:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b82:	691a      	ldr	r2, [r3, #16]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b8c:	6939      	ldr	r1, [r7, #16]
 8008b8e:	0148      	lsls	r0, r1, #5
 8008b90:	6979      	ldr	r1, [r7, #20]
 8008b92:	4401      	add	r1, r0
 8008b94:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008bba:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	791b      	ldrb	r3, [r3, #4]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d015      	beq.n	8008bf0 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 813a 	beq.w	8008e42 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	2101      	movs	r1, #1
 8008be0:	fa01 f303 	lsl.w	r3, r1, r3
 8008be4:	6979      	ldr	r1, [r7, #20]
 8008be6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bea:	4313      	orrs	r3, r2
 8008bec:	634b      	str	r3, [r1, #52]	@ 0x34
 8008bee:	e128      	b.n	8008e42 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d110      	bne.n	8008c22 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	e00f      	b.n	8008c42 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	0151      	lsls	r1, r2, #5
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	440a      	add	r2, r1
 8008c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c40:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	68d9      	ldr	r1, [r3, #12]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f9a7 	bl	8008fa4 <USB_WritePacket>
 8008c56:	e0f4      	b.n	8008e42 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	0151      	lsls	r1, r2, #5
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	440a      	add	r2, r1
 8008c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c72:	0cdb      	lsrs	r3, r3, #19
 8008c74:	04db      	lsls	r3, r3, #19
 8008c76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	0151      	lsls	r1, r2, #5
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	440a      	add	r2, r1
 8008c8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c9a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d12f      	bne.n	8008d02 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc6:	691a      	ldr	r2, [r3, #16]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cd0:	6939      	ldr	r1, [r7, #16]
 8008cd2:	0148      	lsls	r0, r1, #5
 8008cd4:	6979      	ldr	r1, [r7, #20]
 8008cd6:	4401      	add	r1, r0
 8008cd8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008cfe:	6113      	str	r3, [r2, #16]
 8008d00:	e062      	b.n	8008dc8 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d126      	bne.n	8008d58 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d16:	691a      	ldr	r2, [r3, #16]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d20:	6939      	ldr	r1, [r7, #16]
 8008d22:	0148      	lsls	r0, r1, #5
 8008d24:	6979      	ldr	r1, [r7, #20]
 8008d26:	4401      	add	r1, r0
 8008d28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d4e:	6113      	str	r3, [r2, #16]
 8008d50:	e03a      	b.n	8008dc8 <USB_EPStartXfer+0x3e8>
 8008d52:	bf00      	nop
 8008d54:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	691a      	ldr	r2, [r3, #16]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	4413      	add	r3, r2
 8008d62:	1e5a      	subs	r2, r3, #1
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d6c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	89fa      	ldrh	r2, [r7, #14]
 8008d74:	fb03 f202 	mul.w	r2, r3, r2
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d88:	691a      	ldr	r2, [r3, #16]
 8008d8a:	89fb      	ldrh	r3, [r7, #14]
 8008d8c:	04d9      	lsls	r1, r3, #19
 8008d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008e4c <USB_EPStartXfer+0x46c>)
 8008d90:	400b      	ands	r3, r1
 8008d92:	6939      	ldr	r1, [r7, #16]
 8008d94:	0148      	lsls	r0, r1, #5
 8008d96:	6979      	ldr	r1, [r7, #20]
 8008d98:	4401      	add	r1, r0
 8008d9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dae:	691a      	ldr	r2, [r3, #16]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db8:	6939      	ldr	r1, [r7, #16]
 8008dba:	0148      	lsls	r0, r1, #5
 8008dbc:	6979      	ldr	r1, [r7, #20]
 8008dbe:	4401      	add	r1, r0
 8008dc0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	791b      	ldrb	r3, [r3, #4]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d128      	bne.n	8008e22 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d110      	bne.n	8008e02 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	0151      	lsls	r1, r2, #5
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	440a      	add	r2, r1
 8008df6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dfa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	e00f      	b.n	8008e22 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e20:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	1ff80000 	.word	0x1ff80000

08008e50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d14a      	bne.n	8008f04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e86:	f040 8086 	bne.w	8008f96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	7812      	ldrb	r2, [r2, #0]
 8008e9e:	0151      	lsls	r1, r2, #5
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	7812      	ldrb	r2, [r2, #0]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ecc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d902      	bls.n	8008ee8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ee6:	e056      	b.n	8008f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f00:	d0e7      	beq.n	8008ed2 <USB_EPStopXfer+0x82>
 8008f02:	e048      	b.n	8008f96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f1c:	d13b      	bne.n	8008f96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	0151      	lsls	r1, r2, #5
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	440a      	add	r2, r1
 8008f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	7812      	ldrb	r2, [r2, #0]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d902      	bls.n	8008f7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	75fb      	strb	r3, [r7, #23]
          break;
 8008f7a:	e00c      	b.n	8008f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f94:	d0e7      	beq.n	8008f66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	371c      	adds	r7, #28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b089      	sub	sp, #36	@ 0x24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4611      	mov	r1, r2
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	71fb      	strb	r3, [r7, #7]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008fc2:	88bb      	ldrh	r3, [r7, #4]
 8008fc4:	3303      	adds	r3, #3
 8008fc6:	089b      	lsrs	r3, r3, #2
 8008fc8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61bb      	str	r3, [r7, #24]
 8008fce:	e018      	b.n	8009002 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008fd0:	79fb      	ldrb	r3, [r7, #7]
 8008fd2:	031a      	lsls	r2, r3, #12
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fdc:	461a      	mov	r2, r3
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	3301      	adds	r3, #1
 8008fee:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	3301      	adds	r3, #1
 8009000:	61bb      	str	r3, [r7, #24]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	429a      	cmp	r2, r3
 8009008:	d3e2      	bcc.n	8008fd0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3724      	adds	r7, #36	@ 0x24
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009018:	b480      	push	{r7}
 800901a:	b08b      	sub	sp, #44	@ 0x2c
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800902e:	88fb      	ldrh	r3, [r7, #6]
 8009030:	089b      	lsrs	r3, r3, #2
 8009032:	b29b      	uxth	r3, r3
 8009034:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800903e:	2300      	movs	r3, #0
 8009040:	623b      	str	r3, [r7, #32]
 8009042:	e014      	b.n	800906e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	3301      	adds	r3, #1
 8009054:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	3301      	adds	r3, #1
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	3301      	adds	r3, #1
 8009060:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	3301      	adds	r3, #1
 8009066:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	3301      	adds	r3, #1
 800906c:	623b      	str	r3, [r7, #32]
 800906e:	6a3a      	ldr	r2, [r7, #32]
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	429a      	cmp	r2, r3
 8009074:	d3e6      	bcc.n	8009044 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009076:	8bfb      	ldrh	r3, [r7, #30]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01e      	beq.n	80090ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009086:	461a      	mov	r2, r3
 8009088:	f107 0310 	add.w	r3, r7, #16
 800908c:	6812      	ldr	r2, [r2, #0]
 800908e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	b2db      	uxtb	r3, r3
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	fa22 f303 	lsr.w	r3, r2, r3
 800909c:	b2da      	uxtb	r2, r3
 800909e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a0:	701a      	strb	r2, [r3, #0]
      i++;
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	3301      	adds	r3, #1
 80090a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80090a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090aa:	3301      	adds	r3, #1
 80090ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80090ae:	8bfb      	ldrh	r3, [r7, #30]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80090b4:	8bfb      	ldrh	r3, [r7, #30]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1ea      	bne.n	8009090 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80090bc:	4618      	mov	r0, r3
 80090be:	372c      	adds	r7, #44	@ 0x2c
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d12c      	bne.n	800913e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	db12      	blt.n	800911c <USB_EPSetStall+0x54>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00f      	beq.n	800911c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	0151      	lsls	r1, r2, #5
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	440a      	add	r2, r1
 8009112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009116:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800911a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	0151      	lsls	r1, r2, #5
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	440a      	add	r2, r1
 8009132:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009136:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	e02b      	b.n	8009196 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	db12      	blt.n	8009176 <USB_EPSetStall+0xae>
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00f      	beq.n	8009176 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	0151      	lsls	r1, r2, #5
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	440a      	add	r2, r1
 800916c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009170:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009174:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	0151      	lsls	r1, r2, #5
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	440a      	add	r2, r1
 800918c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009190:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009194:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d128      	bne.n	8009212 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	0151      	lsls	r1, r2, #5
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	440a      	add	r2, r1
 80091d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	791b      	ldrb	r3, [r3, #4]
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d003      	beq.n	80091f0 <USB_EPClearStall+0x4c>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	791b      	ldrb	r3, [r3, #4]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d138      	bne.n	8009262 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	0151      	lsls	r1, r2, #5
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	440a      	add	r2, r1
 8009206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800920a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e027      	b.n	8009262 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	440a      	add	r2, r1
 8009228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800922c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009230:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	791b      	ldrb	r3, [r3, #4]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d003      	beq.n	8009242 <USB_EPClearStall+0x9e>
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	791b      	ldrb	r3, [r3, #4]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d10f      	bne.n	8009262 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	0151      	lsls	r1, r2, #5
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	440a      	add	r2, r1
 8009258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800925c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009260:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800928e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009292:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80092a4:	68f9      	ldr	r1, [r7, #12]
 80092a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092aa:	4313      	orrs	r3, r2
 80092ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092d6:	f023 0303 	bic.w	r3, r3, #3
 80092da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092ea:	f023 0302 	bic.w	r3, r3, #2
 80092ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092fe:	b480      	push	{r7}
 8009300:	b085      	sub	sp, #20
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009318:	f023 0303 	bic.w	r3, r3, #3
 800931c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800932c:	f043 0302 	orr.w	r3, r3, #2
 8009330:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	4013      	ands	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009358:	68fb      	ldr	r3, [r7, #12]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009366:	b480      	push	{r7}
 8009368:	b085      	sub	sp, #20
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	4013      	ands	r3, r2
 8009388:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	0c1b      	lsrs	r3, r3, #16
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800939a:	b480      	push	{r7}
 800939c:	b085      	sub	sp, #20
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b6:	69db      	ldr	r3, [r3, #28]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	4013      	ands	r3, r2
 80093bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	b29b      	uxth	r3, r3
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b085      	sub	sp, #20
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	4013      	ands	r3, r2
 80093fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093fc:	68bb      	ldr	r3, [r7, #8]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800940a:	b480      	push	{r7}
 800940c:	b087      	sub	sp, #28
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800942a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800942c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800942e:	78fb      	ldrb	r3, [r7, #3]
 8009430:	f003 030f 	and.w	r3, r3, #15
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	fa22 f303 	lsr.w	r3, r2, r3
 800943a:	01db      	lsls	r3, r3, #7
 800943c:	b2db      	uxtb	r3, r3
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	4313      	orrs	r3, r2
 8009442:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	4013      	ands	r3, r2
 8009456:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009458:	68bb      	ldr	r3, [r7, #8]
}
 800945a:	4618      	mov	r0, r3
 800945c:	371c      	adds	r7, #28
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	f003 0301 	and.w	r3, r3, #1
}
 8009476:	4618      	mov	r0, r3
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800949c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80094a0:	f023 0307 	bic.w	r3, r3, #7
 80094a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	333c      	adds	r3, #60	@ 0x3c
 80094da:	3304      	adds	r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009554 <USB_EP0_OutStart+0x8c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d90a      	bls.n	80094fe <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094f8:	d101      	bne.n	80094fe <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	e024      	b.n	8009548 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009504:	461a      	mov	r2, r3
 8009506:	2300      	movs	r3, #0
 8009508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009518:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800951c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800952c:	f043 0318 	orr.w	r3, r3, #24
 8009530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009540:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009544:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	4f54300a 	.word	0x4f54300a

08009558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3301      	adds	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009570:	d901      	bls.n	8009576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e01b      	b.n	80095ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	daf2      	bge.n	8009564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	f043 0201 	orr.w	r2, r3, #1
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3301      	adds	r3, #1
 8009592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800959a:	d901      	bls.n	80095a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e006      	b.n	80095ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d0f0      	beq.n	800958e <USB_CoreReset+0x36>

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
	...

080095bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80095c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80095cc:	f002 fe40 	bl	800c250 <USBD_static_malloc>
 80095d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d109      	bne.n	80095ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	32b0      	adds	r2, #176	@ 0xb0
 80095e2:	2100      	movs	r1, #0
 80095e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80095e8:	2302      	movs	r3, #2
 80095ea:	e0d4      	b.n	8009796 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80095ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80095f0:	2100      	movs	r1, #0
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f004 fb09 	bl	800dc0a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	32b0      	adds	r2, #176	@ 0xb0
 8009602:	68f9      	ldr	r1, [r7, #12]
 8009604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	32b0      	adds	r2, #176	@ 0xb0
 8009612:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7c1b      	ldrb	r3, [r3, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d138      	bne.n	8009696 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009624:	4b5e      	ldr	r3, [pc, #376]	@ (80097a0 <USBD_CDC_Init+0x1e4>)
 8009626:	7819      	ldrb	r1, [r3, #0]
 8009628:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800962c:	2202      	movs	r2, #2
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f002 fbfa 	bl	800be28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009634:	4b5a      	ldr	r3, [pc, #360]	@ (80097a0 <USBD_CDC_Init+0x1e4>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	f003 020f 	and.w	r2, r3, #15
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	4613      	mov	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	440b      	add	r3, r1
 8009648:	3324      	adds	r3, #36	@ 0x24
 800964a:	2201      	movs	r2, #1
 800964c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800964e:	4b55      	ldr	r3, [pc, #340]	@ (80097a4 <USBD_CDC_Init+0x1e8>)
 8009650:	7819      	ldrb	r1, [r3, #0]
 8009652:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009656:	2202      	movs	r2, #2
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f002 fbe5 	bl	800be28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800965e:	4b51      	ldr	r3, [pc, #324]	@ (80097a4 <USBD_CDC_Init+0x1e8>)
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	f003 020f 	and.w	r2, r3, #15
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009676:	2201      	movs	r2, #1
 8009678:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800967a:	4b4b      	ldr	r3, [pc, #300]	@ (80097a8 <USBD_CDC_Init+0x1ec>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	f003 020f 	and.w	r2, r3, #15
 8009682:	6879      	ldr	r1, [r7, #4]
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	440b      	add	r3, r1
 800968e:	3326      	adds	r3, #38	@ 0x26
 8009690:	2210      	movs	r2, #16
 8009692:	801a      	strh	r2, [r3, #0]
 8009694:	e035      	b.n	8009702 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009696:	4b42      	ldr	r3, [pc, #264]	@ (80097a0 <USBD_CDC_Init+0x1e4>)
 8009698:	7819      	ldrb	r1, [r3, #0]
 800969a:	2340      	movs	r3, #64	@ 0x40
 800969c:	2202      	movs	r2, #2
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f002 fbc2 	bl	800be28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096a4:	4b3e      	ldr	r3, [pc, #248]	@ (80097a0 <USBD_CDC_Init+0x1e4>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	f003 020f 	and.w	r2, r3, #15
 80096ac:	6879      	ldr	r1, [r7, #4]
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	440b      	add	r3, r1
 80096b8:	3324      	adds	r3, #36	@ 0x24
 80096ba:	2201      	movs	r2, #1
 80096bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096be:	4b39      	ldr	r3, [pc, #228]	@ (80097a4 <USBD_CDC_Init+0x1e8>)
 80096c0:	7819      	ldrb	r1, [r3, #0]
 80096c2:	2340      	movs	r3, #64	@ 0x40
 80096c4:	2202      	movs	r2, #2
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f002 fbae 	bl	800be28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096cc:	4b35      	ldr	r3, [pc, #212]	@ (80097a4 <USBD_CDC_Init+0x1e8>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 020f 	and.w	r2, r3, #15
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096e4:	2201      	movs	r2, #1
 80096e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096e8:	4b2f      	ldr	r3, [pc, #188]	@ (80097a8 <USBD_CDC_Init+0x1ec>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	f003 020f 	and.w	r2, r3, #15
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	440b      	add	r3, r1
 80096fc:	3326      	adds	r3, #38	@ 0x26
 80096fe:	2210      	movs	r2, #16
 8009700:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009702:	4b29      	ldr	r3, [pc, #164]	@ (80097a8 <USBD_CDC_Init+0x1ec>)
 8009704:	7819      	ldrb	r1, [r3, #0]
 8009706:	2308      	movs	r3, #8
 8009708:	2203      	movs	r2, #3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f002 fb8c 	bl	800be28 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009710:	4b25      	ldr	r3, [pc, #148]	@ (80097a8 <USBD_CDC_Init+0x1ec>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	f003 020f 	and.w	r2, r3, #15
 8009718:	6879      	ldr	r1, [r7, #4]
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	440b      	add	r3, r1
 8009724:	3324      	adds	r3, #36	@ 0x24
 8009726:	2201      	movs	r2, #1
 8009728:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	33b0      	adds	r3, #176	@ 0xb0
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009760:	2302      	movs	r3, #2
 8009762:	e018      	b.n	8009796 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	7c1b      	ldrb	r3, [r3, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10a      	bne.n	8009782 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800976c:	4b0d      	ldr	r3, [pc, #52]	@ (80097a4 <USBD_CDC_Init+0x1e8>)
 800976e:	7819      	ldrb	r1, [r3, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009776:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f002 fcce 	bl	800c11c <USBD_LL_PrepareReceive>
 8009780:	e008      	b.n	8009794 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009782:	4b08      	ldr	r3, [pc, #32]	@ (80097a4 <USBD_CDC_Init+0x1e8>)
 8009784:	7819      	ldrb	r1, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800978c:	2340      	movs	r3, #64	@ 0x40
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f002 fcc4 	bl	800c11c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000183 	.word	0x20000183
 80097a4:	20000184 	.word	0x20000184
 80097a8:	20000185 	.word	0x20000185

080097ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80097b8:	4b3a      	ldr	r3, [pc, #232]	@ (80098a4 <USBD_CDC_DeInit+0xf8>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f002 fb70 	bl	800bea4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80097c4:	4b37      	ldr	r3, [pc, #220]	@ (80098a4 <USBD_CDC_DeInit+0xf8>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 020f 	and.w	r2, r3, #15
 80097cc:	6879      	ldr	r1, [r7, #4]
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	440b      	add	r3, r1
 80097d8:	3324      	adds	r3, #36	@ 0x24
 80097da:	2200      	movs	r2, #0
 80097dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80097de:	4b32      	ldr	r3, [pc, #200]	@ (80098a8 <USBD_CDC_DeInit+0xfc>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f002 fb5d 	bl	800bea4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80097ea:	4b2f      	ldr	r3, [pc, #188]	@ (80098a8 <USBD_CDC_DeInit+0xfc>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	f003 020f 	and.w	r2, r3, #15
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	440b      	add	r3, r1
 80097fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009802:	2200      	movs	r2, #0
 8009804:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009806:	4b29      	ldr	r3, [pc, #164]	@ (80098ac <USBD_CDC_DeInit+0x100>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f002 fb49 	bl	800bea4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009812:	4b26      	ldr	r3, [pc, #152]	@ (80098ac <USBD_CDC_DeInit+0x100>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	f003 020f 	and.w	r2, r3, #15
 800981a:	6879      	ldr	r1, [r7, #4]
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	440b      	add	r3, r1
 8009826:	3324      	adds	r3, #36	@ 0x24
 8009828:	2200      	movs	r2, #0
 800982a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800982c:	4b1f      	ldr	r3, [pc, #124]	@ (80098ac <USBD_CDC_DeInit+0x100>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	f003 020f 	and.w	r2, r3, #15
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	440b      	add	r3, r1
 8009840:	3326      	adds	r3, #38	@ 0x26
 8009842:	2200      	movs	r2, #0
 8009844:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	32b0      	adds	r2, #176	@ 0xb0
 8009850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01f      	beq.n	8009898 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	33b0      	adds	r3, #176	@ 0xb0
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	32b0      	adds	r2, #176	@ 0xb0
 8009876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987a:	4618      	mov	r0, r3
 800987c:	f002 fcf6 	bl	800c26c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	32b0      	adds	r2, #176	@ 0xb0
 800988a:	2100      	movs	r1, #0
 800988c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20000183 	.word	0x20000183
 80098a8:	20000184 	.word	0x20000184
 80098ac:	20000185 	.word	0x20000185

080098b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	32b0      	adds	r2, #176	@ 0xb0
 80098c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80098dc:	2303      	movs	r3, #3
 80098de:	e0bf      	b.n	8009a60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d050      	beq.n	800998e <USBD_CDC_Setup+0xde>
 80098ec:	2b20      	cmp	r3, #32
 80098ee:	f040 80af 	bne.w	8009a50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	88db      	ldrh	r3, [r3, #6]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d03a      	beq.n	8009970 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	b25b      	sxtb	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	da1b      	bge.n	800993c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	33b0      	adds	r3, #176	@ 0xb0
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800991a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	88d2      	ldrh	r2, [r2, #6]
 8009920:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	88db      	ldrh	r3, [r3, #6]
 8009926:	2b07      	cmp	r3, #7
 8009928:	bf28      	it	cs
 800992a:	2307      	movcs	r3, #7
 800992c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	89fa      	ldrh	r2, [r7, #14]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f001 fdbd 	bl	800b4b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800993a:	e090      	b.n	8009a5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	785a      	ldrb	r2, [r3, #1]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	88db      	ldrh	r3, [r3, #6]
 800994a:	2b3f      	cmp	r3, #63	@ 0x3f
 800994c:	d803      	bhi.n	8009956 <USBD_CDC_Setup+0xa6>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	88db      	ldrh	r3, [r3, #6]
 8009952:	b2da      	uxtb	r2, r3
 8009954:	e000      	b.n	8009958 <USBD_CDC_Setup+0xa8>
 8009956:	2240      	movs	r2, #64	@ 0x40
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800995e:	6939      	ldr	r1, [r7, #16]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009966:	461a      	mov	r2, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 fdcf 	bl	800b50c <USBD_CtlPrepareRx>
      break;
 800996e:	e076      	b.n	8009a5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	33b0      	adds	r3, #176	@ 0xb0
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	7850      	ldrb	r0, [r2, #1]
 8009986:	2200      	movs	r2, #0
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	4798      	blx	r3
      break;
 800998c:	e067      	b.n	8009a5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	785b      	ldrb	r3, [r3, #1]
 8009992:	2b0b      	cmp	r3, #11
 8009994:	d851      	bhi.n	8009a3a <USBD_CDC_Setup+0x18a>
 8009996:	a201      	add	r2, pc, #4	@ (adr r2, 800999c <USBD_CDC_Setup+0xec>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099cd 	.word	0x080099cd
 80099a0:	08009a49 	.word	0x08009a49
 80099a4:	08009a3b 	.word	0x08009a3b
 80099a8:	08009a3b 	.word	0x08009a3b
 80099ac:	08009a3b 	.word	0x08009a3b
 80099b0:	08009a3b 	.word	0x08009a3b
 80099b4:	08009a3b 	.word	0x08009a3b
 80099b8:	08009a3b 	.word	0x08009a3b
 80099bc:	08009a3b 	.word	0x08009a3b
 80099c0:	08009a3b 	.word	0x08009a3b
 80099c4:	080099f7 	.word	0x080099f7
 80099c8:	08009a21 	.word	0x08009a21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d107      	bne.n	80099e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099d8:	f107 030a 	add.w	r3, r7, #10
 80099dc:	2202      	movs	r2, #2
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 fd67 	bl	800b4b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099e6:	e032      	b.n	8009a4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f001 fce5 	bl	800b3ba <USBD_CtlError>
            ret = USBD_FAIL;
 80099f0:	2303      	movs	r3, #3
 80099f2:	75fb      	strb	r3, [r7, #23]
          break;
 80099f4:	e02b      	b.n	8009a4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d107      	bne.n	8009a12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a02:	f107 030d 	add.w	r3, r7, #13
 8009a06:	2201      	movs	r2, #1
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 fd52 	bl	800b4b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a10:	e01d      	b.n	8009a4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 fcd0 	bl	800b3ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	75fb      	strb	r3, [r7, #23]
          break;
 8009a1e:	e016      	b.n	8009a4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d00f      	beq.n	8009a4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f001 fcc3 	bl	800b3ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009a34:	2303      	movs	r3, #3
 8009a36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a38:	e008      	b.n	8009a4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f001 fcbc 	bl	800b3ba <USBD_CtlError>
          ret = USBD_FAIL;
 8009a42:	2303      	movs	r3, #3
 8009a44:	75fb      	strb	r3, [r7, #23]
          break;
 8009a46:	e002      	b.n	8009a4e <USBD_CDC_Setup+0x19e>
          break;
 8009a48:	bf00      	nop
 8009a4a:	e008      	b.n	8009a5e <USBD_CDC_Setup+0x1ae>
          break;
 8009a4c:	bf00      	nop
      }
      break;
 8009a4e:	e006      	b.n	8009a5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 fcb1 	bl	800b3ba <USBD_CtlError>
      ret = USBD_FAIL;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	32b0      	adds	r2, #176	@ 0xb0
 8009a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e065      	b.n	8009b5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	32b0      	adds	r2, #176	@ 0xb0
 8009a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009aa2:	78fb      	ldrb	r3, [r7, #3]
 8009aa4:	f003 020f 	and.w	r2, r3, #15
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	440b      	add	r3, r1
 8009ab4:	3318      	adds	r3, #24
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d02f      	beq.n	8009b1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009abc:	78fb      	ldrb	r3, [r7, #3]
 8009abe:	f003 020f 	and.w	r2, r3, #15
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	440b      	add	r3, r1
 8009ace:	3318      	adds	r3, #24
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	78fb      	ldrb	r3, [r7, #3]
 8009ad4:	f003 010f 	and.w	r1, r3, #15
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	460b      	mov	r3, r1
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	440b      	add	r3, r1
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4403      	add	r3, r0
 8009ae4:	331c      	adds	r3, #28
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009aec:	fb01 f303 	mul.w	r3, r1, r3
 8009af0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d112      	bne.n	8009b1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	f003 020f 	and.w	r2, r3, #15
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	440b      	add	r3, r1
 8009b08:	3318      	adds	r3, #24
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b0e:	78f9      	ldrb	r1, [r7, #3]
 8009b10:	2300      	movs	r3, #0
 8009b12:	2200      	movs	r2, #0
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f002 fac9 	bl	800c0ac <USBD_LL_Transmit>
 8009b1a:	e01f      	b.n	8009b5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	33b0      	adds	r3, #176	@ 0xb0
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d010      	beq.n	8009b5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	33b0      	adds	r3, #176	@ 0xb0
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009b58:	78fa      	ldrb	r2, [r7, #3]
 8009b5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	32b0      	adds	r2, #176	@ 0xb0
 8009b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	32b0      	adds	r2, #176	@ 0xb0
 8009b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e01a      	b.n	8009bce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f002 faf5 	bl	800c18c <USBD_LL_GetRxDataSize>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	33b0      	adds	r3, #176	@ 0xb0
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4413      	add	r3, r2
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	32b0      	adds	r2, #176	@ 0xb0
 8009be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e024      	b.n	8009c42 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	33b0      	adds	r3, #176	@ 0xb0
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d019      	beq.n	8009c40 <USBD_CDC_EP0_RxReady+0x6a>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009c12:	2bff      	cmp	r3, #255	@ 0xff
 8009c14:	d014      	beq.n	8009c40 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	33b0      	adds	r3, #176	@ 0xb0
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	22ff      	movs	r2, #255	@ 0xff
 8009c3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c54:	2182      	movs	r1, #130	@ 0x82
 8009c56:	4818      	ldr	r0, [pc, #96]	@ (8009cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c58:	f000 fd4f 	bl	800a6fa <USBD_GetEpDesc>
 8009c5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c5e:	2101      	movs	r1, #1
 8009c60:	4815      	ldr	r0, [pc, #84]	@ (8009cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c62:	f000 fd4a 	bl	800a6fa <USBD_GetEpDesc>
 8009c66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c68:	2181      	movs	r1, #129	@ 0x81
 8009c6a:	4813      	ldr	r0, [pc, #76]	@ (8009cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c6c:	f000 fd45 	bl	800a6fa <USBD_GetEpDesc>
 8009c70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2210      	movs	r2, #16
 8009c7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d006      	beq.n	8009c92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c8c:	711a      	strb	r2, [r3, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d006      	beq.n	8009ca6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ca0:	711a      	strb	r2, [r3, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2243      	movs	r2, #67	@ 0x43
 8009caa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009cac:	4b02      	ldr	r3, [pc, #8]	@ (8009cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000140 	.word	0x20000140

08009cbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cc4:	2182      	movs	r1, #130	@ 0x82
 8009cc6:	4818      	ldr	r0, [pc, #96]	@ (8009d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cc8:	f000 fd17 	bl	800a6fa <USBD_GetEpDesc>
 8009ccc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cce:	2101      	movs	r1, #1
 8009cd0:	4815      	ldr	r0, [pc, #84]	@ (8009d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cd2:	f000 fd12 	bl	800a6fa <USBD_GetEpDesc>
 8009cd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009cd8:	2181      	movs	r1, #129	@ 0x81
 8009cda:	4813      	ldr	r0, [pc, #76]	@ (8009d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cdc:	f000 fd0d 	bl	800a6fa <USBD_GetEpDesc>
 8009ce0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2210      	movs	r2, #16
 8009cec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	711a      	strb	r2, [r3, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f042 0202 	orr.w	r2, r2, #2
 8009d00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d006      	beq.n	8009d16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	711a      	strb	r2, [r3, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f042 0202 	orr.w	r2, r2, #2
 8009d14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2243      	movs	r2, #67	@ 0x43
 8009d1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d1c:	4b02      	ldr	r3, [pc, #8]	@ (8009d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20000140 	.word	0x20000140

08009d2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d34:	2182      	movs	r1, #130	@ 0x82
 8009d36:	4818      	ldr	r0, [pc, #96]	@ (8009d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d38:	f000 fcdf 	bl	800a6fa <USBD_GetEpDesc>
 8009d3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d3e:	2101      	movs	r1, #1
 8009d40:	4815      	ldr	r0, [pc, #84]	@ (8009d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d42:	f000 fcda 	bl	800a6fa <USBD_GetEpDesc>
 8009d46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d48:	2181      	movs	r1, #129	@ 0x81
 8009d4a:	4813      	ldr	r0, [pc, #76]	@ (8009d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d4c:	f000 fcd5 	bl	800a6fa <USBD_GetEpDesc>
 8009d50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2210      	movs	r2, #16
 8009d5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d6c:	711a      	strb	r2, [r3, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d006      	beq.n	8009d86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d80:	711a      	strb	r2, [r3, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2243      	movs	r2, #67	@ 0x43
 8009d8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d8c:	4b02      	ldr	r3, [pc, #8]	@ (8009d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20000140 	.word	0x20000140

08009d9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	220a      	movs	r2, #10
 8009da8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009daa:	4b03      	ldr	r3, [pc, #12]	@ (8009db8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	200000fc 	.word	0x200000fc

08009dbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e009      	b.n	8009de4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	33b0      	adds	r3, #176	@ 0xb0
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	32b0      	adds	r2, #176	@ 0xb0
 8009e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e008      	b.n	8009e28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	32b0      	adds	r2, #176	@ 0xb0
 8009e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009e54:	2303      	movs	r3, #3
 8009e56:	e004      	b.n	8009e62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
	...

08009e70 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	32b0      	adds	r2, #176	@ 0xb0
 8009e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e86:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e025      	b.n	8009ee2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d11f      	bne.n	8009ee0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009ea8:	4b10      	ldr	r3, [pc, #64]	@ (8009eec <USBD_CDC_TransmitPacket+0x7c>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	f003 020f 	and.w	r2, r3, #15
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4403      	add	r3, r0
 8009ec2:	3318      	adds	r3, #24
 8009ec4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009ec6:	4b09      	ldr	r3, [pc, #36]	@ (8009eec <USBD_CDC_TransmitPacket+0x7c>)
 8009ec8:	7819      	ldrb	r1, [r3, #0]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f002 f8e8 	bl	800c0ac <USBD_LL_Transmit>

    ret = USBD_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20000183 	.word	0x20000183

08009ef0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	32b0      	adds	r2, #176	@ 0xb0
 8009f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	32b0      	adds	r2, #176	@ 0xb0
 8009f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e018      	b.n	8009f50 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	7c1b      	ldrb	r3, [r3, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10a      	bne.n	8009f3c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f26:	4b0c      	ldr	r3, [pc, #48]	@ (8009f58 <USBD_CDC_ReceivePacket+0x68>)
 8009f28:	7819      	ldrb	r1, [r3, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f002 f8f1 	bl	800c11c <USBD_LL_PrepareReceive>
 8009f3a:	e008      	b.n	8009f4e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f3c:	4b06      	ldr	r3, [pc, #24]	@ (8009f58 <USBD_CDC_ReceivePacket+0x68>)
 8009f3e:	7819      	ldrb	r1, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f46:	2340      	movs	r3, #64	@ 0x40
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f002 f8e7 	bl	800c11c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20000184 	.word	0x20000184

08009f5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	4613      	mov	r3, r2
 8009f68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e01f      	b.n	8009fb4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	79fa      	ldrb	r2, [r7, #7]
 8009fa6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f001 febf 	bl	800bd2c <USBD_LL_Init>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e025      	b.n	800a020 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	32ae      	adds	r2, #174	@ 0xae
 8009fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00f      	beq.n	800a010 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	32ae      	adds	r2, #174	@ 0xae
 8009ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a000:	f107 020e 	add.w	r2, r7, #14
 800a004:	4610      	mov	r0, r2
 800a006:	4798      	blx	r3
 800a008:	4602      	mov	r2, r0
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 fec7 	bl	800bdc4 <USBD_LL_Start>
 800a036:	4603      	mov	r3, r0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a048:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d009      	beq.n	800a084 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	78fa      	ldrb	r2, [r7, #3]
 800a07a:	4611      	mov	r1, r2
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	4798      	blx	r3
 800a080:	4603      	mov	r3, r0
 800a082:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a084:	7bfb      	ldrb	r3, [r7, #15]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	4798      	blx	r3
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f001 f936 	bl	800b346 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0f6:	f003 031f 	and.w	r3, r3, #31
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d01a      	beq.n	800a134 <USBD_LL_SetupStage+0x72>
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d822      	bhi.n	800a148 <USBD_LL_SetupStage+0x86>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <USBD_LL_SetupStage+0x4a>
 800a106:	2b01      	cmp	r3, #1
 800a108:	d00a      	beq.n	800a120 <USBD_LL_SetupStage+0x5e>
 800a10a:	e01d      	b.n	800a148 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fb63 	bl	800a7e0 <USBD_StdDevReq>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]
      break;
 800a11e:	e020      	b.n	800a162 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fbcb 	bl	800a8c4 <USBD_StdItfReq>
 800a12e:	4603      	mov	r3, r0
 800a130:	73fb      	strb	r3, [r7, #15]
      break;
 800a132:	e016      	b.n	800a162 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fc2d 	bl	800a99c <USBD_StdEPReq>
 800a142:	4603      	mov	r3, r0
 800a144:	73fb      	strb	r3, [r7, #15]
      break;
 800a146:	e00c      	b.n	800a162 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a14e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a152:	b2db      	uxtb	r3, r3
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f001 feda 	bl	800bf10 <USBD_LL_StallEP>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]
      break;
 800a160:	bf00      	nop
  }

  return ret;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	460b      	mov	r3, r1
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a17e:	7afb      	ldrb	r3, [r7, #11]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d16e      	bne.n	800a262 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a18a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a192:	2b03      	cmp	r3, #3
 800a194:	f040 8098 	bne.w	800a2c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d913      	bls.n	800a1cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	1ad2      	subs	r2, r2, r3
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	68da      	ldr	r2, [r3, #12]
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	bf28      	it	cs
 800a1be:	4613      	movcs	r3, r2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f001 f9be 	bl	800b546 <USBD_CtlContinueRx>
 800a1ca:	e07d      	b.n	800a2c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a1d2:	f003 031f 	and.w	r3, r3, #31
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d014      	beq.n	800a204 <USBD_LL_DataOutStage+0x98>
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d81d      	bhi.n	800a21a <USBD_LL_DataOutStage+0xae>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d002      	beq.n	800a1e8 <USBD_LL_DataOutStage+0x7c>
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d003      	beq.n	800a1ee <USBD_LL_DataOutStage+0x82>
 800a1e6:	e018      	b.n	800a21a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	75bb      	strb	r3, [r7, #22]
            break;
 800a1ec:	e018      	b.n	800a220 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fa64 	bl	800a6c6 <USBD_CoreFindIF>
 800a1fe:	4603      	mov	r3, r0
 800a200:	75bb      	strb	r3, [r7, #22]
            break;
 800a202:	e00d      	b.n	800a220 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	4619      	mov	r1, r3
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 fa66 	bl	800a6e0 <USBD_CoreFindEP>
 800a214:	4603      	mov	r3, r0
 800a216:	75bb      	strb	r3, [r7, #22]
            break;
 800a218:	e002      	b.n	800a220 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	75bb      	strb	r3, [r7, #22]
            break;
 800a21e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a220:	7dbb      	ldrb	r3, [r7, #22]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d119      	bne.n	800a25a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d113      	bne.n	800a25a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a232:	7dba      	ldrb	r2, [r7, #22]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	32ae      	adds	r2, #174	@ 0xae
 800a238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00b      	beq.n	800a25a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a242:	7dba      	ldrb	r2, [r7, #22]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a24a:	7dba      	ldrb	r2, [r7, #22]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	32ae      	adds	r2, #174	@ 0xae
 800a250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f001 f984 	bl	800b568 <USBD_CtlSendStatus>
 800a260:	e032      	b.n	800a2c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a262:	7afb      	ldrb	r3, [r7, #11]
 800a264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	4619      	mov	r1, r3
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 fa37 	bl	800a6e0 <USBD_CoreFindEP>
 800a272:	4603      	mov	r3, r0
 800a274:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a276:	7dbb      	ldrb	r3, [r7, #22]
 800a278:	2bff      	cmp	r3, #255	@ 0xff
 800a27a:	d025      	beq.n	800a2c8 <USBD_LL_DataOutStage+0x15c>
 800a27c:	7dbb      	ldrb	r3, [r7, #22]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d122      	bne.n	800a2c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d117      	bne.n	800a2be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a28e:	7dba      	ldrb	r2, [r7, #22]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	32ae      	adds	r2, #174	@ 0xae
 800a294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00f      	beq.n	800a2be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a29e:	7dba      	ldrb	r2, [r7, #22]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a2a6:	7dba      	ldrb	r2, [r7, #22]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	32ae      	adds	r2, #174	@ 0xae
 800a2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	7afa      	ldrb	r2, [r7, #11]
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	4798      	blx	r3
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
 800a2c6:	e000      	b.n	800a2ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b086      	sub	sp, #24
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	60f8      	str	r0, [r7, #12]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	607a      	str	r2, [r7, #4]
 800a2de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a2e0:	7afb      	ldrb	r3, [r7, #11]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d16f      	bne.n	800a3c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3314      	adds	r3, #20
 800a2ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d15a      	bne.n	800a3ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	689a      	ldr	r2, [r3, #8]
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d914      	bls.n	800a32c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	689a      	ldr	r2, [r3, #8]
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	1ad2      	subs	r2, r2, r3
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	461a      	mov	r2, r3
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f001 f8e6 	bl	800b4ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a31e:	2300      	movs	r3, #0
 800a320:	2200      	movs	r2, #0
 800a322:	2100      	movs	r1, #0
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f001 fef9 	bl	800c11c <USBD_LL_PrepareReceive>
 800a32a:	e03f      	b.n	800a3ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	429a      	cmp	r2, r3
 800a336:	d11c      	bne.n	800a372 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a340:	429a      	cmp	r2, r3
 800a342:	d316      	bcc.n	800a372 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a34e:	429a      	cmp	r2, r3
 800a350:	d20f      	bcs.n	800a372 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a352:	2200      	movs	r2, #0
 800a354:	2100      	movs	r1, #0
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f001 f8c7 	bl	800b4ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a364:	2300      	movs	r3, #0
 800a366:	2200      	movs	r2, #0
 800a368:	2100      	movs	r1, #0
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f001 fed6 	bl	800c11c <USBD_LL_PrepareReceive>
 800a370:	e01c      	b.n	800a3ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d10f      	bne.n	800a39e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d009      	beq.n	800a39e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a39e:	2180      	movs	r1, #128	@ 0x80
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f001 fdb5 	bl	800bf10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f001 f8f1 	bl	800b58e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d03a      	beq.n	800a42c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7ff fe42 	bl	800a040 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a3c4:	e032      	b.n	800a42c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a3c6:	7afb      	ldrb	r3, [r7, #11]
 800a3c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 f985 	bl	800a6e0 <USBD_CoreFindEP>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	2bff      	cmp	r3, #255	@ 0xff
 800a3de:	d025      	beq.n	800a42c <USBD_LL_DataInStage+0x15a>
 800a3e0:	7dfb      	ldrb	r3, [r7, #23]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d122      	bne.n	800a42c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d11c      	bne.n	800a42c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a3f2:	7dfa      	ldrb	r2, [r7, #23]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	32ae      	adds	r2, #174	@ 0xae
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d014      	beq.n	800a42c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a402:	7dfa      	ldrb	r2, [r7, #23]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a40a:	7dfa      	ldrb	r2, [r7, #23]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	32ae      	adds	r2, #174	@ 0xae
 800a410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	7afa      	ldrb	r2, [r7, #11]
 800a418:	4611      	mov	r1, r2
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	4798      	blx	r3
 800a41e:	4603      	mov	r3, r0
 800a420:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a422:	7dbb      	ldrb	r3, [r7, #22]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a428:	7dbb      	ldrb	r3, [r7, #22]
 800a42a:	e000      	b.n	800a42e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d014      	beq.n	800a49c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00e      	beq.n	800a49c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6852      	ldr	r2, [r2, #4]
 800a48a:	b2d2      	uxtb	r2, r2
 800a48c:	4611      	mov	r1, r2
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a498:	2303      	movs	r3, #3
 800a49a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a49c:	2340      	movs	r3, #64	@ 0x40
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 fcc0 	bl	800be28 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2240      	movs	r2, #64	@ 0x40
 800a4b4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4b8:	2340      	movs	r3, #64	@ 0x40
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2180      	movs	r1, #128	@ 0x80
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 fcb2 	bl	800be28 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2240      	movs	r2, #64	@ 0x40
 800a4ce:	621a      	str	r2, [r3, #32]

  return ret;
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	78fa      	ldrb	r2, [r7, #3]
 800a4ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	d006      	beq.n	800a51c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a514:	b2da      	uxtb	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2204      	movs	r2, #4
 800a520:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a532:	b480      	push	{r7}
 800a534:	b083      	sub	sp, #12
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b04      	cmp	r3, #4
 800a544:	d106      	bne.n	800a554 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b03      	cmp	r3, #3
 800a574:	d110      	bne.n	800a598 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00b      	beq.n	800a598 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a586:	69db      	ldr	r3, [r3, #28]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d005      	beq.n	800a598 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a592:	69db      	ldr	r3, [r3, #28]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	32ae      	adds	r2, #174	@ 0xae
 800a5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e01c      	b.n	800a5fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	d115      	bne.n	800a5fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	32ae      	adds	r2, #174	@ 0xae
 800a5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	32ae      	adds	r2, #174	@ 0xae
 800a5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f2:	6a1b      	ldr	r3, [r3, #32]
 800a5f4:	78fa      	ldrb	r2, [r7, #3]
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	32ae      	adds	r2, #174	@ 0xae
 800a61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a624:	2303      	movs	r3, #3
 800a626:	e01c      	b.n	800a662 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b03      	cmp	r3, #3
 800a632:	d115      	bne.n	800a660 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	32ae      	adds	r2, #174	@ 0xae
 800a63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	32ae      	adds	r2, #174	@ 0xae
 800a652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a658:	78fa      	ldrb	r2, [r7, #3]
 800a65a:	4611      	mov	r1, r2
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b083      	sub	sp, #12
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00e      	beq.n	800a6bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	6852      	ldr	r2, [r2, #4]
 800a6aa:	b2d2      	uxtb	r2, r2
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b086      	sub	sp, #24
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	885b      	ldrh	r3, [r3, #2]
 800a716:	b29b      	uxth	r3, r3
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	7812      	ldrb	r2, [r2, #0]
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d91f      	bls.n	800a760 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a726:	e013      	b.n	800a750 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a728:	f107 030a 	add.w	r3, r7, #10
 800a72c:	4619      	mov	r1, r3
 800a72e:	6978      	ldr	r0, [r7, #20]
 800a730:	f000 f81b 	bl	800a76a <USBD_GetNextDesc>
 800a734:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	785b      	ldrb	r3, [r3, #1]
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	d108      	bne.n	800a750 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	789b      	ldrb	r3, [r3, #2]
 800a746:	78fa      	ldrb	r2, [r7, #3]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d008      	beq.n	800a75e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	885b      	ldrh	r3, [r3, #2]
 800a754:	b29a      	uxth	r2, r3
 800a756:	897b      	ldrh	r3, [r7, #10]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d8e5      	bhi.n	800a728 <USBD_GetEpDesc+0x2e>
 800a75c:	e000      	b.n	800a760 <USBD_GetEpDesc+0x66>
          break;
 800a75e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a760:	693b      	ldr	r3, [r7, #16]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b085      	sub	sp, #20
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	7812      	ldrb	r2, [r2, #0]
 800a780:	4413      	add	r3, r2
 800a782:	b29a      	uxth	r2, r3
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	461a      	mov	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4413      	add	r3, r2
 800a792:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a794:	68fb      	ldr	r3, [r7, #12]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b087      	sub	sp, #28
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a7c4:	021b      	lsls	r3, r3, #8
 800a7c6:	b21a      	sxth	r2, r3
 800a7c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	b21b      	sxth	r3, r3
 800a7d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7d2:	89fb      	ldrh	r3, [r7, #14]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7f6:	2b40      	cmp	r3, #64	@ 0x40
 800a7f8:	d005      	beq.n	800a806 <USBD_StdDevReq+0x26>
 800a7fa:	2b40      	cmp	r3, #64	@ 0x40
 800a7fc:	d857      	bhi.n	800a8ae <USBD_StdDevReq+0xce>
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00f      	beq.n	800a822 <USBD_StdDevReq+0x42>
 800a802:	2b20      	cmp	r3, #32
 800a804:	d153      	bne.n	800a8ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	32ae      	adds	r2, #174	@ 0xae
 800a810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	4798      	blx	r3
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]
      break;
 800a820:	e04a      	b.n	800a8b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	2b09      	cmp	r3, #9
 800a828:	d83b      	bhi.n	800a8a2 <USBD_StdDevReq+0xc2>
 800a82a:	a201      	add	r2, pc, #4	@ (adr r2, 800a830 <USBD_StdDevReq+0x50>)
 800a82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a830:	0800a885 	.word	0x0800a885
 800a834:	0800a899 	.word	0x0800a899
 800a838:	0800a8a3 	.word	0x0800a8a3
 800a83c:	0800a88f 	.word	0x0800a88f
 800a840:	0800a8a3 	.word	0x0800a8a3
 800a844:	0800a863 	.word	0x0800a863
 800a848:	0800a859 	.word	0x0800a859
 800a84c:	0800a8a3 	.word	0x0800a8a3
 800a850:	0800a87b 	.word	0x0800a87b
 800a854:	0800a86d 	.word	0x0800a86d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fa3c 	bl	800acd8 <USBD_GetDescriptor>
          break;
 800a860:	e024      	b.n	800a8ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fbcb 	bl	800b000 <USBD_SetAddress>
          break;
 800a86a:	e01f      	b.n	800a8ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fc0a 	bl	800b088 <USBD_SetConfig>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]
          break;
 800a878:	e018      	b.n	800a8ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fcad 	bl	800b1dc <USBD_GetConfig>
          break;
 800a882:	e013      	b.n	800a8ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fcde 	bl	800b248 <USBD_GetStatus>
          break;
 800a88c:	e00e      	b.n	800a8ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fd0d 	bl	800b2b0 <USBD_SetFeature>
          break;
 800a896:	e009      	b.n	800a8ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fd31 	bl	800b302 <USBD_ClrFeature>
          break;
 800a8a0:	e004      	b.n	800a8ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fd88 	bl	800b3ba <USBD_CtlError>
          break;
 800a8aa:	bf00      	nop
      }
      break;
 800a8ac:	e004      	b.n	800a8b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fd82 	bl	800b3ba <USBD_CtlError>
      break;
 800a8b6:	bf00      	nop
  }

  return ret;
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop

0800a8c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8da:	2b40      	cmp	r3, #64	@ 0x40
 800a8dc:	d005      	beq.n	800a8ea <USBD_StdItfReq+0x26>
 800a8de:	2b40      	cmp	r3, #64	@ 0x40
 800a8e0:	d852      	bhi.n	800a988 <USBD_StdItfReq+0xc4>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <USBD_StdItfReq+0x26>
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	d14e      	bne.n	800a988 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d840      	bhi.n	800a97a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	889b      	ldrh	r3, [r3, #4]
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d836      	bhi.n	800a970 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	889b      	ldrh	r3, [r3, #4]
 800a906:	b2db      	uxtb	r3, r3
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff fedb 	bl	800a6c6 <USBD_CoreFindIF>
 800a910:	4603      	mov	r3, r0
 800a912:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	2bff      	cmp	r3, #255	@ 0xff
 800a918:	d01d      	beq.n	800a956 <USBD_StdItfReq+0x92>
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d11a      	bne.n	800a956 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a920:	7bba      	ldrb	r2, [r7, #14]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	32ae      	adds	r2, #174	@ 0xae
 800a926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00f      	beq.n	800a950 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a930:	7bba      	ldrb	r2, [r7, #14]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a938:	7bba      	ldrb	r2, [r7, #14]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	32ae      	adds	r2, #174	@ 0xae
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	4798      	blx	r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a94e:	e004      	b.n	800a95a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a950:	2303      	movs	r3, #3
 800a952:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a954:	e001      	b.n	800a95a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a956:	2303      	movs	r3, #3
 800a958:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	88db      	ldrh	r3, [r3, #6]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d110      	bne.n	800a984 <USBD_StdItfReq+0xc0>
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10d      	bne.n	800a984 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fdfd 	bl	800b568 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a96e:	e009      	b.n	800a984 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fd21 	bl	800b3ba <USBD_CtlError>
          break;
 800a978:	e004      	b.n	800a984 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fd1c 	bl	800b3ba <USBD_CtlError>
          break;
 800a982:	e000      	b.n	800a986 <USBD_StdItfReq+0xc2>
          break;
 800a984:	bf00      	nop
      }
      break;
 800a986:	e004      	b.n	800a992 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fd15 	bl	800b3ba <USBD_CtlError>
      break;
 800a990:	bf00      	nop
  }

  return ret;
 800a992:	7bfb      	ldrb	r3, [r7, #15]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	889b      	ldrh	r3, [r3, #4]
 800a9ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9b8:	2b40      	cmp	r3, #64	@ 0x40
 800a9ba:	d007      	beq.n	800a9cc <USBD_StdEPReq+0x30>
 800a9bc:	2b40      	cmp	r3, #64	@ 0x40
 800a9be:	f200 817f 	bhi.w	800acc0 <USBD_StdEPReq+0x324>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d02a      	beq.n	800aa1c <USBD_StdEPReq+0x80>
 800a9c6:	2b20      	cmp	r3, #32
 800a9c8:	f040 817a 	bne.w	800acc0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff fe85 	bl	800a6e0 <USBD_CoreFindEP>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9da:	7b7b      	ldrb	r3, [r7, #13]
 800a9dc:	2bff      	cmp	r3, #255	@ 0xff
 800a9de:	f000 8174 	beq.w	800acca <USBD_StdEPReq+0x32e>
 800a9e2:	7b7b      	ldrb	r3, [r7, #13]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f040 8170 	bne.w	800acca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a9ea:	7b7a      	ldrb	r2, [r7, #13]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a9f2:	7b7a      	ldrb	r2, [r7, #13]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	32ae      	adds	r2, #174	@ 0xae
 800a9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 8163 	beq.w	800acca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa04:	7b7a      	ldrb	r2, [r7, #13]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	32ae      	adds	r2, #174	@ 0xae
 800aa0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
 800aa16:	4603      	mov	r3, r0
 800aa18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa1a:	e156      	b.n	800acca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	785b      	ldrb	r3, [r3, #1]
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d008      	beq.n	800aa36 <USBD_StdEPReq+0x9a>
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	f300 8145 	bgt.w	800acb4 <USBD_StdEPReq+0x318>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 809b 	beq.w	800ab66 <USBD_StdEPReq+0x1ca>
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d03c      	beq.n	800aaae <USBD_StdEPReq+0x112>
 800aa34:	e13e      	b.n	800acb4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d002      	beq.n	800aa48 <USBD_StdEPReq+0xac>
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d016      	beq.n	800aa74 <USBD_StdEPReq+0xd8>
 800aa46:	e02c      	b.n	800aaa2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00d      	beq.n	800aa6a <USBD_StdEPReq+0xce>
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
 800aa50:	2b80      	cmp	r3, #128	@ 0x80
 800aa52:	d00a      	beq.n	800aa6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 fa59 	bl	800bf10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa5e:	2180      	movs	r1, #128	@ 0x80
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 fa55 	bl	800bf10 <USBD_LL_StallEP>
 800aa66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa68:	e020      	b.n	800aaac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa6a:	6839      	ldr	r1, [r7, #0]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fca4 	bl	800b3ba <USBD_CtlError>
              break;
 800aa72:	e01b      	b.n	800aaac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	885b      	ldrh	r3, [r3, #2]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10e      	bne.n	800aa9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa7c:	7bbb      	ldrb	r3, [r7, #14]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00b      	beq.n	800aa9a <USBD_StdEPReq+0xfe>
 800aa82:	7bbb      	ldrb	r3, [r7, #14]
 800aa84:	2b80      	cmp	r3, #128	@ 0x80
 800aa86:	d008      	beq.n	800aa9a <USBD_StdEPReq+0xfe>
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	88db      	ldrh	r3, [r3, #6]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d104      	bne.n	800aa9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 fa3b 	bl	800bf10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fd64 	bl	800b568 <USBD_CtlSendStatus>

              break;
 800aaa0:	e004      	b.n	800aaac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fc88 	bl	800b3ba <USBD_CtlError>
              break;
 800aaaa:	bf00      	nop
          }
          break;
 800aaac:	e107      	b.n	800acbe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d002      	beq.n	800aac0 <USBD_StdEPReq+0x124>
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d016      	beq.n	800aaec <USBD_StdEPReq+0x150>
 800aabe:	e04b      	b.n	800ab58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00d      	beq.n	800aae2 <USBD_StdEPReq+0x146>
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	2b80      	cmp	r3, #128	@ 0x80
 800aaca:	d00a      	beq.n	800aae2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f001 fa1d 	bl	800bf10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aad6:	2180      	movs	r1, #128	@ 0x80
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f001 fa19 	bl	800bf10 <USBD_LL_StallEP>
 800aade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aae0:	e040      	b.n	800ab64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fc68 	bl	800b3ba <USBD_CtlError>
              break;
 800aaea:	e03b      	b.n	800ab64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	885b      	ldrh	r3, [r3, #2]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d136      	bne.n	800ab62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
 800aaf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d004      	beq.n	800ab08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 fa3a 	bl	800bf7c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fd2d 	bl	800b568 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab0e:	7bbb      	ldrb	r3, [r7, #14]
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7ff fde4 	bl	800a6e0 <USBD_CoreFindEP>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab1c:	7b7b      	ldrb	r3, [r7, #13]
 800ab1e:	2bff      	cmp	r3, #255	@ 0xff
 800ab20:	d01f      	beq.n	800ab62 <USBD_StdEPReq+0x1c6>
 800ab22:	7b7b      	ldrb	r3, [r7, #13]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d11c      	bne.n	800ab62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab28:	7b7a      	ldrb	r2, [r7, #13]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab30:	7b7a      	ldrb	r2, [r7, #13]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	32ae      	adds	r2, #174	@ 0xae
 800ab36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d010      	beq.n	800ab62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab40:	7b7a      	ldrb	r2, [r7, #13]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	32ae      	adds	r2, #174	@ 0xae
 800ab46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	4798      	blx	r3
 800ab52:	4603      	mov	r3, r0
 800ab54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab56:	e004      	b.n	800ab62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fc2d 	bl	800b3ba <USBD_CtlError>
              break;
 800ab60:	e000      	b.n	800ab64 <USBD_StdEPReq+0x1c8>
              break;
 800ab62:	bf00      	nop
          }
          break;
 800ab64:	e0ab      	b.n	800acbe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d002      	beq.n	800ab78 <USBD_StdEPReq+0x1dc>
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d032      	beq.n	800abdc <USBD_StdEPReq+0x240>
 800ab76:	e097      	b.n	800aca8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d007      	beq.n	800ab8e <USBD_StdEPReq+0x1f2>
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	2b80      	cmp	r3, #128	@ 0x80
 800ab82:	d004      	beq.n	800ab8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fc17 	bl	800b3ba <USBD_CtlError>
                break;
 800ab8c:	e091      	b.n	800acb2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	da0b      	bge.n	800abae <USBD_StdEPReq+0x212>
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
 800ab98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	3310      	adds	r3, #16
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	4413      	add	r3, r2
 800abaa:	3304      	adds	r3, #4
 800abac:	e00b      	b.n	800abc6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abb4:	4613      	mov	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	4413      	add	r3, r2
 800abc4:	3304      	adds	r3, #4
 800abc6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2202      	movs	r2, #2
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fc6d 	bl	800b4b4 <USBD_CtlSendData>
              break;
 800abda:	e06a      	b.n	800acb2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	da11      	bge.n	800ac08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
 800abe6:	f003 020f 	and.w	r2, r3, #15
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	4613      	mov	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	440b      	add	r3, r1
 800abf6:	3324      	adds	r3, #36	@ 0x24
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d117      	bne.n	800ac2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 fbda 	bl	800b3ba <USBD_CtlError>
                  break;
 800ac06:	e054      	b.n	800acb2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	f003 020f 	and.w	r2, r3, #15
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	440b      	add	r3, r1
 800ac1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d104      	bne.n	800ac2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fbc7 	bl	800b3ba <USBD_CtlError>
                  break;
 800ac2c:	e041      	b.n	800acb2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	da0b      	bge.n	800ac4e <USBD_StdEPReq+0x2b2>
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	3310      	adds	r3, #16
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	4413      	add	r3, r2
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	e00b      	b.n	800ac66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	4413      	add	r3, r2
 800ac64:	3304      	adds	r3, #4
 800ac66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac68:	7bbb      	ldrb	r3, [r7, #14]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <USBD_StdEPReq+0x2d8>
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
 800ac70:	2b80      	cmp	r3, #128	@ 0x80
 800ac72:	d103      	bne.n	800ac7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2200      	movs	r2, #0
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	e00e      	b.n	800ac9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f001 f9b1 	bl	800bfe8 <USBD_LL_IsStallEP>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	e002      	b.n	800ac9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fc07 	bl	800b4b4 <USBD_CtlSendData>
              break;
 800aca6:	e004      	b.n	800acb2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fb85 	bl	800b3ba <USBD_CtlError>
              break;
 800acb0:	bf00      	nop
          }
          break;
 800acb2:	e004      	b.n	800acbe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fb7f 	bl	800b3ba <USBD_CtlError>
          break;
 800acbc:	bf00      	nop
      }
      break;
 800acbe:	e005      	b.n	800accc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fb79 	bl	800b3ba <USBD_CtlError>
      break;
 800acc8:	e000      	b.n	800accc <USBD_StdEPReq+0x330>
      break;
 800acca:	bf00      	nop
  }

  return ret;
 800accc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
	...

0800acd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ace2:	2300      	movs	r3, #0
 800ace4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	885b      	ldrh	r3, [r3, #2]
 800acf2:	0a1b      	lsrs	r3, r3, #8
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	3b01      	subs	r3, #1
 800acf8:	2b0e      	cmp	r3, #14
 800acfa:	f200 8152 	bhi.w	800afa2 <USBD_GetDescriptor+0x2ca>
 800acfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ad04 <USBD_GetDescriptor+0x2c>)
 800ad00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad04:	0800ad75 	.word	0x0800ad75
 800ad08:	0800ad8d 	.word	0x0800ad8d
 800ad0c:	0800adcd 	.word	0x0800adcd
 800ad10:	0800afa3 	.word	0x0800afa3
 800ad14:	0800afa3 	.word	0x0800afa3
 800ad18:	0800af43 	.word	0x0800af43
 800ad1c:	0800af6f 	.word	0x0800af6f
 800ad20:	0800afa3 	.word	0x0800afa3
 800ad24:	0800afa3 	.word	0x0800afa3
 800ad28:	0800afa3 	.word	0x0800afa3
 800ad2c:	0800afa3 	.word	0x0800afa3
 800ad30:	0800afa3 	.word	0x0800afa3
 800ad34:	0800afa3 	.word	0x0800afa3
 800ad38:	0800afa3 	.word	0x0800afa3
 800ad3c:	0800ad41 	.word	0x0800ad41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad46:	69db      	ldr	r3, [r3, #28]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00b      	beq.n	800ad64 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	7c12      	ldrb	r2, [r2, #16]
 800ad58:	f107 0108 	add.w	r1, r7, #8
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	4798      	blx	r3
 800ad60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad62:	e126      	b.n	800afb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fb27 	bl	800b3ba <USBD_CtlError>
        err++;
 800ad6c:	7afb      	ldrb	r3, [r7, #11]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	72fb      	strb	r3, [r7, #11]
      break;
 800ad72:	e11e      	b.n	800afb2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	7c12      	ldrb	r2, [r2, #16]
 800ad80:	f107 0108 	add.w	r1, r7, #8
 800ad84:	4610      	mov	r0, r2
 800ad86:	4798      	blx	r3
 800ad88:	60f8      	str	r0, [r7, #12]
      break;
 800ad8a:	e112      	b.n	800afb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7c1b      	ldrb	r3, [r3, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10d      	bne.n	800adb0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9c:	f107 0208 	add.w	r2, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3301      	adds	r3, #1
 800adaa:	2202      	movs	r2, #2
 800adac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adae:	e100      	b.n	800afb2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb8:	f107 0208 	add.w	r2, r7, #8
 800adbc:	4610      	mov	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	2202      	movs	r2, #2
 800adc8:	701a      	strb	r2, [r3, #0]
      break;
 800adca:	e0f2      	b.n	800afb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	885b      	ldrh	r3, [r3, #2]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b05      	cmp	r3, #5
 800add4:	f200 80ac 	bhi.w	800af30 <USBD_GetDescriptor+0x258>
 800add8:	a201      	add	r2, pc, #4	@ (adr r2, 800ade0 <USBD_GetDescriptor+0x108>)
 800adda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adde:	bf00      	nop
 800ade0:	0800adf9 	.word	0x0800adf9
 800ade4:	0800ae2d 	.word	0x0800ae2d
 800ade8:	0800ae61 	.word	0x0800ae61
 800adec:	0800ae95 	.word	0x0800ae95
 800adf0:	0800aec9 	.word	0x0800aec9
 800adf4:	0800aefd 	.word	0x0800aefd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00b      	beq.n	800ae1c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	7c12      	ldrb	r2, [r2, #16]
 800ae10:	f107 0108 	add.w	r1, r7, #8
 800ae14:	4610      	mov	r0, r2
 800ae16:	4798      	blx	r3
 800ae18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae1a:	e091      	b.n	800af40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 facb 	bl	800b3ba <USBD_CtlError>
            err++;
 800ae24:	7afb      	ldrb	r3, [r7, #11]
 800ae26:	3301      	adds	r3, #1
 800ae28:	72fb      	strb	r3, [r7, #11]
          break;
 800ae2a:	e089      	b.n	800af40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00b      	beq.n	800ae50 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	7c12      	ldrb	r2, [r2, #16]
 800ae44:	f107 0108 	add.w	r1, r7, #8
 800ae48:	4610      	mov	r0, r2
 800ae4a:	4798      	blx	r3
 800ae4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae4e:	e077      	b.n	800af40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fab1 	bl	800b3ba <USBD_CtlError>
            err++;
 800ae58:	7afb      	ldrb	r3, [r7, #11]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae5e:	e06f      	b.n	800af40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00b      	beq.n	800ae84 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	7c12      	ldrb	r2, [r2, #16]
 800ae78:	f107 0108 	add.w	r1, r7, #8
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
 800ae80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae82:	e05d      	b.n	800af40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fa97 	bl	800b3ba <USBD_CtlError>
            err++;
 800ae8c:	7afb      	ldrb	r3, [r7, #11]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	72fb      	strb	r3, [r7, #11]
          break;
 800ae92:	e055      	b.n	800af40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	7c12      	ldrb	r2, [r2, #16]
 800aeac:	f107 0108 	add.w	r1, r7, #8
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	4798      	blx	r3
 800aeb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeb6:	e043      	b.n	800af40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fa7d 	bl	800b3ba <USBD_CtlError>
            err++;
 800aec0:	7afb      	ldrb	r3, [r7, #11]
 800aec2:	3301      	adds	r3, #1
 800aec4:	72fb      	strb	r3, [r7, #11]
          break;
 800aec6:	e03b      	b.n	800af40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00b      	beq.n	800aeec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	7c12      	ldrb	r2, [r2, #16]
 800aee0:	f107 0108 	add.w	r1, r7, #8
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeea:	e029      	b.n	800af40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fa63 	bl	800b3ba <USBD_CtlError>
            err++;
 800aef4:	7afb      	ldrb	r3, [r7, #11]
 800aef6:	3301      	adds	r3, #1
 800aef8:	72fb      	strb	r3, [r7, #11]
          break;
 800aefa:	e021      	b.n	800af40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af0e:	699b      	ldr	r3, [r3, #24]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	7c12      	ldrb	r2, [r2, #16]
 800af14:	f107 0108 	add.w	r1, r7, #8
 800af18:	4610      	mov	r0, r2
 800af1a:	4798      	blx	r3
 800af1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af1e:	e00f      	b.n	800af40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa49 	bl	800b3ba <USBD_CtlError>
            err++;
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	3301      	adds	r3, #1
 800af2c:	72fb      	strb	r3, [r7, #11]
          break;
 800af2e:	e007      	b.n	800af40 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fa41 	bl	800b3ba <USBD_CtlError>
          err++;
 800af38:	7afb      	ldrb	r3, [r7, #11]
 800af3a:	3301      	adds	r3, #1
 800af3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af3e:	bf00      	nop
      }
      break;
 800af40:	e037      	b.n	800afb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7c1b      	ldrb	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d109      	bne.n	800af5e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af52:	f107 0208 	add.w	r2, r7, #8
 800af56:	4610      	mov	r0, r2
 800af58:	4798      	blx	r3
 800af5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af5c:	e029      	b.n	800afb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fa2a 	bl	800b3ba <USBD_CtlError>
        err++;
 800af66:	7afb      	ldrb	r3, [r7, #11]
 800af68:	3301      	adds	r3, #1
 800af6a:	72fb      	strb	r3, [r7, #11]
      break;
 800af6c:	e021      	b.n	800afb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7c1b      	ldrb	r3, [r3, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10d      	bne.n	800af92 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af7e:	f107 0208 	add.w	r2, r7, #8
 800af82:	4610      	mov	r0, r2
 800af84:	4798      	blx	r3
 800af86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	3301      	adds	r3, #1
 800af8c:	2207      	movs	r2, #7
 800af8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af90:	e00f      	b.n	800afb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fa10 	bl	800b3ba <USBD_CtlError>
        err++;
 800af9a:	7afb      	ldrb	r3, [r7, #11]
 800af9c:	3301      	adds	r3, #1
 800af9e:	72fb      	strb	r3, [r7, #11]
      break;
 800afa0:	e007      	b.n	800afb2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fa08 	bl	800b3ba <USBD_CtlError>
      err++;
 800afaa:	7afb      	ldrb	r3, [r7, #11]
 800afac:	3301      	adds	r3, #1
 800afae:	72fb      	strb	r3, [r7, #11]
      break;
 800afb0:	bf00      	nop
  }

  if (err != 0U)
 800afb2:	7afb      	ldrb	r3, [r7, #11]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d11e      	bne.n	800aff6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	88db      	ldrh	r3, [r3, #6]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d016      	beq.n	800afee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800afc0:	893b      	ldrh	r3, [r7, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00e      	beq.n	800afe4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	88da      	ldrh	r2, [r3, #6]
 800afca:	893b      	ldrh	r3, [r7, #8]
 800afcc:	4293      	cmp	r3, r2
 800afce:	bf28      	it	cs
 800afd0:	4613      	movcs	r3, r2
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afd6:	893b      	ldrh	r3, [r7, #8]
 800afd8:	461a      	mov	r2, r3
 800afda:	68f9      	ldr	r1, [r7, #12]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fa69 	bl	800b4b4 <USBD_CtlSendData>
 800afe2:	e009      	b.n	800aff8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f9e7 	bl	800b3ba <USBD_CtlError>
 800afec:	e004      	b.n	800aff8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 faba 	bl	800b568 <USBD_CtlSendStatus>
 800aff4:	e000      	b.n	800aff8 <USBD_GetDescriptor+0x320>
    return;
 800aff6:	bf00      	nop
  }
}
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop

0800b000 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	889b      	ldrh	r3, [r3, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d131      	bne.n	800b076 <USBD_SetAddress+0x76>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	88db      	ldrh	r3, [r3, #6]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d12d      	bne.n	800b076 <USBD_SetAddress+0x76>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	885b      	ldrh	r3, [r3, #2]
 800b01e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b020:	d829      	bhi.n	800b076 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	885b      	ldrh	r3, [r3, #2]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b02c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b03      	cmp	r3, #3
 800b038:	d104      	bne.n	800b044 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f9bc 	bl	800b3ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b042:	e01d      	b.n	800b080 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	7bfa      	ldrb	r2, [r7, #15]
 800b048:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fff5 	bl	800c040 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fa86 	bl	800b568 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d004      	beq.n	800b06c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2202      	movs	r2, #2
 800b066:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b06a:	e009      	b.n	800b080 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b074:	e004      	b.n	800b080 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f99e 	bl	800b3ba <USBD_CtlError>
  }
}
 800b07e:	bf00      	nop
 800b080:	bf00      	nop
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	885b      	ldrh	r3, [r3, #2]
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	4b4e      	ldr	r3, [pc, #312]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b09e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0a0:	4b4d      	ldr	r3, [pc, #308]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d905      	bls.n	800b0b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f985 	bl	800b3ba <USBD_CtlError>
    return USBD_FAIL;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e08c      	b.n	800b1ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d002      	beq.n	800b0c6 <USBD_SetConfig+0x3e>
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d029      	beq.n	800b118 <USBD_SetConfig+0x90>
 800b0c4:	e075      	b.n	800b1b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0c6:	4b44      	ldr	r3, [pc, #272]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d020      	beq.n	800b110 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b0ce:	4b42      	ldr	r3, [pc, #264]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0d8:	4b3f      	ldr	r3, [pc, #252]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7fe ffb9 	bl	800a056 <USBD_SetClassConfig>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d008      	beq.n	800b100 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f962 	bl	800b3ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0fe:	e065      	b.n	800b1cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fa31 	bl	800b568 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2203      	movs	r2, #3
 800b10a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b10e:	e05d      	b.n	800b1cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fa29 	bl	800b568 <USBD_CtlSendStatus>
      break;
 800b116:	e059      	b.n	800b1cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b118:	4b2f      	ldr	r3, [pc, #188]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d112      	bne.n	800b146 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b128:	4b2b      	ldr	r3, [pc, #172]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	461a      	mov	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b132:	4b29      	ldr	r3, [pc, #164]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7fe ffa8 	bl	800a08e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fa12 	bl	800b568 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b144:	e042      	b.n	800b1cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b146:	4b24      	ldr	r3, [pc, #144]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	429a      	cmp	r2, r3
 800b152:	d02a      	beq.n	800b1aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7fe ff96 	bl	800a08e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b162:	4b1d      	ldr	r3, [pc, #116]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b16c:	4b1a      	ldr	r3, [pc, #104]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7fe ff6f 	bl	800a056 <USBD_SetClassConfig>
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00f      	beq.n	800b1a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f918 	bl	800b3ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7fe ff7b 	bl	800a08e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2202      	movs	r2, #2
 800b19c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b1a0:	e014      	b.n	800b1cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f9e0 	bl	800b568 <USBD_CtlSendStatus>
      break;
 800b1a8:	e010      	b.n	800b1cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f9dc 	bl	800b568 <USBD_CtlSendStatus>
      break;
 800b1b0:	e00c      	b.n	800b1cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f900 	bl	800b3ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1ba:	4b07      	ldr	r3, [pc, #28]	@ (800b1d8 <USBD_SetConfig+0x150>)
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7fe ff64 	bl	800a08e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ca:	bf00      	nop
  }

  return ret;
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	20000afc 	.word	0x20000afc

0800b1dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	88db      	ldrh	r3, [r3, #6]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d004      	beq.n	800b1f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f8e2 	bl	800b3ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1f6:	e023      	b.n	800b240 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b02      	cmp	r3, #2
 800b202:	dc02      	bgt.n	800b20a <USBD_GetConfig+0x2e>
 800b204:	2b00      	cmp	r3, #0
 800b206:	dc03      	bgt.n	800b210 <USBD_GetConfig+0x34>
 800b208:	e015      	b.n	800b236 <USBD_GetConfig+0x5a>
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d00b      	beq.n	800b226 <USBD_GetConfig+0x4a>
 800b20e:	e012      	b.n	800b236 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3308      	adds	r3, #8
 800b21a:	2201      	movs	r2, #1
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f948 	bl	800b4b4 <USBD_CtlSendData>
        break;
 800b224:	e00c      	b.n	800b240 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3304      	adds	r3, #4
 800b22a:	2201      	movs	r2, #1
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 f940 	bl	800b4b4 <USBD_CtlSendData>
        break;
 800b234:	e004      	b.n	800b240 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f8be 	bl	800b3ba <USBD_CtlError>
        break;
 800b23e:	bf00      	nop
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	3b01      	subs	r3, #1
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d81e      	bhi.n	800b29e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	88db      	ldrh	r3, [r3, #6]
 800b264:	2b02      	cmp	r3, #2
 800b266:	d004      	beq.n	800b272 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f8a5 	bl	800b3ba <USBD_CtlError>
        break;
 800b270:	e01a      	b.n	800b2a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d005      	beq.n	800b28e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	f043 0202 	orr.w	r2, r3, #2
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	330c      	adds	r3, #12
 800b292:	2202      	movs	r2, #2
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f90c 	bl	800b4b4 <USBD_CtlSendData>
      break;
 800b29c:	e004      	b.n	800b2a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f88a 	bl	800b3ba <USBD_CtlError>
      break;
 800b2a6:	bf00      	nop
  }
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	885b      	ldrh	r3, [r3, #2]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d107      	bne.n	800b2d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f94c 	bl	800b568 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b2d0:	e013      	b.n	800b2fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	885b      	ldrh	r3, [r3, #2]
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d10b      	bne.n	800b2f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	889b      	ldrh	r3, [r3, #4]
 800b2de:	0a1b      	lsrs	r3, r3, #8
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f93c 	bl	800b568 <USBD_CtlSendStatus>
}
 800b2f0:	e003      	b.n	800b2fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f860 	bl	800b3ba <USBD_CtlError>
}
 800b2fa:	bf00      	nop
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b082      	sub	sp, #8
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b312:	b2db      	uxtb	r3, r3
 800b314:	3b01      	subs	r3, #1
 800b316:	2b02      	cmp	r3, #2
 800b318:	d80b      	bhi.n	800b332 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	885b      	ldrh	r3, [r3, #2]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d10c      	bne.n	800b33c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f91c 	bl	800b568 <USBD_CtlSendStatus>
      }
      break;
 800b330:	e004      	b.n	800b33c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f840 	bl	800b3ba <USBD_CtlError>
      break;
 800b33a:	e000      	b.n	800b33e <USBD_ClrFeature+0x3c>
      break;
 800b33c:	bf00      	nop
  }
}
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b084      	sub	sp, #16
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	781a      	ldrb	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	3301      	adds	r3, #1
 800b360:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	781a      	ldrb	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3301      	adds	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f7ff fa16 	bl	800a7a2 <SWAPBYTE>
 800b376:	4603      	mov	r3, r0
 800b378:	461a      	mov	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3301      	adds	r3, #1
 800b382:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3301      	adds	r3, #1
 800b388:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f7ff fa09 	bl	800a7a2 <SWAPBYTE>
 800b390:	4603      	mov	r3, r0
 800b392:	461a      	mov	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3301      	adds	r3, #1
 800b39c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f7ff f9fc 	bl	800a7a2 <SWAPBYTE>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	80da      	strh	r2, [r3, #6]
}
 800b3b2:	bf00      	nop
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b082      	sub	sp, #8
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3c4:	2180      	movs	r1, #128	@ 0x80
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fda2 	bl	800bf10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fd9e 	bl	800bf10 <USBD_LL_StallEP>
}
 800b3d4:	bf00      	nop
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d042      	beq.n	800b478 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b3f6:	6938      	ldr	r0, [r7, #16]
 800b3f8:	f000 f842 	bl	800b480 <USBD_GetLen>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	3301      	adds	r3, #1
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b406:	d808      	bhi.n	800b41a <USBD_GetString+0x3e>
 800b408:	6938      	ldr	r0, [r7, #16]
 800b40a:	f000 f839 	bl	800b480 <USBD_GetLen>
 800b40e:	4603      	mov	r3, r0
 800b410:	3301      	adds	r3, #1
 800b412:	b29b      	uxth	r3, r3
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	b29a      	uxth	r2, r3
 800b418:	e001      	b.n	800b41e <USBD_GetString+0x42>
 800b41a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	4413      	add	r3, r2
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	7812      	ldrb	r2, [r2, #0]
 800b42c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	3301      	adds	r3, #1
 800b432:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b434:	7dfb      	ldrb	r3, [r7, #23]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	4413      	add	r3, r2
 800b43a:	2203      	movs	r2, #3
 800b43c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b43e:	7dfb      	ldrb	r3, [r7, #23]
 800b440:	3301      	adds	r3, #1
 800b442:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b444:	e013      	b.n	800b46e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	4413      	add	r3, r2
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	7812      	ldrb	r2, [r2, #0]
 800b450:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	3301      	adds	r3, #1
 800b456:	613b      	str	r3, [r7, #16]
    idx++;
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	3301      	adds	r3, #1
 800b45c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	4413      	add	r3, r2
 800b464:	2200      	movs	r2, #0
 800b466:	701a      	strb	r2, [r3, #0]
    idx++;
 800b468:	7dfb      	ldrb	r3, [r7, #23]
 800b46a:	3301      	adds	r3, #1
 800b46c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1e7      	bne.n	800b446 <USBD_GetString+0x6a>
 800b476:	e000      	b.n	800b47a <USBD_GetString+0x9e>
    return;
 800b478:	bf00      	nop
  }
}
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b488:	2300      	movs	r3, #0
 800b48a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b490:	e005      	b.n	800b49e <USBD_GetLen+0x1e>
  {
    len++;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	3301      	adds	r3, #1
 800b496:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	3301      	adds	r3, #1
 800b49c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1f5      	bne.n	800b492 <USBD_GetLen+0x12>
  }

  return len;
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	2100      	movs	r1, #0
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 fde6 	bl	800c0ac <USBD_LL_Transmit>

  return USBD_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f000 fdd5 	bl	800c0ac <USBD_LL_Transmit>

  return USBD_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2203      	movs	r2, #3
 800b51c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	2100      	movs	r1, #0
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f000 fdf0 	bl	800c11c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	2100      	movs	r1, #0
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f000 fddf 	bl	800c11c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2204      	movs	r2, #4
 800b574:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b578:	2300      	movs	r3, #0
 800b57a:	2200      	movs	r2, #0
 800b57c:	2100      	movs	r1, #0
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fd94 	bl	800c0ac <USBD_LL_Transmit>

  return USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2205      	movs	r2, #5
 800b59a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b59e:	2300      	movs	r3, #0
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fdb9 	bl	800c11c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	4912      	ldr	r1, [pc, #72]	@ (800b604 <MX_USB_DEVICE_Init+0x50>)
 800b5bc:	4812      	ldr	r0, [pc, #72]	@ (800b608 <MX_USB_DEVICE_Init+0x54>)
 800b5be:	f7fe fccd 	bl	8009f5c <USBD_Init>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b5c8:	f7f6 fc7e 	bl	8001ec8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b5cc:	490f      	ldr	r1, [pc, #60]	@ (800b60c <MX_USB_DEVICE_Init+0x58>)
 800b5ce:	480e      	ldr	r0, [pc, #56]	@ (800b608 <MX_USB_DEVICE_Init+0x54>)
 800b5d0:	f7fe fcf4 	bl	8009fbc <USBD_RegisterClass>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5da:	f7f6 fc75 	bl	8001ec8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5de:	490c      	ldr	r1, [pc, #48]	@ (800b610 <MX_USB_DEVICE_Init+0x5c>)
 800b5e0:	4809      	ldr	r0, [pc, #36]	@ (800b608 <MX_USB_DEVICE_Init+0x54>)
 800b5e2:	f7fe fbeb 	bl	8009dbc <USBD_CDC_RegisterInterface>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b5ec:	f7f6 fc6c 	bl	8001ec8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5f0:	4805      	ldr	r0, [pc, #20]	@ (800b608 <MX_USB_DEVICE_Init+0x54>)
 800b5f2:	f7fe fd19 	bl	800a028 <USBD_Start>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5fc:	f7f6 fc64 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b600:	bf00      	nop
 800b602:	bd80      	pop	{r7, pc}
 800b604:	2000019c 	.word	0x2000019c
 800b608:	20000b00 	.word	0x20000b00
 800b60c:	20000108 	.word	0x20000108
 800b610:	20000188 	.word	0x20000188

0800b614 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b618:	2200      	movs	r2, #0
 800b61a:	4905      	ldr	r1, [pc, #20]	@ (800b630 <CDC_Init_FS+0x1c>)
 800b61c:	4805      	ldr	r0, [pc, #20]	@ (800b634 <CDC_Init_FS+0x20>)
 800b61e:	f7fe fbe7 	bl	8009df0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b622:	4905      	ldr	r1, [pc, #20]	@ (800b638 <CDC_Init_FS+0x24>)
 800b624:	4803      	ldr	r0, [pc, #12]	@ (800b634 <CDC_Init_FS+0x20>)
 800b626:	f7fe fc05 	bl	8009e34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b62a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	200015dc 	.word	0x200015dc
 800b634:	20000b00 	.word	0x20000b00
 800b638:	20000ddc 	.word	0x20000ddc

0800b63c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b63c:	b480      	push	{r7}
 800b63e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b640:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b642:	4618      	mov	r0, r3
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	4603      	mov	r3, r0
 800b654:	6039      	str	r1, [r7, #0]
 800b656:	71fb      	strb	r3, [r7, #7]
 800b658:	4613      	mov	r3, r2
 800b65a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	2b23      	cmp	r3, #35	@ 0x23
 800b660:	d84a      	bhi.n	800b6f8 <CDC_Control_FS+0xac>
 800b662:	a201      	add	r2, pc, #4	@ (adr r2, 800b668 <CDC_Control_FS+0x1c>)
 800b664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b668:	0800b6f9 	.word	0x0800b6f9
 800b66c:	0800b6f9 	.word	0x0800b6f9
 800b670:	0800b6f9 	.word	0x0800b6f9
 800b674:	0800b6f9 	.word	0x0800b6f9
 800b678:	0800b6f9 	.word	0x0800b6f9
 800b67c:	0800b6f9 	.word	0x0800b6f9
 800b680:	0800b6f9 	.word	0x0800b6f9
 800b684:	0800b6f9 	.word	0x0800b6f9
 800b688:	0800b6f9 	.word	0x0800b6f9
 800b68c:	0800b6f9 	.word	0x0800b6f9
 800b690:	0800b6f9 	.word	0x0800b6f9
 800b694:	0800b6f9 	.word	0x0800b6f9
 800b698:	0800b6f9 	.word	0x0800b6f9
 800b69c:	0800b6f9 	.word	0x0800b6f9
 800b6a0:	0800b6f9 	.word	0x0800b6f9
 800b6a4:	0800b6f9 	.word	0x0800b6f9
 800b6a8:	0800b6f9 	.word	0x0800b6f9
 800b6ac:	0800b6f9 	.word	0x0800b6f9
 800b6b0:	0800b6f9 	.word	0x0800b6f9
 800b6b4:	0800b6f9 	.word	0x0800b6f9
 800b6b8:	0800b6f9 	.word	0x0800b6f9
 800b6bc:	0800b6f9 	.word	0x0800b6f9
 800b6c0:	0800b6f9 	.word	0x0800b6f9
 800b6c4:	0800b6f9 	.word	0x0800b6f9
 800b6c8:	0800b6f9 	.word	0x0800b6f9
 800b6cc:	0800b6f9 	.word	0x0800b6f9
 800b6d0:	0800b6f9 	.word	0x0800b6f9
 800b6d4:	0800b6f9 	.word	0x0800b6f9
 800b6d8:	0800b6f9 	.word	0x0800b6f9
 800b6dc:	0800b6f9 	.word	0x0800b6f9
 800b6e0:	0800b6f9 	.word	0x0800b6f9
 800b6e4:	0800b6f9 	.word	0x0800b6f9
 800b6e8:	0800b6f9 	.word	0x0800b6f9
 800b6ec:	0800b6f9 	.word	0x0800b6f9
 800b6f0:	0800b6f9 	.word	0x0800b6f9
 800b6f4:	0800b6f9 	.word	0x0800b6f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6f8:	bf00      	nop
  }

  return (USBD_OK);
 800b6fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b712:	6879      	ldr	r1, [r7, #4]
 800b714:	4805      	ldr	r0, [pc, #20]	@ (800b72c <CDC_Receive_FS+0x24>)
 800b716:	f7fe fb8d 	bl	8009e34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b71a:	4804      	ldr	r0, [pc, #16]	@ (800b72c <CDC_Receive_FS+0x24>)
 800b71c:	f7fe fbe8 	bl	8009ef0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b720:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b722:	4618      	mov	r0, r3
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	20000b00 	.word	0x20000b00

0800b730 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b740:	4b0d      	ldr	r3, [pc, #52]	@ (800b778 <CDC_Transmit_FS+0x48>)
 800b742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b746:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b752:	2301      	movs	r3, #1
 800b754:	e00b      	b.n	800b76e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b756:	887b      	ldrh	r3, [r7, #2]
 800b758:	461a      	mov	r2, r3
 800b75a:	6879      	ldr	r1, [r7, #4]
 800b75c:	4806      	ldr	r0, [pc, #24]	@ (800b778 <CDC_Transmit_FS+0x48>)
 800b75e:	f7fe fb47 	bl	8009df0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b762:	4805      	ldr	r0, [pc, #20]	@ (800b778 <CDC_Transmit_FS+0x48>)
 800b764:	f7fe fb84 	bl	8009e70 <USBD_CDC_TransmitPacket>
 800b768:	4603      	mov	r3, r0
 800b76a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20000b00 	.word	0x20000b00

0800b77c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b78e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b792:	4618      	mov	r0, r3
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <_write>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int _write(int file, char *data, int len)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b084      	sub	sp, #16
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	60b9      	str	r1, [r7, #8]
 800b7a8:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*)data, len);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	68b8      	ldr	r0, [r7, #8]
 800b7b2:	f7ff ffbd 	bl	800b730 <CDC_Transmit_FS>
    return len;
 800b7b6:	687b      	ldr	r3, [r7, #4]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2212      	movs	r2, #18
 800b7d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b7d2:	4b03      	ldr	r3, [pc, #12]	@ (800b7e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	200001bc 	.word	0x200001bc

0800b7e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6039      	str	r1, [r7, #0]
 800b7ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2204      	movs	r2, #4
 800b7f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7f6:	4b03      	ldr	r3, [pc, #12]	@ (800b804 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	200001dc 	.word	0x200001dc

0800b808 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	6039      	str	r1, [r7, #0]
 800b812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b814:	79fb      	ldrb	r3, [r7, #7]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d105      	bne.n	800b826 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	4907      	ldr	r1, [pc, #28]	@ (800b83c <USBD_FS_ProductStrDescriptor+0x34>)
 800b81e:	4808      	ldr	r0, [pc, #32]	@ (800b840 <USBD_FS_ProductStrDescriptor+0x38>)
 800b820:	f7ff fddc 	bl	800b3dc <USBD_GetString>
 800b824:	e004      	b.n	800b830 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	4904      	ldr	r1, [pc, #16]	@ (800b83c <USBD_FS_ProductStrDescriptor+0x34>)
 800b82a:	4805      	ldr	r0, [pc, #20]	@ (800b840 <USBD_FS_ProductStrDescriptor+0x38>)
 800b82c:	f7ff fdd6 	bl	800b3dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b830:	4b02      	ldr	r3, [pc, #8]	@ (800b83c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b832:	4618      	mov	r0, r3
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20001ddc 	.word	0x20001ddc
 800b840:	080103a4 	.word	0x080103a4

0800b844 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	6039      	str	r1, [r7, #0]
 800b84e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	4904      	ldr	r1, [pc, #16]	@ (800b864 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b854:	4804      	ldr	r0, [pc, #16]	@ (800b868 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b856:	f7ff fdc1 	bl	800b3dc <USBD_GetString>
  return USBD_StrDesc;
 800b85a:	4b02      	ldr	r3, [pc, #8]	@ (800b864 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	20001ddc 	.word	0x20001ddc
 800b868:	080103bc 	.word	0x080103bc

0800b86c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	6039      	str	r1, [r7, #0]
 800b876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	221a      	movs	r2, #26
 800b87c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b87e:	f000 f855 	bl	800b92c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b882:	4b02      	ldr	r3, [pc, #8]	@ (800b88c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	200001e0 	.word	0x200001e0

0800b890 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	6039      	str	r1, [r7, #0]
 800b89a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d105      	bne.n	800b8ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	4907      	ldr	r1, [pc, #28]	@ (800b8c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b8a6:	4808      	ldr	r0, [pc, #32]	@ (800b8c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b8a8:	f7ff fd98 	bl	800b3dc <USBD_GetString>
 800b8ac:	e004      	b.n	800b8b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	4904      	ldr	r1, [pc, #16]	@ (800b8c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b8b2:	4805      	ldr	r0, [pc, #20]	@ (800b8c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b8b4:	f7ff fd92 	bl	800b3dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8b8:	4b02      	ldr	r3, [pc, #8]	@ (800b8c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20001ddc 	.word	0x20001ddc
 800b8c8:	080103d0 	.word	0x080103d0

0800b8cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	6039      	str	r1, [r7, #0]
 800b8d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d105      	bne.n	800b8ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	4907      	ldr	r1, [pc, #28]	@ (800b900 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8e2:	4808      	ldr	r0, [pc, #32]	@ (800b904 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8e4:	f7ff fd7a 	bl	800b3dc <USBD_GetString>
 800b8e8:	e004      	b.n	800b8f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	4904      	ldr	r1, [pc, #16]	@ (800b900 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8ee:	4805      	ldr	r0, [pc, #20]	@ (800b904 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8f0:	f7ff fd74 	bl	800b3dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8f4:	4b02      	ldr	r3, [pc, #8]	@ (800b900 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20001ddc 	.word	0x20001ddc
 800b904:	080103dc 	.word	0x080103dc

0800b908 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	4603      	mov	r3, r0
 800b910:	6039      	str	r1, [r7, #0]
 800b912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	220c      	movs	r2, #12
 800b918:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b91a:	4b03      	ldr	r3, [pc, #12]	@ (800b928 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	200001d0 	.word	0x200001d0

0800b92c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b932:	4b0f      	ldr	r3, [pc, #60]	@ (800b970 <Get_SerialNum+0x44>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b938:	4b0e      	ldr	r3, [pc, #56]	@ (800b974 <Get_SerialNum+0x48>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b93e:	4b0e      	ldr	r3, [pc, #56]	@ (800b978 <Get_SerialNum+0x4c>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4413      	add	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d009      	beq.n	800b966 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b952:	2208      	movs	r2, #8
 800b954:	4909      	ldr	r1, [pc, #36]	@ (800b97c <Get_SerialNum+0x50>)
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 f814 	bl	800b984 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b95c:	2204      	movs	r2, #4
 800b95e:	4908      	ldr	r1, [pc, #32]	@ (800b980 <Get_SerialNum+0x54>)
 800b960:	68b8      	ldr	r0, [r7, #8]
 800b962:	f000 f80f 	bl	800b984 <IntToUnicode>
  }
}
 800b966:	bf00      	nop
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	1fff7590 	.word	0x1fff7590
 800b974:	1fff7594 	.word	0x1fff7594
 800b978:	1fff7598 	.word	0x1fff7598
 800b97c:	200001e2 	.word	0x200001e2
 800b980:	200001f2 	.word	0x200001f2

0800b984 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b996:	2300      	movs	r3, #0
 800b998:	75fb      	strb	r3, [r7, #23]
 800b99a:	e027      	b.n	800b9ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	0f1b      	lsrs	r3, r3, #28
 800b9a0:	2b09      	cmp	r3, #9
 800b9a2:	d80b      	bhi.n	800b9bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	0f1b      	lsrs	r3, r3, #28
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	005b      	lsls	r3, r3, #1
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	440b      	add	r3, r1
 800b9b4:	3230      	adds	r2, #48	@ 0x30
 800b9b6:	b2d2      	uxtb	r2, r2
 800b9b8:	701a      	strb	r2, [r3, #0]
 800b9ba:	e00a      	b.n	800b9d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	0f1b      	lsrs	r3, r3, #28
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	005b      	lsls	r3, r3, #1
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	440b      	add	r3, r1
 800b9cc:	3237      	adds	r2, #55	@ 0x37
 800b9ce:	b2d2      	uxtb	r2, r2
 800b9d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	011b      	lsls	r3, r3, #4
 800b9d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	3301      	adds	r3, #1
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	75fb      	strb	r3, [r7, #23]
 800b9ec:	7dfa      	ldrb	r2, [r7, #23]
 800b9ee:	79fb      	ldrb	r3, [r7, #7]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d3d3      	bcc.n	800b99c <IntToUnicode+0x18>
  }
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop
 800b9f8:	371c      	adds	r7, #28
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
	...

0800ba04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b0ac      	sub	sp, #176	@ 0xb0
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800ba10:	2200      	movs	r2, #0
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	605a      	str	r2, [r3, #4]
 800ba16:	609a      	str	r2, [r3, #8]
 800ba18:	60da      	str	r2, [r3, #12]
 800ba1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba1c:	f107 0314 	add.w	r3, r7, #20
 800ba20:	2288      	movs	r2, #136	@ 0x88
 800ba22:	2100      	movs	r1, #0
 800ba24:	4618      	mov	r0, r3
 800ba26:	f002 f8f0 	bl	800dc0a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ba32:	d173      	bne.n	800bb1c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ba34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ba3a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ba3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800ba42:	2303      	movs	r3, #3
 800ba44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ba46:	2301      	movs	r3, #1
 800ba48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800ba4a:	230c      	movs	r3, #12
 800ba4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800ba4e:	2307      	movs	r3, #7
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800ba52:	2304      	movs	r3, #4
 800ba54:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ba56:	2302      	movs	r3, #2
 800ba58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800ba5a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ba5e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba60:	f107 0314 	add.w	r3, r7, #20
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7f9 fdaf 	bl	80055c8 <HAL_RCCEx_PeriphCLKConfig>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800ba70:	f7f6 fa2a 	bl	8001ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba74:	4b2b      	ldr	r3, [pc, #172]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800ba76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba78:	4a2a      	ldr	r2, [pc, #168]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800ba7a:	f043 0301 	orr.w	r3, r3, #1
 800ba7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba80:	4b28      	ldr	r3, [pc, #160]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800ba82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	613b      	str	r3, [r7, #16]
 800ba8a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ba8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ba90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba94:	2302      	movs	r3, #2
 800ba96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baa0:	2303      	movs	r3, #3
 800baa2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800baa6:	230a      	movs	r3, #10
 800baa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800bab0:	4619      	mov	r1, r3
 800bab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bab6:	f7f7 fa71 	bl	8002f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800baba:	4b1a      	ldr	r3, [pc, #104]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800babc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800babe:	4a19      	ldr	r2, [pc, #100]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800bac0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bac6:	4b17      	ldr	r3, [pc, #92]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800bac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bad2:	4b14      	ldr	r3, [pc, #80]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800bad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bada:	2b00      	cmp	r3, #0
 800badc:	d114      	bne.n	800bb08 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bade:	4b11      	ldr	r3, [pc, #68]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800bae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bae2:	4a10      	ldr	r2, [pc, #64]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800bae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bae8:	6593      	str	r3, [r2, #88]	@ 0x58
 800baea:	4b0e      	ldr	r3, [pc, #56]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800baec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800baf2:	60bb      	str	r3, [r7, #8]
 800baf4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800baf6:	f7f8 ff59 	bl	80049ac <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bafa:	4b0a      	ldr	r3, [pc, #40]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800bafc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bafe:	4a09      	ldr	r2, [pc, #36]	@ (800bb24 <HAL_PCD_MspInit+0x120>)
 800bb00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb04:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb06:	e001      	b.n	800bb0c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800bb08:	f7f8 ff50 	bl	80049ac <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2100      	movs	r1, #0
 800bb10:	2043      	movs	r0, #67	@ 0x43
 800bb12:	f7f7 f8a4 	bl	8002c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb16:	2043      	movs	r0, #67	@ 0x43
 800bb18:	f7f7 f8bd 	bl	8002c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb1c:	bf00      	nop
 800bb1e:	37b0      	adds	r7, #176	@ 0xb0
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	40021000 	.word	0x40021000

0800bb28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	4610      	mov	r0, r2
 800bb40:	f7fe fabf 	bl	800a0c2 <USBD_LL_SetupStage>
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb5e:	78fa      	ldrb	r2, [r7, #3]
 800bb60:	6879      	ldr	r1, [r7, #4]
 800bb62:	4613      	mov	r3, r2
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	4413      	add	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	440b      	add	r3, r1
 800bb6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	78fb      	ldrb	r3, [r7, #3]
 800bb74:	4619      	mov	r1, r3
 800bb76:	f7fe faf9 	bl	800a16c <USBD_LL_DataOutStage>
}
 800bb7a:	bf00      	nop
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb94:	78fa      	ldrb	r2, [r7, #3]
 800bb96:	6879      	ldr	r1, [r7, #4]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	00db      	lsls	r3, r3, #3
 800bb9c:	4413      	add	r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	440b      	add	r3, r1
 800bba2:	3320      	adds	r3, #32
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	78fb      	ldrb	r3, [r7, #3]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	f7fe fb92 	bl	800a2d2 <USBD_LL_DataInStage>
}
 800bbae:	bf00      	nop
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fe fccc 	bl	800a562 <USBD_LL_SOF>
}
 800bbca:	bf00      	nop
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	79db      	ldrb	r3, [r3, #7]
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d001      	beq.n	800bbea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbe6:	f7f6 f96f 	bl	8001ec8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbf0:	7bfa      	ldrb	r2, [r7, #15]
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fe fc70 	bl	800a4da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fe fc18 	bl	800a436 <USBD_LL_Reset>
}
 800bc06:	bf00      	nop
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	6812      	ldr	r2, [r2, #0]
 800bc26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc2a:	f043 0301 	orr.w	r3, r3, #1
 800bc2e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe fc5f 	bl	800a4fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	7adb      	ldrb	r3, [r3, #11]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d005      	beq.n	800bc50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc44:	4b04      	ldr	r3, [pc, #16]	@ (800bc58 <HAL_PCD_SuspendCallback+0x48>)
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	4a03      	ldr	r2, [pc, #12]	@ (800bc58 <HAL_PCD_SuspendCallback+0x48>)
 800bc4a:	f043 0306 	orr.w	r3, r3, #6
 800bc4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	e000ed00 	.word	0xe000ed00

0800bc5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	6812      	ldr	r2, [r2, #0]
 800bc72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc76:	f023 0301 	bic.w	r3, r3, #1
 800bc7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	7adb      	ldrb	r3, [r3, #11]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d007      	beq.n	800bc94 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc84:	4b08      	ldr	r3, [pc, #32]	@ (800bca8 <HAL_PCD_ResumeCallback+0x4c>)
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	4a07      	ldr	r2, [pc, #28]	@ (800bca8 <HAL_PCD_ResumeCallback+0x4c>)
 800bc8a:	f023 0306 	bic.w	r3, r3, #6
 800bc8e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bc90:	f000 faf6 	bl	800c280 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe fc49 	bl	800a532 <USBD_LL_Resume>
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	e000ed00 	.word	0xe000ed00

0800bcac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcbe:	78fa      	ldrb	r2, [r7, #3]
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe fc9f 	bl	800a606 <USBD_LL_IsoOUTIncomplete>
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bce2:	78fa      	ldrb	r2, [r7, #3]
 800bce4:	4611      	mov	r1, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fe fc5b 	bl	800a5a2 <USBD_LL_IsoINIncomplete>
}
 800bcec:	bf00      	nop
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe fcb1 	bl	800a66a <USBD_LL_DevConnected>
}
 800bd08:	bf00      	nop
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe fcae 	bl	800a680 <USBD_LL_DevDisconnected>
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d13c      	bne.n	800bdb6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bd3c:	4a20      	ldr	r2, [pc, #128]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a1e      	ldr	r2, [pc, #120]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd48:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd4c:	4b1c      	ldr	r3, [pc, #112]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bd52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bd54:	4b1a      	ldr	r3, [pc, #104]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd56:	2206      	movs	r2, #6
 800bd58:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd5a:	4b19      	ldr	r3, [pc, #100]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd60:	4b17      	ldr	r3, [pc, #92]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd62:	2202      	movs	r2, #2
 800bd64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd66:	4b16      	ldr	r3, [pc, #88]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd6c:	4b14      	ldr	r3, [pc, #80]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd72:	4b13      	ldr	r3, [pc, #76]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bd78:	4b11      	ldr	r3, [pc, #68]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd7e:	4b10      	ldr	r3, [pc, #64]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd84:	4b0e      	ldr	r3, [pc, #56]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd8a:	480d      	ldr	r0, [pc, #52]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd8c:	f7f7 fc14 	bl	80035b8 <HAL_PCD_Init>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd96:	f7f6 f897 	bl	8001ec8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd9a:	2180      	movs	r1, #128	@ 0x80
 800bd9c:	4808      	ldr	r0, [pc, #32]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bd9e:	f7f8 fd6c 	bl	800487a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bda2:	2240      	movs	r2, #64	@ 0x40
 800bda4:	2100      	movs	r1, #0
 800bda6:	4806      	ldr	r0, [pc, #24]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bda8:	f7f8 fd20 	bl	80047ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bdac:	2280      	movs	r2, #128	@ 0x80
 800bdae:	2101      	movs	r1, #1
 800bdb0:	4803      	ldr	r0, [pc, #12]	@ (800bdc0 <USBD_LL_Init+0x94>)
 800bdb2:	f7f8 fd1b 	bl	80047ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	20001fdc 	.word	0x20001fdc

0800bdc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7f7 fcfb 	bl	80037d6 <HAL_PCD_Start>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d816      	bhi.n	800be18 <USBD_LL_Start+0x54>
 800bdea:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf0 <USBD_LL_Start+0x2c>)
 800bdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf0:	0800be01 	.word	0x0800be01
 800bdf4:	0800be07 	.word	0x0800be07
 800bdf8:	0800be0d 	.word	0x0800be0d
 800bdfc:	0800be13 	.word	0x0800be13
    case HAL_OK :
      usb_status = USBD_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]
    break;
 800be04:	e00b      	b.n	800be1e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be06:	2303      	movs	r3, #3
 800be08:	73fb      	strb	r3, [r7, #15]
    break;
 800be0a:	e008      	b.n	800be1e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be0c:	2301      	movs	r3, #1
 800be0e:	73fb      	strb	r3, [r7, #15]
    break;
 800be10:	e005      	b.n	800be1e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be12:	2303      	movs	r3, #3
 800be14:	73fb      	strb	r3, [r7, #15]
    break;
 800be16:	e002      	b.n	800be1e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800be18:	2303      	movs	r3, #3
 800be1a:	73fb      	strb	r3, [r7, #15]
    break;
 800be1c:	bf00      	nop
  }
  return usb_status;
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	4608      	mov	r0, r1
 800be32:	4611      	mov	r1, r2
 800be34:	461a      	mov	r2, r3
 800be36:	4603      	mov	r3, r0
 800be38:	70fb      	strb	r3, [r7, #3]
 800be3a:	460b      	mov	r3, r1
 800be3c:	70bb      	strb	r3, [r7, #2]
 800be3e:	4613      	mov	r3, r2
 800be40:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800be50:	78bb      	ldrb	r3, [r7, #2]
 800be52:	883a      	ldrh	r2, [r7, #0]
 800be54:	78f9      	ldrb	r1, [r7, #3]
 800be56:	f7f8 f9a7 	bl	80041a8 <HAL_PCD_EP_Open>
 800be5a:	4603      	mov	r3, r0
 800be5c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be5e:	7bbb      	ldrb	r3, [r7, #14]
 800be60:	2b03      	cmp	r3, #3
 800be62:	d817      	bhi.n	800be94 <USBD_LL_OpenEP+0x6c>
 800be64:	a201      	add	r2, pc, #4	@ (adr r2, 800be6c <USBD_LL_OpenEP+0x44>)
 800be66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6a:	bf00      	nop
 800be6c:	0800be7d 	.word	0x0800be7d
 800be70:	0800be83 	.word	0x0800be83
 800be74:	0800be89 	.word	0x0800be89
 800be78:	0800be8f 	.word	0x0800be8f
    case HAL_OK :
      usb_status = USBD_OK;
 800be7c:	2300      	movs	r3, #0
 800be7e:	73fb      	strb	r3, [r7, #15]
    break;
 800be80:	e00b      	b.n	800be9a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be82:	2303      	movs	r3, #3
 800be84:	73fb      	strb	r3, [r7, #15]
    break;
 800be86:	e008      	b.n	800be9a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be88:	2301      	movs	r3, #1
 800be8a:	73fb      	strb	r3, [r7, #15]
    break;
 800be8c:	e005      	b.n	800be9a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be8e:	2303      	movs	r3, #3
 800be90:	73fb      	strb	r3, [r7, #15]
    break;
 800be92:	e002      	b.n	800be9a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800be94:	2303      	movs	r3, #3
 800be96:	73fb      	strb	r3, [r7, #15]
    break;
 800be98:	bf00      	nop
  }
  return usb_status;
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bebe:	78fa      	ldrb	r2, [r7, #3]
 800bec0:	4611      	mov	r1, r2
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7f8 f9da 	bl	800427c <HAL_PCD_EP_Close>
 800bec8:	4603      	mov	r3, r0
 800beca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800becc:	7bbb      	ldrb	r3, [r7, #14]
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d816      	bhi.n	800bf00 <USBD_LL_CloseEP+0x5c>
 800bed2:	a201      	add	r2, pc, #4	@ (adr r2, 800bed8 <USBD_LL_CloseEP+0x34>)
 800bed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed8:	0800bee9 	.word	0x0800bee9
 800bedc:	0800beef 	.word	0x0800beef
 800bee0:	0800bef5 	.word	0x0800bef5
 800bee4:	0800befb 	.word	0x0800befb
    case HAL_OK :
      usb_status = USBD_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]
    break;
 800beec:	e00b      	b.n	800bf06 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800beee:	2303      	movs	r3, #3
 800bef0:	73fb      	strb	r3, [r7, #15]
    break;
 800bef2:	e008      	b.n	800bf06 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bef4:	2301      	movs	r3, #1
 800bef6:	73fb      	strb	r3, [r7, #15]
    break;
 800bef8:	e005      	b.n	800bf06 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800befa:	2303      	movs	r3, #3
 800befc:	73fb      	strb	r3, [r7, #15]
    break;
 800befe:	e002      	b.n	800bf06 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bf00:	2303      	movs	r3, #3
 800bf02:	73fb      	strb	r3, [r7, #15]
    break;
 800bf04:	bf00      	nop
  }
  return usb_status;
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf2a:	78fa      	ldrb	r2, [r7, #3]
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7f8 fa69 	bl	8004406 <HAL_PCD_EP_SetStall>
 800bf34:	4603      	mov	r3, r0
 800bf36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bf38:	7bbb      	ldrb	r3, [r7, #14]
 800bf3a:	2b03      	cmp	r3, #3
 800bf3c:	d816      	bhi.n	800bf6c <USBD_LL_StallEP+0x5c>
 800bf3e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf44 <USBD_LL_StallEP+0x34>)
 800bf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf44:	0800bf55 	.word	0x0800bf55
 800bf48:	0800bf5b 	.word	0x0800bf5b
 800bf4c:	0800bf61 	.word	0x0800bf61
 800bf50:	0800bf67 	.word	0x0800bf67
    case HAL_OK :
      usb_status = USBD_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	73fb      	strb	r3, [r7, #15]
    break;
 800bf58:	e00b      	b.n	800bf72 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf5a:	2303      	movs	r3, #3
 800bf5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf5e:	e008      	b.n	800bf72 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf60:	2301      	movs	r3, #1
 800bf62:	73fb      	strb	r3, [r7, #15]
    break;
 800bf64:	e005      	b.n	800bf72 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf66:	2303      	movs	r3, #3
 800bf68:	73fb      	strb	r3, [r7, #15]
    break;
 800bf6a:	e002      	b.n	800bf72 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf70:	bf00      	nop
  }
  return usb_status;
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf96:	78fa      	ldrb	r2, [r7, #3]
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7f8 fa95 	bl	80044ca <HAL_PCD_EP_ClrStall>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bfa4:	7bbb      	ldrb	r3, [r7, #14]
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	d816      	bhi.n	800bfd8 <USBD_LL_ClearStallEP+0x5c>
 800bfaa:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb0 <USBD_LL_ClearStallEP+0x34>)
 800bfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb0:	0800bfc1 	.word	0x0800bfc1
 800bfb4:	0800bfc7 	.word	0x0800bfc7
 800bfb8:	0800bfcd 	.word	0x0800bfcd
 800bfbc:	0800bfd3 	.word	0x0800bfd3
    case HAL_OK :
      usb_status = USBD_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc4:	e00b      	b.n	800bfde <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	73fb      	strb	r3, [r7, #15]
    break;
 800bfca:	e008      	b.n	800bfde <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd0:	e005      	b.n	800bfde <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd6:	e002      	b.n	800bfde <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	73fb      	strb	r3, [r7, #15]
    break;
 800bfdc:	bf00      	nop
  }
  return usb_status;
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	460b      	mov	r3, r1
 800bff2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bffa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c000:	2b00      	cmp	r3, #0
 800c002:	da0b      	bge.n	800c01c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c004:	78fb      	ldrb	r3, [r7, #3]
 800c006:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c00a:	68f9      	ldr	r1, [r7, #12]
 800c00c:	4613      	mov	r3, r2
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	4413      	add	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	440b      	add	r3, r1
 800c016:	3316      	adds	r3, #22
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	e00b      	b.n	800c034 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c01c:	78fb      	ldrb	r3, [r7, #3]
 800c01e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c022:	68f9      	ldr	r1, [r7, #12]
 800c024:	4613      	mov	r3, r2
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	4413      	add	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	440b      	add	r3, r1
 800c02e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c032:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	460b      	mov	r3, r1
 800c04a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c05a:	78fa      	ldrb	r2, [r7, #3]
 800c05c:	4611      	mov	r1, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7f8 f87e 	bl	8004160 <HAL_PCD_SetAddress>
 800c064:	4603      	mov	r3, r0
 800c066:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	2b03      	cmp	r3, #3
 800c06c:	d816      	bhi.n	800c09c <USBD_LL_SetUSBAddress+0x5c>
 800c06e:	a201      	add	r2, pc, #4	@ (adr r2, 800c074 <USBD_LL_SetUSBAddress+0x34>)
 800c070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c074:	0800c085 	.word	0x0800c085
 800c078:	0800c08b 	.word	0x0800c08b
 800c07c:	0800c091 	.word	0x0800c091
 800c080:	0800c097 	.word	0x0800c097
    case HAL_OK :
      usb_status = USBD_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73fb      	strb	r3, [r7, #15]
    break;
 800c088:	e00b      	b.n	800c0a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c08a:	2303      	movs	r3, #3
 800c08c:	73fb      	strb	r3, [r7, #15]
    break;
 800c08e:	e008      	b.n	800c0a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c090:	2301      	movs	r3, #1
 800c092:	73fb      	strb	r3, [r7, #15]
    break;
 800c094:	e005      	b.n	800c0a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c096:	2303      	movs	r3, #3
 800c098:	73fb      	strb	r3, [r7, #15]
    break;
 800c09a:	e002      	b.n	800c0a2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c09c:	2303      	movs	r3, #3
 800c09e:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a0:	bf00      	nop
  }
  return usb_status;
 800c0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	607a      	str	r2, [r7, #4]
 800c0b6:	603b      	str	r3, [r7, #0]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c0ca:	7af9      	ldrb	r1, [r7, #11]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	f7f8 f968 	bl	80043a4 <HAL_PCD_EP_Transmit>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c0d8:	7dbb      	ldrb	r3, [r7, #22]
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d816      	bhi.n	800c10c <USBD_LL_Transmit+0x60>
 800c0de:	a201      	add	r2, pc, #4	@ (adr r2, 800c0e4 <USBD_LL_Transmit+0x38>)
 800c0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e4:	0800c0f5 	.word	0x0800c0f5
 800c0e8:	0800c0fb 	.word	0x0800c0fb
 800c0ec:	0800c101 	.word	0x0800c101
 800c0f0:	0800c107 	.word	0x0800c107
    case HAL_OK :
      usb_status = USBD_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	75fb      	strb	r3, [r7, #23]
    break;
 800c0f8:	e00b      	b.n	800c112 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	75fb      	strb	r3, [r7, #23]
    break;
 800c0fe:	e008      	b.n	800c112 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c100:	2301      	movs	r3, #1
 800c102:	75fb      	strb	r3, [r7, #23]
    break;
 800c104:	e005      	b.n	800c112 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c106:	2303      	movs	r3, #3
 800c108:	75fb      	strb	r3, [r7, #23]
    break;
 800c10a:	e002      	b.n	800c112 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c10c:	2303      	movs	r3, #3
 800c10e:	75fb      	strb	r3, [r7, #23]
    break;
 800c110:	bf00      	nop
  }
  return usb_status;
 800c112:	7dfb      	ldrb	r3, [r7, #23]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3718      	adds	r7, #24
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	607a      	str	r2, [r7, #4]
 800c126:	603b      	str	r3, [r7, #0]
 800c128:	460b      	mov	r3, r1
 800c12a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c13a:	7af9      	ldrb	r1, [r7, #11]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	f7f8 f8e6 	bl	8004310 <HAL_PCD_EP_Receive>
 800c144:	4603      	mov	r3, r0
 800c146:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c148:	7dbb      	ldrb	r3, [r7, #22]
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d816      	bhi.n	800c17c <USBD_LL_PrepareReceive+0x60>
 800c14e:	a201      	add	r2, pc, #4	@ (adr r2, 800c154 <USBD_LL_PrepareReceive+0x38>)
 800c150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c154:	0800c165 	.word	0x0800c165
 800c158:	0800c16b 	.word	0x0800c16b
 800c15c:	0800c171 	.word	0x0800c171
 800c160:	0800c177 	.word	0x0800c177
    case HAL_OK :
      usb_status = USBD_OK;
 800c164:	2300      	movs	r3, #0
 800c166:	75fb      	strb	r3, [r7, #23]
    break;
 800c168:	e00b      	b.n	800c182 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c16a:	2303      	movs	r3, #3
 800c16c:	75fb      	strb	r3, [r7, #23]
    break;
 800c16e:	e008      	b.n	800c182 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c170:	2301      	movs	r3, #1
 800c172:	75fb      	strb	r3, [r7, #23]
    break;
 800c174:	e005      	b.n	800c182 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c176:	2303      	movs	r3, #3
 800c178:	75fb      	strb	r3, [r7, #23]
    break;
 800c17a:	e002      	b.n	800c182 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c17c:	2303      	movs	r3, #3
 800c17e:	75fb      	strb	r3, [r7, #23]
    break;
 800c180:	bf00      	nop
  }
  return usb_status;
 800c182:	7dfb      	ldrb	r3, [r7, #23]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3718      	adds	r7, #24
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c19e:	78fa      	ldrb	r2, [r7, #3]
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7f8 f8e6 	bl	8004374 <HAL_PCD_EP_GetRxCount>
 800c1a8:	4603      	mov	r3, r0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
	...

0800c1b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c1c0:	78fb      	ldrb	r3, [r7, #3]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <HAL_PCDEx_LPM_Callback+0x18>
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d01f      	beq.n	800c20a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c1ca:	e03b      	b.n	800c244 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	7adb      	ldrb	r3, [r3, #11]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d007      	beq.n	800c1e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c1d4:	f000 f854 	bl	800c280 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1d8:	4b1c      	ldr	r3, [pc, #112]	@ (800c24c <HAL_PCDEx_LPM_Callback+0x98>)
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	4a1b      	ldr	r2, [pc, #108]	@ (800c24c <HAL_PCDEx_LPM_Callback+0x98>)
 800c1de:	f023 0306 	bic.w	r3, r3, #6
 800c1e2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	6812      	ldr	r2, [r2, #0]
 800c1f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c1f6:	f023 0301 	bic.w	r3, r3, #1
 800c1fa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe f995 	bl	800a532 <USBD_LL_Resume>
    break;
 800c208:	e01c      	b.n	800c244 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	6812      	ldr	r2, [r2, #0]
 800c218:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c21c:	f043 0301 	orr.w	r3, r3, #1
 800c220:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fe f966 	bl	800a4fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	7adb      	ldrb	r3, [r3, #11]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d005      	beq.n	800c242 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c236:	4b05      	ldr	r3, [pc, #20]	@ (800c24c <HAL_PCDEx_LPM_Callback+0x98>)
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	4a04      	ldr	r2, [pc, #16]	@ (800c24c <HAL_PCDEx_LPM_Callback+0x98>)
 800c23c:	f043 0306 	orr.w	r3, r3, #6
 800c240:	6113      	str	r3, [r2, #16]
    break;
 800c242:	bf00      	nop
}
 800c244:	bf00      	nop
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	e000ed00 	.word	0xe000ed00

0800c250 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c258:	4b03      	ldr	r3, [pc, #12]	@ (800c268 <USBD_static_malloc+0x18>)
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	200024c0 	.word	0x200024c0

0800c26c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]

}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c284:	f7f5 f96a 	bl	800155c <SystemClock_Config>
}
 800c288:	bf00      	nop
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <atof>:
 800c28c:	2100      	movs	r1, #0
 800c28e:	f000 bebf 	b.w	800d010 <strtod>

0800c292 <atoi>:
 800c292:	220a      	movs	r2, #10
 800c294:	2100      	movs	r1, #0
 800c296:	f000 bf41 	b.w	800d11c <strtol>
	...

0800c29c <malloc>:
 800c29c:	4b02      	ldr	r3, [pc, #8]	@ (800c2a8 <malloc+0xc>)
 800c29e:	4601      	mov	r1, r0
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	f000 b825 	b.w	800c2f0 <_malloc_r>
 800c2a6:	bf00      	nop
 800c2a8:	20000374 	.word	0x20000374

0800c2ac <sbrk_aligned>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c2ec <sbrk_aligned+0x40>)
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	6831      	ldr	r1, [r6, #0]
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	b911      	cbnz	r1, 800c2be <sbrk_aligned+0x12>
 800c2b8:	f001 fd86 	bl	800ddc8 <_sbrk_r>
 800c2bc:	6030      	str	r0, [r6, #0]
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f001 fd81 	bl	800ddc8 <_sbrk_r>
 800c2c6:	1c43      	adds	r3, r0, #1
 800c2c8:	d103      	bne.n	800c2d2 <sbrk_aligned+0x26>
 800c2ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	bd70      	pop	{r4, r5, r6, pc}
 800c2d2:	1cc4      	adds	r4, r0, #3
 800c2d4:	f024 0403 	bic.w	r4, r4, #3
 800c2d8:	42a0      	cmp	r0, r4
 800c2da:	d0f8      	beq.n	800c2ce <sbrk_aligned+0x22>
 800c2dc:	1a21      	subs	r1, r4, r0
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f001 fd72 	bl	800ddc8 <_sbrk_r>
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	d1f2      	bne.n	800c2ce <sbrk_aligned+0x22>
 800c2e8:	e7ef      	b.n	800c2ca <sbrk_aligned+0x1e>
 800c2ea:	bf00      	nop
 800c2ec:	200026e0 	.word	0x200026e0

0800c2f0 <_malloc_r>:
 800c2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	1ccd      	adds	r5, r1, #3
 800c2f6:	f025 0503 	bic.w	r5, r5, #3
 800c2fa:	3508      	adds	r5, #8
 800c2fc:	2d0c      	cmp	r5, #12
 800c2fe:	bf38      	it	cc
 800c300:	250c      	movcc	r5, #12
 800c302:	2d00      	cmp	r5, #0
 800c304:	4606      	mov	r6, r0
 800c306:	db01      	blt.n	800c30c <_malloc_r+0x1c>
 800c308:	42a9      	cmp	r1, r5
 800c30a:	d904      	bls.n	800c316 <_malloc_r+0x26>
 800c30c:	230c      	movs	r3, #12
 800c30e:	6033      	str	r3, [r6, #0]
 800c310:	2000      	movs	r0, #0
 800c312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3ec <_malloc_r+0xfc>
 800c31a:	f000 f869 	bl	800c3f0 <__malloc_lock>
 800c31e:	f8d8 3000 	ldr.w	r3, [r8]
 800c322:	461c      	mov	r4, r3
 800c324:	bb44      	cbnz	r4, 800c378 <_malloc_r+0x88>
 800c326:	4629      	mov	r1, r5
 800c328:	4630      	mov	r0, r6
 800c32a:	f7ff ffbf 	bl	800c2ac <sbrk_aligned>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	4604      	mov	r4, r0
 800c332:	d158      	bne.n	800c3e6 <_malloc_r+0xf6>
 800c334:	f8d8 4000 	ldr.w	r4, [r8]
 800c338:	4627      	mov	r7, r4
 800c33a:	2f00      	cmp	r7, #0
 800c33c:	d143      	bne.n	800c3c6 <_malloc_r+0xd6>
 800c33e:	2c00      	cmp	r4, #0
 800c340:	d04b      	beq.n	800c3da <_malloc_r+0xea>
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	4639      	mov	r1, r7
 800c346:	4630      	mov	r0, r6
 800c348:	eb04 0903 	add.w	r9, r4, r3
 800c34c:	f001 fd3c 	bl	800ddc8 <_sbrk_r>
 800c350:	4581      	cmp	r9, r0
 800c352:	d142      	bne.n	800c3da <_malloc_r+0xea>
 800c354:	6821      	ldr	r1, [r4, #0]
 800c356:	1a6d      	subs	r5, r5, r1
 800c358:	4629      	mov	r1, r5
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7ff ffa6 	bl	800c2ac <sbrk_aligned>
 800c360:	3001      	adds	r0, #1
 800c362:	d03a      	beq.n	800c3da <_malloc_r+0xea>
 800c364:	6823      	ldr	r3, [r4, #0]
 800c366:	442b      	add	r3, r5
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	f8d8 3000 	ldr.w	r3, [r8]
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	bb62      	cbnz	r2, 800c3cc <_malloc_r+0xdc>
 800c372:	f8c8 7000 	str.w	r7, [r8]
 800c376:	e00f      	b.n	800c398 <_malloc_r+0xa8>
 800c378:	6822      	ldr	r2, [r4, #0]
 800c37a:	1b52      	subs	r2, r2, r5
 800c37c:	d420      	bmi.n	800c3c0 <_malloc_r+0xd0>
 800c37e:	2a0b      	cmp	r2, #11
 800c380:	d917      	bls.n	800c3b2 <_malloc_r+0xc2>
 800c382:	1961      	adds	r1, r4, r5
 800c384:	42a3      	cmp	r3, r4
 800c386:	6025      	str	r5, [r4, #0]
 800c388:	bf18      	it	ne
 800c38a:	6059      	strne	r1, [r3, #4]
 800c38c:	6863      	ldr	r3, [r4, #4]
 800c38e:	bf08      	it	eq
 800c390:	f8c8 1000 	streq.w	r1, [r8]
 800c394:	5162      	str	r2, [r4, r5]
 800c396:	604b      	str	r3, [r1, #4]
 800c398:	4630      	mov	r0, r6
 800c39a:	f000 f82f 	bl	800c3fc <__malloc_unlock>
 800c39e:	f104 000b 	add.w	r0, r4, #11
 800c3a2:	1d23      	adds	r3, r4, #4
 800c3a4:	f020 0007 	bic.w	r0, r0, #7
 800c3a8:	1ac2      	subs	r2, r0, r3
 800c3aa:	bf1c      	itt	ne
 800c3ac:	1a1b      	subne	r3, r3, r0
 800c3ae:	50a3      	strne	r3, [r4, r2]
 800c3b0:	e7af      	b.n	800c312 <_malloc_r+0x22>
 800c3b2:	6862      	ldr	r2, [r4, #4]
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	bf0c      	ite	eq
 800c3b8:	f8c8 2000 	streq.w	r2, [r8]
 800c3bc:	605a      	strne	r2, [r3, #4]
 800c3be:	e7eb      	b.n	800c398 <_malloc_r+0xa8>
 800c3c0:	4623      	mov	r3, r4
 800c3c2:	6864      	ldr	r4, [r4, #4]
 800c3c4:	e7ae      	b.n	800c324 <_malloc_r+0x34>
 800c3c6:	463c      	mov	r4, r7
 800c3c8:	687f      	ldr	r7, [r7, #4]
 800c3ca:	e7b6      	b.n	800c33a <_malloc_r+0x4a>
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	42a3      	cmp	r3, r4
 800c3d2:	d1fb      	bne.n	800c3cc <_malloc_r+0xdc>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	6053      	str	r3, [r2, #4]
 800c3d8:	e7de      	b.n	800c398 <_malloc_r+0xa8>
 800c3da:	230c      	movs	r3, #12
 800c3dc:	6033      	str	r3, [r6, #0]
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f000 f80c 	bl	800c3fc <__malloc_unlock>
 800c3e4:	e794      	b.n	800c310 <_malloc_r+0x20>
 800c3e6:	6005      	str	r5, [r0, #0]
 800c3e8:	e7d6      	b.n	800c398 <_malloc_r+0xa8>
 800c3ea:	bf00      	nop
 800c3ec:	200026e4 	.word	0x200026e4

0800c3f0 <__malloc_lock>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	@ (800c3f8 <__malloc_lock+0x8>)
 800c3f2:	f001 bd36 	b.w	800de62 <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	20002828 	.word	0x20002828

0800c3fc <__malloc_unlock>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	@ (800c404 <__malloc_unlock+0x8>)
 800c3fe:	f001 bd31 	b.w	800de64 <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	20002828 	.word	0x20002828

0800c408 <sulp>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	4604      	mov	r4, r0
 800c40c:	460d      	mov	r5, r1
 800c40e:	ec45 4b10 	vmov	d0, r4, r5
 800c412:	4616      	mov	r6, r2
 800c414:	f003 faba 	bl	800f98c <__ulp>
 800c418:	ec51 0b10 	vmov	r0, r1, d0
 800c41c:	b17e      	cbz	r6, 800c43e <sulp+0x36>
 800c41e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c422:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c426:	2b00      	cmp	r3, #0
 800c428:	dd09      	ble.n	800c43e <sulp+0x36>
 800c42a:	051b      	lsls	r3, r3, #20
 800c42c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c430:	2400      	movs	r4, #0
 800c432:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c436:	4622      	mov	r2, r4
 800c438:	462b      	mov	r3, r5
 800c43a:	f7f4 f8ed 	bl	8000618 <__aeabi_dmul>
 800c43e:	ec41 0b10 	vmov	d0, r0, r1
 800c442:	bd70      	pop	{r4, r5, r6, pc}
 800c444:	0000      	movs	r0, r0
	...

0800c448 <_strtod_l>:
 800c448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44c:	b09f      	sub	sp, #124	@ 0x7c
 800c44e:	460c      	mov	r4, r1
 800c450:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c452:	2200      	movs	r2, #0
 800c454:	921a      	str	r2, [sp, #104]	@ 0x68
 800c456:	9005      	str	r0, [sp, #20]
 800c458:	f04f 0a00 	mov.w	sl, #0
 800c45c:	f04f 0b00 	mov.w	fp, #0
 800c460:	460a      	mov	r2, r1
 800c462:	9219      	str	r2, [sp, #100]	@ 0x64
 800c464:	7811      	ldrb	r1, [r2, #0]
 800c466:	292b      	cmp	r1, #43	@ 0x2b
 800c468:	d04a      	beq.n	800c500 <_strtod_l+0xb8>
 800c46a:	d838      	bhi.n	800c4de <_strtod_l+0x96>
 800c46c:	290d      	cmp	r1, #13
 800c46e:	d832      	bhi.n	800c4d6 <_strtod_l+0x8e>
 800c470:	2908      	cmp	r1, #8
 800c472:	d832      	bhi.n	800c4da <_strtod_l+0x92>
 800c474:	2900      	cmp	r1, #0
 800c476:	d03b      	beq.n	800c4f0 <_strtod_l+0xa8>
 800c478:	2200      	movs	r2, #0
 800c47a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c47c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c47e:	782a      	ldrb	r2, [r5, #0]
 800c480:	2a30      	cmp	r2, #48	@ 0x30
 800c482:	f040 80b2 	bne.w	800c5ea <_strtod_l+0x1a2>
 800c486:	786a      	ldrb	r2, [r5, #1]
 800c488:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c48c:	2a58      	cmp	r2, #88	@ 0x58
 800c48e:	d16e      	bne.n	800c56e <_strtod_l+0x126>
 800c490:	9302      	str	r3, [sp, #8]
 800c492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c494:	9301      	str	r3, [sp, #4]
 800c496:	ab1a      	add	r3, sp, #104	@ 0x68
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	4a8f      	ldr	r2, [pc, #572]	@ (800c6d8 <_strtod_l+0x290>)
 800c49c:	9805      	ldr	r0, [sp, #20]
 800c49e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c4a0:	a919      	add	r1, sp, #100	@ 0x64
 800c4a2:	f002 fc23 	bl	800ecec <__gethex>
 800c4a6:	f010 060f 	ands.w	r6, r0, #15
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	d005      	beq.n	800c4ba <_strtod_l+0x72>
 800c4ae:	2e06      	cmp	r6, #6
 800c4b0:	d128      	bne.n	800c504 <_strtod_l+0xbc>
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c4b8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c4ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f040 858e 	bne.w	800cfde <_strtod_l+0xb96>
 800c4c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c4:	b1cb      	cbz	r3, 800c4fa <_strtod_l+0xb2>
 800c4c6:	4652      	mov	r2, sl
 800c4c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c4cc:	ec43 2b10 	vmov	d0, r2, r3
 800c4d0:	b01f      	add	sp, #124	@ 0x7c
 800c4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d6:	2920      	cmp	r1, #32
 800c4d8:	d1ce      	bne.n	800c478 <_strtod_l+0x30>
 800c4da:	3201      	adds	r2, #1
 800c4dc:	e7c1      	b.n	800c462 <_strtod_l+0x1a>
 800c4de:	292d      	cmp	r1, #45	@ 0x2d
 800c4e0:	d1ca      	bne.n	800c478 <_strtod_l+0x30>
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	910e      	str	r1, [sp, #56]	@ 0x38
 800c4e6:	1c51      	adds	r1, r2, #1
 800c4e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4ea:	7852      	ldrb	r2, [r2, #1]
 800c4ec:	2a00      	cmp	r2, #0
 800c4ee:	d1c5      	bne.n	800c47c <_strtod_l+0x34>
 800c4f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f040 8570 	bne.w	800cfda <_strtod_l+0xb92>
 800c4fa:	4652      	mov	r2, sl
 800c4fc:	465b      	mov	r3, fp
 800c4fe:	e7e5      	b.n	800c4cc <_strtod_l+0x84>
 800c500:	2100      	movs	r1, #0
 800c502:	e7ef      	b.n	800c4e4 <_strtod_l+0x9c>
 800c504:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c506:	b13a      	cbz	r2, 800c518 <_strtod_l+0xd0>
 800c508:	2135      	movs	r1, #53	@ 0x35
 800c50a:	a81c      	add	r0, sp, #112	@ 0x70
 800c50c:	f003 fb38 	bl	800fb80 <__copybits>
 800c510:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c512:	9805      	ldr	r0, [sp, #20]
 800c514:	f002 ff0e 	bl	800f334 <_Bfree>
 800c518:	3e01      	subs	r6, #1
 800c51a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c51c:	2e04      	cmp	r6, #4
 800c51e:	d806      	bhi.n	800c52e <_strtod_l+0xe6>
 800c520:	e8df f006 	tbb	[pc, r6]
 800c524:	201d0314 	.word	0x201d0314
 800c528:	14          	.byte	0x14
 800c529:	00          	.byte	0x00
 800c52a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c52e:	05e1      	lsls	r1, r4, #23
 800c530:	bf48      	it	mi
 800c532:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c536:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c53a:	0d1b      	lsrs	r3, r3, #20
 800c53c:	051b      	lsls	r3, r3, #20
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1bb      	bne.n	800c4ba <_strtod_l+0x72>
 800c542:	f001 fc63 	bl	800de0c <__errno>
 800c546:	2322      	movs	r3, #34	@ 0x22
 800c548:	6003      	str	r3, [r0, #0]
 800c54a:	e7b6      	b.n	800c4ba <_strtod_l+0x72>
 800c54c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c550:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c554:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c558:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c55c:	e7e7      	b.n	800c52e <_strtod_l+0xe6>
 800c55e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c6e0 <_strtod_l+0x298>
 800c562:	e7e4      	b.n	800c52e <_strtod_l+0xe6>
 800c564:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c568:	f04f 3aff 	mov.w	sl, #4294967295
 800c56c:	e7df      	b.n	800c52e <_strtod_l+0xe6>
 800c56e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c570:	1c5a      	adds	r2, r3, #1
 800c572:	9219      	str	r2, [sp, #100]	@ 0x64
 800c574:	785b      	ldrb	r3, [r3, #1]
 800c576:	2b30      	cmp	r3, #48	@ 0x30
 800c578:	d0f9      	beq.n	800c56e <_strtod_l+0x126>
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d09d      	beq.n	800c4ba <_strtod_l+0x72>
 800c57e:	2301      	movs	r3, #1
 800c580:	2700      	movs	r7, #0
 800c582:	9308      	str	r3, [sp, #32]
 800c584:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c586:	930c      	str	r3, [sp, #48]	@ 0x30
 800c588:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c58a:	46b9      	mov	r9, r7
 800c58c:	220a      	movs	r2, #10
 800c58e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c590:	7805      	ldrb	r5, [r0, #0]
 800c592:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c596:	b2d9      	uxtb	r1, r3
 800c598:	2909      	cmp	r1, #9
 800c59a:	d928      	bls.n	800c5ee <_strtod_l+0x1a6>
 800c59c:	494f      	ldr	r1, [pc, #316]	@ (800c6dc <_strtod_l+0x294>)
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f001 fb58 	bl	800dc54 <strncmp>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	d032      	beq.n	800c60e <_strtod_l+0x1c6>
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	462a      	mov	r2, r5
 800c5ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800c5ae:	464d      	mov	r5, r9
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2a65      	cmp	r2, #101	@ 0x65
 800c5b4:	d001      	beq.n	800c5ba <_strtod_l+0x172>
 800c5b6:	2a45      	cmp	r2, #69	@ 0x45
 800c5b8:	d114      	bne.n	800c5e4 <_strtod_l+0x19c>
 800c5ba:	b91d      	cbnz	r5, 800c5c4 <_strtod_l+0x17c>
 800c5bc:	9a08      	ldr	r2, [sp, #32]
 800c5be:	4302      	orrs	r2, r0
 800c5c0:	d096      	beq.n	800c4f0 <_strtod_l+0xa8>
 800c5c2:	2500      	movs	r5, #0
 800c5c4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c5c6:	1c62      	adds	r2, r4, #1
 800c5c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5ca:	7862      	ldrb	r2, [r4, #1]
 800c5cc:	2a2b      	cmp	r2, #43	@ 0x2b
 800c5ce:	d07a      	beq.n	800c6c6 <_strtod_l+0x27e>
 800c5d0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c5d2:	d07e      	beq.n	800c6d2 <_strtod_l+0x28a>
 800c5d4:	f04f 0c00 	mov.w	ip, #0
 800c5d8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c5dc:	2909      	cmp	r1, #9
 800c5de:	f240 8085 	bls.w	800c6ec <_strtod_l+0x2a4>
 800c5e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c5e4:	f04f 0800 	mov.w	r8, #0
 800c5e8:	e0a5      	b.n	800c736 <_strtod_l+0x2ee>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e7c8      	b.n	800c580 <_strtod_l+0x138>
 800c5ee:	f1b9 0f08 	cmp.w	r9, #8
 800c5f2:	bfd8      	it	le
 800c5f4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c5f6:	f100 0001 	add.w	r0, r0, #1
 800c5fa:	bfda      	itte	le
 800c5fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c600:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c602:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c606:	f109 0901 	add.w	r9, r9, #1
 800c60a:	9019      	str	r0, [sp, #100]	@ 0x64
 800c60c:	e7bf      	b.n	800c58e <_strtod_l+0x146>
 800c60e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	9219      	str	r2, [sp, #100]	@ 0x64
 800c614:	785a      	ldrb	r2, [r3, #1]
 800c616:	f1b9 0f00 	cmp.w	r9, #0
 800c61a:	d03b      	beq.n	800c694 <_strtod_l+0x24c>
 800c61c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c61e:	464d      	mov	r5, r9
 800c620:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c624:	2b09      	cmp	r3, #9
 800c626:	d912      	bls.n	800c64e <_strtod_l+0x206>
 800c628:	2301      	movs	r3, #1
 800c62a:	e7c2      	b.n	800c5b2 <_strtod_l+0x16a>
 800c62c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c62e:	1c5a      	adds	r2, r3, #1
 800c630:	9219      	str	r2, [sp, #100]	@ 0x64
 800c632:	785a      	ldrb	r2, [r3, #1]
 800c634:	3001      	adds	r0, #1
 800c636:	2a30      	cmp	r2, #48	@ 0x30
 800c638:	d0f8      	beq.n	800c62c <_strtod_l+0x1e4>
 800c63a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c63e:	2b08      	cmp	r3, #8
 800c640:	f200 84d2 	bhi.w	800cfe8 <_strtod_l+0xba0>
 800c644:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c646:	900a      	str	r0, [sp, #40]	@ 0x28
 800c648:	2000      	movs	r0, #0
 800c64a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c64c:	4605      	mov	r5, r0
 800c64e:	3a30      	subs	r2, #48	@ 0x30
 800c650:	f100 0301 	add.w	r3, r0, #1
 800c654:	d018      	beq.n	800c688 <_strtod_l+0x240>
 800c656:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c658:	4419      	add	r1, r3
 800c65a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c65c:	462e      	mov	r6, r5
 800c65e:	f04f 0e0a 	mov.w	lr, #10
 800c662:	1c71      	adds	r1, r6, #1
 800c664:	eba1 0c05 	sub.w	ip, r1, r5
 800c668:	4563      	cmp	r3, ip
 800c66a:	dc15      	bgt.n	800c698 <_strtod_l+0x250>
 800c66c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c670:	182b      	adds	r3, r5, r0
 800c672:	2b08      	cmp	r3, #8
 800c674:	f105 0501 	add.w	r5, r5, #1
 800c678:	4405      	add	r5, r0
 800c67a:	dc1a      	bgt.n	800c6b2 <_strtod_l+0x26a>
 800c67c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c67e:	230a      	movs	r3, #10
 800c680:	fb03 2301 	mla	r3, r3, r1, r2
 800c684:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c686:	2300      	movs	r3, #0
 800c688:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c68a:	1c51      	adds	r1, r2, #1
 800c68c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c68e:	7852      	ldrb	r2, [r2, #1]
 800c690:	4618      	mov	r0, r3
 800c692:	e7c5      	b.n	800c620 <_strtod_l+0x1d8>
 800c694:	4648      	mov	r0, r9
 800c696:	e7ce      	b.n	800c636 <_strtod_l+0x1ee>
 800c698:	2e08      	cmp	r6, #8
 800c69a:	dc05      	bgt.n	800c6a8 <_strtod_l+0x260>
 800c69c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c69e:	fb0e f606 	mul.w	r6, lr, r6
 800c6a2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c6a4:	460e      	mov	r6, r1
 800c6a6:	e7dc      	b.n	800c662 <_strtod_l+0x21a>
 800c6a8:	2910      	cmp	r1, #16
 800c6aa:	bfd8      	it	le
 800c6ac:	fb0e f707 	mulle.w	r7, lr, r7
 800c6b0:	e7f8      	b.n	800c6a4 <_strtod_l+0x25c>
 800c6b2:	2b0f      	cmp	r3, #15
 800c6b4:	bfdc      	itt	le
 800c6b6:	230a      	movle	r3, #10
 800c6b8:	fb03 2707 	mlale	r7, r3, r7, r2
 800c6bc:	e7e3      	b.n	800c686 <_strtod_l+0x23e>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e77a      	b.n	800c5bc <_strtod_l+0x174>
 800c6c6:	f04f 0c00 	mov.w	ip, #0
 800c6ca:	1ca2      	adds	r2, r4, #2
 800c6cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6ce:	78a2      	ldrb	r2, [r4, #2]
 800c6d0:	e782      	b.n	800c5d8 <_strtod_l+0x190>
 800c6d2:	f04f 0c01 	mov.w	ip, #1
 800c6d6:	e7f8      	b.n	800c6ca <_strtod_l+0x282>
 800c6d8:	08010674 	.word	0x08010674
 800c6dc:	08010434 	.word	0x08010434
 800c6e0:	7ff00000 	.word	0x7ff00000
 800c6e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6e6:	1c51      	adds	r1, r2, #1
 800c6e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c6ea:	7852      	ldrb	r2, [r2, #1]
 800c6ec:	2a30      	cmp	r2, #48	@ 0x30
 800c6ee:	d0f9      	beq.n	800c6e4 <_strtod_l+0x29c>
 800c6f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c6f4:	2908      	cmp	r1, #8
 800c6f6:	f63f af75 	bhi.w	800c5e4 <_strtod_l+0x19c>
 800c6fa:	3a30      	subs	r2, #48	@ 0x30
 800c6fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c700:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c702:	f04f 080a 	mov.w	r8, #10
 800c706:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c708:	1c56      	adds	r6, r2, #1
 800c70a:	9619      	str	r6, [sp, #100]	@ 0x64
 800c70c:	7852      	ldrb	r2, [r2, #1]
 800c70e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c712:	f1be 0f09 	cmp.w	lr, #9
 800c716:	d939      	bls.n	800c78c <_strtod_l+0x344>
 800c718:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c71a:	1a76      	subs	r6, r6, r1
 800c71c:	2e08      	cmp	r6, #8
 800c71e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c722:	dc03      	bgt.n	800c72c <_strtod_l+0x2e4>
 800c724:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c726:	4588      	cmp	r8, r1
 800c728:	bfa8      	it	ge
 800c72a:	4688      	movge	r8, r1
 800c72c:	f1bc 0f00 	cmp.w	ip, #0
 800c730:	d001      	beq.n	800c736 <_strtod_l+0x2ee>
 800c732:	f1c8 0800 	rsb	r8, r8, #0
 800c736:	2d00      	cmp	r5, #0
 800c738:	d14e      	bne.n	800c7d8 <_strtod_l+0x390>
 800c73a:	9908      	ldr	r1, [sp, #32]
 800c73c:	4308      	orrs	r0, r1
 800c73e:	f47f aebc 	bne.w	800c4ba <_strtod_l+0x72>
 800c742:	2b00      	cmp	r3, #0
 800c744:	f47f aed4 	bne.w	800c4f0 <_strtod_l+0xa8>
 800c748:	2a69      	cmp	r2, #105	@ 0x69
 800c74a:	d028      	beq.n	800c79e <_strtod_l+0x356>
 800c74c:	dc25      	bgt.n	800c79a <_strtod_l+0x352>
 800c74e:	2a49      	cmp	r2, #73	@ 0x49
 800c750:	d025      	beq.n	800c79e <_strtod_l+0x356>
 800c752:	2a4e      	cmp	r2, #78	@ 0x4e
 800c754:	f47f aecc 	bne.w	800c4f0 <_strtod_l+0xa8>
 800c758:	499a      	ldr	r1, [pc, #616]	@ (800c9c4 <_strtod_l+0x57c>)
 800c75a:	a819      	add	r0, sp, #100	@ 0x64
 800c75c:	f002 fce8 	bl	800f130 <__match>
 800c760:	2800      	cmp	r0, #0
 800c762:	f43f aec5 	beq.w	800c4f0 <_strtod_l+0xa8>
 800c766:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	2b28      	cmp	r3, #40	@ 0x28
 800c76c:	d12e      	bne.n	800c7cc <_strtod_l+0x384>
 800c76e:	4996      	ldr	r1, [pc, #600]	@ (800c9c8 <_strtod_l+0x580>)
 800c770:	aa1c      	add	r2, sp, #112	@ 0x70
 800c772:	a819      	add	r0, sp, #100	@ 0x64
 800c774:	f002 fcf0 	bl	800f158 <__hexnan>
 800c778:	2805      	cmp	r0, #5
 800c77a:	d127      	bne.n	800c7cc <_strtod_l+0x384>
 800c77c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c77e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c782:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c786:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c78a:	e696      	b.n	800c4ba <_strtod_l+0x72>
 800c78c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c78e:	fb08 2101 	mla	r1, r8, r1, r2
 800c792:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c796:	9209      	str	r2, [sp, #36]	@ 0x24
 800c798:	e7b5      	b.n	800c706 <_strtod_l+0x2be>
 800c79a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c79c:	e7da      	b.n	800c754 <_strtod_l+0x30c>
 800c79e:	498b      	ldr	r1, [pc, #556]	@ (800c9cc <_strtod_l+0x584>)
 800c7a0:	a819      	add	r0, sp, #100	@ 0x64
 800c7a2:	f002 fcc5 	bl	800f130 <__match>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	f43f aea2 	beq.w	800c4f0 <_strtod_l+0xa8>
 800c7ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7ae:	4988      	ldr	r1, [pc, #544]	@ (800c9d0 <_strtod_l+0x588>)
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	a819      	add	r0, sp, #100	@ 0x64
 800c7b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c7b6:	f002 fcbb 	bl	800f130 <__match>
 800c7ba:	b910      	cbnz	r0, 800c7c2 <_strtod_l+0x37a>
 800c7bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7be:	3301      	adds	r3, #1
 800c7c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c7c2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c9e0 <_strtod_l+0x598>
 800c7c6:	f04f 0a00 	mov.w	sl, #0
 800c7ca:	e676      	b.n	800c4ba <_strtod_l+0x72>
 800c7cc:	4881      	ldr	r0, [pc, #516]	@ (800c9d4 <_strtod_l+0x58c>)
 800c7ce:	f001 fb5b 	bl	800de88 <nan>
 800c7d2:	ec5b ab10 	vmov	sl, fp, d0
 800c7d6:	e670      	b.n	800c4ba <_strtod_l+0x72>
 800c7d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7da:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c7dc:	eba8 0303 	sub.w	r3, r8, r3
 800c7e0:	f1b9 0f00 	cmp.w	r9, #0
 800c7e4:	bf08      	it	eq
 800c7e6:	46a9      	moveq	r9, r5
 800c7e8:	2d10      	cmp	r5, #16
 800c7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ec:	462c      	mov	r4, r5
 800c7ee:	bfa8      	it	ge
 800c7f0:	2410      	movge	r4, #16
 800c7f2:	f7f3 fe97 	bl	8000524 <__aeabi_ui2d>
 800c7f6:	2d09      	cmp	r5, #9
 800c7f8:	4682      	mov	sl, r0
 800c7fa:	468b      	mov	fp, r1
 800c7fc:	dc13      	bgt.n	800c826 <_strtod_l+0x3de>
 800c7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c800:	2b00      	cmp	r3, #0
 800c802:	f43f ae5a 	beq.w	800c4ba <_strtod_l+0x72>
 800c806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c808:	dd78      	ble.n	800c8fc <_strtod_l+0x4b4>
 800c80a:	2b16      	cmp	r3, #22
 800c80c:	dc5f      	bgt.n	800c8ce <_strtod_l+0x486>
 800c80e:	4972      	ldr	r1, [pc, #456]	@ (800c9d8 <_strtod_l+0x590>)
 800c810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c814:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c818:	4652      	mov	r2, sl
 800c81a:	465b      	mov	r3, fp
 800c81c:	f7f3 fefc 	bl	8000618 <__aeabi_dmul>
 800c820:	4682      	mov	sl, r0
 800c822:	468b      	mov	fp, r1
 800c824:	e649      	b.n	800c4ba <_strtod_l+0x72>
 800c826:	4b6c      	ldr	r3, [pc, #432]	@ (800c9d8 <_strtod_l+0x590>)
 800c828:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c82c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c830:	f7f3 fef2 	bl	8000618 <__aeabi_dmul>
 800c834:	4682      	mov	sl, r0
 800c836:	4638      	mov	r0, r7
 800c838:	468b      	mov	fp, r1
 800c83a:	f7f3 fe73 	bl	8000524 <__aeabi_ui2d>
 800c83e:	4602      	mov	r2, r0
 800c840:	460b      	mov	r3, r1
 800c842:	4650      	mov	r0, sl
 800c844:	4659      	mov	r1, fp
 800c846:	f7f3 fd31 	bl	80002ac <__adddf3>
 800c84a:	2d0f      	cmp	r5, #15
 800c84c:	4682      	mov	sl, r0
 800c84e:	468b      	mov	fp, r1
 800c850:	ddd5      	ble.n	800c7fe <_strtod_l+0x3b6>
 800c852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c854:	1b2c      	subs	r4, r5, r4
 800c856:	441c      	add	r4, r3
 800c858:	2c00      	cmp	r4, #0
 800c85a:	f340 8093 	ble.w	800c984 <_strtod_l+0x53c>
 800c85e:	f014 030f 	ands.w	r3, r4, #15
 800c862:	d00a      	beq.n	800c87a <_strtod_l+0x432>
 800c864:	495c      	ldr	r1, [pc, #368]	@ (800c9d8 <_strtod_l+0x590>)
 800c866:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c86a:	4652      	mov	r2, sl
 800c86c:	465b      	mov	r3, fp
 800c86e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c872:	f7f3 fed1 	bl	8000618 <__aeabi_dmul>
 800c876:	4682      	mov	sl, r0
 800c878:	468b      	mov	fp, r1
 800c87a:	f034 040f 	bics.w	r4, r4, #15
 800c87e:	d073      	beq.n	800c968 <_strtod_l+0x520>
 800c880:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c884:	dd49      	ble.n	800c91a <_strtod_l+0x4d2>
 800c886:	2400      	movs	r4, #0
 800c888:	46a0      	mov	r8, r4
 800c88a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c88c:	46a1      	mov	r9, r4
 800c88e:	9a05      	ldr	r2, [sp, #20]
 800c890:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c9e0 <_strtod_l+0x598>
 800c894:	2322      	movs	r3, #34	@ 0x22
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	f04f 0a00 	mov.w	sl, #0
 800c89c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f43f ae0b 	beq.w	800c4ba <_strtod_l+0x72>
 800c8a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8a6:	9805      	ldr	r0, [sp, #20]
 800c8a8:	f002 fd44 	bl	800f334 <_Bfree>
 800c8ac:	9805      	ldr	r0, [sp, #20]
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	f002 fd40 	bl	800f334 <_Bfree>
 800c8b4:	9805      	ldr	r0, [sp, #20]
 800c8b6:	4641      	mov	r1, r8
 800c8b8:	f002 fd3c 	bl	800f334 <_Bfree>
 800c8bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c8be:	9805      	ldr	r0, [sp, #20]
 800c8c0:	f002 fd38 	bl	800f334 <_Bfree>
 800c8c4:	9805      	ldr	r0, [sp, #20]
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	f002 fd34 	bl	800f334 <_Bfree>
 800c8cc:	e5f5      	b.n	800c4ba <_strtod_l+0x72>
 800c8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	dbbc      	blt.n	800c852 <_strtod_l+0x40a>
 800c8d8:	4c3f      	ldr	r4, [pc, #252]	@ (800c9d8 <_strtod_l+0x590>)
 800c8da:	f1c5 050f 	rsb	r5, r5, #15
 800c8de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c8e2:	4652      	mov	r2, sl
 800c8e4:	465b      	mov	r3, fp
 800c8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ea:	f7f3 fe95 	bl	8000618 <__aeabi_dmul>
 800c8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8f0:	1b5d      	subs	r5, r3, r5
 800c8f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c8f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c8fa:	e78f      	b.n	800c81c <_strtod_l+0x3d4>
 800c8fc:	3316      	adds	r3, #22
 800c8fe:	dba8      	blt.n	800c852 <_strtod_l+0x40a>
 800c900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c902:	eba3 0808 	sub.w	r8, r3, r8
 800c906:	4b34      	ldr	r3, [pc, #208]	@ (800c9d8 <_strtod_l+0x590>)
 800c908:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c90c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c910:	4650      	mov	r0, sl
 800c912:	4659      	mov	r1, fp
 800c914:	f7f3 ffaa 	bl	800086c <__aeabi_ddiv>
 800c918:	e782      	b.n	800c820 <_strtod_l+0x3d8>
 800c91a:	2300      	movs	r3, #0
 800c91c:	4f2f      	ldr	r7, [pc, #188]	@ (800c9dc <_strtod_l+0x594>)
 800c91e:	1124      	asrs	r4, r4, #4
 800c920:	4650      	mov	r0, sl
 800c922:	4659      	mov	r1, fp
 800c924:	461e      	mov	r6, r3
 800c926:	2c01      	cmp	r4, #1
 800c928:	dc21      	bgt.n	800c96e <_strtod_l+0x526>
 800c92a:	b10b      	cbz	r3, 800c930 <_strtod_l+0x4e8>
 800c92c:	4682      	mov	sl, r0
 800c92e:	468b      	mov	fp, r1
 800c930:	492a      	ldr	r1, [pc, #168]	@ (800c9dc <_strtod_l+0x594>)
 800c932:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c936:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c93a:	4652      	mov	r2, sl
 800c93c:	465b      	mov	r3, fp
 800c93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c942:	f7f3 fe69 	bl	8000618 <__aeabi_dmul>
 800c946:	4b26      	ldr	r3, [pc, #152]	@ (800c9e0 <_strtod_l+0x598>)
 800c948:	460a      	mov	r2, r1
 800c94a:	400b      	ands	r3, r1
 800c94c:	4925      	ldr	r1, [pc, #148]	@ (800c9e4 <_strtod_l+0x59c>)
 800c94e:	428b      	cmp	r3, r1
 800c950:	4682      	mov	sl, r0
 800c952:	d898      	bhi.n	800c886 <_strtod_l+0x43e>
 800c954:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c958:	428b      	cmp	r3, r1
 800c95a:	bf86      	itte	hi
 800c95c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c9e8 <_strtod_l+0x5a0>
 800c960:	f04f 3aff 	movhi.w	sl, #4294967295
 800c964:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c968:	2300      	movs	r3, #0
 800c96a:	9308      	str	r3, [sp, #32]
 800c96c:	e076      	b.n	800ca5c <_strtod_l+0x614>
 800c96e:	07e2      	lsls	r2, r4, #31
 800c970:	d504      	bpl.n	800c97c <_strtod_l+0x534>
 800c972:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c976:	f7f3 fe4f 	bl	8000618 <__aeabi_dmul>
 800c97a:	2301      	movs	r3, #1
 800c97c:	3601      	adds	r6, #1
 800c97e:	1064      	asrs	r4, r4, #1
 800c980:	3708      	adds	r7, #8
 800c982:	e7d0      	b.n	800c926 <_strtod_l+0x4de>
 800c984:	d0f0      	beq.n	800c968 <_strtod_l+0x520>
 800c986:	4264      	negs	r4, r4
 800c988:	f014 020f 	ands.w	r2, r4, #15
 800c98c:	d00a      	beq.n	800c9a4 <_strtod_l+0x55c>
 800c98e:	4b12      	ldr	r3, [pc, #72]	@ (800c9d8 <_strtod_l+0x590>)
 800c990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c994:	4650      	mov	r0, sl
 800c996:	4659      	mov	r1, fp
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	f7f3 ff66 	bl	800086c <__aeabi_ddiv>
 800c9a0:	4682      	mov	sl, r0
 800c9a2:	468b      	mov	fp, r1
 800c9a4:	1124      	asrs	r4, r4, #4
 800c9a6:	d0df      	beq.n	800c968 <_strtod_l+0x520>
 800c9a8:	2c1f      	cmp	r4, #31
 800c9aa:	dd1f      	ble.n	800c9ec <_strtod_l+0x5a4>
 800c9ac:	2400      	movs	r4, #0
 800c9ae:	46a0      	mov	r8, r4
 800c9b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c9b2:	46a1      	mov	r9, r4
 800c9b4:	9a05      	ldr	r2, [sp, #20]
 800c9b6:	2322      	movs	r3, #34	@ 0x22
 800c9b8:	f04f 0a00 	mov.w	sl, #0
 800c9bc:	f04f 0b00 	mov.w	fp, #0
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	e76b      	b.n	800c89c <_strtod_l+0x454>
 800c9c4:	08010443 	.word	0x08010443
 800c9c8:	08010660 	.word	0x08010660
 800c9cc:	0801043b 	.word	0x0801043b
 800c9d0:	08010522 	.word	0x08010522
 800c9d4:	0801051e 	.word	0x0801051e
 800c9d8:	080107e8 	.word	0x080107e8
 800c9dc:	080107c0 	.word	0x080107c0
 800c9e0:	7ff00000 	.word	0x7ff00000
 800c9e4:	7ca00000 	.word	0x7ca00000
 800c9e8:	7fefffff 	.word	0x7fefffff
 800c9ec:	f014 0310 	ands.w	r3, r4, #16
 800c9f0:	bf18      	it	ne
 800c9f2:	236a      	movne	r3, #106	@ 0x6a
 800c9f4:	4ea9      	ldr	r6, [pc, #676]	@ (800cc9c <_strtod_l+0x854>)
 800c9f6:	9308      	str	r3, [sp, #32]
 800c9f8:	4650      	mov	r0, sl
 800c9fa:	4659      	mov	r1, fp
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	07e7      	lsls	r7, r4, #31
 800ca00:	d504      	bpl.n	800ca0c <_strtod_l+0x5c4>
 800ca02:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca06:	f7f3 fe07 	bl	8000618 <__aeabi_dmul>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	1064      	asrs	r4, r4, #1
 800ca0e:	f106 0608 	add.w	r6, r6, #8
 800ca12:	d1f4      	bne.n	800c9fe <_strtod_l+0x5b6>
 800ca14:	b10b      	cbz	r3, 800ca1a <_strtod_l+0x5d2>
 800ca16:	4682      	mov	sl, r0
 800ca18:	468b      	mov	fp, r1
 800ca1a:	9b08      	ldr	r3, [sp, #32]
 800ca1c:	b1b3      	cbz	r3, 800ca4c <_strtod_l+0x604>
 800ca1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ca22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	4659      	mov	r1, fp
 800ca2a:	dd0f      	ble.n	800ca4c <_strtod_l+0x604>
 800ca2c:	2b1f      	cmp	r3, #31
 800ca2e:	dd56      	ble.n	800cade <_strtod_l+0x696>
 800ca30:	2b34      	cmp	r3, #52	@ 0x34
 800ca32:	bfde      	ittt	le
 800ca34:	f04f 33ff 	movle.w	r3, #4294967295
 800ca38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ca3c:	4093      	lslle	r3, r2
 800ca3e:	f04f 0a00 	mov.w	sl, #0
 800ca42:	bfcc      	ite	gt
 800ca44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ca48:	ea03 0b01 	andle.w	fp, r3, r1
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2300      	movs	r3, #0
 800ca50:	4650      	mov	r0, sl
 800ca52:	4659      	mov	r1, fp
 800ca54:	f7f4 f848 	bl	8000ae8 <__aeabi_dcmpeq>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d1a7      	bne.n	800c9ac <_strtod_l+0x564>
 800ca5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ca62:	9805      	ldr	r0, [sp, #20]
 800ca64:	462b      	mov	r3, r5
 800ca66:	464a      	mov	r2, r9
 800ca68:	f002 fccc 	bl	800f404 <__s2b>
 800ca6c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	f43f af09 	beq.w	800c886 <_strtod_l+0x43e>
 800ca74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca78:	2a00      	cmp	r2, #0
 800ca7a:	eba3 0308 	sub.w	r3, r3, r8
 800ca7e:	bfa8      	it	ge
 800ca80:	2300      	movge	r3, #0
 800ca82:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca84:	2400      	movs	r4, #0
 800ca86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ca8a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ca8c:	46a0      	mov	r8, r4
 800ca8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca90:	9805      	ldr	r0, [sp, #20]
 800ca92:	6859      	ldr	r1, [r3, #4]
 800ca94:	f002 fc0e 	bl	800f2b4 <_Balloc>
 800ca98:	4681      	mov	r9, r0
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	f43f aef7 	beq.w	800c88e <_strtod_l+0x446>
 800caa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caa2:	691a      	ldr	r2, [r3, #16]
 800caa4:	3202      	adds	r2, #2
 800caa6:	f103 010c 	add.w	r1, r3, #12
 800caaa:	0092      	lsls	r2, r2, #2
 800caac:	300c      	adds	r0, #12
 800caae:	f001 f9da 	bl	800de66 <memcpy>
 800cab2:	ec4b ab10 	vmov	d0, sl, fp
 800cab6:	9805      	ldr	r0, [sp, #20]
 800cab8:	aa1c      	add	r2, sp, #112	@ 0x70
 800caba:	a91b      	add	r1, sp, #108	@ 0x6c
 800cabc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cac0:	f002 ffd4 	bl	800fa6c <__d2b>
 800cac4:	901a      	str	r0, [sp, #104]	@ 0x68
 800cac6:	2800      	cmp	r0, #0
 800cac8:	f43f aee1 	beq.w	800c88e <_strtod_l+0x446>
 800cacc:	9805      	ldr	r0, [sp, #20]
 800cace:	2101      	movs	r1, #1
 800cad0:	f002 fd2e 	bl	800f530 <__i2b>
 800cad4:	4680      	mov	r8, r0
 800cad6:	b948      	cbnz	r0, 800caec <_strtod_l+0x6a4>
 800cad8:	f04f 0800 	mov.w	r8, #0
 800cadc:	e6d7      	b.n	800c88e <_strtod_l+0x446>
 800cade:	f04f 32ff 	mov.w	r2, #4294967295
 800cae2:	fa02 f303 	lsl.w	r3, r2, r3
 800cae6:	ea03 0a0a 	and.w	sl, r3, sl
 800caea:	e7af      	b.n	800ca4c <_strtod_l+0x604>
 800caec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800caee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800caf0:	2d00      	cmp	r5, #0
 800caf2:	bfab      	itete	ge
 800caf4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800caf6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800caf8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cafa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cafc:	bfac      	ite	ge
 800cafe:	18ef      	addge	r7, r5, r3
 800cb00:	1b5e      	sublt	r6, r3, r5
 800cb02:	9b08      	ldr	r3, [sp, #32]
 800cb04:	1aed      	subs	r5, r5, r3
 800cb06:	4415      	add	r5, r2
 800cb08:	4b65      	ldr	r3, [pc, #404]	@ (800cca0 <_strtod_l+0x858>)
 800cb0a:	3d01      	subs	r5, #1
 800cb0c:	429d      	cmp	r5, r3
 800cb0e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cb12:	da50      	bge.n	800cbb6 <_strtod_l+0x76e>
 800cb14:	1b5b      	subs	r3, r3, r5
 800cb16:	2b1f      	cmp	r3, #31
 800cb18:	eba2 0203 	sub.w	r2, r2, r3
 800cb1c:	f04f 0101 	mov.w	r1, #1
 800cb20:	dc3d      	bgt.n	800cb9e <_strtod_l+0x756>
 800cb22:	fa01 f303 	lsl.w	r3, r1, r3
 800cb26:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb28:	2300      	movs	r3, #0
 800cb2a:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb2c:	18bd      	adds	r5, r7, r2
 800cb2e:	9b08      	ldr	r3, [sp, #32]
 800cb30:	42af      	cmp	r7, r5
 800cb32:	4416      	add	r6, r2
 800cb34:	441e      	add	r6, r3
 800cb36:	463b      	mov	r3, r7
 800cb38:	bfa8      	it	ge
 800cb3a:	462b      	movge	r3, r5
 800cb3c:	42b3      	cmp	r3, r6
 800cb3e:	bfa8      	it	ge
 800cb40:	4633      	movge	r3, r6
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	bfc2      	ittt	gt
 800cb46:	1aed      	subgt	r5, r5, r3
 800cb48:	1af6      	subgt	r6, r6, r3
 800cb4a:	1aff      	subgt	r7, r7, r3
 800cb4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	dd16      	ble.n	800cb80 <_strtod_l+0x738>
 800cb52:	4641      	mov	r1, r8
 800cb54:	9805      	ldr	r0, [sp, #20]
 800cb56:	461a      	mov	r2, r3
 800cb58:	f002 fda2 	bl	800f6a0 <__pow5mult>
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d0ba      	beq.n	800cad8 <_strtod_l+0x690>
 800cb62:	4601      	mov	r1, r0
 800cb64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb66:	9805      	ldr	r0, [sp, #20]
 800cb68:	f002 fcf8 	bl	800f55c <__multiply>
 800cb6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	f43f ae8d 	beq.w	800c88e <_strtod_l+0x446>
 800cb74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb76:	9805      	ldr	r0, [sp, #20]
 800cb78:	f002 fbdc 	bl	800f334 <_Bfree>
 800cb7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb7e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb80:	2d00      	cmp	r5, #0
 800cb82:	dc1d      	bgt.n	800cbc0 <_strtod_l+0x778>
 800cb84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	dd23      	ble.n	800cbd2 <_strtod_l+0x78a>
 800cb8a:	4649      	mov	r1, r9
 800cb8c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cb8e:	9805      	ldr	r0, [sp, #20]
 800cb90:	f002 fd86 	bl	800f6a0 <__pow5mult>
 800cb94:	4681      	mov	r9, r0
 800cb96:	b9e0      	cbnz	r0, 800cbd2 <_strtod_l+0x78a>
 800cb98:	f04f 0900 	mov.w	r9, #0
 800cb9c:	e677      	b.n	800c88e <_strtod_l+0x446>
 800cb9e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cba2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cba6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cbaa:	35e2      	adds	r5, #226	@ 0xe2
 800cbac:	fa01 f305 	lsl.w	r3, r1, r5
 800cbb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbb2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cbb4:	e7ba      	b.n	800cb2c <_strtod_l+0x6e4>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbba:	2301      	movs	r3, #1
 800cbbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cbbe:	e7b5      	b.n	800cb2c <_strtod_l+0x6e4>
 800cbc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbc2:	9805      	ldr	r0, [sp, #20]
 800cbc4:	462a      	mov	r2, r5
 800cbc6:	f002 fdc5 	bl	800f754 <__lshift>
 800cbca:	901a      	str	r0, [sp, #104]	@ 0x68
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d1d9      	bne.n	800cb84 <_strtod_l+0x73c>
 800cbd0:	e65d      	b.n	800c88e <_strtod_l+0x446>
 800cbd2:	2e00      	cmp	r6, #0
 800cbd4:	dd07      	ble.n	800cbe6 <_strtod_l+0x79e>
 800cbd6:	4649      	mov	r1, r9
 800cbd8:	9805      	ldr	r0, [sp, #20]
 800cbda:	4632      	mov	r2, r6
 800cbdc:	f002 fdba 	bl	800f754 <__lshift>
 800cbe0:	4681      	mov	r9, r0
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d0d8      	beq.n	800cb98 <_strtod_l+0x750>
 800cbe6:	2f00      	cmp	r7, #0
 800cbe8:	dd08      	ble.n	800cbfc <_strtod_l+0x7b4>
 800cbea:	4641      	mov	r1, r8
 800cbec:	9805      	ldr	r0, [sp, #20]
 800cbee:	463a      	mov	r2, r7
 800cbf0:	f002 fdb0 	bl	800f754 <__lshift>
 800cbf4:	4680      	mov	r8, r0
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	f43f ae49 	beq.w	800c88e <_strtod_l+0x446>
 800cbfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbfe:	9805      	ldr	r0, [sp, #20]
 800cc00:	464a      	mov	r2, r9
 800cc02:	f002 fe2f 	bl	800f864 <__mdiff>
 800cc06:	4604      	mov	r4, r0
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	f43f ae40 	beq.w	800c88e <_strtod_l+0x446>
 800cc0e:	68c3      	ldr	r3, [r0, #12]
 800cc10:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc12:	2300      	movs	r3, #0
 800cc14:	60c3      	str	r3, [r0, #12]
 800cc16:	4641      	mov	r1, r8
 800cc18:	f002 fe08 	bl	800f82c <__mcmp>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	da45      	bge.n	800ccac <_strtod_l+0x864>
 800cc20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc22:	ea53 030a 	orrs.w	r3, r3, sl
 800cc26:	d16b      	bne.n	800cd00 <_strtod_l+0x8b8>
 800cc28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d167      	bne.n	800cd00 <_strtod_l+0x8b8>
 800cc30:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc34:	0d1b      	lsrs	r3, r3, #20
 800cc36:	051b      	lsls	r3, r3, #20
 800cc38:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cc3c:	d960      	bls.n	800cd00 <_strtod_l+0x8b8>
 800cc3e:	6963      	ldr	r3, [r4, #20]
 800cc40:	b913      	cbnz	r3, 800cc48 <_strtod_l+0x800>
 800cc42:	6923      	ldr	r3, [r4, #16]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	dd5b      	ble.n	800cd00 <_strtod_l+0x8b8>
 800cc48:	4621      	mov	r1, r4
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	9805      	ldr	r0, [sp, #20]
 800cc4e:	f002 fd81 	bl	800f754 <__lshift>
 800cc52:	4641      	mov	r1, r8
 800cc54:	4604      	mov	r4, r0
 800cc56:	f002 fde9 	bl	800f82c <__mcmp>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	dd50      	ble.n	800cd00 <_strtod_l+0x8b8>
 800cc5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc62:	9a08      	ldr	r2, [sp, #32]
 800cc64:	0d1b      	lsrs	r3, r3, #20
 800cc66:	051b      	lsls	r3, r3, #20
 800cc68:	2a00      	cmp	r2, #0
 800cc6a:	d06a      	beq.n	800cd42 <_strtod_l+0x8fa>
 800cc6c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cc70:	d867      	bhi.n	800cd42 <_strtod_l+0x8fa>
 800cc72:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cc76:	f67f ae9d 	bls.w	800c9b4 <_strtod_l+0x56c>
 800cc7a:	4b0a      	ldr	r3, [pc, #40]	@ (800cca4 <_strtod_l+0x85c>)
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	4659      	mov	r1, fp
 800cc80:	2200      	movs	r2, #0
 800cc82:	f7f3 fcc9 	bl	8000618 <__aeabi_dmul>
 800cc86:	4b08      	ldr	r3, [pc, #32]	@ (800cca8 <_strtod_l+0x860>)
 800cc88:	400b      	ands	r3, r1
 800cc8a:	4682      	mov	sl, r0
 800cc8c:	468b      	mov	fp, r1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f47f ae08 	bne.w	800c8a4 <_strtod_l+0x45c>
 800cc94:	9a05      	ldr	r2, [sp, #20]
 800cc96:	2322      	movs	r3, #34	@ 0x22
 800cc98:	6013      	str	r3, [r2, #0]
 800cc9a:	e603      	b.n	800c8a4 <_strtod_l+0x45c>
 800cc9c:	08010688 	.word	0x08010688
 800cca0:	fffffc02 	.word	0xfffffc02
 800cca4:	39500000 	.word	0x39500000
 800cca8:	7ff00000 	.word	0x7ff00000
 800ccac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ccb0:	d165      	bne.n	800cd7e <_strtod_l+0x936>
 800ccb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ccb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccb8:	b35a      	cbz	r2, 800cd12 <_strtod_l+0x8ca>
 800ccba:	4a9f      	ldr	r2, [pc, #636]	@ (800cf38 <_strtod_l+0xaf0>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d12b      	bne.n	800cd18 <_strtod_l+0x8d0>
 800ccc0:	9b08      	ldr	r3, [sp, #32]
 800ccc2:	4651      	mov	r1, sl
 800ccc4:	b303      	cbz	r3, 800cd08 <_strtod_l+0x8c0>
 800ccc6:	4b9d      	ldr	r3, [pc, #628]	@ (800cf3c <_strtod_l+0xaf4>)
 800ccc8:	465a      	mov	r2, fp
 800ccca:	4013      	ands	r3, r2
 800cccc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ccd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd4:	d81b      	bhi.n	800cd0e <_strtod_l+0x8c6>
 800ccd6:	0d1b      	lsrs	r3, r3, #20
 800ccd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ccdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cce0:	4299      	cmp	r1, r3
 800cce2:	d119      	bne.n	800cd18 <_strtod_l+0x8d0>
 800cce4:	4b96      	ldr	r3, [pc, #600]	@ (800cf40 <_strtod_l+0xaf8>)
 800cce6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d102      	bne.n	800ccf2 <_strtod_l+0x8aa>
 800ccec:	3101      	adds	r1, #1
 800ccee:	f43f adce 	beq.w	800c88e <_strtod_l+0x446>
 800ccf2:	4b92      	ldr	r3, [pc, #584]	@ (800cf3c <_strtod_l+0xaf4>)
 800ccf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccf6:	401a      	ands	r2, r3
 800ccf8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ccfc:	f04f 0a00 	mov.w	sl, #0
 800cd00:	9b08      	ldr	r3, [sp, #32]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1b9      	bne.n	800cc7a <_strtod_l+0x832>
 800cd06:	e5cd      	b.n	800c8a4 <_strtod_l+0x45c>
 800cd08:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0c:	e7e8      	b.n	800cce0 <_strtod_l+0x898>
 800cd0e:	4613      	mov	r3, r2
 800cd10:	e7e6      	b.n	800cce0 <_strtod_l+0x898>
 800cd12:	ea53 030a 	orrs.w	r3, r3, sl
 800cd16:	d0a2      	beq.n	800cc5e <_strtod_l+0x816>
 800cd18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd1a:	b1db      	cbz	r3, 800cd54 <_strtod_l+0x90c>
 800cd1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd1e:	4213      	tst	r3, r2
 800cd20:	d0ee      	beq.n	800cd00 <_strtod_l+0x8b8>
 800cd22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd24:	9a08      	ldr	r2, [sp, #32]
 800cd26:	4650      	mov	r0, sl
 800cd28:	4659      	mov	r1, fp
 800cd2a:	b1bb      	cbz	r3, 800cd5c <_strtod_l+0x914>
 800cd2c:	f7ff fb6c 	bl	800c408 <sulp>
 800cd30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd34:	ec53 2b10 	vmov	r2, r3, d0
 800cd38:	f7f3 fab8 	bl	80002ac <__adddf3>
 800cd3c:	4682      	mov	sl, r0
 800cd3e:	468b      	mov	fp, r1
 800cd40:	e7de      	b.n	800cd00 <_strtod_l+0x8b8>
 800cd42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cd46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cd4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cd4e:	f04f 3aff 	mov.w	sl, #4294967295
 800cd52:	e7d5      	b.n	800cd00 <_strtod_l+0x8b8>
 800cd54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd56:	ea13 0f0a 	tst.w	r3, sl
 800cd5a:	e7e1      	b.n	800cd20 <_strtod_l+0x8d8>
 800cd5c:	f7ff fb54 	bl	800c408 <sulp>
 800cd60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd64:	ec53 2b10 	vmov	r2, r3, d0
 800cd68:	f7f3 fa9e 	bl	80002a8 <__aeabi_dsub>
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	2300      	movs	r3, #0
 800cd70:	4682      	mov	sl, r0
 800cd72:	468b      	mov	fp, r1
 800cd74:	f7f3 feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d0c1      	beq.n	800cd00 <_strtod_l+0x8b8>
 800cd7c:	e61a      	b.n	800c9b4 <_strtod_l+0x56c>
 800cd7e:	4641      	mov	r1, r8
 800cd80:	4620      	mov	r0, r4
 800cd82:	f002 fecb 	bl	800fb1c <__ratio>
 800cd86:	ec57 6b10 	vmov	r6, r7, d0
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cd90:	4630      	mov	r0, r6
 800cd92:	4639      	mov	r1, r7
 800cd94:	f7f3 febc 	bl	8000b10 <__aeabi_dcmple>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d06f      	beq.n	800ce7c <_strtod_l+0xa34>
 800cd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d17a      	bne.n	800ce98 <_strtod_l+0xa50>
 800cda2:	f1ba 0f00 	cmp.w	sl, #0
 800cda6:	d158      	bne.n	800ce5a <_strtod_l+0xa12>
 800cda8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d15a      	bne.n	800ce68 <_strtod_l+0xa20>
 800cdb2:	4b64      	ldr	r3, [pc, #400]	@ (800cf44 <_strtod_l+0xafc>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	4639      	mov	r1, r7
 800cdba:	f7f3 fe9f 	bl	8000afc <__aeabi_dcmplt>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d159      	bne.n	800ce76 <_strtod_l+0xa2e>
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	4b60      	ldr	r3, [pc, #384]	@ (800cf48 <_strtod_l+0xb00>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f7f3 fc25 	bl	8000618 <__aeabi_dmul>
 800cdce:	4606      	mov	r6, r0
 800cdd0:	460f      	mov	r7, r1
 800cdd2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cdd6:	9606      	str	r6, [sp, #24]
 800cdd8:	9307      	str	r3, [sp, #28]
 800cdda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdde:	4d57      	ldr	r5, [pc, #348]	@ (800cf3c <_strtod_l+0xaf4>)
 800cde0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cde4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cde6:	401d      	ands	r5, r3
 800cde8:	4b58      	ldr	r3, [pc, #352]	@ (800cf4c <_strtod_l+0xb04>)
 800cdea:	429d      	cmp	r5, r3
 800cdec:	f040 80b2 	bne.w	800cf54 <_strtod_l+0xb0c>
 800cdf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdf2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cdf6:	ec4b ab10 	vmov	d0, sl, fp
 800cdfa:	f002 fdc7 	bl	800f98c <__ulp>
 800cdfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce02:	ec51 0b10 	vmov	r0, r1, d0
 800ce06:	f7f3 fc07 	bl	8000618 <__aeabi_dmul>
 800ce0a:	4652      	mov	r2, sl
 800ce0c:	465b      	mov	r3, fp
 800ce0e:	f7f3 fa4d 	bl	80002ac <__adddf3>
 800ce12:	460b      	mov	r3, r1
 800ce14:	4949      	ldr	r1, [pc, #292]	@ (800cf3c <_strtod_l+0xaf4>)
 800ce16:	4a4e      	ldr	r2, [pc, #312]	@ (800cf50 <_strtod_l+0xb08>)
 800ce18:	4019      	ands	r1, r3
 800ce1a:	4291      	cmp	r1, r2
 800ce1c:	4682      	mov	sl, r0
 800ce1e:	d942      	bls.n	800cea6 <_strtod_l+0xa5e>
 800ce20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce22:	4b47      	ldr	r3, [pc, #284]	@ (800cf40 <_strtod_l+0xaf8>)
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d103      	bne.n	800ce30 <_strtod_l+0x9e8>
 800ce28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	f43f ad2f 	beq.w	800c88e <_strtod_l+0x446>
 800ce30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cf40 <_strtod_l+0xaf8>
 800ce34:	f04f 3aff 	mov.w	sl, #4294967295
 800ce38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce3a:	9805      	ldr	r0, [sp, #20]
 800ce3c:	f002 fa7a 	bl	800f334 <_Bfree>
 800ce40:	9805      	ldr	r0, [sp, #20]
 800ce42:	4649      	mov	r1, r9
 800ce44:	f002 fa76 	bl	800f334 <_Bfree>
 800ce48:	9805      	ldr	r0, [sp, #20]
 800ce4a:	4641      	mov	r1, r8
 800ce4c:	f002 fa72 	bl	800f334 <_Bfree>
 800ce50:	9805      	ldr	r0, [sp, #20]
 800ce52:	4621      	mov	r1, r4
 800ce54:	f002 fa6e 	bl	800f334 <_Bfree>
 800ce58:	e619      	b.n	800ca8e <_strtod_l+0x646>
 800ce5a:	f1ba 0f01 	cmp.w	sl, #1
 800ce5e:	d103      	bne.n	800ce68 <_strtod_l+0xa20>
 800ce60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f43f ada6 	beq.w	800c9b4 <_strtod_l+0x56c>
 800ce68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cf18 <_strtod_l+0xad0>
 800ce6c:	4f35      	ldr	r7, [pc, #212]	@ (800cf44 <_strtod_l+0xafc>)
 800ce6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce72:	2600      	movs	r6, #0
 800ce74:	e7b1      	b.n	800cdda <_strtod_l+0x992>
 800ce76:	4f34      	ldr	r7, [pc, #208]	@ (800cf48 <_strtod_l+0xb00>)
 800ce78:	2600      	movs	r6, #0
 800ce7a:	e7aa      	b.n	800cdd2 <_strtod_l+0x98a>
 800ce7c:	4b32      	ldr	r3, [pc, #200]	@ (800cf48 <_strtod_l+0xb00>)
 800ce7e:	4630      	mov	r0, r6
 800ce80:	4639      	mov	r1, r7
 800ce82:	2200      	movs	r2, #0
 800ce84:	f7f3 fbc8 	bl	8000618 <__aeabi_dmul>
 800ce88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce8a:	4606      	mov	r6, r0
 800ce8c:	460f      	mov	r7, r1
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d09f      	beq.n	800cdd2 <_strtod_l+0x98a>
 800ce92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ce96:	e7a0      	b.n	800cdda <_strtod_l+0x992>
 800ce98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cf20 <_strtod_l+0xad8>
 800ce9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cea0:	ec57 6b17 	vmov	r6, r7, d7
 800cea4:	e799      	b.n	800cdda <_strtod_l+0x992>
 800cea6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ceaa:	9b08      	ldr	r3, [sp, #32]
 800ceac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1c1      	bne.n	800ce38 <_strtod_l+0x9f0>
 800ceb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ceb8:	0d1b      	lsrs	r3, r3, #20
 800ceba:	051b      	lsls	r3, r3, #20
 800cebc:	429d      	cmp	r5, r3
 800cebe:	d1bb      	bne.n	800ce38 <_strtod_l+0x9f0>
 800cec0:	4630      	mov	r0, r6
 800cec2:	4639      	mov	r1, r7
 800cec4:	f7f3 ff08 	bl	8000cd8 <__aeabi_d2lz>
 800cec8:	f7f3 fb78 	bl	80005bc <__aeabi_l2d>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	4630      	mov	r0, r6
 800ced2:	4639      	mov	r1, r7
 800ced4:	f7f3 f9e8 	bl	80002a8 <__aeabi_dsub>
 800ced8:	460b      	mov	r3, r1
 800ceda:	4602      	mov	r2, r0
 800cedc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cee0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cee6:	ea46 060a 	orr.w	r6, r6, sl
 800ceea:	431e      	orrs	r6, r3
 800ceec:	d06f      	beq.n	800cfce <_strtod_l+0xb86>
 800ceee:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf28 <_strtod_l+0xae0>)
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f7f3 fe02 	bl	8000afc <__aeabi_dcmplt>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	f47f acd3 	bne.w	800c8a4 <_strtod_l+0x45c>
 800cefe:	a30c      	add	r3, pc, #48	@ (adr r3, 800cf30 <_strtod_l+0xae8>)
 800cf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf08:	f7f3 fe16 	bl	8000b38 <__aeabi_dcmpgt>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d093      	beq.n	800ce38 <_strtod_l+0x9f0>
 800cf10:	e4c8      	b.n	800c8a4 <_strtod_l+0x45c>
 800cf12:	bf00      	nop
 800cf14:	f3af 8000 	nop.w
 800cf18:	00000000 	.word	0x00000000
 800cf1c:	bff00000 	.word	0xbff00000
 800cf20:	00000000 	.word	0x00000000
 800cf24:	3ff00000 	.word	0x3ff00000
 800cf28:	94a03595 	.word	0x94a03595
 800cf2c:	3fdfffff 	.word	0x3fdfffff
 800cf30:	35afe535 	.word	0x35afe535
 800cf34:	3fe00000 	.word	0x3fe00000
 800cf38:	000fffff 	.word	0x000fffff
 800cf3c:	7ff00000 	.word	0x7ff00000
 800cf40:	7fefffff 	.word	0x7fefffff
 800cf44:	3ff00000 	.word	0x3ff00000
 800cf48:	3fe00000 	.word	0x3fe00000
 800cf4c:	7fe00000 	.word	0x7fe00000
 800cf50:	7c9fffff 	.word	0x7c9fffff
 800cf54:	9b08      	ldr	r3, [sp, #32]
 800cf56:	b323      	cbz	r3, 800cfa2 <_strtod_l+0xb5a>
 800cf58:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cf5c:	d821      	bhi.n	800cfa2 <_strtod_l+0xb5a>
 800cf5e:	a328      	add	r3, pc, #160	@ (adr r3, 800d000 <_strtod_l+0xbb8>)
 800cf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf64:	4630      	mov	r0, r6
 800cf66:	4639      	mov	r1, r7
 800cf68:	f7f3 fdd2 	bl	8000b10 <__aeabi_dcmple>
 800cf6c:	b1a0      	cbz	r0, 800cf98 <_strtod_l+0xb50>
 800cf6e:	4639      	mov	r1, r7
 800cf70:	4630      	mov	r0, r6
 800cf72:	f7f3 fe29 	bl	8000bc8 <__aeabi_d2uiz>
 800cf76:	2801      	cmp	r0, #1
 800cf78:	bf38      	it	cc
 800cf7a:	2001      	movcc	r0, #1
 800cf7c:	f7f3 fad2 	bl	8000524 <__aeabi_ui2d>
 800cf80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf82:	4606      	mov	r6, r0
 800cf84:	460f      	mov	r7, r1
 800cf86:	b9fb      	cbnz	r3, 800cfc8 <_strtod_l+0xb80>
 800cf88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cf8c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cf8e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf90:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cf94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cf98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf9a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cf9e:	1b5b      	subs	r3, r3, r5
 800cfa0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cfa2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cfa6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cfaa:	f002 fcef 	bl	800f98c <__ulp>
 800cfae:	4650      	mov	r0, sl
 800cfb0:	ec53 2b10 	vmov	r2, r3, d0
 800cfb4:	4659      	mov	r1, fp
 800cfb6:	f7f3 fb2f 	bl	8000618 <__aeabi_dmul>
 800cfba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cfbe:	f7f3 f975 	bl	80002ac <__adddf3>
 800cfc2:	4682      	mov	sl, r0
 800cfc4:	468b      	mov	fp, r1
 800cfc6:	e770      	b.n	800ceaa <_strtod_l+0xa62>
 800cfc8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cfcc:	e7e0      	b.n	800cf90 <_strtod_l+0xb48>
 800cfce:	a30e      	add	r3, pc, #56	@ (adr r3, 800d008 <_strtod_l+0xbc0>)
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f7f3 fd92 	bl	8000afc <__aeabi_dcmplt>
 800cfd8:	e798      	b.n	800cf0c <_strtod_l+0xac4>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	930e      	str	r3, [sp, #56]	@ 0x38
 800cfde:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cfe0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfe2:	6013      	str	r3, [r2, #0]
 800cfe4:	f7ff ba6d 	b.w	800c4c2 <_strtod_l+0x7a>
 800cfe8:	2a65      	cmp	r2, #101	@ 0x65
 800cfea:	f43f ab68 	beq.w	800c6be <_strtod_l+0x276>
 800cfee:	2a45      	cmp	r2, #69	@ 0x45
 800cff0:	f43f ab65 	beq.w	800c6be <_strtod_l+0x276>
 800cff4:	2301      	movs	r3, #1
 800cff6:	f7ff bba0 	b.w	800c73a <_strtod_l+0x2f2>
 800cffa:	bf00      	nop
 800cffc:	f3af 8000 	nop.w
 800d000:	ffc00000 	.word	0xffc00000
 800d004:	41dfffff 	.word	0x41dfffff
 800d008:	94a03595 	.word	0x94a03595
 800d00c:	3fcfffff 	.word	0x3fcfffff

0800d010 <strtod>:
 800d010:	460a      	mov	r2, r1
 800d012:	4601      	mov	r1, r0
 800d014:	4802      	ldr	r0, [pc, #8]	@ (800d020 <strtod+0x10>)
 800d016:	4b03      	ldr	r3, [pc, #12]	@ (800d024 <strtod+0x14>)
 800d018:	6800      	ldr	r0, [r0, #0]
 800d01a:	f7ff ba15 	b.w	800c448 <_strtod_l>
 800d01e:	bf00      	nop
 800d020:	20000374 	.word	0x20000374
 800d024:	20000208 	.word	0x20000208

0800d028 <_strtol_l.isra.0>:
 800d028:	2b24      	cmp	r3, #36	@ 0x24
 800d02a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d02e:	4686      	mov	lr, r0
 800d030:	4690      	mov	r8, r2
 800d032:	d801      	bhi.n	800d038 <_strtol_l.isra.0+0x10>
 800d034:	2b01      	cmp	r3, #1
 800d036:	d106      	bne.n	800d046 <_strtol_l.isra.0+0x1e>
 800d038:	f000 fee8 	bl	800de0c <__errno>
 800d03c:	2316      	movs	r3, #22
 800d03e:	6003      	str	r3, [r0, #0]
 800d040:	2000      	movs	r0, #0
 800d042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d046:	4834      	ldr	r0, [pc, #208]	@ (800d118 <_strtol_l.isra.0+0xf0>)
 800d048:	460d      	mov	r5, r1
 800d04a:	462a      	mov	r2, r5
 800d04c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d050:	5d06      	ldrb	r6, [r0, r4]
 800d052:	f016 0608 	ands.w	r6, r6, #8
 800d056:	d1f8      	bne.n	800d04a <_strtol_l.isra.0+0x22>
 800d058:	2c2d      	cmp	r4, #45	@ 0x2d
 800d05a:	d110      	bne.n	800d07e <_strtol_l.isra.0+0x56>
 800d05c:	782c      	ldrb	r4, [r5, #0]
 800d05e:	2601      	movs	r6, #1
 800d060:	1c95      	adds	r5, r2, #2
 800d062:	f033 0210 	bics.w	r2, r3, #16
 800d066:	d115      	bne.n	800d094 <_strtol_l.isra.0+0x6c>
 800d068:	2c30      	cmp	r4, #48	@ 0x30
 800d06a:	d10d      	bne.n	800d088 <_strtol_l.isra.0+0x60>
 800d06c:	782a      	ldrb	r2, [r5, #0]
 800d06e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d072:	2a58      	cmp	r2, #88	@ 0x58
 800d074:	d108      	bne.n	800d088 <_strtol_l.isra.0+0x60>
 800d076:	786c      	ldrb	r4, [r5, #1]
 800d078:	3502      	adds	r5, #2
 800d07a:	2310      	movs	r3, #16
 800d07c:	e00a      	b.n	800d094 <_strtol_l.isra.0+0x6c>
 800d07e:	2c2b      	cmp	r4, #43	@ 0x2b
 800d080:	bf04      	itt	eq
 800d082:	782c      	ldrbeq	r4, [r5, #0]
 800d084:	1c95      	addeq	r5, r2, #2
 800d086:	e7ec      	b.n	800d062 <_strtol_l.isra.0+0x3a>
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1f6      	bne.n	800d07a <_strtol_l.isra.0+0x52>
 800d08c:	2c30      	cmp	r4, #48	@ 0x30
 800d08e:	bf14      	ite	ne
 800d090:	230a      	movne	r3, #10
 800d092:	2308      	moveq	r3, #8
 800d094:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d098:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d09c:	2200      	movs	r2, #0
 800d09e:	fbbc f9f3 	udiv	r9, ip, r3
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	fb03 ca19 	mls	sl, r3, r9, ip
 800d0a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d0ac:	2f09      	cmp	r7, #9
 800d0ae:	d80f      	bhi.n	800d0d0 <_strtol_l.isra.0+0xa8>
 800d0b0:	463c      	mov	r4, r7
 800d0b2:	42a3      	cmp	r3, r4
 800d0b4:	dd1b      	ble.n	800d0ee <_strtol_l.isra.0+0xc6>
 800d0b6:	1c57      	adds	r7, r2, #1
 800d0b8:	d007      	beq.n	800d0ca <_strtol_l.isra.0+0xa2>
 800d0ba:	4581      	cmp	r9, r0
 800d0bc:	d314      	bcc.n	800d0e8 <_strtol_l.isra.0+0xc0>
 800d0be:	d101      	bne.n	800d0c4 <_strtol_l.isra.0+0x9c>
 800d0c0:	45a2      	cmp	sl, r4
 800d0c2:	db11      	blt.n	800d0e8 <_strtol_l.isra.0+0xc0>
 800d0c4:	fb00 4003 	mla	r0, r0, r3, r4
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0ce:	e7eb      	b.n	800d0a8 <_strtol_l.isra.0+0x80>
 800d0d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d0d4:	2f19      	cmp	r7, #25
 800d0d6:	d801      	bhi.n	800d0dc <_strtol_l.isra.0+0xb4>
 800d0d8:	3c37      	subs	r4, #55	@ 0x37
 800d0da:	e7ea      	b.n	800d0b2 <_strtol_l.isra.0+0x8a>
 800d0dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d0e0:	2f19      	cmp	r7, #25
 800d0e2:	d804      	bhi.n	800d0ee <_strtol_l.isra.0+0xc6>
 800d0e4:	3c57      	subs	r4, #87	@ 0x57
 800d0e6:	e7e4      	b.n	800d0b2 <_strtol_l.isra.0+0x8a>
 800d0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ec:	e7ed      	b.n	800d0ca <_strtol_l.isra.0+0xa2>
 800d0ee:	1c53      	adds	r3, r2, #1
 800d0f0:	d108      	bne.n	800d104 <_strtol_l.isra.0+0xdc>
 800d0f2:	2322      	movs	r3, #34	@ 0x22
 800d0f4:	f8ce 3000 	str.w	r3, [lr]
 800d0f8:	4660      	mov	r0, ip
 800d0fa:	f1b8 0f00 	cmp.w	r8, #0
 800d0fe:	d0a0      	beq.n	800d042 <_strtol_l.isra.0+0x1a>
 800d100:	1e69      	subs	r1, r5, #1
 800d102:	e006      	b.n	800d112 <_strtol_l.isra.0+0xea>
 800d104:	b106      	cbz	r6, 800d108 <_strtol_l.isra.0+0xe0>
 800d106:	4240      	negs	r0, r0
 800d108:	f1b8 0f00 	cmp.w	r8, #0
 800d10c:	d099      	beq.n	800d042 <_strtol_l.isra.0+0x1a>
 800d10e:	2a00      	cmp	r2, #0
 800d110:	d1f6      	bne.n	800d100 <_strtol_l.isra.0+0xd8>
 800d112:	f8c8 1000 	str.w	r1, [r8]
 800d116:	e794      	b.n	800d042 <_strtol_l.isra.0+0x1a>
 800d118:	080106b1 	.word	0x080106b1

0800d11c <strtol>:
 800d11c:	4613      	mov	r3, r2
 800d11e:	460a      	mov	r2, r1
 800d120:	4601      	mov	r1, r0
 800d122:	4802      	ldr	r0, [pc, #8]	@ (800d12c <strtol+0x10>)
 800d124:	6800      	ldr	r0, [r0, #0]
 800d126:	f7ff bf7f 	b.w	800d028 <_strtol_l.isra.0>
 800d12a:	bf00      	nop
 800d12c:	20000374 	.word	0x20000374

0800d130 <__cvt>:
 800d130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d134:	ec57 6b10 	vmov	r6, r7, d0
 800d138:	2f00      	cmp	r7, #0
 800d13a:	460c      	mov	r4, r1
 800d13c:	4619      	mov	r1, r3
 800d13e:	463b      	mov	r3, r7
 800d140:	bfbb      	ittet	lt
 800d142:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d146:	461f      	movlt	r7, r3
 800d148:	2300      	movge	r3, #0
 800d14a:	232d      	movlt	r3, #45	@ 0x2d
 800d14c:	700b      	strb	r3, [r1, #0]
 800d14e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d150:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d154:	4691      	mov	r9, r2
 800d156:	f023 0820 	bic.w	r8, r3, #32
 800d15a:	bfbc      	itt	lt
 800d15c:	4632      	movlt	r2, r6
 800d15e:	4616      	movlt	r6, r2
 800d160:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d164:	d005      	beq.n	800d172 <__cvt+0x42>
 800d166:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d16a:	d100      	bne.n	800d16e <__cvt+0x3e>
 800d16c:	3401      	adds	r4, #1
 800d16e:	2102      	movs	r1, #2
 800d170:	e000      	b.n	800d174 <__cvt+0x44>
 800d172:	2103      	movs	r1, #3
 800d174:	ab03      	add	r3, sp, #12
 800d176:	9301      	str	r3, [sp, #4]
 800d178:	ab02      	add	r3, sp, #8
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	ec47 6b10 	vmov	d0, r6, r7
 800d180:	4653      	mov	r3, sl
 800d182:	4622      	mov	r2, r4
 800d184:	f000 ff30 	bl	800dfe8 <_dtoa_r>
 800d188:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d18c:	4605      	mov	r5, r0
 800d18e:	d119      	bne.n	800d1c4 <__cvt+0x94>
 800d190:	f019 0f01 	tst.w	r9, #1
 800d194:	d00e      	beq.n	800d1b4 <__cvt+0x84>
 800d196:	eb00 0904 	add.w	r9, r0, r4
 800d19a:	2200      	movs	r2, #0
 800d19c:	2300      	movs	r3, #0
 800d19e:	4630      	mov	r0, r6
 800d1a0:	4639      	mov	r1, r7
 800d1a2:	f7f3 fca1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1a6:	b108      	cbz	r0, 800d1ac <__cvt+0x7c>
 800d1a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1ac:	2230      	movs	r2, #48	@ 0x30
 800d1ae:	9b03      	ldr	r3, [sp, #12]
 800d1b0:	454b      	cmp	r3, r9
 800d1b2:	d31e      	bcc.n	800d1f2 <__cvt+0xc2>
 800d1b4:	9b03      	ldr	r3, [sp, #12]
 800d1b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1b8:	1b5b      	subs	r3, r3, r5
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	6013      	str	r3, [r2, #0]
 800d1be:	b004      	add	sp, #16
 800d1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d1c8:	eb00 0904 	add.w	r9, r0, r4
 800d1cc:	d1e5      	bne.n	800d19a <__cvt+0x6a>
 800d1ce:	7803      	ldrb	r3, [r0, #0]
 800d1d0:	2b30      	cmp	r3, #48	@ 0x30
 800d1d2:	d10a      	bne.n	800d1ea <__cvt+0xba>
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	4630      	mov	r0, r6
 800d1da:	4639      	mov	r1, r7
 800d1dc:	f7f3 fc84 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1e0:	b918      	cbnz	r0, 800d1ea <__cvt+0xba>
 800d1e2:	f1c4 0401 	rsb	r4, r4, #1
 800d1e6:	f8ca 4000 	str.w	r4, [sl]
 800d1ea:	f8da 3000 	ldr.w	r3, [sl]
 800d1ee:	4499      	add	r9, r3
 800d1f0:	e7d3      	b.n	800d19a <__cvt+0x6a>
 800d1f2:	1c59      	adds	r1, r3, #1
 800d1f4:	9103      	str	r1, [sp, #12]
 800d1f6:	701a      	strb	r2, [r3, #0]
 800d1f8:	e7d9      	b.n	800d1ae <__cvt+0x7e>

0800d1fa <__exponent>:
 800d1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1fc:	2900      	cmp	r1, #0
 800d1fe:	bfba      	itte	lt
 800d200:	4249      	neglt	r1, r1
 800d202:	232d      	movlt	r3, #45	@ 0x2d
 800d204:	232b      	movge	r3, #43	@ 0x2b
 800d206:	2909      	cmp	r1, #9
 800d208:	7002      	strb	r2, [r0, #0]
 800d20a:	7043      	strb	r3, [r0, #1]
 800d20c:	dd29      	ble.n	800d262 <__exponent+0x68>
 800d20e:	f10d 0307 	add.w	r3, sp, #7
 800d212:	461d      	mov	r5, r3
 800d214:	270a      	movs	r7, #10
 800d216:	461a      	mov	r2, r3
 800d218:	fbb1 f6f7 	udiv	r6, r1, r7
 800d21c:	fb07 1416 	mls	r4, r7, r6, r1
 800d220:	3430      	adds	r4, #48	@ 0x30
 800d222:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d226:	460c      	mov	r4, r1
 800d228:	2c63      	cmp	r4, #99	@ 0x63
 800d22a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d22e:	4631      	mov	r1, r6
 800d230:	dcf1      	bgt.n	800d216 <__exponent+0x1c>
 800d232:	3130      	adds	r1, #48	@ 0x30
 800d234:	1e94      	subs	r4, r2, #2
 800d236:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d23a:	1c41      	adds	r1, r0, #1
 800d23c:	4623      	mov	r3, r4
 800d23e:	42ab      	cmp	r3, r5
 800d240:	d30a      	bcc.n	800d258 <__exponent+0x5e>
 800d242:	f10d 0309 	add.w	r3, sp, #9
 800d246:	1a9b      	subs	r3, r3, r2
 800d248:	42ac      	cmp	r4, r5
 800d24a:	bf88      	it	hi
 800d24c:	2300      	movhi	r3, #0
 800d24e:	3302      	adds	r3, #2
 800d250:	4403      	add	r3, r0
 800d252:	1a18      	subs	r0, r3, r0
 800d254:	b003      	add	sp, #12
 800d256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d258:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d25c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d260:	e7ed      	b.n	800d23e <__exponent+0x44>
 800d262:	2330      	movs	r3, #48	@ 0x30
 800d264:	3130      	adds	r1, #48	@ 0x30
 800d266:	7083      	strb	r3, [r0, #2]
 800d268:	70c1      	strb	r1, [r0, #3]
 800d26a:	1d03      	adds	r3, r0, #4
 800d26c:	e7f1      	b.n	800d252 <__exponent+0x58>
	...

0800d270 <_printf_float>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	b08d      	sub	sp, #52	@ 0x34
 800d276:	460c      	mov	r4, r1
 800d278:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d27c:	4616      	mov	r6, r2
 800d27e:	461f      	mov	r7, r3
 800d280:	4605      	mov	r5, r0
 800d282:	f000 fd69 	bl	800dd58 <_localeconv_r>
 800d286:	6803      	ldr	r3, [r0, #0]
 800d288:	9304      	str	r3, [sp, #16]
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7f3 f800 	bl	8000290 <strlen>
 800d290:	2300      	movs	r3, #0
 800d292:	930a      	str	r3, [sp, #40]	@ 0x28
 800d294:	f8d8 3000 	ldr.w	r3, [r8]
 800d298:	9005      	str	r0, [sp, #20]
 800d29a:	3307      	adds	r3, #7
 800d29c:	f023 0307 	bic.w	r3, r3, #7
 800d2a0:	f103 0208 	add.w	r2, r3, #8
 800d2a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d2a8:	f8d4 b000 	ldr.w	fp, [r4]
 800d2ac:	f8c8 2000 	str.w	r2, [r8]
 800d2b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d2b8:	9307      	str	r3, [sp, #28]
 800d2ba:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2c6:	4b9c      	ldr	r3, [pc, #624]	@ (800d538 <_printf_float+0x2c8>)
 800d2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2cc:	f7f3 fc3e 	bl	8000b4c <__aeabi_dcmpun>
 800d2d0:	bb70      	cbnz	r0, 800d330 <_printf_float+0xc0>
 800d2d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2d6:	4b98      	ldr	r3, [pc, #608]	@ (800d538 <_printf_float+0x2c8>)
 800d2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2dc:	f7f3 fc18 	bl	8000b10 <__aeabi_dcmple>
 800d2e0:	bb30      	cbnz	r0, 800d330 <_printf_float+0xc0>
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	4640      	mov	r0, r8
 800d2e8:	4649      	mov	r1, r9
 800d2ea:	f7f3 fc07 	bl	8000afc <__aeabi_dcmplt>
 800d2ee:	b110      	cbz	r0, 800d2f6 <_printf_float+0x86>
 800d2f0:	232d      	movs	r3, #45	@ 0x2d
 800d2f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2f6:	4a91      	ldr	r2, [pc, #580]	@ (800d53c <_printf_float+0x2cc>)
 800d2f8:	4b91      	ldr	r3, [pc, #580]	@ (800d540 <_printf_float+0x2d0>)
 800d2fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d2fe:	bf8c      	ite	hi
 800d300:	4690      	movhi	r8, r2
 800d302:	4698      	movls	r8, r3
 800d304:	2303      	movs	r3, #3
 800d306:	6123      	str	r3, [r4, #16]
 800d308:	f02b 0304 	bic.w	r3, fp, #4
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	f04f 0900 	mov.w	r9, #0
 800d312:	9700      	str	r7, [sp, #0]
 800d314:	4633      	mov	r3, r6
 800d316:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d318:	4621      	mov	r1, r4
 800d31a:	4628      	mov	r0, r5
 800d31c:	f000 f9d2 	bl	800d6c4 <_printf_common>
 800d320:	3001      	adds	r0, #1
 800d322:	f040 808d 	bne.w	800d440 <_printf_float+0x1d0>
 800d326:	f04f 30ff 	mov.w	r0, #4294967295
 800d32a:	b00d      	add	sp, #52	@ 0x34
 800d32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d330:	4642      	mov	r2, r8
 800d332:	464b      	mov	r3, r9
 800d334:	4640      	mov	r0, r8
 800d336:	4649      	mov	r1, r9
 800d338:	f7f3 fc08 	bl	8000b4c <__aeabi_dcmpun>
 800d33c:	b140      	cbz	r0, 800d350 <_printf_float+0xe0>
 800d33e:	464b      	mov	r3, r9
 800d340:	2b00      	cmp	r3, #0
 800d342:	bfbc      	itt	lt
 800d344:	232d      	movlt	r3, #45	@ 0x2d
 800d346:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d34a:	4a7e      	ldr	r2, [pc, #504]	@ (800d544 <_printf_float+0x2d4>)
 800d34c:	4b7e      	ldr	r3, [pc, #504]	@ (800d548 <_printf_float+0x2d8>)
 800d34e:	e7d4      	b.n	800d2fa <_printf_float+0x8a>
 800d350:	6863      	ldr	r3, [r4, #4]
 800d352:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d356:	9206      	str	r2, [sp, #24]
 800d358:	1c5a      	adds	r2, r3, #1
 800d35a:	d13b      	bne.n	800d3d4 <_printf_float+0x164>
 800d35c:	2306      	movs	r3, #6
 800d35e:	6063      	str	r3, [r4, #4]
 800d360:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d364:	2300      	movs	r3, #0
 800d366:	6022      	str	r2, [r4, #0]
 800d368:	9303      	str	r3, [sp, #12]
 800d36a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d36c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d370:	ab09      	add	r3, sp, #36	@ 0x24
 800d372:	9300      	str	r3, [sp, #0]
 800d374:	6861      	ldr	r1, [r4, #4]
 800d376:	ec49 8b10 	vmov	d0, r8, r9
 800d37a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d37e:	4628      	mov	r0, r5
 800d380:	f7ff fed6 	bl	800d130 <__cvt>
 800d384:	9b06      	ldr	r3, [sp, #24]
 800d386:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d388:	2b47      	cmp	r3, #71	@ 0x47
 800d38a:	4680      	mov	r8, r0
 800d38c:	d129      	bne.n	800d3e2 <_printf_float+0x172>
 800d38e:	1cc8      	adds	r0, r1, #3
 800d390:	db02      	blt.n	800d398 <_printf_float+0x128>
 800d392:	6863      	ldr	r3, [r4, #4]
 800d394:	4299      	cmp	r1, r3
 800d396:	dd41      	ble.n	800d41c <_printf_float+0x1ac>
 800d398:	f1aa 0a02 	sub.w	sl, sl, #2
 800d39c:	fa5f fa8a 	uxtb.w	sl, sl
 800d3a0:	3901      	subs	r1, #1
 800d3a2:	4652      	mov	r2, sl
 800d3a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d3a8:	9109      	str	r1, [sp, #36]	@ 0x24
 800d3aa:	f7ff ff26 	bl	800d1fa <__exponent>
 800d3ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3b0:	1813      	adds	r3, r2, r0
 800d3b2:	2a01      	cmp	r2, #1
 800d3b4:	4681      	mov	r9, r0
 800d3b6:	6123      	str	r3, [r4, #16]
 800d3b8:	dc02      	bgt.n	800d3c0 <_printf_float+0x150>
 800d3ba:	6822      	ldr	r2, [r4, #0]
 800d3bc:	07d2      	lsls	r2, r2, #31
 800d3be:	d501      	bpl.n	800d3c4 <_printf_float+0x154>
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	6123      	str	r3, [r4, #16]
 800d3c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d0a2      	beq.n	800d312 <_printf_float+0xa2>
 800d3cc:	232d      	movs	r3, #45	@ 0x2d
 800d3ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3d2:	e79e      	b.n	800d312 <_printf_float+0xa2>
 800d3d4:	9a06      	ldr	r2, [sp, #24]
 800d3d6:	2a47      	cmp	r2, #71	@ 0x47
 800d3d8:	d1c2      	bne.n	800d360 <_printf_float+0xf0>
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1c0      	bne.n	800d360 <_printf_float+0xf0>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e7bd      	b.n	800d35e <_printf_float+0xee>
 800d3e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d3e6:	d9db      	bls.n	800d3a0 <_printf_float+0x130>
 800d3e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d3ec:	d118      	bne.n	800d420 <_printf_float+0x1b0>
 800d3ee:	2900      	cmp	r1, #0
 800d3f0:	6863      	ldr	r3, [r4, #4]
 800d3f2:	dd0b      	ble.n	800d40c <_printf_float+0x19c>
 800d3f4:	6121      	str	r1, [r4, #16]
 800d3f6:	b913      	cbnz	r3, 800d3fe <_printf_float+0x18e>
 800d3f8:	6822      	ldr	r2, [r4, #0]
 800d3fa:	07d0      	lsls	r0, r2, #31
 800d3fc:	d502      	bpl.n	800d404 <_printf_float+0x194>
 800d3fe:	3301      	adds	r3, #1
 800d400:	440b      	add	r3, r1
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d406:	f04f 0900 	mov.w	r9, #0
 800d40a:	e7db      	b.n	800d3c4 <_printf_float+0x154>
 800d40c:	b913      	cbnz	r3, 800d414 <_printf_float+0x1a4>
 800d40e:	6822      	ldr	r2, [r4, #0]
 800d410:	07d2      	lsls	r2, r2, #31
 800d412:	d501      	bpl.n	800d418 <_printf_float+0x1a8>
 800d414:	3302      	adds	r3, #2
 800d416:	e7f4      	b.n	800d402 <_printf_float+0x192>
 800d418:	2301      	movs	r3, #1
 800d41a:	e7f2      	b.n	800d402 <_printf_float+0x192>
 800d41c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d422:	4299      	cmp	r1, r3
 800d424:	db05      	blt.n	800d432 <_printf_float+0x1c2>
 800d426:	6823      	ldr	r3, [r4, #0]
 800d428:	6121      	str	r1, [r4, #16]
 800d42a:	07d8      	lsls	r0, r3, #31
 800d42c:	d5ea      	bpl.n	800d404 <_printf_float+0x194>
 800d42e:	1c4b      	adds	r3, r1, #1
 800d430:	e7e7      	b.n	800d402 <_printf_float+0x192>
 800d432:	2900      	cmp	r1, #0
 800d434:	bfd4      	ite	le
 800d436:	f1c1 0202 	rsble	r2, r1, #2
 800d43a:	2201      	movgt	r2, #1
 800d43c:	4413      	add	r3, r2
 800d43e:	e7e0      	b.n	800d402 <_printf_float+0x192>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	055a      	lsls	r2, r3, #21
 800d444:	d407      	bmi.n	800d456 <_printf_float+0x1e6>
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	4642      	mov	r2, r8
 800d44a:	4631      	mov	r1, r6
 800d44c:	4628      	mov	r0, r5
 800d44e:	47b8      	blx	r7
 800d450:	3001      	adds	r0, #1
 800d452:	d12b      	bne.n	800d4ac <_printf_float+0x23c>
 800d454:	e767      	b.n	800d326 <_printf_float+0xb6>
 800d456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d45a:	f240 80dd 	bls.w	800d618 <_printf_float+0x3a8>
 800d45e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d462:	2200      	movs	r2, #0
 800d464:	2300      	movs	r3, #0
 800d466:	f7f3 fb3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d033      	beq.n	800d4d6 <_printf_float+0x266>
 800d46e:	4a37      	ldr	r2, [pc, #220]	@ (800d54c <_printf_float+0x2dc>)
 800d470:	2301      	movs	r3, #1
 800d472:	4631      	mov	r1, r6
 800d474:	4628      	mov	r0, r5
 800d476:	47b8      	blx	r7
 800d478:	3001      	adds	r0, #1
 800d47a:	f43f af54 	beq.w	800d326 <_printf_float+0xb6>
 800d47e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d482:	4543      	cmp	r3, r8
 800d484:	db02      	blt.n	800d48c <_printf_float+0x21c>
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	07d8      	lsls	r0, r3, #31
 800d48a:	d50f      	bpl.n	800d4ac <_printf_float+0x23c>
 800d48c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d490:	4631      	mov	r1, r6
 800d492:	4628      	mov	r0, r5
 800d494:	47b8      	blx	r7
 800d496:	3001      	adds	r0, #1
 800d498:	f43f af45 	beq.w	800d326 <_printf_float+0xb6>
 800d49c:	f04f 0900 	mov.w	r9, #0
 800d4a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4a4:	f104 0a1a 	add.w	sl, r4, #26
 800d4a8:	45c8      	cmp	r8, r9
 800d4aa:	dc09      	bgt.n	800d4c0 <_printf_float+0x250>
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	079b      	lsls	r3, r3, #30
 800d4b0:	f100 8103 	bmi.w	800d6ba <_printf_float+0x44a>
 800d4b4:	68e0      	ldr	r0, [r4, #12]
 800d4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4b8:	4298      	cmp	r0, r3
 800d4ba:	bfb8      	it	lt
 800d4bc:	4618      	movlt	r0, r3
 800d4be:	e734      	b.n	800d32a <_printf_float+0xba>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	47b8      	blx	r7
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	f43f af2b 	beq.w	800d326 <_printf_float+0xb6>
 800d4d0:	f109 0901 	add.w	r9, r9, #1
 800d4d4:	e7e8      	b.n	800d4a8 <_printf_float+0x238>
 800d4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dc39      	bgt.n	800d550 <_printf_float+0x2e0>
 800d4dc:	4a1b      	ldr	r2, [pc, #108]	@ (800d54c <_printf_float+0x2dc>)
 800d4de:	2301      	movs	r3, #1
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	47b8      	blx	r7
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	f43f af1d 	beq.w	800d326 <_printf_float+0xb6>
 800d4ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d4f0:	ea59 0303 	orrs.w	r3, r9, r3
 800d4f4:	d102      	bne.n	800d4fc <_printf_float+0x28c>
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	07d9      	lsls	r1, r3, #31
 800d4fa:	d5d7      	bpl.n	800d4ac <_printf_float+0x23c>
 800d4fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d500:	4631      	mov	r1, r6
 800d502:	4628      	mov	r0, r5
 800d504:	47b8      	blx	r7
 800d506:	3001      	adds	r0, #1
 800d508:	f43f af0d 	beq.w	800d326 <_printf_float+0xb6>
 800d50c:	f04f 0a00 	mov.w	sl, #0
 800d510:	f104 0b1a 	add.w	fp, r4, #26
 800d514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d516:	425b      	negs	r3, r3
 800d518:	4553      	cmp	r3, sl
 800d51a:	dc01      	bgt.n	800d520 <_printf_float+0x2b0>
 800d51c:	464b      	mov	r3, r9
 800d51e:	e793      	b.n	800d448 <_printf_float+0x1d8>
 800d520:	2301      	movs	r3, #1
 800d522:	465a      	mov	r2, fp
 800d524:	4631      	mov	r1, r6
 800d526:	4628      	mov	r0, r5
 800d528:	47b8      	blx	r7
 800d52a:	3001      	adds	r0, #1
 800d52c:	f43f aefb 	beq.w	800d326 <_printf_float+0xb6>
 800d530:	f10a 0a01 	add.w	sl, sl, #1
 800d534:	e7ee      	b.n	800d514 <_printf_float+0x2a4>
 800d536:	bf00      	nop
 800d538:	7fefffff 	.word	0x7fefffff
 800d53c:	0801043a 	.word	0x0801043a
 800d540:	08010436 	.word	0x08010436
 800d544:	08010442 	.word	0x08010442
 800d548:	0801043e 	.word	0x0801043e
 800d54c:	08010446 	.word	0x08010446
 800d550:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d552:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d556:	4553      	cmp	r3, sl
 800d558:	bfa8      	it	ge
 800d55a:	4653      	movge	r3, sl
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	4699      	mov	r9, r3
 800d560:	dc36      	bgt.n	800d5d0 <_printf_float+0x360>
 800d562:	f04f 0b00 	mov.w	fp, #0
 800d566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d56a:	f104 021a 	add.w	r2, r4, #26
 800d56e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d570:	9306      	str	r3, [sp, #24]
 800d572:	eba3 0309 	sub.w	r3, r3, r9
 800d576:	455b      	cmp	r3, fp
 800d578:	dc31      	bgt.n	800d5de <_printf_float+0x36e>
 800d57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d57c:	459a      	cmp	sl, r3
 800d57e:	dc3a      	bgt.n	800d5f6 <_printf_float+0x386>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	07da      	lsls	r2, r3, #31
 800d584:	d437      	bmi.n	800d5f6 <_printf_float+0x386>
 800d586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d588:	ebaa 0903 	sub.w	r9, sl, r3
 800d58c:	9b06      	ldr	r3, [sp, #24]
 800d58e:	ebaa 0303 	sub.w	r3, sl, r3
 800d592:	4599      	cmp	r9, r3
 800d594:	bfa8      	it	ge
 800d596:	4699      	movge	r9, r3
 800d598:	f1b9 0f00 	cmp.w	r9, #0
 800d59c:	dc33      	bgt.n	800d606 <_printf_float+0x396>
 800d59e:	f04f 0800 	mov.w	r8, #0
 800d5a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5a6:	f104 0b1a 	add.w	fp, r4, #26
 800d5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ac:	ebaa 0303 	sub.w	r3, sl, r3
 800d5b0:	eba3 0309 	sub.w	r3, r3, r9
 800d5b4:	4543      	cmp	r3, r8
 800d5b6:	f77f af79 	ble.w	800d4ac <_printf_float+0x23c>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	465a      	mov	r2, fp
 800d5be:	4631      	mov	r1, r6
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	47b8      	blx	r7
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	f43f aeae 	beq.w	800d326 <_printf_float+0xb6>
 800d5ca:	f108 0801 	add.w	r8, r8, #1
 800d5ce:	e7ec      	b.n	800d5aa <_printf_float+0x33a>
 800d5d0:	4642      	mov	r2, r8
 800d5d2:	4631      	mov	r1, r6
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	47b8      	blx	r7
 800d5d8:	3001      	adds	r0, #1
 800d5da:	d1c2      	bne.n	800d562 <_printf_float+0x2f2>
 800d5dc:	e6a3      	b.n	800d326 <_printf_float+0xb6>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	4631      	mov	r1, r6
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	9206      	str	r2, [sp, #24]
 800d5e6:	47b8      	blx	r7
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	f43f ae9c 	beq.w	800d326 <_printf_float+0xb6>
 800d5ee:	9a06      	ldr	r2, [sp, #24]
 800d5f0:	f10b 0b01 	add.w	fp, fp, #1
 800d5f4:	e7bb      	b.n	800d56e <_printf_float+0x2fe>
 800d5f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5fa:	4631      	mov	r1, r6
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	47b8      	blx	r7
 800d600:	3001      	adds	r0, #1
 800d602:	d1c0      	bne.n	800d586 <_printf_float+0x316>
 800d604:	e68f      	b.n	800d326 <_printf_float+0xb6>
 800d606:	9a06      	ldr	r2, [sp, #24]
 800d608:	464b      	mov	r3, r9
 800d60a:	4442      	add	r2, r8
 800d60c:	4631      	mov	r1, r6
 800d60e:	4628      	mov	r0, r5
 800d610:	47b8      	blx	r7
 800d612:	3001      	adds	r0, #1
 800d614:	d1c3      	bne.n	800d59e <_printf_float+0x32e>
 800d616:	e686      	b.n	800d326 <_printf_float+0xb6>
 800d618:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d61c:	f1ba 0f01 	cmp.w	sl, #1
 800d620:	dc01      	bgt.n	800d626 <_printf_float+0x3b6>
 800d622:	07db      	lsls	r3, r3, #31
 800d624:	d536      	bpl.n	800d694 <_printf_float+0x424>
 800d626:	2301      	movs	r3, #1
 800d628:	4642      	mov	r2, r8
 800d62a:	4631      	mov	r1, r6
 800d62c:	4628      	mov	r0, r5
 800d62e:	47b8      	blx	r7
 800d630:	3001      	adds	r0, #1
 800d632:	f43f ae78 	beq.w	800d326 <_printf_float+0xb6>
 800d636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d63a:	4631      	mov	r1, r6
 800d63c:	4628      	mov	r0, r5
 800d63e:	47b8      	blx	r7
 800d640:	3001      	adds	r0, #1
 800d642:	f43f ae70 	beq.w	800d326 <_printf_float+0xb6>
 800d646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d64a:	2200      	movs	r2, #0
 800d64c:	2300      	movs	r3, #0
 800d64e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d652:	f7f3 fa49 	bl	8000ae8 <__aeabi_dcmpeq>
 800d656:	b9c0      	cbnz	r0, 800d68a <_printf_float+0x41a>
 800d658:	4653      	mov	r3, sl
 800d65a:	f108 0201 	add.w	r2, r8, #1
 800d65e:	4631      	mov	r1, r6
 800d660:	4628      	mov	r0, r5
 800d662:	47b8      	blx	r7
 800d664:	3001      	adds	r0, #1
 800d666:	d10c      	bne.n	800d682 <_printf_float+0x412>
 800d668:	e65d      	b.n	800d326 <_printf_float+0xb6>
 800d66a:	2301      	movs	r3, #1
 800d66c:	465a      	mov	r2, fp
 800d66e:	4631      	mov	r1, r6
 800d670:	4628      	mov	r0, r5
 800d672:	47b8      	blx	r7
 800d674:	3001      	adds	r0, #1
 800d676:	f43f ae56 	beq.w	800d326 <_printf_float+0xb6>
 800d67a:	f108 0801 	add.w	r8, r8, #1
 800d67e:	45d0      	cmp	r8, sl
 800d680:	dbf3      	blt.n	800d66a <_printf_float+0x3fa>
 800d682:	464b      	mov	r3, r9
 800d684:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d688:	e6df      	b.n	800d44a <_printf_float+0x1da>
 800d68a:	f04f 0800 	mov.w	r8, #0
 800d68e:	f104 0b1a 	add.w	fp, r4, #26
 800d692:	e7f4      	b.n	800d67e <_printf_float+0x40e>
 800d694:	2301      	movs	r3, #1
 800d696:	4642      	mov	r2, r8
 800d698:	e7e1      	b.n	800d65e <_printf_float+0x3ee>
 800d69a:	2301      	movs	r3, #1
 800d69c:	464a      	mov	r2, r9
 800d69e:	4631      	mov	r1, r6
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	47b8      	blx	r7
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	f43f ae3e 	beq.w	800d326 <_printf_float+0xb6>
 800d6aa:	f108 0801 	add.w	r8, r8, #1
 800d6ae:	68e3      	ldr	r3, [r4, #12]
 800d6b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6b2:	1a5b      	subs	r3, r3, r1
 800d6b4:	4543      	cmp	r3, r8
 800d6b6:	dcf0      	bgt.n	800d69a <_printf_float+0x42a>
 800d6b8:	e6fc      	b.n	800d4b4 <_printf_float+0x244>
 800d6ba:	f04f 0800 	mov.w	r8, #0
 800d6be:	f104 0919 	add.w	r9, r4, #25
 800d6c2:	e7f4      	b.n	800d6ae <_printf_float+0x43e>

0800d6c4 <_printf_common>:
 800d6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c8:	4616      	mov	r6, r2
 800d6ca:	4698      	mov	r8, r3
 800d6cc:	688a      	ldr	r2, [r1, #8]
 800d6ce:	690b      	ldr	r3, [r1, #16]
 800d6d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	bfb8      	it	lt
 800d6d8:	4613      	movlt	r3, r2
 800d6da:	6033      	str	r3, [r6, #0]
 800d6dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6e0:	4607      	mov	r7, r0
 800d6e2:	460c      	mov	r4, r1
 800d6e4:	b10a      	cbz	r2, 800d6ea <_printf_common+0x26>
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	6033      	str	r3, [r6, #0]
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	0699      	lsls	r1, r3, #26
 800d6ee:	bf42      	ittt	mi
 800d6f0:	6833      	ldrmi	r3, [r6, #0]
 800d6f2:	3302      	addmi	r3, #2
 800d6f4:	6033      	strmi	r3, [r6, #0]
 800d6f6:	6825      	ldr	r5, [r4, #0]
 800d6f8:	f015 0506 	ands.w	r5, r5, #6
 800d6fc:	d106      	bne.n	800d70c <_printf_common+0x48>
 800d6fe:	f104 0a19 	add.w	sl, r4, #25
 800d702:	68e3      	ldr	r3, [r4, #12]
 800d704:	6832      	ldr	r2, [r6, #0]
 800d706:	1a9b      	subs	r3, r3, r2
 800d708:	42ab      	cmp	r3, r5
 800d70a:	dc26      	bgt.n	800d75a <_printf_common+0x96>
 800d70c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d710:	6822      	ldr	r2, [r4, #0]
 800d712:	3b00      	subs	r3, #0
 800d714:	bf18      	it	ne
 800d716:	2301      	movne	r3, #1
 800d718:	0692      	lsls	r2, r2, #26
 800d71a:	d42b      	bmi.n	800d774 <_printf_common+0xb0>
 800d71c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d720:	4641      	mov	r1, r8
 800d722:	4638      	mov	r0, r7
 800d724:	47c8      	blx	r9
 800d726:	3001      	adds	r0, #1
 800d728:	d01e      	beq.n	800d768 <_printf_common+0xa4>
 800d72a:	6823      	ldr	r3, [r4, #0]
 800d72c:	6922      	ldr	r2, [r4, #16]
 800d72e:	f003 0306 	and.w	r3, r3, #6
 800d732:	2b04      	cmp	r3, #4
 800d734:	bf02      	ittt	eq
 800d736:	68e5      	ldreq	r5, [r4, #12]
 800d738:	6833      	ldreq	r3, [r6, #0]
 800d73a:	1aed      	subeq	r5, r5, r3
 800d73c:	68a3      	ldr	r3, [r4, #8]
 800d73e:	bf0c      	ite	eq
 800d740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d744:	2500      	movne	r5, #0
 800d746:	4293      	cmp	r3, r2
 800d748:	bfc4      	itt	gt
 800d74a:	1a9b      	subgt	r3, r3, r2
 800d74c:	18ed      	addgt	r5, r5, r3
 800d74e:	2600      	movs	r6, #0
 800d750:	341a      	adds	r4, #26
 800d752:	42b5      	cmp	r5, r6
 800d754:	d11a      	bne.n	800d78c <_printf_common+0xc8>
 800d756:	2000      	movs	r0, #0
 800d758:	e008      	b.n	800d76c <_printf_common+0xa8>
 800d75a:	2301      	movs	r3, #1
 800d75c:	4652      	mov	r2, sl
 800d75e:	4641      	mov	r1, r8
 800d760:	4638      	mov	r0, r7
 800d762:	47c8      	blx	r9
 800d764:	3001      	adds	r0, #1
 800d766:	d103      	bne.n	800d770 <_printf_common+0xac>
 800d768:	f04f 30ff 	mov.w	r0, #4294967295
 800d76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d770:	3501      	adds	r5, #1
 800d772:	e7c6      	b.n	800d702 <_printf_common+0x3e>
 800d774:	18e1      	adds	r1, r4, r3
 800d776:	1c5a      	adds	r2, r3, #1
 800d778:	2030      	movs	r0, #48	@ 0x30
 800d77a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d77e:	4422      	add	r2, r4
 800d780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d788:	3302      	adds	r3, #2
 800d78a:	e7c7      	b.n	800d71c <_printf_common+0x58>
 800d78c:	2301      	movs	r3, #1
 800d78e:	4622      	mov	r2, r4
 800d790:	4641      	mov	r1, r8
 800d792:	4638      	mov	r0, r7
 800d794:	47c8      	blx	r9
 800d796:	3001      	adds	r0, #1
 800d798:	d0e6      	beq.n	800d768 <_printf_common+0xa4>
 800d79a:	3601      	adds	r6, #1
 800d79c:	e7d9      	b.n	800d752 <_printf_common+0x8e>
	...

0800d7a0 <_printf_i>:
 800d7a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a4:	7e0f      	ldrb	r7, [r1, #24]
 800d7a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d7a8:	2f78      	cmp	r7, #120	@ 0x78
 800d7aa:	4691      	mov	r9, r2
 800d7ac:	4680      	mov	r8, r0
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	469a      	mov	sl, r3
 800d7b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d7b6:	d807      	bhi.n	800d7c8 <_printf_i+0x28>
 800d7b8:	2f62      	cmp	r7, #98	@ 0x62
 800d7ba:	d80a      	bhi.n	800d7d2 <_printf_i+0x32>
 800d7bc:	2f00      	cmp	r7, #0
 800d7be:	f000 80d1 	beq.w	800d964 <_printf_i+0x1c4>
 800d7c2:	2f58      	cmp	r7, #88	@ 0x58
 800d7c4:	f000 80b8 	beq.w	800d938 <_printf_i+0x198>
 800d7c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7d0:	e03a      	b.n	800d848 <_printf_i+0xa8>
 800d7d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7d6:	2b15      	cmp	r3, #21
 800d7d8:	d8f6      	bhi.n	800d7c8 <_printf_i+0x28>
 800d7da:	a101      	add	r1, pc, #4	@ (adr r1, 800d7e0 <_printf_i+0x40>)
 800d7dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7e0:	0800d839 	.word	0x0800d839
 800d7e4:	0800d84d 	.word	0x0800d84d
 800d7e8:	0800d7c9 	.word	0x0800d7c9
 800d7ec:	0800d7c9 	.word	0x0800d7c9
 800d7f0:	0800d7c9 	.word	0x0800d7c9
 800d7f4:	0800d7c9 	.word	0x0800d7c9
 800d7f8:	0800d84d 	.word	0x0800d84d
 800d7fc:	0800d7c9 	.word	0x0800d7c9
 800d800:	0800d7c9 	.word	0x0800d7c9
 800d804:	0800d7c9 	.word	0x0800d7c9
 800d808:	0800d7c9 	.word	0x0800d7c9
 800d80c:	0800d94b 	.word	0x0800d94b
 800d810:	0800d877 	.word	0x0800d877
 800d814:	0800d905 	.word	0x0800d905
 800d818:	0800d7c9 	.word	0x0800d7c9
 800d81c:	0800d7c9 	.word	0x0800d7c9
 800d820:	0800d96d 	.word	0x0800d96d
 800d824:	0800d7c9 	.word	0x0800d7c9
 800d828:	0800d877 	.word	0x0800d877
 800d82c:	0800d7c9 	.word	0x0800d7c9
 800d830:	0800d7c9 	.word	0x0800d7c9
 800d834:	0800d90d 	.word	0x0800d90d
 800d838:	6833      	ldr	r3, [r6, #0]
 800d83a:	1d1a      	adds	r2, r3, #4
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	6032      	str	r2, [r6, #0]
 800d840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d848:	2301      	movs	r3, #1
 800d84a:	e09c      	b.n	800d986 <_printf_i+0x1e6>
 800d84c:	6833      	ldr	r3, [r6, #0]
 800d84e:	6820      	ldr	r0, [r4, #0]
 800d850:	1d19      	adds	r1, r3, #4
 800d852:	6031      	str	r1, [r6, #0]
 800d854:	0606      	lsls	r6, r0, #24
 800d856:	d501      	bpl.n	800d85c <_printf_i+0xbc>
 800d858:	681d      	ldr	r5, [r3, #0]
 800d85a:	e003      	b.n	800d864 <_printf_i+0xc4>
 800d85c:	0645      	lsls	r5, r0, #25
 800d85e:	d5fb      	bpl.n	800d858 <_printf_i+0xb8>
 800d860:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d864:	2d00      	cmp	r5, #0
 800d866:	da03      	bge.n	800d870 <_printf_i+0xd0>
 800d868:	232d      	movs	r3, #45	@ 0x2d
 800d86a:	426d      	negs	r5, r5
 800d86c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d870:	4858      	ldr	r0, [pc, #352]	@ (800d9d4 <_printf_i+0x234>)
 800d872:	230a      	movs	r3, #10
 800d874:	e011      	b.n	800d89a <_printf_i+0xfa>
 800d876:	6821      	ldr	r1, [r4, #0]
 800d878:	6833      	ldr	r3, [r6, #0]
 800d87a:	0608      	lsls	r0, r1, #24
 800d87c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d880:	d402      	bmi.n	800d888 <_printf_i+0xe8>
 800d882:	0649      	lsls	r1, r1, #25
 800d884:	bf48      	it	mi
 800d886:	b2ad      	uxthmi	r5, r5
 800d888:	2f6f      	cmp	r7, #111	@ 0x6f
 800d88a:	4852      	ldr	r0, [pc, #328]	@ (800d9d4 <_printf_i+0x234>)
 800d88c:	6033      	str	r3, [r6, #0]
 800d88e:	bf14      	ite	ne
 800d890:	230a      	movne	r3, #10
 800d892:	2308      	moveq	r3, #8
 800d894:	2100      	movs	r1, #0
 800d896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d89a:	6866      	ldr	r6, [r4, #4]
 800d89c:	60a6      	str	r6, [r4, #8]
 800d89e:	2e00      	cmp	r6, #0
 800d8a0:	db05      	blt.n	800d8ae <_printf_i+0x10e>
 800d8a2:	6821      	ldr	r1, [r4, #0]
 800d8a4:	432e      	orrs	r6, r5
 800d8a6:	f021 0104 	bic.w	r1, r1, #4
 800d8aa:	6021      	str	r1, [r4, #0]
 800d8ac:	d04b      	beq.n	800d946 <_printf_i+0x1a6>
 800d8ae:	4616      	mov	r6, r2
 800d8b0:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8b4:	fb03 5711 	mls	r7, r3, r1, r5
 800d8b8:	5dc7      	ldrb	r7, [r0, r7]
 800d8ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8be:	462f      	mov	r7, r5
 800d8c0:	42bb      	cmp	r3, r7
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	d9f4      	bls.n	800d8b0 <_printf_i+0x110>
 800d8c6:	2b08      	cmp	r3, #8
 800d8c8:	d10b      	bne.n	800d8e2 <_printf_i+0x142>
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	07df      	lsls	r7, r3, #31
 800d8ce:	d508      	bpl.n	800d8e2 <_printf_i+0x142>
 800d8d0:	6923      	ldr	r3, [r4, #16]
 800d8d2:	6861      	ldr	r1, [r4, #4]
 800d8d4:	4299      	cmp	r1, r3
 800d8d6:	bfde      	ittt	le
 800d8d8:	2330      	movle	r3, #48	@ 0x30
 800d8da:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8de:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8e2:	1b92      	subs	r2, r2, r6
 800d8e4:	6122      	str	r2, [r4, #16]
 800d8e6:	f8cd a000 	str.w	sl, [sp]
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	aa03      	add	r2, sp, #12
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4640      	mov	r0, r8
 800d8f2:	f7ff fee7 	bl	800d6c4 <_printf_common>
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	d14a      	bne.n	800d990 <_printf_i+0x1f0>
 800d8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fe:	b004      	add	sp, #16
 800d900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	f043 0320 	orr.w	r3, r3, #32
 800d90a:	6023      	str	r3, [r4, #0]
 800d90c:	4832      	ldr	r0, [pc, #200]	@ (800d9d8 <_printf_i+0x238>)
 800d90e:	2778      	movs	r7, #120	@ 0x78
 800d910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	6831      	ldr	r1, [r6, #0]
 800d918:	061f      	lsls	r7, r3, #24
 800d91a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d91e:	d402      	bmi.n	800d926 <_printf_i+0x186>
 800d920:	065f      	lsls	r7, r3, #25
 800d922:	bf48      	it	mi
 800d924:	b2ad      	uxthmi	r5, r5
 800d926:	6031      	str	r1, [r6, #0]
 800d928:	07d9      	lsls	r1, r3, #31
 800d92a:	bf44      	itt	mi
 800d92c:	f043 0320 	orrmi.w	r3, r3, #32
 800d930:	6023      	strmi	r3, [r4, #0]
 800d932:	b11d      	cbz	r5, 800d93c <_printf_i+0x19c>
 800d934:	2310      	movs	r3, #16
 800d936:	e7ad      	b.n	800d894 <_printf_i+0xf4>
 800d938:	4826      	ldr	r0, [pc, #152]	@ (800d9d4 <_printf_i+0x234>)
 800d93a:	e7e9      	b.n	800d910 <_printf_i+0x170>
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	f023 0320 	bic.w	r3, r3, #32
 800d942:	6023      	str	r3, [r4, #0]
 800d944:	e7f6      	b.n	800d934 <_printf_i+0x194>
 800d946:	4616      	mov	r6, r2
 800d948:	e7bd      	b.n	800d8c6 <_printf_i+0x126>
 800d94a:	6833      	ldr	r3, [r6, #0]
 800d94c:	6825      	ldr	r5, [r4, #0]
 800d94e:	6961      	ldr	r1, [r4, #20]
 800d950:	1d18      	adds	r0, r3, #4
 800d952:	6030      	str	r0, [r6, #0]
 800d954:	062e      	lsls	r6, r5, #24
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	d501      	bpl.n	800d95e <_printf_i+0x1be>
 800d95a:	6019      	str	r1, [r3, #0]
 800d95c:	e002      	b.n	800d964 <_printf_i+0x1c4>
 800d95e:	0668      	lsls	r0, r5, #25
 800d960:	d5fb      	bpl.n	800d95a <_printf_i+0x1ba>
 800d962:	8019      	strh	r1, [r3, #0]
 800d964:	2300      	movs	r3, #0
 800d966:	6123      	str	r3, [r4, #16]
 800d968:	4616      	mov	r6, r2
 800d96a:	e7bc      	b.n	800d8e6 <_printf_i+0x146>
 800d96c:	6833      	ldr	r3, [r6, #0]
 800d96e:	1d1a      	adds	r2, r3, #4
 800d970:	6032      	str	r2, [r6, #0]
 800d972:	681e      	ldr	r6, [r3, #0]
 800d974:	6862      	ldr	r2, [r4, #4]
 800d976:	2100      	movs	r1, #0
 800d978:	4630      	mov	r0, r6
 800d97a:	f7f2 fc39 	bl	80001f0 <memchr>
 800d97e:	b108      	cbz	r0, 800d984 <_printf_i+0x1e4>
 800d980:	1b80      	subs	r0, r0, r6
 800d982:	6060      	str	r0, [r4, #4]
 800d984:	6863      	ldr	r3, [r4, #4]
 800d986:	6123      	str	r3, [r4, #16]
 800d988:	2300      	movs	r3, #0
 800d98a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d98e:	e7aa      	b.n	800d8e6 <_printf_i+0x146>
 800d990:	6923      	ldr	r3, [r4, #16]
 800d992:	4632      	mov	r2, r6
 800d994:	4649      	mov	r1, r9
 800d996:	4640      	mov	r0, r8
 800d998:	47d0      	blx	sl
 800d99a:	3001      	adds	r0, #1
 800d99c:	d0ad      	beq.n	800d8fa <_printf_i+0x15a>
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	079b      	lsls	r3, r3, #30
 800d9a2:	d413      	bmi.n	800d9cc <_printf_i+0x22c>
 800d9a4:	68e0      	ldr	r0, [r4, #12]
 800d9a6:	9b03      	ldr	r3, [sp, #12]
 800d9a8:	4298      	cmp	r0, r3
 800d9aa:	bfb8      	it	lt
 800d9ac:	4618      	movlt	r0, r3
 800d9ae:	e7a6      	b.n	800d8fe <_printf_i+0x15e>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	4632      	mov	r2, r6
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	4640      	mov	r0, r8
 800d9b8:	47d0      	blx	sl
 800d9ba:	3001      	adds	r0, #1
 800d9bc:	d09d      	beq.n	800d8fa <_printf_i+0x15a>
 800d9be:	3501      	adds	r5, #1
 800d9c0:	68e3      	ldr	r3, [r4, #12]
 800d9c2:	9903      	ldr	r1, [sp, #12]
 800d9c4:	1a5b      	subs	r3, r3, r1
 800d9c6:	42ab      	cmp	r3, r5
 800d9c8:	dcf2      	bgt.n	800d9b0 <_printf_i+0x210>
 800d9ca:	e7eb      	b.n	800d9a4 <_printf_i+0x204>
 800d9cc:	2500      	movs	r5, #0
 800d9ce:	f104 0619 	add.w	r6, r4, #25
 800d9d2:	e7f5      	b.n	800d9c0 <_printf_i+0x220>
 800d9d4:	08010448 	.word	0x08010448
 800d9d8:	08010459 	.word	0x08010459

0800d9dc <std>:
 800d9dc:	2300      	movs	r3, #0
 800d9de:	b510      	push	{r4, lr}
 800d9e0:	4604      	mov	r4, r0
 800d9e2:	e9c0 3300 	strd	r3, r3, [r0]
 800d9e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9ea:	6083      	str	r3, [r0, #8]
 800d9ec:	8181      	strh	r1, [r0, #12]
 800d9ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9f0:	81c2      	strh	r2, [r0, #14]
 800d9f2:	6183      	str	r3, [r0, #24]
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	2208      	movs	r2, #8
 800d9f8:	305c      	adds	r0, #92	@ 0x5c
 800d9fa:	f000 f906 	bl	800dc0a <memset>
 800d9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800da34 <std+0x58>)
 800da00:	6263      	str	r3, [r4, #36]	@ 0x24
 800da02:	4b0d      	ldr	r3, [pc, #52]	@ (800da38 <std+0x5c>)
 800da04:	62a3      	str	r3, [r4, #40]	@ 0x28
 800da06:	4b0d      	ldr	r3, [pc, #52]	@ (800da3c <std+0x60>)
 800da08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da0a:	4b0d      	ldr	r3, [pc, #52]	@ (800da40 <std+0x64>)
 800da0c:	6323      	str	r3, [r4, #48]	@ 0x30
 800da0e:	4b0d      	ldr	r3, [pc, #52]	@ (800da44 <std+0x68>)
 800da10:	6224      	str	r4, [r4, #32]
 800da12:	429c      	cmp	r4, r3
 800da14:	d006      	beq.n	800da24 <std+0x48>
 800da16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800da1a:	4294      	cmp	r4, r2
 800da1c:	d002      	beq.n	800da24 <std+0x48>
 800da1e:	33d0      	adds	r3, #208	@ 0xd0
 800da20:	429c      	cmp	r4, r3
 800da22:	d105      	bne.n	800da30 <std+0x54>
 800da24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da2c:	f000 ba18 	b.w	800de60 <__retarget_lock_init_recursive>
 800da30:	bd10      	pop	{r4, pc}
 800da32:	bf00      	nop
 800da34:	0800db85 	.word	0x0800db85
 800da38:	0800dba7 	.word	0x0800dba7
 800da3c:	0800dbdf 	.word	0x0800dbdf
 800da40:	0800dc03 	.word	0x0800dc03
 800da44:	200026e8 	.word	0x200026e8

0800da48 <stdio_exit_handler>:
 800da48:	4a02      	ldr	r2, [pc, #8]	@ (800da54 <stdio_exit_handler+0xc>)
 800da4a:	4903      	ldr	r1, [pc, #12]	@ (800da58 <stdio_exit_handler+0x10>)
 800da4c:	4803      	ldr	r0, [pc, #12]	@ (800da5c <stdio_exit_handler+0x14>)
 800da4e:	f000 b869 	b.w	800db24 <_fwalk_sglue>
 800da52:	bf00      	nop
 800da54:	200001fc 	.word	0x200001fc
 800da58:	0800ffad 	.word	0x0800ffad
 800da5c:	20000378 	.word	0x20000378

0800da60 <cleanup_stdio>:
 800da60:	6841      	ldr	r1, [r0, #4]
 800da62:	4b0c      	ldr	r3, [pc, #48]	@ (800da94 <cleanup_stdio+0x34>)
 800da64:	4299      	cmp	r1, r3
 800da66:	b510      	push	{r4, lr}
 800da68:	4604      	mov	r4, r0
 800da6a:	d001      	beq.n	800da70 <cleanup_stdio+0x10>
 800da6c:	f002 fa9e 	bl	800ffac <_fflush_r>
 800da70:	68a1      	ldr	r1, [r4, #8]
 800da72:	4b09      	ldr	r3, [pc, #36]	@ (800da98 <cleanup_stdio+0x38>)
 800da74:	4299      	cmp	r1, r3
 800da76:	d002      	beq.n	800da7e <cleanup_stdio+0x1e>
 800da78:	4620      	mov	r0, r4
 800da7a:	f002 fa97 	bl	800ffac <_fflush_r>
 800da7e:	68e1      	ldr	r1, [r4, #12]
 800da80:	4b06      	ldr	r3, [pc, #24]	@ (800da9c <cleanup_stdio+0x3c>)
 800da82:	4299      	cmp	r1, r3
 800da84:	d004      	beq.n	800da90 <cleanup_stdio+0x30>
 800da86:	4620      	mov	r0, r4
 800da88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da8c:	f002 ba8e 	b.w	800ffac <_fflush_r>
 800da90:	bd10      	pop	{r4, pc}
 800da92:	bf00      	nop
 800da94:	200026e8 	.word	0x200026e8
 800da98:	20002750 	.word	0x20002750
 800da9c:	200027b8 	.word	0x200027b8

0800daa0 <global_stdio_init.part.0>:
 800daa0:	b510      	push	{r4, lr}
 800daa2:	4b0b      	ldr	r3, [pc, #44]	@ (800dad0 <global_stdio_init.part.0+0x30>)
 800daa4:	4c0b      	ldr	r4, [pc, #44]	@ (800dad4 <global_stdio_init.part.0+0x34>)
 800daa6:	4a0c      	ldr	r2, [pc, #48]	@ (800dad8 <global_stdio_init.part.0+0x38>)
 800daa8:	601a      	str	r2, [r3, #0]
 800daaa:	4620      	mov	r0, r4
 800daac:	2200      	movs	r2, #0
 800daae:	2104      	movs	r1, #4
 800dab0:	f7ff ff94 	bl	800d9dc <std>
 800dab4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dab8:	2201      	movs	r2, #1
 800daba:	2109      	movs	r1, #9
 800dabc:	f7ff ff8e 	bl	800d9dc <std>
 800dac0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dac4:	2202      	movs	r2, #2
 800dac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daca:	2112      	movs	r1, #18
 800dacc:	f7ff bf86 	b.w	800d9dc <std>
 800dad0:	20002820 	.word	0x20002820
 800dad4:	200026e8 	.word	0x200026e8
 800dad8:	0800da49 	.word	0x0800da49

0800dadc <__sfp_lock_acquire>:
 800dadc:	4801      	ldr	r0, [pc, #4]	@ (800dae4 <__sfp_lock_acquire+0x8>)
 800dade:	f000 b9c0 	b.w	800de62 <__retarget_lock_acquire_recursive>
 800dae2:	bf00      	nop
 800dae4:	20002829 	.word	0x20002829

0800dae8 <__sfp_lock_release>:
 800dae8:	4801      	ldr	r0, [pc, #4]	@ (800daf0 <__sfp_lock_release+0x8>)
 800daea:	f000 b9bb 	b.w	800de64 <__retarget_lock_release_recursive>
 800daee:	bf00      	nop
 800daf0:	20002829 	.word	0x20002829

0800daf4 <__sinit>:
 800daf4:	b510      	push	{r4, lr}
 800daf6:	4604      	mov	r4, r0
 800daf8:	f7ff fff0 	bl	800dadc <__sfp_lock_acquire>
 800dafc:	6a23      	ldr	r3, [r4, #32]
 800dafe:	b11b      	cbz	r3, 800db08 <__sinit+0x14>
 800db00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db04:	f7ff bff0 	b.w	800dae8 <__sfp_lock_release>
 800db08:	4b04      	ldr	r3, [pc, #16]	@ (800db1c <__sinit+0x28>)
 800db0a:	6223      	str	r3, [r4, #32]
 800db0c:	4b04      	ldr	r3, [pc, #16]	@ (800db20 <__sinit+0x2c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d1f5      	bne.n	800db00 <__sinit+0xc>
 800db14:	f7ff ffc4 	bl	800daa0 <global_stdio_init.part.0>
 800db18:	e7f2      	b.n	800db00 <__sinit+0xc>
 800db1a:	bf00      	nop
 800db1c:	0800da61 	.word	0x0800da61
 800db20:	20002820 	.word	0x20002820

0800db24 <_fwalk_sglue>:
 800db24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db28:	4607      	mov	r7, r0
 800db2a:	4688      	mov	r8, r1
 800db2c:	4614      	mov	r4, r2
 800db2e:	2600      	movs	r6, #0
 800db30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db34:	f1b9 0901 	subs.w	r9, r9, #1
 800db38:	d505      	bpl.n	800db46 <_fwalk_sglue+0x22>
 800db3a:	6824      	ldr	r4, [r4, #0]
 800db3c:	2c00      	cmp	r4, #0
 800db3e:	d1f7      	bne.n	800db30 <_fwalk_sglue+0xc>
 800db40:	4630      	mov	r0, r6
 800db42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db46:	89ab      	ldrh	r3, [r5, #12]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d907      	bls.n	800db5c <_fwalk_sglue+0x38>
 800db4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db50:	3301      	adds	r3, #1
 800db52:	d003      	beq.n	800db5c <_fwalk_sglue+0x38>
 800db54:	4629      	mov	r1, r5
 800db56:	4638      	mov	r0, r7
 800db58:	47c0      	blx	r8
 800db5a:	4306      	orrs	r6, r0
 800db5c:	3568      	adds	r5, #104	@ 0x68
 800db5e:	e7e9      	b.n	800db34 <_fwalk_sglue+0x10>

0800db60 <iprintf>:
 800db60:	b40f      	push	{r0, r1, r2, r3}
 800db62:	b507      	push	{r0, r1, r2, lr}
 800db64:	4906      	ldr	r1, [pc, #24]	@ (800db80 <iprintf+0x20>)
 800db66:	ab04      	add	r3, sp, #16
 800db68:	6808      	ldr	r0, [r1, #0]
 800db6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db6e:	6881      	ldr	r1, [r0, #8]
 800db70:	9301      	str	r3, [sp, #4]
 800db72:	f002 f87f 	bl	800fc74 <_vfiprintf_r>
 800db76:	b003      	add	sp, #12
 800db78:	f85d eb04 	ldr.w	lr, [sp], #4
 800db7c:	b004      	add	sp, #16
 800db7e:	4770      	bx	lr
 800db80:	20000374 	.word	0x20000374

0800db84 <__sread>:
 800db84:	b510      	push	{r4, lr}
 800db86:	460c      	mov	r4, r1
 800db88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db8c:	f000 f90a 	bl	800dda4 <_read_r>
 800db90:	2800      	cmp	r0, #0
 800db92:	bfab      	itete	ge
 800db94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db96:	89a3      	ldrhlt	r3, [r4, #12]
 800db98:	181b      	addge	r3, r3, r0
 800db9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db9e:	bfac      	ite	ge
 800dba0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dba2:	81a3      	strhlt	r3, [r4, #12]
 800dba4:	bd10      	pop	{r4, pc}

0800dba6 <__swrite>:
 800dba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbaa:	461f      	mov	r7, r3
 800dbac:	898b      	ldrh	r3, [r1, #12]
 800dbae:	05db      	lsls	r3, r3, #23
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	460c      	mov	r4, r1
 800dbb4:	4616      	mov	r6, r2
 800dbb6:	d505      	bpl.n	800dbc4 <__swrite+0x1e>
 800dbb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f000 f8de 	bl	800dd80 <_lseek_r>
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbce:	81a3      	strh	r3, [r4, #12]
 800dbd0:	4632      	mov	r2, r6
 800dbd2:	463b      	mov	r3, r7
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbda:	f000 b905 	b.w	800dde8 <_write_r>

0800dbde <__sseek>:
 800dbde:	b510      	push	{r4, lr}
 800dbe0:	460c      	mov	r4, r1
 800dbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe6:	f000 f8cb 	bl	800dd80 <_lseek_r>
 800dbea:	1c43      	adds	r3, r0, #1
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	bf15      	itete	ne
 800dbf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbfa:	81a3      	strheq	r3, [r4, #12]
 800dbfc:	bf18      	it	ne
 800dbfe:	81a3      	strhne	r3, [r4, #12]
 800dc00:	bd10      	pop	{r4, pc}

0800dc02 <__sclose>:
 800dc02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc06:	f000 b8ab 	b.w	800dd60 <_close_r>

0800dc0a <memset>:
 800dc0a:	4402      	add	r2, r0
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d100      	bne.n	800dc14 <memset+0xa>
 800dc12:	4770      	bx	lr
 800dc14:	f803 1b01 	strb.w	r1, [r3], #1
 800dc18:	e7f9      	b.n	800dc0e <memset+0x4>
	...

0800dc1c <strcasecmp>:
 800dc1c:	b530      	push	{r4, r5, lr}
 800dc1e:	4d0c      	ldr	r5, [pc, #48]	@ (800dc50 <strcasecmp+0x34>)
 800dc20:	4602      	mov	r2, r0
 800dc22:	f812 3b01 	ldrb.w	r3, [r2], #1
 800dc26:	5ce8      	ldrb	r0, [r5, r3]
 800dc28:	f000 0003 	and.w	r0, r0, #3
 800dc2c:	2801      	cmp	r0, #1
 800dc2e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800dc32:	5c2c      	ldrb	r4, [r5, r0]
 800dc34:	f004 0403 	and.w	r4, r4, #3
 800dc38:	bf08      	it	eq
 800dc3a:	3320      	addeq	r3, #32
 800dc3c:	2c01      	cmp	r4, #1
 800dc3e:	bf08      	it	eq
 800dc40:	3020      	addeq	r0, #32
 800dc42:	1a1b      	subs	r3, r3, r0
 800dc44:	d102      	bne.n	800dc4c <strcasecmp+0x30>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d1eb      	bne.n	800dc22 <strcasecmp+0x6>
 800dc4a:	bd30      	pop	{r4, r5, pc}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	e7fc      	b.n	800dc4a <strcasecmp+0x2e>
 800dc50:	080106b1 	.word	0x080106b1

0800dc54 <strncmp>:
 800dc54:	b510      	push	{r4, lr}
 800dc56:	b16a      	cbz	r2, 800dc74 <strncmp+0x20>
 800dc58:	3901      	subs	r1, #1
 800dc5a:	1884      	adds	r4, r0, r2
 800dc5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d103      	bne.n	800dc70 <strncmp+0x1c>
 800dc68:	42a0      	cmp	r0, r4
 800dc6a:	d001      	beq.n	800dc70 <strncmp+0x1c>
 800dc6c:	2a00      	cmp	r2, #0
 800dc6e:	d1f5      	bne.n	800dc5c <strncmp+0x8>
 800dc70:	1ad0      	subs	r0, r2, r3
 800dc72:	bd10      	pop	{r4, pc}
 800dc74:	4610      	mov	r0, r2
 800dc76:	e7fc      	b.n	800dc72 <strncmp+0x1e>

0800dc78 <strncpy>:
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	3901      	subs	r1, #1
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	b132      	cbz	r2, 800dc8e <strncpy+0x16>
 800dc80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dc84:	f803 4b01 	strb.w	r4, [r3], #1
 800dc88:	3a01      	subs	r2, #1
 800dc8a:	2c00      	cmp	r4, #0
 800dc8c:	d1f7      	bne.n	800dc7e <strncpy+0x6>
 800dc8e:	441a      	add	r2, r3
 800dc90:	2100      	movs	r1, #0
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d100      	bne.n	800dc98 <strncpy+0x20>
 800dc96:	bd10      	pop	{r4, pc}
 800dc98:	f803 1b01 	strb.w	r1, [r3], #1
 800dc9c:	e7f9      	b.n	800dc92 <strncpy+0x1a>
	...

0800dca0 <strtok>:
 800dca0:	4b16      	ldr	r3, [pc, #88]	@ (800dcfc <strtok+0x5c>)
 800dca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca6:	681f      	ldr	r7, [r3, #0]
 800dca8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800dcaa:	4605      	mov	r5, r0
 800dcac:	460e      	mov	r6, r1
 800dcae:	b9ec      	cbnz	r4, 800dcec <strtok+0x4c>
 800dcb0:	2050      	movs	r0, #80	@ 0x50
 800dcb2:	f7fe faf3 	bl	800c29c <malloc>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	6478      	str	r0, [r7, #68]	@ 0x44
 800dcba:	b920      	cbnz	r0, 800dcc6 <strtok+0x26>
 800dcbc:	4b10      	ldr	r3, [pc, #64]	@ (800dd00 <strtok+0x60>)
 800dcbe:	4811      	ldr	r0, [pc, #68]	@ (800dd04 <strtok+0x64>)
 800dcc0:	215b      	movs	r1, #91	@ 0x5b
 800dcc2:	f000 f8e9 	bl	800de98 <__assert_func>
 800dcc6:	e9c0 4400 	strd	r4, r4, [r0]
 800dcca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dcce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dcd2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800dcd6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dcda:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dcde:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dce2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dce6:	6184      	str	r4, [r0, #24]
 800dce8:	7704      	strb	r4, [r0, #28]
 800dcea:	6244      	str	r4, [r0, #36]	@ 0x24
 800dcec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dcee:	4631      	mov	r1, r6
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf8:	f000 b806 	b.w	800dd08 <__strtok_r>
 800dcfc:	20000374 	.word	0x20000374
 800dd00:	0801046a 	.word	0x0801046a
 800dd04:	08010481 	.word	0x08010481

0800dd08 <__strtok_r>:
 800dd08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	b908      	cbnz	r0, 800dd12 <__strtok_r+0xa>
 800dd0e:	6814      	ldr	r4, [r2, #0]
 800dd10:	b144      	cbz	r4, 800dd24 <__strtok_r+0x1c>
 800dd12:	4620      	mov	r0, r4
 800dd14:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dd18:	460f      	mov	r7, r1
 800dd1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dd1e:	b91e      	cbnz	r6, 800dd28 <__strtok_r+0x20>
 800dd20:	b965      	cbnz	r5, 800dd3c <__strtok_r+0x34>
 800dd22:	6015      	str	r5, [r2, #0]
 800dd24:	2000      	movs	r0, #0
 800dd26:	e005      	b.n	800dd34 <__strtok_r+0x2c>
 800dd28:	42b5      	cmp	r5, r6
 800dd2a:	d1f6      	bne.n	800dd1a <__strtok_r+0x12>
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1f0      	bne.n	800dd12 <__strtok_r+0xa>
 800dd30:	6014      	str	r4, [r2, #0]
 800dd32:	7003      	strb	r3, [r0, #0]
 800dd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd36:	461c      	mov	r4, r3
 800dd38:	e00c      	b.n	800dd54 <__strtok_r+0x4c>
 800dd3a:	b91d      	cbnz	r5, 800dd44 <__strtok_r+0x3c>
 800dd3c:	4627      	mov	r7, r4
 800dd3e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd42:	460e      	mov	r6, r1
 800dd44:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dd48:	42ab      	cmp	r3, r5
 800dd4a:	d1f6      	bne.n	800dd3a <__strtok_r+0x32>
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0f2      	beq.n	800dd36 <__strtok_r+0x2e>
 800dd50:	2300      	movs	r3, #0
 800dd52:	703b      	strb	r3, [r7, #0]
 800dd54:	6014      	str	r4, [r2, #0]
 800dd56:	e7ed      	b.n	800dd34 <__strtok_r+0x2c>

0800dd58 <_localeconv_r>:
 800dd58:	4800      	ldr	r0, [pc, #0]	@ (800dd5c <_localeconv_r+0x4>)
 800dd5a:	4770      	bx	lr
 800dd5c:	200002f8 	.word	0x200002f8

0800dd60 <_close_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	4d06      	ldr	r5, [pc, #24]	@ (800dd7c <_close_r+0x1c>)
 800dd64:	2300      	movs	r3, #0
 800dd66:	4604      	mov	r4, r0
 800dd68:	4608      	mov	r0, r1
 800dd6a:	602b      	str	r3, [r5, #0]
 800dd6c:	f7f4 fd2a 	bl	80027c4 <_close>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_close_r+0x1a>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_close_r+0x1a>
 800dd78:	6023      	str	r3, [r4, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	20002824 	.word	0x20002824

0800dd80 <_lseek_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	4d07      	ldr	r5, [pc, #28]	@ (800dda0 <_lseek_r+0x20>)
 800dd84:	4604      	mov	r4, r0
 800dd86:	4608      	mov	r0, r1
 800dd88:	4611      	mov	r1, r2
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	602a      	str	r2, [r5, #0]
 800dd8e:	461a      	mov	r2, r3
 800dd90:	f7f4 fd3f 	bl	8002812 <_lseek>
 800dd94:	1c43      	adds	r3, r0, #1
 800dd96:	d102      	bne.n	800dd9e <_lseek_r+0x1e>
 800dd98:	682b      	ldr	r3, [r5, #0]
 800dd9a:	b103      	cbz	r3, 800dd9e <_lseek_r+0x1e>
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	bd38      	pop	{r3, r4, r5, pc}
 800dda0:	20002824 	.word	0x20002824

0800dda4 <_read_r>:
 800dda4:	b538      	push	{r3, r4, r5, lr}
 800dda6:	4d07      	ldr	r5, [pc, #28]	@ (800ddc4 <_read_r+0x20>)
 800dda8:	4604      	mov	r4, r0
 800ddaa:	4608      	mov	r0, r1
 800ddac:	4611      	mov	r1, r2
 800ddae:	2200      	movs	r2, #0
 800ddb0:	602a      	str	r2, [r5, #0]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	f7f4 fce9 	bl	800278a <_read>
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	d102      	bne.n	800ddc2 <_read_r+0x1e>
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	b103      	cbz	r3, 800ddc2 <_read_r+0x1e>
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	20002824 	.word	0x20002824

0800ddc8 <_sbrk_r>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4d06      	ldr	r5, [pc, #24]	@ (800dde4 <_sbrk_r+0x1c>)
 800ddcc:	2300      	movs	r3, #0
 800ddce:	4604      	mov	r4, r0
 800ddd0:	4608      	mov	r0, r1
 800ddd2:	602b      	str	r3, [r5, #0]
 800ddd4:	f7f4 fd2a 	bl	800282c <_sbrk>
 800ddd8:	1c43      	adds	r3, r0, #1
 800ddda:	d102      	bne.n	800dde2 <_sbrk_r+0x1a>
 800dddc:	682b      	ldr	r3, [r5, #0]
 800ddde:	b103      	cbz	r3, 800dde2 <_sbrk_r+0x1a>
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	bd38      	pop	{r3, r4, r5, pc}
 800dde4:	20002824 	.word	0x20002824

0800dde8 <_write_r>:
 800dde8:	b538      	push	{r3, r4, r5, lr}
 800ddea:	4d07      	ldr	r5, [pc, #28]	@ (800de08 <_write_r+0x20>)
 800ddec:	4604      	mov	r4, r0
 800ddee:	4608      	mov	r0, r1
 800ddf0:	4611      	mov	r1, r2
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	602a      	str	r2, [r5, #0]
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	f7fd fcd1 	bl	800b79e <_write>
 800ddfc:	1c43      	adds	r3, r0, #1
 800ddfe:	d102      	bne.n	800de06 <_write_r+0x1e>
 800de00:	682b      	ldr	r3, [r5, #0]
 800de02:	b103      	cbz	r3, 800de06 <_write_r+0x1e>
 800de04:	6023      	str	r3, [r4, #0]
 800de06:	bd38      	pop	{r3, r4, r5, pc}
 800de08:	20002824 	.word	0x20002824

0800de0c <__errno>:
 800de0c:	4b01      	ldr	r3, [pc, #4]	@ (800de14 <__errno+0x8>)
 800de0e:	6818      	ldr	r0, [r3, #0]
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	20000374 	.word	0x20000374

0800de18 <__libc_init_array>:
 800de18:	b570      	push	{r4, r5, r6, lr}
 800de1a:	4d0d      	ldr	r5, [pc, #52]	@ (800de50 <__libc_init_array+0x38>)
 800de1c:	4c0d      	ldr	r4, [pc, #52]	@ (800de54 <__libc_init_array+0x3c>)
 800de1e:	1b64      	subs	r4, r4, r5
 800de20:	10a4      	asrs	r4, r4, #2
 800de22:	2600      	movs	r6, #0
 800de24:	42a6      	cmp	r6, r4
 800de26:	d109      	bne.n	800de3c <__libc_init_array+0x24>
 800de28:	4d0b      	ldr	r5, [pc, #44]	@ (800de58 <__libc_init_array+0x40>)
 800de2a:	4c0c      	ldr	r4, [pc, #48]	@ (800de5c <__libc_init_array+0x44>)
 800de2c:	f002 fa70 	bl	8010310 <_init>
 800de30:	1b64      	subs	r4, r4, r5
 800de32:	10a4      	asrs	r4, r4, #2
 800de34:	2600      	movs	r6, #0
 800de36:	42a6      	cmp	r6, r4
 800de38:	d105      	bne.n	800de46 <__libc_init_array+0x2e>
 800de3a:	bd70      	pop	{r4, r5, r6, pc}
 800de3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de40:	4798      	blx	r3
 800de42:	3601      	adds	r6, #1
 800de44:	e7ee      	b.n	800de24 <__libc_init_array+0xc>
 800de46:	f855 3b04 	ldr.w	r3, [r5], #4
 800de4a:	4798      	blx	r3
 800de4c:	3601      	adds	r6, #1
 800de4e:	e7f2      	b.n	800de36 <__libc_init_array+0x1e>
 800de50:	080108b8 	.word	0x080108b8
 800de54:	080108b8 	.word	0x080108b8
 800de58:	080108b8 	.word	0x080108b8
 800de5c:	080108bc 	.word	0x080108bc

0800de60 <__retarget_lock_init_recursive>:
 800de60:	4770      	bx	lr

0800de62 <__retarget_lock_acquire_recursive>:
 800de62:	4770      	bx	lr

0800de64 <__retarget_lock_release_recursive>:
 800de64:	4770      	bx	lr

0800de66 <memcpy>:
 800de66:	440a      	add	r2, r1
 800de68:	4291      	cmp	r1, r2
 800de6a:	f100 33ff 	add.w	r3, r0, #4294967295
 800de6e:	d100      	bne.n	800de72 <memcpy+0xc>
 800de70:	4770      	bx	lr
 800de72:	b510      	push	{r4, lr}
 800de74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de7c:	4291      	cmp	r1, r2
 800de7e:	d1f9      	bne.n	800de74 <memcpy+0xe>
 800de80:	bd10      	pop	{r4, pc}
 800de82:	0000      	movs	r0, r0
 800de84:	0000      	movs	r0, r0
	...

0800de88 <nan>:
 800de88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de90 <nan+0x8>
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	00000000 	.word	0x00000000
 800de94:	7ff80000 	.word	0x7ff80000

0800de98 <__assert_func>:
 800de98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de9a:	4614      	mov	r4, r2
 800de9c:	461a      	mov	r2, r3
 800de9e:	4b09      	ldr	r3, [pc, #36]	@ (800dec4 <__assert_func+0x2c>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4605      	mov	r5, r0
 800dea4:	68d8      	ldr	r0, [r3, #12]
 800dea6:	b14c      	cbz	r4, 800debc <__assert_func+0x24>
 800dea8:	4b07      	ldr	r3, [pc, #28]	@ (800dec8 <__assert_func+0x30>)
 800deaa:	9100      	str	r1, [sp, #0]
 800deac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800deb0:	4906      	ldr	r1, [pc, #24]	@ (800decc <__assert_func+0x34>)
 800deb2:	462b      	mov	r3, r5
 800deb4:	f002 f8a2 	bl	800fffc <fiprintf>
 800deb8:	f002 f946 	bl	8010148 <abort>
 800debc:	4b04      	ldr	r3, [pc, #16]	@ (800ded0 <__assert_func+0x38>)
 800debe:	461c      	mov	r4, r3
 800dec0:	e7f3      	b.n	800deaa <__assert_func+0x12>
 800dec2:	bf00      	nop
 800dec4:	20000374 	.word	0x20000374
 800dec8:	080104e3 	.word	0x080104e3
 800decc:	080104f0 	.word	0x080104f0
 800ded0:	0801051e 	.word	0x0801051e

0800ded4 <quorem>:
 800ded4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	6903      	ldr	r3, [r0, #16]
 800deda:	690c      	ldr	r4, [r1, #16]
 800dedc:	42a3      	cmp	r3, r4
 800dede:	4607      	mov	r7, r0
 800dee0:	db7e      	blt.n	800dfe0 <quorem+0x10c>
 800dee2:	3c01      	subs	r4, #1
 800dee4:	f101 0814 	add.w	r8, r1, #20
 800dee8:	00a3      	lsls	r3, r4, #2
 800deea:	f100 0514 	add.w	r5, r0, #20
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800def4:	9301      	str	r3, [sp, #4]
 800def6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800defa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800defe:	3301      	adds	r3, #1
 800df00:	429a      	cmp	r2, r3
 800df02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df06:	fbb2 f6f3 	udiv	r6, r2, r3
 800df0a:	d32e      	bcc.n	800df6a <quorem+0x96>
 800df0c:	f04f 0a00 	mov.w	sl, #0
 800df10:	46c4      	mov	ip, r8
 800df12:	46ae      	mov	lr, r5
 800df14:	46d3      	mov	fp, sl
 800df16:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df1a:	b298      	uxth	r0, r3
 800df1c:	fb06 a000 	mla	r0, r6, r0, sl
 800df20:	0c02      	lsrs	r2, r0, #16
 800df22:	0c1b      	lsrs	r3, r3, #16
 800df24:	fb06 2303 	mla	r3, r6, r3, r2
 800df28:	f8de 2000 	ldr.w	r2, [lr]
 800df2c:	b280      	uxth	r0, r0
 800df2e:	b292      	uxth	r2, r2
 800df30:	1a12      	subs	r2, r2, r0
 800df32:	445a      	add	r2, fp
 800df34:	f8de 0000 	ldr.w	r0, [lr]
 800df38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df46:	b292      	uxth	r2, r2
 800df48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df4c:	45e1      	cmp	r9, ip
 800df4e:	f84e 2b04 	str.w	r2, [lr], #4
 800df52:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df56:	d2de      	bcs.n	800df16 <quorem+0x42>
 800df58:	9b00      	ldr	r3, [sp, #0]
 800df5a:	58eb      	ldr	r3, [r5, r3]
 800df5c:	b92b      	cbnz	r3, 800df6a <quorem+0x96>
 800df5e:	9b01      	ldr	r3, [sp, #4]
 800df60:	3b04      	subs	r3, #4
 800df62:	429d      	cmp	r5, r3
 800df64:	461a      	mov	r2, r3
 800df66:	d32f      	bcc.n	800dfc8 <quorem+0xf4>
 800df68:	613c      	str	r4, [r7, #16]
 800df6a:	4638      	mov	r0, r7
 800df6c:	f001 fc5e 	bl	800f82c <__mcmp>
 800df70:	2800      	cmp	r0, #0
 800df72:	db25      	blt.n	800dfc0 <quorem+0xec>
 800df74:	4629      	mov	r1, r5
 800df76:	2000      	movs	r0, #0
 800df78:	f858 2b04 	ldr.w	r2, [r8], #4
 800df7c:	f8d1 c000 	ldr.w	ip, [r1]
 800df80:	fa1f fe82 	uxth.w	lr, r2
 800df84:	fa1f f38c 	uxth.w	r3, ip
 800df88:	eba3 030e 	sub.w	r3, r3, lr
 800df8c:	4403      	add	r3, r0
 800df8e:	0c12      	lsrs	r2, r2, #16
 800df90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df98:	b29b      	uxth	r3, r3
 800df9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df9e:	45c1      	cmp	r9, r8
 800dfa0:	f841 3b04 	str.w	r3, [r1], #4
 800dfa4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dfa8:	d2e6      	bcs.n	800df78 <quorem+0xa4>
 800dfaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfb2:	b922      	cbnz	r2, 800dfbe <quorem+0xea>
 800dfb4:	3b04      	subs	r3, #4
 800dfb6:	429d      	cmp	r5, r3
 800dfb8:	461a      	mov	r2, r3
 800dfba:	d30b      	bcc.n	800dfd4 <quorem+0x100>
 800dfbc:	613c      	str	r4, [r7, #16]
 800dfbe:	3601      	adds	r6, #1
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	b003      	add	sp, #12
 800dfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc8:	6812      	ldr	r2, [r2, #0]
 800dfca:	3b04      	subs	r3, #4
 800dfcc:	2a00      	cmp	r2, #0
 800dfce:	d1cb      	bne.n	800df68 <quorem+0x94>
 800dfd0:	3c01      	subs	r4, #1
 800dfd2:	e7c6      	b.n	800df62 <quorem+0x8e>
 800dfd4:	6812      	ldr	r2, [r2, #0]
 800dfd6:	3b04      	subs	r3, #4
 800dfd8:	2a00      	cmp	r2, #0
 800dfda:	d1ef      	bne.n	800dfbc <quorem+0xe8>
 800dfdc:	3c01      	subs	r4, #1
 800dfde:	e7ea      	b.n	800dfb6 <quorem+0xe2>
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	e7ee      	b.n	800dfc2 <quorem+0xee>
 800dfe4:	0000      	movs	r0, r0
	...

0800dfe8 <_dtoa_r>:
 800dfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfec:	69c7      	ldr	r7, [r0, #28]
 800dfee:	b097      	sub	sp, #92	@ 0x5c
 800dff0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dff4:	ec55 4b10 	vmov	r4, r5, d0
 800dff8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dffa:	9107      	str	r1, [sp, #28]
 800dffc:	4681      	mov	r9, r0
 800dffe:	920c      	str	r2, [sp, #48]	@ 0x30
 800e000:	9311      	str	r3, [sp, #68]	@ 0x44
 800e002:	b97f      	cbnz	r7, 800e024 <_dtoa_r+0x3c>
 800e004:	2010      	movs	r0, #16
 800e006:	f7fe f949 	bl	800c29c <malloc>
 800e00a:	4602      	mov	r2, r0
 800e00c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e010:	b920      	cbnz	r0, 800e01c <_dtoa_r+0x34>
 800e012:	4ba9      	ldr	r3, [pc, #676]	@ (800e2b8 <_dtoa_r+0x2d0>)
 800e014:	21ef      	movs	r1, #239	@ 0xef
 800e016:	48a9      	ldr	r0, [pc, #676]	@ (800e2bc <_dtoa_r+0x2d4>)
 800e018:	f7ff ff3e 	bl	800de98 <__assert_func>
 800e01c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e020:	6007      	str	r7, [r0, #0]
 800e022:	60c7      	str	r7, [r0, #12]
 800e024:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e028:	6819      	ldr	r1, [r3, #0]
 800e02a:	b159      	cbz	r1, 800e044 <_dtoa_r+0x5c>
 800e02c:	685a      	ldr	r2, [r3, #4]
 800e02e:	604a      	str	r2, [r1, #4]
 800e030:	2301      	movs	r3, #1
 800e032:	4093      	lsls	r3, r2
 800e034:	608b      	str	r3, [r1, #8]
 800e036:	4648      	mov	r0, r9
 800e038:	f001 f97c 	bl	800f334 <_Bfree>
 800e03c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e040:	2200      	movs	r2, #0
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	1e2b      	subs	r3, r5, #0
 800e046:	bfb9      	ittee	lt
 800e048:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e04c:	9305      	strlt	r3, [sp, #20]
 800e04e:	2300      	movge	r3, #0
 800e050:	6033      	strge	r3, [r6, #0]
 800e052:	9f05      	ldr	r7, [sp, #20]
 800e054:	4b9a      	ldr	r3, [pc, #616]	@ (800e2c0 <_dtoa_r+0x2d8>)
 800e056:	bfbc      	itt	lt
 800e058:	2201      	movlt	r2, #1
 800e05a:	6032      	strlt	r2, [r6, #0]
 800e05c:	43bb      	bics	r3, r7
 800e05e:	d112      	bne.n	800e086 <_dtoa_r+0x9e>
 800e060:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e062:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e066:	6013      	str	r3, [r2, #0]
 800e068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e06c:	4323      	orrs	r3, r4
 800e06e:	f000 855a 	beq.w	800eb26 <_dtoa_r+0xb3e>
 800e072:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e074:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e2d4 <_dtoa_r+0x2ec>
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 855c 	beq.w	800eb36 <_dtoa_r+0xb4e>
 800e07e:	f10a 0303 	add.w	r3, sl, #3
 800e082:	f000 bd56 	b.w	800eb32 <_dtoa_r+0xb4a>
 800e086:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e08a:	2200      	movs	r2, #0
 800e08c:	ec51 0b17 	vmov	r0, r1, d7
 800e090:	2300      	movs	r3, #0
 800e092:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e096:	f7f2 fd27 	bl	8000ae8 <__aeabi_dcmpeq>
 800e09a:	4680      	mov	r8, r0
 800e09c:	b158      	cbz	r0, 800e0b6 <_dtoa_r+0xce>
 800e09e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	6013      	str	r3, [r2, #0]
 800e0a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e0a6:	b113      	cbz	r3, 800e0ae <_dtoa_r+0xc6>
 800e0a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e0aa:	4b86      	ldr	r3, [pc, #536]	@ (800e2c4 <_dtoa_r+0x2dc>)
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e2d8 <_dtoa_r+0x2f0>
 800e0b2:	f000 bd40 	b.w	800eb36 <_dtoa_r+0xb4e>
 800e0b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e0ba:	aa14      	add	r2, sp, #80	@ 0x50
 800e0bc:	a915      	add	r1, sp, #84	@ 0x54
 800e0be:	4648      	mov	r0, r9
 800e0c0:	f001 fcd4 	bl	800fa6c <__d2b>
 800e0c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e0c8:	9002      	str	r0, [sp, #8]
 800e0ca:	2e00      	cmp	r6, #0
 800e0cc:	d078      	beq.n	800e1c0 <_dtoa_r+0x1d8>
 800e0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e0d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e0dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	4b76      	ldr	r3, [pc, #472]	@ (800e2c8 <_dtoa_r+0x2e0>)
 800e0ee:	f7f2 f8db 	bl	80002a8 <__aeabi_dsub>
 800e0f2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e2a0 <_dtoa_r+0x2b8>)
 800e0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f8:	f7f2 fa8e 	bl	8000618 <__aeabi_dmul>
 800e0fc:	a36a      	add	r3, pc, #424	@ (adr r3, 800e2a8 <_dtoa_r+0x2c0>)
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	f7f2 f8d3 	bl	80002ac <__adddf3>
 800e106:	4604      	mov	r4, r0
 800e108:	4630      	mov	r0, r6
 800e10a:	460d      	mov	r5, r1
 800e10c:	f7f2 fa1a 	bl	8000544 <__aeabi_i2d>
 800e110:	a367      	add	r3, pc, #412	@ (adr r3, 800e2b0 <_dtoa_r+0x2c8>)
 800e112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e116:	f7f2 fa7f 	bl	8000618 <__aeabi_dmul>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4620      	mov	r0, r4
 800e120:	4629      	mov	r1, r5
 800e122:	f7f2 f8c3 	bl	80002ac <__adddf3>
 800e126:	4604      	mov	r4, r0
 800e128:	460d      	mov	r5, r1
 800e12a:	f7f2 fd25 	bl	8000b78 <__aeabi_d2iz>
 800e12e:	2200      	movs	r2, #0
 800e130:	4607      	mov	r7, r0
 800e132:	2300      	movs	r3, #0
 800e134:	4620      	mov	r0, r4
 800e136:	4629      	mov	r1, r5
 800e138:	f7f2 fce0 	bl	8000afc <__aeabi_dcmplt>
 800e13c:	b140      	cbz	r0, 800e150 <_dtoa_r+0x168>
 800e13e:	4638      	mov	r0, r7
 800e140:	f7f2 fa00 	bl	8000544 <__aeabi_i2d>
 800e144:	4622      	mov	r2, r4
 800e146:	462b      	mov	r3, r5
 800e148:	f7f2 fcce 	bl	8000ae8 <__aeabi_dcmpeq>
 800e14c:	b900      	cbnz	r0, 800e150 <_dtoa_r+0x168>
 800e14e:	3f01      	subs	r7, #1
 800e150:	2f16      	cmp	r7, #22
 800e152:	d852      	bhi.n	800e1fa <_dtoa_r+0x212>
 800e154:	4b5d      	ldr	r3, [pc, #372]	@ (800e2cc <_dtoa_r+0x2e4>)
 800e156:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e162:	f7f2 fccb 	bl	8000afc <__aeabi_dcmplt>
 800e166:	2800      	cmp	r0, #0
 800e168:	d049      	beq.n	800e1fe <_dtoa_r+0x216>
 800e16a:	3f01      	subs	r7, #1
 800e16c:	2300      	movs	r3, #0
 800e16e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e170:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e172:	1b9b      	subs	r3, r3, r6
 800e174:	1e5a      	subs	r2, r3, #1
 800e176:	bf45      	ittet	mi
 800e178:	f1c3 0301 	rsbmi	r3, r3, #1
 800e17c:	9300      	strmi	r3, [sp, #0]
 800e17e:	2300      	movpl	r3, #0
 800e180:	2300      	movmi	r3, #0
 800e182:	9206      	str	r2, [sp, #24]
 800e184:	bf54      	ite	pl
 800e186:	9300      	strpl	r3, [sp, #0]
 800e188:	9306      	strmi	r3, [sp, #24]
 800e18a:	2f00      	cmp	r7, #0
 800e18c:	db39      	blt.n	800e202 <_dtoa_r+0x21a>
 800e18e:	9b06      	ldr	r3, [sp, #24]
 800e190:	970d      	str	r7, [sp, #52]	@ 0x34
 800e192:	443b      	add	r3, r7
 800e194:	9306      	str	r3, [sp, #24]
 800e196:	2300      	movs	r3, #0
 800e198:	9308      	str	r3, [sp, #32]
 800e19a:	9b07      	ldr	r3, [sp, #28]
 800e19c:	2b09      	cmp	r3, #9
 800e19e:	d863      	bhi.n	800e268 <_dtoa_r+0x280>
 800e1a0:	2b05      	cmp	r3, #5
 800e1a2:	bfc4      	itt	gt
 800e1a4:	3b04      	subgt	r3, #4
 800e1a6:	9307      	strgt	r3, [sp, #28]
 800e1a8:	9b07      	ldr	r3, [sp, #28]
 800e1aa:	f1a3 0302 	sub.w	r3, r3, #2
 800e1ae:	bfcc      	ite	gt
 800e1b0:	2400      	movgt	r4, #0
 800e1b2:	2401      	movle	r4, #1
 800e1b4:	2b03      	cmp	r3, #3
 800e1b6:	d863      	bhi.n	800e280 <_dtoa_r+0x298>
 800e1b8:	e8df f003 	tbb	[pc, r3]
 800e1bc:	2b375452 	.word	0x2b375452
 800e1c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e1c4:	441e      	add	r6, r3
 800e1c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e1ca:	2b20      	cmp	r3, #32
 800e1cc:	bfc1      	itttt	gt
 800e1ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e1d2:	409f      	lslgt	r7, r3
 800e1d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e1d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e1dc:	bfd6      	itet	le
 800e1de:	f1c3 0320 	rsble	r3, r3, #32
 800e1e2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e1e6:	fa04 f003 	lslle.w	r0, r4, r3
 800e1ea:	f7f2 f99b 	bl	8000524 <__aeabi_ui2d>
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1f4:	3e01      	subs	r6, #1
 800e1f6:	9212      	str	r2, [sp, #72]	@ 0x48
 800e1f8:	e776      	b.n	800e0e8 <_dtoa_r+0x100>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e7b7      	b.n	800e16e <_dtoa_r+0x186>
 800e1fe:	9010      	str	r0, [sp, #64]	@ 0x40
 800e200:	e7b6      	b.n	800e170 <_dtoa_r+0x188>
 800e202:	9b00      	ldr	r3, [sp, #0]
 800e204:	1bdb      	subs	r3, r3, r7
 800e206:	9300      	str	r3, [sp, #0]
 800e208:	427b      	negs	r3, r7
 800e20a:	9308      	str	r3, [sp, #32]
 800e20c:	2300      	movs	r3, #0
 800e20e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e210:	e7c3      	b.n	800e19a <_dtoa_r+0x1b2>
 800e212:	2301      	movs	r3, #1
 800e214:	9309      	str	r3, [sp, #36]	@ 0x24
 800e216:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e218:	eb07 0b03 	add.w	fp, r7, r3
 800e21c:	f10b 0301 	add.w	r3, fp, #1
 800e220:	2b01      	cmp	r3, #1
 800e222:	9303      	str	r3, [sp, #12]
 800e224:	bfb8      	it	lt
 800e226:	2301      	movlt	r3, #1
 800e228:	e006      	b.n	800e238 <_dtoa_r+0x250>
 800e22a:	2301      	movs	r3, #1
 800e22c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e22e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e230:	2b00      	cmp	r3, #0
 800e232:	dd28      	ble.n	800e286 <_dtoa_r+0x29e>
 800e234:	469b      	mov	fp, r3
 800e236:	9303      	str	r3, [sp, #12]
 800e238:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e23c:	2100      	movs	r1, #0
 800e23e:	2204      	movs	r2, #4
 800e240:	f102 0514 	add.w	r5, r2, #20
 800e244:	429d      	cmp	r5, r3
 800e246:	d926      	bls.n	800e296 <_dtoa_r+0x2ae>
 800e248:	6041      	str	r1, [r0, #4]
 800e24a:	4648      	mov	r0, r9
 800e24c:	f001 f832 	bl	800f2b4 <_Balloc>
 800e250:	4682      	mov	sl, r0
 800e252:	2800      	cmp	r0, #0
 800e254:	d142      	bne.n	800e2dc <_dtoa_r+0x2f4>
 800e256:	4b1e      	ldr	r3, [pc, #120]	@ (800e2d0 <_dtoa_r+0x2e8>)
 800e258:	4602      	mov	r2, r0
 800e25a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e25e:	e6da      	b.n	800e016 <_dtoa_r+0x2e>
 800e260:	2300      	movs	r3, #0
 800e262:	e7e3      	b.n	800e22c <_dtoa_r+0x244>
 800e264:	2300      	movs	r3, #0
 800e266:	e7d5      	b.n	800e214 <_dtoa_r+0x22c>
 800e268:	2401      	movs	r4, #1
 800e26a:	2300      	movs	r3, #0
 800e26c:	9307      	str	r3, [sp, #28]
 800e26e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e270:	f04f 3bff 	mov.w	fp, #4294967295
 800e274:	2200      	movs	r2, #0
 800e276:	f8cd b00c 	str.w	fp, [sp, #12]
 800e27a:	2312      	movs	r3, #18
 800e27c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e27e:	e7db      	b.n	800e238 <_dtoa_r+0x250>
 800e280:	2301      	movs	r3, #1
 800e282:	9309      	str	r3, [sp, #36]	@ 0x24
 800e284:	e7f4      	b.n	800e270 <_dtoa_r+0x288>
 800e286:	f04f 0b01 	mov.w	fp, #1
 800e28a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e28e:	465b      	mov	r3, fp
 800e290:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e294:	e7d0      	b.n	800e238 <_dtoa_r+0x250>
 800e296:	3101      	adds	r1, #1
 800e298:	0052      	lsls	r2, r2, #1
 800e29a:	e7d1      	b.n	800e240 <_dtoa_r+0x258>
 800e29c:	f3af 8000 	nop.w
 800e2a0:	636f4361 	.word	0x636f4361
 800e2a4:	3fd287a7 	.word	0x3fd287a7
 800e2a8:	8b60c8b3 	.word	0x8b60c8b3
 800e2ac:	3fc68a28 	.word	0x3fc68a28
 800e2b0:	509f79fb 	.word	0x509f79fb
 800e2b4:	3fd34413 	.word	0x3fd34413
 800e2b8:	0801046a 	.word	0x0801046a
 800e2bc:	0801052c 	.word	0x0801052c
 800e2c0:	7ff00000 	.word	0x7ff00000
 800e2c4:	08010447 	.word	0x08010447
 800e2c8:	3ff80000 	.word	0x3ff80000
 800e2cc:	080107e8 	.word	0x080107e8
 800e2d0:	08010584 	.word	0x08010584
 800e2d4:	08010528 	.word	0x08010528
 800e2d8:	08010446 	.word	0x08010446
 800e2dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2e0:	6018      	str	r0, [r3, #0]
 800e2e2:	9b03      	ldr	r3, [sp, #12]
 800e2e4:	2b0e      	cmp	r3, #14
 800e2e6:	f200 80a1 	bhi.w	800e42c <_dtoa_r+0x444>
 800e2ea:	2c00      	cmp	r4, #0
 800e2ec:	f000 809e 	beq.w	800e42c <_dtoa_r+0x444>
 800e2f0:	2f00      	cmp	r7, #0
 800e2f2:	dd33      	ble.n	800e35c <_dtoa_r+0x374>
 800e2f4:	4b9c      	ldr	r3, [pc, #624]	@ (800e568 <_dtoa_r+0x580>)
 800e2f6:	f007 020f 	and.w	r2, r7, #15
 800e2fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2fe:	ed93 7b00 	vldr	d7, [r3]
 800e302:	05f8      	lsls	r0, r7, #23
 800e304:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e308:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e30c:	d516      	bpl.n	800e33c <_dtoa_r+0x354>
 800e30e:	4b97      	ldr	r3, [pc, #604]	@ (800e56c <_dtoa_r+0x584>)
 800e310:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e314:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e318:	f7f2 faa8 	bl	800086c <__aeabi_ddiv>
 800e31c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e320:	f004 040f 	and.w	r4, r4, #15
 800e324:	2603      	movs	r6, #3
 800e326:	4d91      	ldr	r5, [pc, #580]	@ (800e56c <_dtoa_r+0x584>)
 800e328:	b954      	cbnz	r4, 800e340 <_dtoa_r+0x358>
 800e32a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e32e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e332:	f7f2 fa9b 	bl	800086c <__aeabi_ddiv>
 800e336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e33a:	e028      	b.n	800e38e <_dtoa_r+0x3a6>
 800e33c:	2602      	movs	r6, #2
 800e33e:	e7f2      	b.n	800e326 <_dtoa_r+0x33e>
 800e340:	07e1      	lsls	r1, r4, #31
 800e342:	d508      	bpl.n	800e356 <_dtoa_r+0x36e>
 800e344:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e348:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e34c:	f7f2 f964 	bl	8000618 <__aeabi_dmul>
 800e350:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e354:	3601      	adds	r6, #1
 800e356:	1064      	asrs	r4, r4, #1
 800e358:	3508      	adds	r5, #8
 800e35a:	e7e5      	b.n	800e328 <_dtoa_r+0x340>
 800e35c:	f000 80af 	beq.w	800e4be <_dtoa_r+0x4d6>
 800e360:	427c      	negs	r4, r7
 800e362:	4b81      	ldr	r3, [pc, #516]	@ (800e568 <_dtoa_r+0x580>)
 800e364:	4d81      	ldr	r5, [pc, #516]	@ (800e56c <_dtoa_r+0x584>)
 800e366:	f004 020f 	and.w	r2, r4, #15
 800e36a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e372:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e376:	f7f2 f94f 	bl	8000618 <__aeabi_dmul>
 800e37a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e37e:	1124      	asrs	r4, r4, #4
 800e380:	2300      	movs	r3, #0
 800e382:	2602      	movs	r6, #2
 800e384:	2c00      	cmp	r4, #0
 800e386:	f040 808f 	bne.w	800e4a8 <_dtoa_r+0x4c0>
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1d3      	bne.n	800e336 <_dtoa_r+0x34e>
 800e38e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e390:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e394:	2b00      	cmp	r3, #0
 800e396:	f000 8094 	beq.w	800e4c2 <_dtoa_r+0x4da>
 800e39a:	4b75      	ldr	r3, [pc, #468]	@ (800e570 <_dtoa_r+0x588>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	4620      	mov	r0, r4
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	f7f2 fbab 	bl	8000afc <__aeabi_dcmplt>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	f000 808b 	beq.w	800e4c2 <_dtoa_r+0x4da>
 800e3ac:	9b03      	ldr	r3, [sp, #12]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	f000 8087 	beq.w	800e4c2 <_dtoa_r+0x4da>
 800e3b4:	f1bb 0f00 	cmp.w	fp, #0
 800e3b8:	dd34      	ble.n	800e424 <_dtoa_r+0x43c>
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	4b6d      	ldr	r3, [pc, #436]	@ (800e574 <_dtoa_r+0x58c>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	f7f2 f929 	bl	8000618 <__aeabi_dmul>
 800e3c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3ca:	f107 38ff 	add.w	r8, r7, #4294967295
 800e3ce:	3601      	adds	r6, #1
 800e3d0:	465c      	mov	r4, fp
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f7f2 f8b6 	bl	8000544 <__aeabi_i2d>
 800e3d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3dc:	f7f2 f91c 	bl	8000618 <__aeabi_dmul>
 800e3e0:	4b65      	ldr	r3, [pc, #404]	@ (800e578 <_dtoa_r+0x590>)
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f7f1 ff62 	bl	80002ac <__adddf3>
 800e3e8:	4605      	mov	r5, r0
 800e3ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3ee:	2c00      	cmp	r4, #0
 800e3f0:	d16a      	bne.n	800e4c8 <_dtoa_r+0x4e0>
 800e3f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3f6:	4b61      	ldr	r3, [pc, #388]	@ (800e57c <_dtoa_r+0x594>)
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f7f1 ff55 	bl	80002a8 <__aeabi_dsub>
 800e3fe:	4602      	mov	r2, r0
 800e400:	460b      	mov	r3, r1
 800e402:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e406:	462a      	mov	r2, r5
 800e408:	4633      	mov	r3, r6
 800e40a:	f7f2 fb95 	bl	8000b38 <__aeabi_dcmpgt>
 800e40e:	2800      	cmp	r0, #0
 800e410:	f040 8298 	bne.w	800e944 <_dtoa_r+0x95c>
 800e414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e418:	462a      	mov	r2, r5
 800e41a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e41e:	f7f2 fb6d 	bl	8000afc <__aeabi_dcmplt>
 800e422:	bb38      	cbnz	r0, 800e474 <_dtoa_r+0x48c>
 800e424:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e428:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e42c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f2c0 8157 	blt.w	800e6e2 <_dtoa_r+0x6fa>
 800e434:	2f0e      	cmp	r7, #14
 800e436:	f300 8154 	bgt.w	800e6e2 <_dtoa_r+0x6fa>
 800e43a:	4b4b      	ldr	r3, [pc, #300]	@ (800e568 <_dtoa_r+0x580>)
 800e43c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e440:	ed93 7b00 	vldr	d7, [r3]
 800e444:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e446:	2b00      	cmp	r3, #0
 800e448:	ed8d 7b00 	vstr	d7, [sp]
 800e44c:	f280 80e5 	bge.w	800e61a <_dtoa_r+0x632>
 800e450:	9b03      	ldr	r3, [sp, #12]
 800e452:	2b00      	cmp	r3, #0
 800e454:	f300 80e1 	bgt.w	800e61a <_dtoa_r+0x632>
 800e458:	d10c      	bne.n	800e474 <_dtoa_r+0x48c>
 800e45a:	4b48      	ldr	r3, [pc, #288]	@ (800e57c <_dtoa_r+0x594>)
 800e45c:	2200      	movs	r2, #0
 800e45e:	ec51 0b17 	vmov	r0, r1, d7
 800e462:	f7f2 f8d9 	bl	8000618 <__aeabi_dmul>
 800e466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e46a:	f7f2 fb5b 	bl	8000b24 <__aeabi_dcmpge>
 800e46e:	2800      	cmp	r0, #0
 800e470:	f000 8266 	beq.w	800e940 <_dtoa_r+0x958>
 800e474:	2400      	movs	r4, #0
 800e476:	4625      	mov	r5, r4
 800e478:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e47a:	4656      	mov	r6, sl
 800e47c:	ea6f 0803 	mvn.w	r8, r3
 800e480:	2700      	movs	r7, #0
 800e482:	4621      	mov	r1, r4
 800e484:	4648      	mov	r0, r9
 800e486:	f000 ff55 	bl	800f334 <_Bfree>
 800e48a:	2d00      	cmp	r5, #0
 800e48c:	f000 80bd 	beq.w	800e60a <_dtoa_r+0x622>
 800e490:	b12f      	cbz	r7, 800e49e <_dtoa_r+0x4b6>
 800e492:	42af      	cmp	r7, r5
 800e494:	d003      	beq.n	800e49e <_dtoa_r+0x4b6>
 800e496:	4639      	mov	r1, r7
 800e498:	4648      	mov	r0, r9
 800e49a:	f000 ff4b 	bl	800f334 <_Bfree>
 800e49e:	4629      	mov	r1, r5
 800e4a0:	4648      	mov	r0, r9
 800e4a2:	f000 ff47 	bl	800f334 <_Bfree>
 800e4a6:	e0b0      	b.n	800e60a <_dtoa_r+0x622>
 800e4a8:	07e2      	lsls	r2, r4, #31
 800e4aa:	d505      	bpl.n	800e4b8 <_dtoa_r+0x4d0>
 800e4ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4b0:	f7f2 f8b2 	bl	8000618 <__aeabi_dmul>
 800e4b4:	3601      	adds	r6, #1
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	1064      	asrs	r4, r4, #1
 800e4ba:	3508      	adds	r5, #8
 800e4bc:	e762      	b.n	800e384 <_dtoa_r+0x39c>
 800e4be:	2602      	movs	r6, #2
 800e4c0:	e765      	b.n	800e38e <_dtoa_r+0x3a6>
 800e4c2:	9c03      	ldr	r4, [sp, #12]
 800e4c4:	46b8      	mov	r8, r7
 800e4c6:	e784      	b.n	800e3d2 <_dtoa_r+0x3ea>
 800e4c8:	4b27      	ldr	r3, [pc, #156]	@ (800e568 <_dtoa_r+0x580>)
 800e4ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4d4:	4454      	add	r4, sl
 800e4d6:	2900      	cmp	r1, #0
 800e4d8:	d054      	beq.n	800e584 <_dtoa_r+0x59c>
 800e4da:	4929      	ldr	r1, [pc, #164]	@ (800e580 <_dtoa_r+0x598>)
 800e4dc:	2000      	movs	r0, #0
 800e4de:	f7f2 f9c5 	bl	800086c <__aeabi_ddiv>
 800e4e2:	4633      	mov	r3, r6
 800e4e4:	462a      	mov	r2, r5
 800e4e6:	f7f1 fedf 	bl	80002a8 <__aeabi_dsub>
 800e4ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e4ee:	4656      	mov	r6, sl
 800e4f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4f4:	f7f2 fb40 	bl	8000b78 <__aeabi_d2iz>
 800e4f8:	4605      	mov	r5, r0
 800e4fa:	f7f2 f823 	bl	8000544 <__aeabi_i2d>
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e506:	f7f1 fecf 	bl	80002a8 <__aeabi_dsub>
 800e50a:	3530      	adds	r5, #48	@ 0x30
 800e50c:	4602      	mov	r2, r0
 800e50e:	460b      	mov	r3, r1
 800e510:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e514:	f806 5b01 	strb.w	r5, [r6], #1
 800e518:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e51c:	f7f2 faee 	bl	8000afc <__aeabi_dcmplt>
 800e520:	2800      	cmp	r0, #0
 800e522:	d172      	bne.n	800e60a <_dtoa_r+0x622>
 800e524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e528:	4911      	ldr	r1, [pc, #68]	@ (800e570 <_dtoa_r+0x588>)
 800e52a:	2000      	movs	r0, #0
 800e52c:	f7f1 febc 	bl	80002a8 <__aeabi_dsub>
 800e530:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e534:	f7f2 fae2 	bl	8000afc <__aeabi_dcmplt>
 800e538:	2800      	cmp	r0, #0
 800e53a:	f040 80b4 	bne.w	800e6a6 <_dtoa_r+0x6be>
 800e53e:	42a6      	cmp	r6, r4
 800e540:	f43f af70 	beq.w	800e424 <_dtoa_r+0x43c>
 800e544:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e548:	4b0a      	ldr	r3, [pc, #40]	@ (800e574 <_dtoa_r+0x58c>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	f7f2 f864 	bl	8000618 <__aeabi_dmul>
 800e550:	4b08      	ldr	r3, [pc, #32]	@ (800e574 <_dtoa_r+0x58c>)
 800e552:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e556:	2200      	movs	r2, #0
 800e558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e55c:	f7f2 f85c 	bl	8000618 <__aeabi_dmul>
 800e560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e564:	e7c4      	b.n	800e4f0 <_dtoa_r+0x508>
 800e566:	bf00      	nop
 800e568:	080107e8 	.word	0x080107e8
 800e56c:	080107c0 	.word	0x080107c0
 800e570:	3ff00000 	.word	0x3ff00000
 800e574:	40240000 	.word	0x40240000
 800e578:	401c0000 	.word	0x401c0000
 800e57c:	40140000 	.word	0x40140000
 800e580:	3fe00000 	.word	0x3fe00000
 800e584:	4631      	mov	r1, r6
 800e586:	4628      	mov	r0, r5
 800e588:	f7f2 f846 	bl	8000618 <__aeabi_dmul>
 800e58c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e590:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e592:	4656      	mov	r6, sl
 800e594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e598:	f7f2 faee 	bl	8000b78 <__aeabi_d2iz>
 800e59c:	4605      	mov	r5, r0
 800e59e:	f7f1 ffd1 	bl	8000544 <__aeabi_i2d>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5aa:	f7f1 fe7d 	bl	80002a8 <__aeabi_dsub>
 800e5ae:	3530      	adds	r5, #48	@ 0x30
 800e5b0:	f806 5b01 	strb.w	r5, [r6], #1
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	42a6      	cmp	r6, r4
 800e5ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e5be:	f04f 0200 	mov.w	r2, #0
 800e5c2:	d124      	bne.n	800e60e <_dtoa_r+0x626>
 800e5c4:	4baf      	ldr	r3, [pc, #700]	@ (800e884 <_dtoa_r+0x89c>)
 800e5c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e5ca:	f7f1 fe6f 	bl	80002ac <__adddf3>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5d6:	f7f2 faaf 	bl	8000b38 <__aeabi_dcmpgt>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	d163      	bne.n	800e6a6 <_dtoa_r+0x6be>
 800e5de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e5e2:	49a8      	ldr	r1, [pc, #672]	@ (800e884 <_dtoa_r+0x89c>)
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	f7f1 fe5f 	bl	80002a8 <__aeabi_dsub>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5f2:	f7f2 fa83 	bl	8000afc <__aeabi_dcmplt>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	f43f af14 	beq.w	800e424 <_dtoa_r+0x43c>
 800e5fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e5fe:	1e73      	subs	r3, r6, #1
 800e600:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e602:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e606:	2b30      	cmp	r3, #48	@ 0x30
 800e608:	d0f8      	beq.n	800e5fc <_dtoa_r+0x614>
 800e60a:	4647      	mov	r7, r8
 800e60c:	e03b      	b.n	800e686 <_dtoa_r+0x69e>
 800e60e:	4b9e      	ldr	r3, [pc, #632]	@ (800e888 <_dtoa_r+0x8a0>)
 800e610:	f7f2 f802 	bl	8000618 <__aeabi_dmul>
 800e614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e618:	e7bc      	b.n	800e594 <_dtoa_r+0x5ac>
 800e61a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e61e:	4656      	mov	r6, sl
 800e620:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e624:	4620      	mov	r0, r4
 800e626:	4629      	mov	r1, r5
 800e628:	f7f2 f920 	bl	800086c <__aeabi_ddiv>
 800e62c:	f7f2 faa4 	bl	8000b78 <__aeabi_d2iz>
 800e630:	4680      	mov	r8, r0
 800e632:	f7f1 ff87 	bl	8000544 <__aeabi_i2d>
 800e636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e63a:	f7f1 ffed 	bl	8000618 <__aeabi_dmul>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	4620      	mov	r0, r4
 800e644:	4629      	mov	r1, r5
 800e646:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e64a:	f7f1 fe2d 	bl	80002a8 <__aeabi_dsub>
 800e64e:	f806 4b01 	strb.w	r4, [r6], #1
 800e652:	9d03      	ldr	r5, [sp, #12]
 800e654:	eba6 040a 	sub.w	r4, r6, sl
 800e658:	42a5      	cmp	r5, r4
 800e65a:	4602      	mov	r2, r0
 800e65c:	460b      	mov	r3, r1
 800e65e:	d133      	bne.n	800e6c8 <_dtoa_r+0x6e0>
 800e660:	f7f1 fe24 	bl	80002ac <__adddf3>
 800e664:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e668:	4604      	mov	r4, r0
 800e66a:	460d      	mov	r5, r1
 800e66c:	f7f2 fa64 	bl	8000b38 <__aeabi_dcmpgt>
 800e670:	b9c0      	cbnz	r0, 800e6a4 <_dtoa_r+0x6bc>
 800e672:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e676:	4620      	mov	r0, r4
 800e678:	4629      	mov	r1, r5
 800e67a:	f7f2 fa35 	bl	8000ae8 <__aeabi_dcmpeq>
 800e67e:	b110      	cbz	r0, 800e686 <_dtoa_r+0x69e>
 800e680:	f018 0f01 	tst.w	r8, #1
 800e684:	d10e      	bne.n	800e6a4 <_dtoa_r+0x6bc>
 800e686:	9902      	ldr	r1, [sp, #8]
 800e688:	4648      	mov	r0, r9
 800e68a:	f000 fe53 	bl	800f334 <_Bfree>
 800e68e:	2300      	movs	r3, #0
 800e690:	7033      	strb	r3, [r6, #0]
 800e692:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e694:	3701      	adds	r7, #1
 800e696:	601f      	str	r7, [r3, #0]
 800e698:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 824b 	beq.w	800eb36 <_dtoa_r+0xb4e>
 800e6a0:	601e      	str	r6, [r3, #0]
 800e6a2:	e248      	b.n	800eb36 <_dtoa_r+0xb4e>
 800e6a4:	46b8      	mov	r8, r7
 800e6a6:	4633      	mov	r3, r6
 800e6a8:	461e      	mov	r6, r3
 800e6aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6ae:	2a39      	cmp	r2, #57	@ 0x39
 800e6b0:	d106      	bne.n	800e6c0 <_dtoa_r+0x6d8>
 800e6b2:	459a      	cmp	sl, r3
 800e6b4:	d1f8      	bne.n	800e6a8 <_dtoa_r+0x6c0>
 800e6b6:	2230      	movs	r2, #48	@ 0x30
 800e6b8:	f108 0801 	add.w	r8, r8, #1
 800e6bc:	f88a 2000 	strb.w	r2, [sl]
 800e6c0:	781a      	ldrb	r2, [r3, #0]
 800e6c2:	3201      	adds	r2, #1
 800e6c4:	701a      	strb	r2, [r3, #0]
 800e6c6:	e7a0      	b.n	800e60a <_dtoa_r+0x622>
 800e6c8:	4b6f      	ldr	r3, [pc, #444]	@ (800e888 <_dtoa_r+0x8a0>)
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f7f1 ffa4 	bl	8000618 <__aeabi_dmul>
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	460d      	mov	r5, r1
 800e6d8:	f7f2 fa06 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d09f      	beq.n	800e620 <_dtoa_r+0x638>
 800e6e0:	e7d1      	b.n	800e686 <_dtoa_r+0x69e>
 800e6e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6e4:	2a00      	cmp	r2, #0
 800e6e6:	f000 80ea 	beq.w	800e8be <_dtoa_r+0x8d6>
 800e6ea:	9a07      	ldr	r2, [sp, #28]
 800e6ec:	2a01      	cmp	r2, #1
 800e6ee:	f300 80cd 	bgt.w	800e88c <_dtoa_r+0x8a4>
 800e6f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e6f4:	2a00      	cmp	r2, #0
 800e6f6:	f000 80c1 	beq.w	800e87c <_dtoa_r+0x894>
 800e6fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e6fe:	9c08      	ldr	r4, [sp, #32]
 800e700:	9e00      	ldr	r6, [sp, #0]
 800e702:	9a00      	ldr	r2, [sp, #0]
 800e704:	441a      	add	r2, r3
 800e706:	9200      	str	r2, [sp, #0]
 800e708:	9a06      	ldr	r2, [sp, #24]
 800e70a:	2101      	movs	r1, #1
 800e70c:	441a      	add	r2, r3
 800e70e:	4648      	mov	r0, r9
 800e710:	9206      	str	r2, [sp, #24]
 800e712:	f000 ff0d 	bl	800f530 <__i2b>
 800e716:	4605      	mov	r5, r0
 800e718:	b166      	cbz	r6, 800e734 <_dtoa_r+0x74c>
 800e71a:	9b06      	ldr	r3, [sp, #24]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	dd09      	ble.n	800e734 <_dtoa_r+0x74c>
 800e720:	42b3      	cmp	r3, r6
 800e722:	9a00      	ldr	r2, [sp, #0]
 800e724:	bfa8      	it	ge
 800e726:	4633      	movge	r3, r6
 800e728:	1ad2      	subs	r2, r2, r3
 800e72a:	9200      	str	r2, [sp, #0]
 800e72c:	9a06      	ldr	r2, [sp, #24]
 800e72e:	1af6      	subs	r6, r6, r3
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	9306      	str	r3, [sp, #24]
 800e734:	9b08      	ldr	r3, [sp, #32]
 800e736:	b30b      	cbz	r3, 800e77c <_dtoa_r+0x794>
 800e738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	f000 80c6 	beq.w	800e8cc <_dtoa_r+0x8e4>
 800e740:	2c00      	cmp	r4, #0
 800e742:	f000 80c0 	beq.w	800e8c6 <_dtoa_r+0x8de>
 800e746:	4629      	mov	r1, r5
 800e748:	4622      	mov	r2, r4
 800e74a:	4648      	mov	r0, r9
 800e74c:	f000 ffa8 	bl	800f6a0 <__pow5mult>
 800e750:	9a02      	ldr	r2, [sp, #8]
 800e752:	4601      	mov	r1, r0
 800e754:	4605      	mov	r5, r0
 800e756:	4648      	mov	r0, r9
 800e758:	f000 ff00 	bl	800f55c <__multiply>
 800e75c:	9902      	ldr	r1, [sp, #8]
 800e75e:	4680      	mov	r8, r0
 800e760:	4648      	mov	r0, r9
 800e762:	f000 fde7 	bl	800f334 <_Bfree>
 800e766:	9b08      	ldr	r3, [sp, #32]
 800e768:	1b1b      	subs	r3, r3, r4
 800e76a:	9308      	str	r3, [sp, #32]
 800e76c:	f000 80b1 	beq.w	800e8d2 <_dtoa_r+0x8ea>
 800e770:	9a08      	ldr	r2, [sp, #32]
 800e772:	4641      	mov	r1, r8
 800e774:	4648      	mov	r0, r9
 800e776:	f000 ff93 	bl	800f6a0 <__pow5mult>
 800e77a:	9002      	str	r0, [sp, #8]
 800e77c:	2101      	movs	r1, #1
 800e77e:	4648      	mov	r0, r9
 800e780:	f000 fed6 	bl	800f530 <__i2b>
 800e784:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e786:	4604      	mov	r4, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 81d8 	beq.w	800eb3e <_dtoa_r+0xb56>
 800e78e:	461a      	mov	r2, r3
 800e790:	4601      	mov	r1, r0
 800e792:	4648      	mov	r0, r9
 800e794:	f000 ff84 	bl	800f6a0 <__pow5mult>
 800e798:	9b07      	ldr	r3, [sp, #28]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	4604      	mov	r4, r0
 800e79e:	f300 809f 	bgt.w	800e8e0 <_dtoa_r+0x8f8>
 800e7a2:	9b04      	ldr	r3, [sp, #16]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f040 8097 	bne.w	800e8d8 <_dtoa_r+0x8f0>
 800e7aa:	9b05      	ldr	r3, [sp, #20]
 800e7ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	f040 8093 	bne.w	800e8dc <_dtoa_r+0x8f4>
 800e7b6:	9b05      	ldr	r3, [sp, #20]
 800e7b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e7bc:	0d1b      	lsrs	r3, r3, #20
 800e7be:	051b      	lsls	r3, r3, #20
 800e7c0:	b133      	cbz	r3, 800e7d0 <_dtoa_r+0x7e8>
 800e7c2:	9b00      	ldr	r3, [sp, #0]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	9b06      	ldr	r3, [sp, #24]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	9306      	str	r3, [sp, #24]
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	9308      	str	r3, [sp, #32]
 800e7d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f000 81b8 	beq.w	800eb4a <_dtoa_r+0xb62>
 800e7da:	6923      	ldr	r3, [r4, #16]
 800e7dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7e0:	6918      	ldr	r0, [r3, #16]
 800e7e2:	f000 fe59 	bl	800f498 <__hi0bits>
 800e7e6:	f1c0 0020 	rsb	r0, r0, #32
 800e7ea:	9b06      	ldr	r3, [sp, #24]
 800e7ec:	4418      	add	r0, r3
 800e7ee:	f010 001f 	ands.w	r0, r0, #31
 800e7f2:	f000 8082 	beq.w	800e8fa <_dtoa_r+0x912>
 800e7f6:	f1c0 0320 	rsb	r3, r0, #32
 800e7fa:	2b04      	cmp	r3, #4
 800e7fc:	dd73      	ble.n	800e8e6 <_dtoa_r+0x8fe>
 800e7fe:	9b00      	ldr	r3, [sp, #0]
 800e800:	f1c0 001c 	rsb	r0, r0, #28
 800e804:	4403      	add	r3, r0
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	9b06      	ldr	r3, [sp, #24]
 800e80a:	4403      	add	r3, r0
 800e80c:	4406      	add	r6, r0
 800e80e:	9306      	str	r3, [sp, #24]
 800e810:	9b00      	ldr	r3, [sp, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	dd05      	ble.n	800e822 <_dtoa_r+0x83a>
 800e816:	9902      	ldr	r1, [sp, #8]
 800e818:	461a      	mov	r2, r3
 800e81a:	4648      	mov	r0, r9
 800e81c:	f000 ff9a 	bl	800f754 <__lshift>
 800e820:	9002      	str	r0, [sp, #8]
 800e822:	9b06      	ldr	r3, [sp, #24]
 800e824:	2b00      	cmp	r3, #0
 800e826:	dd05      	ble.n	800e834 <_dtoa_r+0x84c>
 800e828:	4621      	mov	r1, r4
 800e82a:	461a      	mov	r2, r3
 800e82c:	4648      	mov	r0, r9
 800e82e:	f000 ff91 	bl	800f754 <__lshift>
 800e832:	4604      	mov	r4, r0
 800e834:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e836:	2b00      	cmp	r3, #0
 800e838:	d061      	beq.n	800e8fe <_dtoa_r+0x916>
 800e83a:	9802      	ldr	r0, [sp, #8]
 800e83c:	4621      	mov	r1, r4
 800e83e:	f000 fff5 	bl	800f82c <__mcmp>
 800e842:	2800      	cmp	r0, #0
 800e844:	da5b      	bge.n	800e8fe <_dtoa_r+0x916>
 800e846:	2300      	movs	r3, #0
 800e848:	9902      	ldr	r1, [sp, #8]
 800e84a:	220a      	movs	r2, #10
 800e84c:	4648      	mov	r0, r9
 800e84e:	f000 fd93 	bl	800f378 <__multadd>
 800e852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e854:	9002      	str	r0, [sp, #8]
 800e856:	f107 38ff 	add.w	r8, r7, #4294967295
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f000 8177 	beq.w	800eb4e <_dtoa_r+0xb66>
 800e860:	4629      	mov	r1, r5
 800e862:	2300      	movs	r3, #0
 800e864:	220a      	movs	r2, #10
 800e866:	4648      	mov	r0, r9
 800e868:	f000 fd86 	bl	800f378 <__multadd>
 800e86c:	f1bb 0f00 	cmp.w	fp, #0
 800e870:	4605      	mov	r5, r0
 800e872:	dc6f      	bgt.n	800e954 <_dtoa_r+0x96c>
 800e874:	9b07      	ldr	r3, [sp, #28]
 800e876:	2b02      	cmp	r3, #2
 800e878:	dc49      	bgt.n	800e90e <_dtoa_r+0x926>
 800e87a:	e06b      	b.n	800e954 <_dtoa_r+0x96c>
 800e87c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e87e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e882:	e73c      	b.n	800e6fe <_dtoa_r+0x716>
 800e884:	3fe00000 	.word	0x3fe00000
 800e888:	40240000 	.word	0x40240000
 800e88c:	9b03      	ldr	r3, [sp, #12]
 800e88e:	1e5c      	subs	r4, r3, #1
 800e890:	9b08      	ldr	r3, [sp, #32]
 800e892:	42a3      	cmp	r3, r4
 800e894:	db09      	blt.n	800e8aa <_dtoa_r+0x8c2>
 800e896:	1b1c      	subs	r4, r3, r4
 800e898:	9b03      	ldr	r3, [sp, #12]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f6bf af30 	bge.w	800e700 <_dtoa_r+0x718>
 800e8a0:	9b00      	ldr	r3, [sp, #0]
 800e8a2:	9a03      	ldr	r2, [sp, #12]
 800e8a4:	1a9e      	subs	r6, r3, r2
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	e72b      	b.n	800e702 <_dtoa_r+0x71a>
 800e8aa:	9b08      	ldr	r3, [sp, #32]
 800e8ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e8ae:	9408      	str	r4, [sp, #32]
 800e8b0:	1ae3      	subs	r3, r4, r3
 800e8b2:	441a      	add	r2, r3
 800e8b4:	9e00      	ldr	r6, [sp, #0]
 800e8b6:	9b03      	ldr	r3, [sp, #12]
 800e8b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800e8ba:	2400      	movs	r4, #0
 800e8bc:	e721      	b.n	800e702 <_dtoa_r+0x71a>
 800e8be:	9c08      	ldr	r4, [sp, #32]
 800e8c0:	9e00      	ldr	r6, [sp, #0]
 800e8c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e8c4:	e728      	b.n	800e718 <_dtoa_r+0x730>
 800e8c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e8ca:	e751      	b.n	800e770 <_dtoa_r+0x788>
 800e8cc:	9a08      	ldr	r2, [sp, #32]
 800e8ce:	9902      	ldr	r1, [sp, #8]
 800e8d0:	e750      	b.n	800e774 <_dtoa_r+0x78c>
 800e8d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e8d6:	e751      	b.n	800e77c <_dtoa_r+0x794>
 800e8d8:	2300      	movs	r3, #0
 800e8da:	e779      	b.n	800e7d0 <_dtoa_r+0x7e8>
 800e8dc:	9b04      	ldr	r3, [sp, #16]
 800e8de:	e777      	b.n	800e7d0 <_dtoa_r+0x7e8>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	9308      	str	r3, [sp, #32]
 800e8e4:	e779      	b.n	800e7da <_dtoa_r+0x7f2>
 800e8e6:	d093      	beq.n	800e810 <_dtoa_r+0x828>
 800e8e8:	9a00      	ldr	r2, [sp, #0]
 800e8ea:	331c      	adds	r3, #28
 800e8ec:	441a      	add	r2, r3
 800e8ee:	9200      	str	r2, [sp, #0]
 800e8f0:	9a06      	ldr	r2, [sp, #24]
 800e8f2:	441a      	add	r2, r3
 800e8f4:	441e      	add	r6, r3
 800e8f6:	9206      	str	r2, [sp, #24]
 800e8f8:	e78a      	b.n	800e810 <_dtoa_r+0x828>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	e7f4      	b.n	800e8e8 <_dtoa_r+0x900>
 800e8fe:	9b03      	ldr	r3, [sp, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	46b8      	mov	r8, r7
 800e904:	dc20      	bgt.n	800e948 <_dtoa_r+0x960>
 800e906:	469b      	mov	fp, r3
 800e908:	9b07      	ldr	r3, [sp, #28]
 800e90a:	2b02      	cmp	r3, #2
 800e90c:	dd1e      	ble.n	800e94c <_dtoa_r+0x964>
 800e90e:	f1bb 0f00 	cmp.w	fp, #0
 800e912:	f47f adb1 	bne.w	800e478 <_dtoa_r+0x490>
 800e916:	4621      	mov	r1, r4
 800e918:	465b      	mov	r3, fp
 800e91a:	2205      	movs	r2, #5
 800e91c:	4648      	mov	r0, r9
 800e91e:	f000 fd2b 	bl	800f378 <__multadd>
 800e922:	4601      	mov	r1, r0
 800e924:	4604      	mov	r4, r0
 800e926:	9802      	ldr	r0, [sp, #8]
 800e928:	f000 ff80 	bl	800f82c <__mcmp>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	f77f ada3 	ble.w	800e478 <_dtoa_r+0x490>
 800e932:	4656      	mov	r6, sl
 800e934:	2331      	movs	r3, #49	@ 0x31
 800e936:	f806 3b01 	strb.w	r3, [r6], #1
 800e93a:	f108 0801 	add.w	r8, r8, #1
 800e93e:	e59f      	b.n	800e480 <_dtoa_r+0x498>
 800e940:	9c03      	ldr	r4, [sp, #12]
 800e942:	46b8      	mov	r8, r7
 800e944:	4625      	mov	r5, r4
 800e946:	e7f4      	b.n	800e932 <_dtoa_r+0x94a>
 800e948:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f000 8101 	beq.w	800eb56 <_dtoa_r+0xb6e>
 800e954:	2e00      	cmp	r6, #0
 800e956:	dd05      	ble.n	800e964 <_dtoa_r+0x97c>
 800e958:	4629      	mov	r1, r5
 800e95a:	4632      	mov	r2, r6
 800e95c:	4648      	mov	r0, r9
 800e95e:	f000 fef9 	bl	800f754 <__lshift>
 800e962:	4605      	mov	r5, r0
 800e964:	9b08      	ldr	r3, [sp, #32]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d05c      	beq.n	800ea24 <_dtoa_r+0xa3c>
 800e96a:	6869      	ldr	r1, [r5, #4]
 800e96c:	4648      	mov	r0, r9
 800e96e:	f000 fca1 	bl	800f2b4 <_Balloc>
 800e972:	4606      	mov	r6, r0
 800e974:	b928      	cbnz	r0, 800e982 <_dtoa_r+0x99a>
 800e976:	4b82      	ldr	r3, [pc, #520]	@ (800eb80 <_dtoa_r+0xb98>)
 800e978:	4602      	mov	r2, r0
 800e97a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e97e:	f7ff bb4a 	b.w	800e016 <_dtoa_r+0x2e>
 800e982:	692a      	ldr	r2, [r5, #16]
 800e984:	3202      	adds	r2, #2
 800e986:	0092      	lsls	r2, r2, #2
 800e988:	f105 010c 	add.w	r1, r5, #12
 800e98c:	300c      	adds	r0, #12
 800e98e:	f7ff fa6a 	bl	800de66 <memcpy>
 800e992:	2201      	movs	r2, #1
 800e994:	4631      	mov	r1, r6
 800e996:	4648      	mov	r0, r9
 800e998:	f000 fedc 	bl	800f754 <__lshift>
 800e99c:	f10a 0301 	add.w	r3, sl, #1
 800e9a0:	9300      	str	r3, [sp, #0]
 800e9a2:	eb0a 030b 	add.w	r3, sl, fp
 800e9a6:	9308      	str	r3, [sp, #32]
 800e9a8:	9b04      	ldr	r3, [sp, #16]
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	462f      	mov	r7, r5
 800e9b0:	9306      	str	r3, [sp, #24]
 800e9b2:	4605      	mov	r5, r0
 800e9b4:	9b00      	ldr	r3, [sp, #0]
 800e9b6:	9802      	ldr	r0, [sp, #8]
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800e9be:	f7ff fa89 	bl	800ded4 <quorem>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	3330      	adds	r3, #48	@ 0x30
 800e9c6:	9003      	str	r0, [sp, #12]
 800e9c8:	4639      	mov	r1, r7
 800e9ca:	9802      	ldr	r0, [sp, #8]
 800e9cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ce:	f000 ff2d 	bl	800f82c <__mcmp>
 800e9d2:	462a      	mov	r2, r5
 800e9d4:	9004      	str	r0, [sp, #16]
 800e9d6:	4621      	mov	r1, r4
 800e9d8:	4648      	mov	r0, r9
 800e9da:	f000 ff43 	bl	800f864 <__mdiff>
 800e9de:	68c2      	ldr	r2, [r0, #12]
 800e9e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	bb02      	cbnz	r2, 800ea28 <_dtoa_r+0xa40>
 800e9e6:	4601      	mov	r1, r0
 800e9e8:	9802      	ldr	r0, [sp, #8]
 800e9ea:	f000 ff1f 	bl	800f82c <__mcmp>
 800e9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	4631      	mov	r1, r6
 800e9f4:	4648      	mov	r0, r9
 800e9f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e9f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9fa:	f000 fc9b 	bl	800f334 <_Bfree>
 800e9fe:	9b07      	ldr	r3, [sp, #28]
 800ea00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ea02:	9e00      	ldr	r6, [sp, #0]
 800ea04:	ea42 0103 	orr.w	r1, r2, r3
 800ea08:	9b06      	ldr	r3, [sp, #24]
 800ea0a:	4319      	orrs	r1, r3
 800ea0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea0e:	d10d      	bne.n	800ea2c <_dtoa_r+0xa44>
 800ea10:	2b39      	cmp	r3, #57	@ 0x39
 800ea12:	d027      	beq.n	800ea64 <_dtoa_r+0xa7c>
 800ea14:	9a04      	ldr	r2, [sp, #16]
 800ea16:	2a00      	cmp	r2, #0
 800ea18:	dd01      	ble.n	800ea1e <_dtoa_r+0xa36>
 800ea1a:	9b03      	ldr	r3, [sp, #12]
 800ea1c:	3331      	adds	r3, #49	@ 0x31
 800ea1e:	f88b 3000 	strb.w	r3, [fp]
 800ea22:	e52e      	b.n	800e482 <_dtoa_r+0x49a>
 800ea24:	4628      	mov	r0, r5
 800ea26:	e7b9      	b.n	800e99c <_dtoa_r+0x9b4>
 800ea28:	2201      	movs	r2, #1
 800ea2a:	e7e2      	b.n	800e9f2 <_dtoa_r+0xa0a>
 800ea2c:	9904      	ldr	r1, [sp, #16]
 800ea2e:	2900      	cmp	r1, #0
 800ea30:	db04      	blt.n	800ea3c <_dtoa_r+0xa54>
 800ea32:	9807      	ldr	r0, [sp, #28]
 800ea34:	4301      	orrs	r1, r0
 800ea36:	9806      	ldr	r0, [sp, #24]
 800ea38:	4301      	orrs	r1, r0
 800ea3a:	d120      	bne.n	800ea7e <_dtoa_r+0xa96>
 800ea3c:	2a00      	cmp	r2, #0
 800ea3e:	ddee      	ble.n	800ea1e <_dtoa_r+0xa36>
 800ea40:	9902      	ldr	r1, [sp, #8]
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	2201      	movs	r2, #1
 800ea46:	4648      	mov	r0, r9
 800ea48:	f000 fe84 	bl	800f754 <__lshift>
 800ea4c:	4621      	mov	r1, r4
 800ea4e:	9002      	str	r0, [sp, #8]
 800ea50:	f000 feec 	bl	800f82c <__mcmp>
 800ea54:	2800      	cmp	r0, #0
 800ea56:	9b00      	ldr	r3, [sp, #0]
 800ea58:	dc02      	bgt.n	800ea60 <_dtoa_r+0xa78>
 800ea5a:	d1e0      	bne.n	800ea1e <_dtoa_r+0xa36>
 800ea5c:	07da      	lsls	r2, r3, #31
 800ea5e:	d5de      	bpl.n	800ea1e <_dtoa_r+0xa36>
 800ea60:	2b39      	cmp	r3, #57	@ 0x39
 800ea62:	d1da      	bne.n	800ea1a <_dtoa_r+0xa32>
 800ea64:	2339      	movs	r3, #57	@ 0x39
 800ea66:	f88b 3000 	strb.w	r3, [fp]
 800ea6a:	4633      	mov	r3, r6
 800ea6c:	461e      	mov	r6, r3
 800ea6e:	3b01      	subs	r3, #1
 800ea70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea74:	2a39      	cmp	r2, #57	@ 0x39
 800ea76:	d04e      	beq.n	800eb16 <_dtoa_r+0xb2e>
 800ea78:	3201      	adds	r2, #1
 800ea7a:	701a      	strb	r2, [r3, #0]
 800ea7c:	e501      	b.n	800e482 <_dtoa_r+0x49a>
 800ea7e:	2a00      	cmp	r2, #0
 800ea80:	dd03      	ble.n	800ea8a <_dtoa_r+0xaa2>
 800ea82:	2b39      	cmp	r3, #57	@ 0x39
 800ea84:	d0ee      	beq.n	800ea64 <_dtoa_r+0xa7c>
 800ea86:	3301      	adds	r3, #1
 800ea88:	e7c9      	b.n	800ea1e <_dtoa_r+0xa36>
 800ea8a:	9a00      	ldr	r2, [sp, #0]
 800ea8c:	9908      	ldr	r1, [sp, #32]
 800ea8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ea92:	428a      	cmp	r2, r1
 800ea94:	d028      	beq.n	800eae8 <_dtoa_r+0xb00>
 800ea96:	9902      	ldr	r1, [sp, #8]
 800ea98:	2300      	movs	r3, #0
 800ea9a:	220a      	movs	r2, #10
 800ea9c:	4648      	mov	r0, r9
 800ea9e:	f000 fc6b 	bl	800f378 <__multadd>
 800eaa2:	42af      	cmp	r7, r5
 800eaa4:	9002      	str	r0, [sp, #8]
 800eaa6:	f04f 0300 	mov.w	r3, #0
 800eaaa:	f04f 020a 	mov.w	r2, #10
 800eaae:	4639      	mov	r1, r7
 800eab0:	4648      	mov	r0, r9
 800eab2:	d107      	bne.n	800eac4 <_dtoa_r+0xadc>
 800eab4:	f000 fc60 	bl	800f378 <__multadd>
 800eab8:	4607      	mov	r7, r0
 800eaba:	4605      	mov	r5, r0
 800eabc:	9b00      	ldr	r3, [sp, #0]
 800eabe:	3301      	adds	r3, #1
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	e777      	b.n	800e9b4 <_dtoa_r+0x9cc>
 800eac4:	f000 fc58 	bl	800f378 <__multadd>
 800eac8:	4629      	mov	r1, r5
 800eaca:	4607      	mov	r7, r0
 800eacc:	2300      	movs	r3, #0
 800eace:	220a      	movs	r2, #10
 800ead0:	4648      	mov	r0, r9
 800ead2:	f000 fc51 	bl	800f378 <__multadd>
 800ead6:	4605      	mov	r5, r0
 800ead8:	e7f0      	b.n	800eabc <_dtoa_r+0xad4>
 800eada:	f1bb 0f00 	cmp.w	fp, #0
 800eade:	bfcc      	ite	gt
 800eae0:	465e      	movgt	r6, fp
 800eae2:	2601      	movle	r6, #1
 800eae4:	4456      	add	r6, sl
 800eae6:	2700      	movs	r7, #0
 800eae8:	9902      	ldr	r1, [sp, #8]
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	2201      	movs	r2, #1
 800eaee:	4648      	mov	r0, r9
 800eaf0:	f000 fe30 	bl	800f754 <__lshift>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	9002      	str	r0, [sp, #8]
 800eaf8:	f000 fe98 	bl	800f82c <__mcmp>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	dcb4      	bgt.n	800ea6a <_dtoa_r+0xa82>
 800eb00:	d102      	bne.n	800eb08 <_dtoa_r+0xb20>
 800eb02:	9b00      	ldr	r3, [sp, #0]
 800eb04:	07db      	lsls	r3, r3, #31
 800eb06:	d4b0      	bmi.n	800ea6a <_dtoa_r+0xa82>
 800eb08:	4633      	mov	r3, r6
 800eb0a:	461e      	mov	r6, r3
 800eb0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb10:	2a30      	cmp	r2, #48	@ 0x30
 800eb12:	d0fa      	beq.n	800eb0a <_dtoa_r+0xb22>
 800eb14:	e4b5      	b.n	800e482 <_dtoa_r+0x49a>
 800eb16:	459a      	cmp	sl, r3
 800eb18:	d1a8      	bne.n	800ea6c <_dtoa_r+0xa84>
 800eb1a:	2331      	movs	r3, #49	@ 0x31
 800eb1c:	f108 0801 	add.w	r8, r8, #1
 800eb20:	f88a 3000 	strb.w	r3, [sl]
 800eb24:	e4ad      	b.n	800e482 <_dtoa_r+0x49a>
 800eb26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800eb84 <_dtoa_r+0xb9c>
 800eb2c:	b11b      	cbz	r3, 800eb36 <_dtoa_r+0xb4e>
 800eb2e:	f10a 0308 	add.w	r3, sl, #8
 800eb32:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eb34:	6013      	str	r3, [r2, #0]
 800eb36:	4650      	mov	r0, sl
 800eb38:	b017      	add	sp, #92	@ 0x5c
 800eb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3e:	9b07      	ldr	r3, [sp, #28]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	f77f ae2e 	ble.w	800e7a2 <_dtoa_r+0x7ba>
 800eb46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb48:	9308      	str	r3, [sp, #32]
 800eb4a:	2001      	movs	r0, #1
 800eb4c:	e64d      	b.n	800e7ea <_dtoa_r+0x802>
 800eb4e:	f1bb 0f00 	cmp.w	fp, #0
 800eb52:	f77f aed9 	ble.w	800e908 <_dtoa_r+0x920>
 800eb56:	4656      	mov	r6, sl
 800eb58:	9802      	ldr	r0, [sp, #8]
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	f7ff f9ba 	bl	800ded4 <quorem>
 800eb60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800eb64:	f806 3b01 	strb.w	r3, [r6], #1
 800eb68:	eba6 020a 	sub.w	r2, r6, sl
 800eb6c:	4593      	cmp	fp, r2
 800eb6e:	ddb4      	ble.n	800eada <_dtoa_r+0xaf2>
 800eb70:	9902      	ldr	r1, [sp, #8]
 800eb72:	2300      	movs	r3, #0
 800eb74:	220a      	movs	r2, #10
 800eb76:	4648      	mov	r0, r9
 800eb78:	f000 fbfe 	bl	800f378 <__multadd>
 800eb7c:	9002      	str	r0, [sp, #8]
 800eb7e:	e7eb      	b.n	800eb58 <_dtoa_r+0xb70>
 800eb80:	08010584 	.word	0x08010584
 800eb84:	0801051f 	.word	0x0801051f

0800eb88 <_free_r>:
 800eb88:	b538      	push	{r3, r4, r5, lr}
 800eb8a:	4605      	mov	r5, r0
 800eb8c:	2900      	cmp	r1, #0
 800eb8e:	d041      	beq.n	800ec14 <_free_r+0x8c>
 800eb90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb94:	1f0c      	subs	r4, r1, #4
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	bfb8      	it	lt
 800eb9a:	18e4      	addlt	r4, r4, r3
 800eb9c:	f7fd fc28 	bl	800c3f0 <__malloc_lock>
 800eba0:	4a1d      	ldr	r2, [pc, #116]	@ (800ec18 <_free_r+0x90>)
 800eba2:	6813      	ldr	r3, [r2, #0]
 800eba4:	b933      	cbnz	r3, 800ebb4 <_free_r+0x2c>
 800eba6:	6063      	str	r3, [r4, #4]
 800eba8:	6014      	str	r4, [r2, #0]
 800ebaa:	4628      	mov	r0, r5
 800ebac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebb0:	f7fd bc24 	b.w	800c3fc <__malloc_unlock>
 800ebb4:	42a3      	cmp	r3, r4
 800ebb6:	d908      	bls.n	800ebca <_free_r+0x42>
 800ebb8:	6820      	ldr	r0, [r4, #0]
 800ebba:	1821      	adds	r1, r4, r0
 800ebbc:	428b      	cmp	r3, r1
 800ebbe:	bf01      	itttt	eq
 800ebc0:	6819      	ldreq	r1, [r3, #0]
 800ebc2:	685b      	ldreq	r3, [r3, #4]
 800ebc4:	1809      	addeq	r1, r1, r0
 800ebc6:	6021      	streq	r1, [r4, #0]
 800ebc8:	e7ed      	b.n	800eba6 <_free_r+0x1e>
 800ebca:	461a      	mov	r2, r3
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	b10b      	cbz	r3, 800ebd4 <_free_r+0x4c>
 800ebd0:	42a3      	cmp	r3, r4
 800ebd2:	d9fa      	bls.n	800ebca <_free_r+0x42>
 800ebd4:	6811      	ldr	r1, [r2, #0]
 800ebd6:	1850      	adds	r0, r2, r1
 800ebd8:	42a0      	cmp	r0, r4
 800ebda:	d10b      	bne.n	800ebf4 <_free_r+0x6c>
 800ebdc:	6820      	ldr	r0, [r4, #0]
 800ebde:	4401      	add	r1, r0
 800ebe0:	1850      	adds	r0, r2, r1
 800ebe2:	4283      	cmp	r3, r0
 800ebe4:	6011      	str	r1, [r2, #0]
 800ebe6:	d1e0      	bne.n	800ebaa <_free_r+0x22>
 800ebe8:	6818      	ldr	r0, [r3, #0]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	6053      	str	r3, [r2, #4]
 800ebee:	4408      	add	r0, r1
 800ebf0:	6010      	str	r0, [r2, #0]
 800ebf2:	e7da      	b.n	800ebaa <_free_r+0x22>
 800ebf4:	d902      	bls.n	800ebfc <_free_r+0x74>
 800ebf6:	230c      	movs	r3, #12
 800ebf8:	602b      	str	r3, [r5, #0]
 800ebfa:	e7d6      	b.n	800ebaa <_free_r+0x22>
 800ebfc:	6820      	ldr	r0, [r4, #0]
 800ebfe:	1821      	adds	r1, r4, r0
 800ec00:	428b      	cmp	r3, r1
 800ec02:	bf04      	itt	eq
 800ec04:	6819      	ldreq	r1, [r3, #0]
 800ec06:	685b      	ldreq	r3, [r3, #4]
 800ec08:	6063      	str	r3, [r4, #4]
 800ec0a:	bf04      	itt	eq
 800ec0c:	1809      	addeq	r1, r1, r0
 800ec0e:	6021      	streq	r1, [r4, #0]
 800ec10:	6054      	str	r4, [r2, #4]
 800ec12:	e7ca      	b.n	800ebaa <_free_r+0x22>
 800ec14:	bd38      	pop	{r3, r4, r5, pc}
 800ec16:	bf00      	nop
 800ec18:	200026e4 	.word	0x200026e4

0800ec1c <rshift>:
 800ec1c:	6903      	ldr	r3, [r0, #16]
 800ec1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ec2a:	f100 0414 	add.w	r4, r0, #20
 800ec2e:	dd45      	ble.n	800ecbc <rshift+0xa0>
 800ec30:	f011 011f 	ands.w	r1, r1, #31
 800ec34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ec38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec3c:	d10c      	bne.n	800ec58 <rshift+0x3c>
 800ec3e:	f100 0710 	add.w	r7, r0, #16
 800ec42:	4629      	mov	r1, r5
 800ec44:	42b1      	cmp	r1, r6
 800ec46:	d334      	bcc.n	800ecb2 <rshift+0x96>
 800ec48:	1a9b      	subs	r3, r3, r2
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	1eea      	subs	r2, r5, #3
 800ec4e:	4296      	cmp	r6, r2
 800ec50:	bf38      	it	cc
 800ec52:	2300      	movcc	r3, #0
 800ec54:	4423      	add	r3, r4
 800ec56:	e015      	b.n	800ec84 <rshift+0x68>
 800ec58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ec5c:	f1c1 0820 	rsb	r8, r1, #32
 800ec60:	40cf      	lsrs	r7, r1
 800ec62:	f105 0e04 	add.w	lr, r5, #4
 800ec66:	46a1      	mov	r9, r4
 800ec68:	4576      	cmp	r6, lr
 800ec6a:	46f4      	mov	ip, lr
 800ec6c:	d815      	bhi.n	800ec9a <rshift+0x7e>
 800ec6e:	1a9a      	subs	r2, r3, r2
 800ec70:	0092      	lsls	r2, r2, #2
 800ec72:	3a04      	subs	r2, #4
 800ec74:	3501      	adds	r5, #1
 800ec76:	42ae      	cmp	r6, r5
 800ec78:	bf38      	it	cc
 800ec7a:	2200      	movcc	r2, #0
 800ec7c:	18a3      	adds	r3, r4, r2
 800ec7e:	50a7      	str	r7, [r4, r2]
 800ec80:	b107      	cbz	r7, 800ec84 <rshift+0x68>
 800ec82:	3304      	adds	r3, #4
 800ec84:	1b1a      	subs	r2, r3, r4
 800ec86:	42a3      	cmp	r3, r4
 800ec88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec8c:	bf08      	it	eq
 800ec8e:	2300      	moveq	r3, #0
 800ec90:	6102      	str	r2, [r0, #16]
 800ec92:	bf08      	it	eq
 800ec94:	6143      	streq	r3, [r0, #20]
 800ec96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec9a:	f8dc c000 	ldr.w	ip, [ip]
 800ec9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800eca2:	ea4c 0707 	orr.w	r7, ip, r7
 800eca6:	f849 7b04 	str.w	r7, [r9], #4
 800ecaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ecae:	40cf      	lsrs	r7, r1
 800ecb0:	e7da      	b.n	800ec68 <rshift+0x4c>
 800ecb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ecb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ecba:	e7c3      	b.n	800ec44 <rshift+0x28>
 800ecbc:	4623      	mov	r3, r4
 800ecbe:	e7e1      	b.n	800ec84 <rshift+0x68>

0800ecc0 <__hexdig_fun>:
 800ecc0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ecc4:	2b09      	cmp	r3, #9
 800ecc6:	d802      	bhi.n	800ecce <__hexdig_fun+0xe>
 800ecc8:	3820      	subs	r0, #32
 800ecca:	b2c0      	uxtb	r0, r0
 800eccc:	4770      	bx	lr
 800ecce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ecd2:	2b05      	cmp	r3, #5
 800ecd4:	d801      	bhi.n	800ecda <__hexdig_fun+0x1a>
 800ecd6:	3847      	subs	r0, #71	@ 0x47
 800ecd8:	e7f7      	b.n	800ecca <__hexdig_fun+0xa>
 800ecda:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ecde:	2b05      	cmp	r3, #5
 800ece0:	d801      	bhi.n	800ece6 <__hexdig_fun+0x26>
 800ece2:	3827      	subs	r0, #39	@ 0x27
 800ece4:	e7f1      	b.n	800ecca <__hexdig_fun+0xa>
 800ece6:	2000      	movs	r0, #0
 800ece8:	4770      	bx	lr
	...

0800ecec <__gethex>:
 800ecec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf0:	b085      	sub	sp, #20
 800ecf2:	468a      	mov	sl, r1
 800ecf4:	9302      	str	r3, [sp, #8]
 800ecf6:	680b      	ldr	r3, [r1, #0]
 800ecf8:	9001      	str	r0, [sp, #4]
 800ecfa:	4690      	mov	r8, r2
 800ecfc:	1c9c      	adds	r4, r3, #2
 800ecfe:	46a1      	mov	r9, r4
 800ed00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ed04:	2830      	cmp	r0, #48	@ 0x30
 800ed06:	d0fa      	beq.n	800ecfe <__gethex+0x12>
 800ed08:	eba9 0303 	sub.w	r3, r9, r3
 800ed0c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ed10:	f7ff ffd6 	bl	800ecc0 <__hexdig_fun>
 800ed14:	4605      	mov	r5, r0
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d168      	bne.n	800edec <__gethex+0x100>
 800ed1a:	49a0      	ldr	r1, [pc, #640]	@ (800ef9c <__gethex+0x2b0>)
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	4648      	mov	r0, r9
 800ed20:	f7fe ff98 	bl	800dc54 <strncmp>
 800ed24:	4607      	mov	r7, r0
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d167      	bne.n	800edfa <__gethex+0x10e>
 800ed2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ed2e:	4626      	mov	r6, r4
 800ed30:	f7ff ffc6 	bl	800ecc0 <__hexdig_fun>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d062      	beq.n	800edfe <__gethex+0x112>
 800ed38:	4623      	mov	r3, r4
 800ed3a:	7818      	ldrb	r0, [r3, #0]
 800ed3c:	2830      	cmp	r0, #48	@ 0x30
 800ed3e:	4699      	mov	r9, r3
 800ed40:	f103 0301 	add.w	r3, r3, #1
 800ed44:	d0f9      	beq.n	800ed3a <__gethex+0x4e>
 800ed46:	f7ff ffbb 	bl	800ecc0 <__hexdig_fun>
 800ed4a:	fab0 f580 	clz	r5, r0
 800ed4e:	096d      	lsrs	r5, r5, #5
 800ed50:	f04f 0b01 	mov.w	fp, #1
 800ed54:	464a      	mov	r2, r9
 800ed56:	4616      	mov	r6, r2
 800ed58:	3201      	adds	r2, #1
 800ed5a:	7830      	ldrb	r0, [r6, #0]
 800ed5c:	f7ff ffb0 	bl	800ecc0 <__hexdig_fun>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d1f8      	bne.n	800ed56 <__gethex+0x6a>
 800ed64:	498d      	ldr	r1, [pc, #564]	@ (800ef9c <__gethex+0x2b0>)
 800ed66:	2201      	movs	r2, #1
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f7fe ff73 	bl	800dc54 <strncmp>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d13f      	bne.n	800edf2 <__gethex+0x106>
 800ed72:	b944      	cbnz	r4, 800ed86 <__gethex+0x9a>
 800ed74:	1c74      	adds	r4, r6, #1
 800ed76:	4622      	mov	r2, r4
 800ed78:	4616      	mov	r6, r2
 800ed7a:	3201      	adds	r2, #1
 800ed7c:	7830      	ldrb	r0, [r6, #0]
 800ed7e:	f7ff ff9f 	bl	800ecc0 <__hexdig_fun>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	d1f8      	bne.n	800ed78 <__gethex+0x8c>
 800ed86:	1ba4      	subs	r4, r4, r6
 800ed88:	00a7      	lsls	r7, r4, #2
 800ed8a:	7833      	ldrb	r3, [r6, #0]
 800ed8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ed90:	2b50      	cmp	r3, #80	@ 0x50
 800ed92:	d13e      	bne.n	800ee12 <__gethex+0x126>
 800ed94:	7873      	ldrb	r3, [r6, #1]
 800ed96:	2b2b      	cmp	r3, #43	@ 0x2b
 800ed98:	d033      	beq.n	800ee02 <__gethex+0x116>
 800ed9a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ed9c:	d034      	beq.n	800ee08 <__gethex+0x11c>
 800ed9e:	1c71      	adds	r1, r6, #1
 800eda0:	2400      	movs	r4, #0
 800eda2:	7808      	ldrb	r0, [r1, #0]
 800eda4:	f7ff ff8c 	bl	800ecc0 <__hexdig_fun>
 800eda8:	1e43      	subs	r3, r0, #1
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b18      	cmp	r3, #24
 800edae:	d830      	bhi.n	800ee12 <__gethex+0x126>
 800edb0:	f1a0 0210 	sub.w	r2, r0, #16
 800edb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800edb8:	f7ff ff82 	bl	800ecc0 <__hexdig_fun>
 800edbc:	f100 3cff 	add.w	ip, r0, #4294967295
 800edc0:	fa5f fc8c 	uxtb.w	ip, ip
 800edc4:	f1bc 0f18 	cmp.w	ip, #24
 800edc8:	f04f 030a 	mov.w	r3, #10
 800edcc:	d91e      	bls.n	800ee0c <__gethex+0x120>
 800edce:	b104      	cbz	r4, 800edd2 <__gethex+0xe6>
 800edd0:	4252      	negs	r2, r2
 800edd2:	4417      	add	r7, r2
 800edd4:	f8ca 1000 	str.w	r1, [sl]
 800edd8:	b1ed      	cbz	r5, 800ee16 <__gethex+0x12a>
 800edda:	f1bb 0f00 	cmp.w	fp, #0
 800edde:	bf0c      	ite	eq
 800ede0:	2506      	moveq	r5, #6
 800ede2:	2500      	movne	r5, #0
 800ede4:	4628      	mov	r0, r5
 800ede6:	b005      	add	sp, #20
 800ede8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edec:	2500      	movs	r5, #0
 800edee:	462c      	mov	r4, r5
 800edf0:	e7b0      	b.n	800ed54 <__gethex+0x68>
 800edf2:	2c00      	cmp	r4, #0
 800edf4:	d1c7      	bne.n	800ed86 <__gethex+0x9a>
 800edf6:	4627      	mov	r7, r4
 800edf8:	e7c7      	b.n	800ed8a <__gethex+0x9e>
 800edfa:	464e      	mov	r6, r9
 800edfc:	462f      	mov	r7, r5
 800edfe:	2501      	movs	r5, #1
 800ee00:	e7c3      	b.n	800ed8a <__gethex+0x9e>
 800ee02:	2400      	movs	r4, #0
 800ee04:	1cb1      	adds	r1, r6, #2
 800ee06:	e7cc      	b.n	800eda2 <__gethex+0xb6>
 800ee08:	2401      	movs	r4, #1
 800ee0a:	e7fb      	b.n	800ee04 <__gethex+0x118>
 800ee0c:	fb03 0002 	mla	r0, r3, r2, r0
 800ee10:	e7ce      	b.n	800edb0 <__gethex+0xc4>
 800ee12:	4631      	mov	r1, r6
 800ee14:	e7de      	b.n	800edd4 <__gethex+0xe8>
 800ee16:	eba6 0309 	sub.w	r3, r6, r9
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	2b07      	cmp	r3, #7
 800ee20:	dc0a      	bgt.n	800ee38 <__gethex+0x14c>
 800ee22:	9801      	ldr	r0, [sp, #4]
 800ee24:	f000 fa46 	bl	800f2b4 <_Balloc>
 800ee28:	4604      	mov	r4, r0
 800ee2a:	b940      	cbnz	r0, 800ee3e <__gethex+0x152>
 800ee2c:	4b5c      	ldr	r3, [pc, #368]	@ (800efa0 <__gethex+0x2b4>)
 800ee2e:	4602      	mov	r2, r0
 800ee30:	21e4      	movs	r1, #228	@ 0xe4
 800ee32:	485c      	ldr	r0, [pc, #368]	@ (800efa4 <__gethex+0x2b8>)
 800ee34:	f7ff f830 	bl	800de98 <__assert_func>
 800ee38:	3101      	adds	r1, #1
 800ee3a:	105b      	asrs	r3, r3, #1
 800ee3c:	e7ef      	b.n	800ee1e <__gethex+0x132>
 800ee3e:	f100 0a14 	add.w	sl, r0, #20
 800ee42:	2300      	movs	r3, #0
 800ee44:	4655      	mov	r5, sl
 800ee46:	469b      	mov	fp, r3
 800ee48:	45b1      	cmp	r9, r6
 800ee4a:	d337      	bcc.n	800eebc <__gethex+0x1d0>
 800ee4c:	f845 bb04 	str.w	fp, [r5], #4
 800ee50:	eba5 050a 	sub.w	r5, r5, sl
 800ee54:	10ad      	asrs	r5, r5, #2
 800ee56:	6125      	str	r5, [r4, #16]
 800ee58:	4658      	mov	r0, fp
 800ee5a:	f000 fb1d 	bl	800f498 <__hi0bits>
 800ee5e:	016d      	lsls	r5, r5, #5
 800ee60:	f8d8 6000 	ldr.w	r6, [r8]
 800ee64:	1a2d      	subs	r5, r5, r0
 800ee66:	42b5      	cmp	r5, r6
 800ee68:	dd54      	ble.n	800ef14 <__gethex+0x228>
 800ee6a:	1bad      	subs	r5, r5, r6
 800ee6c:	4629      	mov	r1, r5
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f000 fea9 	bl	800fbc6 <__any_on>
 800ee74:	4681      	mov	r9, r0
 800ee76:	b178      	cbz	r0, 800ee98 <__gethex+0x1ac>
 800ee78:	1e6b      	subs	r3, r5, #1
 800ee7a:	1159      	asrs	r1, r3, #5
 800ee7c:	f003 021f 	and.w	r2, r3, #31
 800ee80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ee84:	f04f 0901 	mov.w	r9, #1
 800ee88:	fa09 f202 	lsl.w	r2, r9, r2
 800ee8c:	420a      	tst	r2, r1
 800ee8e:	d003      	beq.n	800ee98 <__gethex+0x1ac>
 800ee90:	454b      	cmp	r3, r9
 800ee92:	dc36      	bgt.n	800ef02 <__gethex+0x216>
 800ee94:	f04f 0902 	mov.w	r9, #2
 800ee98:	4629      	mov	r1, r5
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	f7ff febe 	bl	800ec1c <rshift>
 800eea0:	442f      	add	r7, r5
 800eea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eea6:	42bb      	cmp	r3, r7
 800eea8:	da42      	bge.n	800ef30 <__gethex+0x244>
 800eeaa:	9801      	ldr	r0, [sp, #4]
 800eeac:	4621      	mov	r1, r4
 800eeae:	f000 fa41 	bl	800f334 <_Bfree>
 800eeb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	6013      	str	r3, [r2, #0]
 800eeb8:	25a3      	movs	r5, #163	@ 0xa3
 800eeba:	e793      	b.n	800ede4 <__gethex+0xf8>
 800eebc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eec0:	2a2e      	cmp	r2, #46	@ 0x2e
 800eec2:	d012      	beq.n	800eeea <__gethex+0x1fe>
 800eec4:	2b20      	cmp	r3, #32
 800eec6:	d104      	bne.n	800eed2 <__gethex+0x1e6>
 800eec8:	f845 bb04 	str.w	fp, [r5], #4
 800eecc:	f04f 0b00 	mov.w	fp, #0
 800eed0:	465b      	mov	r3, fp
 800eed2:	7830      	ldrb	r0, [r6, #0]
 800eed4:	9303      	str	r3, [sp, #12]
 800eed6:	f7ff fef3 	bl	800ecc0 <__hexdig_fun>
 800eeda:	9b03      	ldr	r3, [sp, #12]
 800eedc:	f000 000f 	and.w	r0, r0, #15
 800eee0:	4098      	lsls	r0, r3
 800eee2:	ea4b 0b00 	orr.w	fp, fp, r0
 800eee6:	3304      	adds	r3, #4
 800eee8:	e7ae      	b.n	800ee48 <__gethex+0x15c>
 800eeea:	45b1      	cmp	r9, r6
 800eeec:	d8ea      	bhi.n	800eec4 <__gethex+0x1d8>
 800eeee:	492b      	ldr	r1, [pc, #172]	@ (800ef9c <__gethex+0x2b0>)
 800eef0:	9303      	str	r3, [sp, #12]
 800eef2:	2201      	movs	r2, #1
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7fe fead 	bl	800dc54 <strncmp>
 800eefa:	9b03      	ldr	r3, [sp, #12]
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d1e1      	bne.n	800eec4 <__gethex+0x1d8>
 800ef00:	e7a2      	b.n	800ee48 <__gethex+0x15c>
 800ef02:	1ea9      	subs	r1, r5, #2
 800ef04:	4620      	mov	r0, r4
 800ef06:	f000 fe5e 	bl	800fbc6 <__any_on>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d0c2      	beq.n	800ee94 <__gethex+0x1a8>
 800ef0e:	f04f 0903 	mov.w	r9, #3
 800ef12:	e7c1      	b.n	800ee98 <__gethex+0x1ac>
 800ef14:	da09      	bge.n	800ef2a <__gethex+0x23e>
 800ef16:	1b75      	subs	r5, r6, r5
 800ef18:	4621      	mov	r1, r4
 800ef1a:	9801      	ldr	r0, [sp, #4]
 800ef1c:	462a      	mov	r2, r5
 800ef1e:	f000 fc19 	bl	800f754 <__lshift>
 800ef22:	1b7f      	subs	r7, r7, r5
 800ef24:	4604      	mov	r4, r0
 800ef26:	f100 0a14 	add.w	sl, r0, #20
 800ef2a:	f04f 0900 	mov.w	r9, #0
 800ef2e:	e7b8      	b.n	800eea2 <__gethex+0x1b6>
 800ef30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ef34:	42bd      	cmp	r5, r7
 800ef36:	dd6f      	ble.n	800f018 <__gethex+0x32c>
 800ef38:	1bed      	subs	r5, r5, r7
 800ef3a:	42ae      	cmp	r6, r5
 800ef3c:	dc34      	bgt.n	800efa8 <__gethex+0x2bc>
 800ef3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef42:	2b02      	cmp	r3, #2
 800ef44:	d022      	beq.n	800ef8c <__gethex+0x2a0>
 800ef46:	2b03      	cmp	r3, #3
 800ef48:	d024      	beq.n	800ef94 <__gethex+0x2a8>
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d115      	bne.n	800ef7a <__gethex+0x28e>
 800ef4e:	42ae      	cmp	r6, r5
 800ef50:	d113      	bne.n	800ef7a <__gethex+0x28e>
 800ef52:	2e01      	cmp	r6, #1
 800ef54:	d10b      	bne.n	800ef6e <__gethex+0x282>
 800ef56:	9a02      	ldr	r2, [sp, #8]
 800ef58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef5c:	6013      	str	r3, [r2, #0]
 800ef5e:	2301      	movs	r3, #1
 800ef60:	6123      	str	r3, [r4, #16]
 800ef62:	f8ca 3000 	str.w	r3, [sl]
 800ef66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef68:	2562      	movs	r5, #98	@ 0x62
 800ef6a:	601c      	str	r4, [r3, #0]
 800ef6c:	e73a      	b.n	800ede4 <__gethex+0xf8>
 800ef6e:	1e71      	subs	r1, r6, #1
 800ef70:	4620      	mov	r0, r4
 800ef72:	f000 fe28 	bl	800fbc6 <__any_on>
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d1ed      	bne.n	800ef56 <__gethex+0x26a>
 800ef7a:	9801      	ldr	r0, [sp, #4]
 800ef7c:	4621      	mov	r1, r4
 800ef7e:	f000 f9d9 	bl	800f334 <_Bfree>
 800ef82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef84:	2300      	movs	r3, #0
 800ef86:	6013      	str	r3, [r2, #0]
 800ef88:	2550      	movs	r5, #80	@ 0x50
 800ef8a:	e72b      	b.n	800ede4 <__gethex+0xf8>
 800ef8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1f3      	bne.n	800ef7a <__gethex+0x28e>
 800ef92:	e7e0      	b.n	800ef56 <__gethex+0x26a>
 800ef94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1dd      	bne.n	800ef56 <__gethex+0x26a>
 800ef9a:	e7ee      	b.n	800ef7a <__gethex+0x28e>
 800ef9c:	08010434 	.word	0x08010434
 800efa0:	08010584 	.word	0x08010584
 800efa4:	08010595 	.word	0x08010595
 800efa8:	1e6f      	subs	r7, r5, #1
 800efaa:	f1b9 0f00 	cmp.w	r9, #0
 800efae:	d130      	bne.n	800f012 <__gethex+0x326>
 800efb0:	b127      	cbz	r7, 800efbc <__gethex+0x2d0>
 800efb2:	4639      	mov	r1, r7
 800efb4:	4620      	mov	r0, r4
 800efb6:	f000 fe06 	bl	800fbc6 <__any_on>
 800efba:	4681      	mov	r9, r0
 800efbc:	117a      	asrs	r2, r7, #5
 800efbe:	2301      	movs	r3, #1
 800efc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800efc4:	f007 071f 	and.w	r7, r7, #31
 800efc8:	40bb      	lsls	r3, r7
 800efca:	4213      	tst	r3, r2
 800efcc:	4629      	mov	r1, r5
 800efce:	4620      	mov	r0, r4
 800efd0:	bf18      	it	ne
 800efd2:	f049 0902 	orrne.w	r9, r9, #2
 800efd6:	f7ff fe21 	bl	800ec1c <rshift>
 800efda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800efde:	1b76      	subs	r6, r6, r5
 800efe0:	2502      	movs	r5, #2
 800efe2:	f1b9 0f00 	cmp.w	r9, #0
 800efe6:	d047      	beq.n	800f078 <__gethex+0x38c>
 800efe8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efec:	2b02      	cmp	r3, #2
 800efee:	d015      	beq.n	800f01c <__gethex+0x330>
 800eff0:	2b03      	cmp	r3, #3
 800eff2:	d017      	beq.n	800f024 <__gethex+0x338>
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d109      	bne.n	800f00c <__gethex+0x320>
 800eff8:	f019 0f02 	tst.w	r9, #2
 800effc:	d006      	beq.n	800f00c <__gethex+0x320>
 800effe:	f8da 3000 	ldr.w	r3, [sl]
 800f002:	ea49 0903 	orr.w	r9, r9, r3
 800f006:	f019 0f01 	tst.w	r9, #1
 800f00a:	d10e      	bne.n	800f02a <__gethex+0x33e>
 800f00c:	f045 0510 	orr.w	r5, r5, #16
 800f010:	e032      	b.n	800f078 <__gethex+0x38c>
 800f012:	f04f 0901 	mov.w	r9, #1
 800f016:	e7d1      	b.n	800efbc <__gethex+0x2d0>
 800f018:	2501      	movs	r5, #1
 800f01a:	e7e2      	b.n	800efe2 <__gethex+0x2f6>
 800f01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f01e:	f1c3 0301 	rsb	r3, r3, #1
 800f022:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f026:	2b00      	cmp	r3, #0
 800f028:	d0f0      	beq.n	800f00c <__gethex+0x320>
 800f02a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f02e:	f104 0314 	add.w	r3, r4, #20
 800f032:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f036:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f03a:	f04f 0c00 	mov.w	ip, #0
 800f03e:	4618      	mov	r0, r3
 800f040:	f853 2b04 	ldr.w	r2, [r3], #4
 800f044:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f048:	d01b      	beq.n	800f082 <__gethex+0x396>
 800f04a:	3201      	adds	r2, #1
 800f04c:	6002      	str	r2, [r0, #0]
 800f04e:	2d02      	cmp	r5, #2
 800f050:	f104 0314 	add.w	r3, r4, #20
 800f054:	d13c      	bne.n	800f0d0 <__gethex+0x3e4>
 800f056:	f8d8 2000 	ldr.w	r2, [r8]
 800f05a:	3a01      	subs	r2, #1
 800f05c:	42b2      	cmp	r2, r6
 800f05e:	d109      	bne.n	800f074 <__gethex+0x388>
 800f060:	1171      	asrs	r1, r6, #5
 800f062:	2201      	movs	r2, #1
 800f064:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f068:	f006 061f 	and.w	r6, r6, #31
 800f06c:	fa02 f606 	lsl.w	r6, r2, r6
 800f070:	421e      	tst	r6, r3
 800f072:	d13a      	bne.n	800f0ea <__gethex+0x3fe>
 800f074:	f045 0520 	orr.w	r5, r5, #32
 800f078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f07a:	601c      	str	r4, [r3, #0]
 800f07c:	9b02      	ldr	r3, [sp, #8]
 800f07e:	601f      	str	r7, [r3, #0]
 800f080:	e6b0      	b.n	800ede4 <__gethex+0xf8>
 800f082:	4299      	cmp	r1, r3
 800f084:	f843 cc04 	str.w	ip, [r3, #-4]
 800f088:	d8d9      	bhi.n	800f03e <__gethex+0x352>
 800f08a:	68a3      	ldr	r3, [r4, #8]
 800f08c:	459b      	cmp	fp, r3
 800f08e:	db17      	blt.n	800f0c0 <__gethex+0x3d4>
 800f090:	6861      	ldr	r1, [r4, #4]
 800f092:	9801      	ldr	r0, [sp, #4]
 800f094:	3101      	adds	r1, #1
 800f096:	f000 f90d 	bl	800f2b4 <_Balloc>
 800f09a:	4681      	mov	r9, r0
 800f09c:	b918      	cbnz	r0, 800f0a6 <__gethex+0x3ba>
 800f09e:	4b1a      	ldr	r3, [pc, #104]	@ (800f108 <__gethex+0x41c>)
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	2184      	movs	r1, #132	@ 0x84
 800f0a4:	e6c5      	b.n	800ee32 <__gethex+0x146>
 800f0a6:	6922      	ldr	r2, [r4, #16]
 800f0a8:	3202      	adds	r2, #2
 800f0aa:	f104 010c 	add.w	r1, r4, #12
 800f0ae:	0092      	lsls	r2, r2, #2
 800f0b0:	300c      	adds	r0, #12
 800f0b2:	f7fe fed8 	bl	800de66 <memcpy>
 800f0b6:	4621      	mov	r1, r4
 800f0b8:	9801      	ldr	r0, [sp, #4]
 800f0ba:	f000 f93b 	bl	800f334 <_Bfree>
 800f0be:	464c      	mov	r4, r9
 800f0c0:	6923      	ldr	r3, [r4, #16]
 800f0c2:	1c5a      	adds	r2, r3, #1
 800f0c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f0c8:	6122      	str	r2, [r4, #16]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	615a      	str	r2, [r3, #20]
 800f0ce:	e7be      	b.n	800f04e <__gethex+0x362>
 800f0d0:	6922      	ldr	r2, [r4, #16]
 800f0d2:	455a      	cmp	r2, fp
 800f0d4:	dd0b      	ble.n	800f0ee <__gethex+0x402>
 800f0d6:	2101      	movs	r1, #1
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f7ff fd9f 	bl	800ec1c <rshift>
 800f0de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0e2:	3701      	adds	r7, #1
 800f0e4:	42bb      	cmp	r3, r7
 800f0e6:	f6ff aee0 	blt.w	800eeaa <__gethex+0x1be>
 800f0ea:	2501      	movs	r5, #1
 800f0ec:	e7c2      	b.n	800f074 <__gethex+0x388>
 800f0ee:	f016 061f 	ands.w	r6, r6, #31
 800f0f2:	d0fa      	beq.n	800f0ea <__gethex+0x3fe>
 800f0f4:	4453      	add	r3, sl
 800f0f6:	f1c6 0620 	rsb	r6, r6, #32
 800f0fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f0fe:	f000 f9cb 	bl	800f498 <__hi0bits>
 800f102:	42b0      	cmp	r0, r6
 800f104:	dbe7      	blt.n	800f0d6 <__gethex+0x3ea>
 800f106:	e7f0      	b.n	800f0ea <__gethex+0x3fe>
 800f108:	08010584 	.word	0x08010584

0800f10c <L_shift>:
 800f10c:	f1c2 0208 	rsb	r2, r2, #8
 800f110:	0092      	lsls	r2, r2, #2
 800f112:	b570      	push	{r4, r5, r6, lr}
 800f114:	f1c2 0620 	rsb	r6, r2, #32
 800f118:	6843      	ldr	r3, [r0, #4]
 800f11a:	6804      	ldr	r4, [r0, #0]
 800f11c:	fa03 f506 	lsl.w	r5, r3, r6
 800f120:	432c      	orrs	r4, r5
 800f122:	40d3      	lsrs	r3, r2
 800f124:	6004      	str	r4, [r0, #0]
 800f126:	f840 3f04 	str.w	r3, [r0, #4]!
 800f12a:	4288      	cmp	r0, r1
 800f12c:	d3f4      	bcc.n	800f118 <L_shift+0xc>
 800f12e:	bd70      	pop	{r4, r5, r6, pc}

0800f130 <__match>:
 800f130:	b530      	push	{r4, r5, lr}
 800f132:	6803      	ldr	r3, [r0, #0]
 800f134:	3301      	adds	r3, #1
 800f136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f13a:	b914      	cbnz	r4, 800f142 <__match+0x12>
 800f13c:	6003      	str	r3, [r0, #0]
 800f13e:	2001      	movs	r0, #1
 800f140:	bd30      	pop	{r4, r5, pc}
 800f142:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f146:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f14a:	2d19      	cmp	r5, #25
 800f14c:	bf98      	it	ls
 800f14e:	3220      	addls	r2, #32
 800f150:	42a2      	cmp	r2, r4
 800f152:	d0f0      	beq.n	800f136 <__match+0x6>
 800f154:	2000      	movs	r0, #0
 800f156:	e7f3      	b.n	800f140 <__match+0x10>

0800f158 <__hexnan>:
 800f158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15c:	680b      	ldr	r3, [r1, #0]
 800f15e:	6801      	ldr	r1, [r0, #0]
 800f160:	115e      	asrs	r6, r3, #5
 800f162:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f166:	f013 031f 	ands.w	r3, r3, #31
 800f16a:	b087      	sub	sp, #28
 800f16c:	bf18      	it	ne
 800f16e:	3604      	addne	r6, #4
 800f170:	2500      	movs	r5, #0
 800f172:	1f37      	subs	r7, r6, #4
 800f174:	4682      	mov	sl, r0
 800f176:	4690      	mov	r8, r2
 800f178:	9301      	str	r3, [sp, #4]
 800f17a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f17e:	46b9      	mov	r9, r7
 800f180:	463c      	mov	r4, r7
 800f182:	9502      	str	r5, [sp, #8]
 800f184:	46ab      	mov	fp, r5
 800f186:	784a      	ldrb	r2, [r1, #1]
 800f188:	1c4b      	adds	r3, r1, #1
 800f18a:	9303      	str	r3, [sp, #12]
 800f18c:	b342      	cbz	r2, 800f1e0 <__hexnan+0x88>
 800f18e:	4610      	mov	r0, r2
 800f190:	9105      	str	r1, [sp, #20]
 800f192:	9204      	str	r2, [sp, #16]
 800f194:	f7ff fd94 	bl	800ecc0 <__hexdig_fun>
 800f198:	2800      	cmp	r0, #0
 800f19a:	d151      	bne.n	800f240 <__hexnan+0xe8>
 800f19c:	9a04      	ldr	r2, [sp, #16]
 800f19e:	9905      	ldr	r1, [sp, #20]
 800f1a0:	2a20      	cmp	r2, #32
 800f1a2:	d818      	bhi.n	800f1d6 <__hexnan+0x7e>
 800f1a4:	9b02      	ldr	r3, [sp, #8]
 800f1a6:	459b      	cmp	fp, r3
 800f1a8:	dd13      	ble.n	800f1d2 <__hexnan+0x7a>
 800f1aa:	454c      	cmp	r4, r9
 800f1ac:	d206      	bcs.n	800f1bc <__hexnan+0x64>
 800f1ae:	2d07      	cmp	r5, #7
 800f1b0:	dc04      	bgt.n	800f1bc <__hexnan+0x64>
 800f1b2:	462a      	mov	r2, r5
 800f1b4:	4649      	mov	r1, r9
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f7ff ffa8 	bl	800f10c <L_shift>
 800f1bc:	4544      	cmp	r4, r8
 800f1be:	d952      	bls.n	800f266 <__hexnan+0x10e>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	f1a4 0904 	sub.w	r9, r4, #4
 800f1c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1ca:	f8cd b008 	str.w	fp, [sp, #8]
 800f1ce:	464c      	mov	r4, r9
 800f1d0:	461d      	mov	r5, r3
 800f1d2:	9903      	ldr	r1, [sp, #12]
 800f1d4:	e7d7      	b.n	800f186 <__hexnan+0x2e>
 800f1d6:	2a29      	cmp	r2, #41	@ 0x29
 800f1d8:	d157      	bne.n	800f28a <__hexnan+0x132>
 800f1da:	3102      	adds	r1, #2
 800f1dc:	f8ca 1000 	str.w	r1, [sl]
 800f1e0:	f1bb 0f00 	cmp.w	fp, #0
 800f1e4:	d051      	beq.n	800f28a <__hexnan+0x132>
 800f1e6:	454c      	cmp	r4, r9
 800f1e8:	d206      	bcs.n	800f1f8 <__hexnan+0xa0>
 800f1ea:	2d07      	cmp	r5, #7
 800f1ec:	dc04      	bgt.n	800f1f8 <__hexnan+0xa0>
 800f1ee:	462a      	mov	r2, r5
 800f1f0:	4649      	mov	r1, r9
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f7ff ff8a 	bl	800f10c <L_shift>
 800f1f8:	4544      	cmp	r4, r8
 800f1fa:	d936      	bls.n	800f26a <__hexnan+0x112>
 800f1fc:	f1a8 0204 	sub.w	r2, r8, #4
 800f200:	4623      	mov	r3, r4
 800f202:	f853 1b04 	ldr.w	r1, [r3], #4
 800f206:	f842 1f04 	str.w	r1, [r2, #4]!
 800f20a:	429f      	cmp	r7, r3
 800f20c:	d2f9      	bcs.n	800f202 <__hexnan+0xaa>
 800f20e:	1b3b      	subs	r3, r7, r4
 800f210:	f023 0303 	bic.w	r3, r3, #3
 800f214:	3304      	adds	r3, #4
 800f216:	3401      	adds	r4, #1
 800f218:	3e03      	subs	r6, #3
 800f21a:	42b4      	cmp	r4, r6
 800f21c:	bf88      	it	hi
 800f21e:	2304      	movhi	r3, #4
 800f220:	4443      	add	r3, r8
 800f222:	2200      	movs	r2, #0
 800f224:	f843 2b04 	str.w	r2, [r3], #4
 800f228:	429f      	cmp	r7, r3
 800f22a:	d2fb      	bcs.n	800f224 <__hexnan+0xcc>
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	b91b      	cbnz	r3, 800f238 <__hexnan+0xe0>
 800f230:	4547      	cmp	r7, r8
 800f232:	d128      	bne.n	800f286 <__hexnan+0x12e>
 800f234:	2301      	movs	r3, #1
 800f236:	603b      	str	r3, [r7, #0]
 800f238:	2005      	movs	r0, #5
 800f23a:	b007      	add	sp, #28
 800f23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f240:	3501      	adds	r5, #1
 800f242:	2d08      	cmp	r5, #8
 800f244:	f10b 0b01 	add.w	fp, fp, #1
 800f248:	dd06      	ble.n	800f258 <__hexnan+0x100>
 800f24a:	4544      	cmp	r4, r8
 800f24c:	d9c1      	bls.n	800f1d2 <__hexnan+0x7a>
 800f24e:	2300      	movs	r3, #0
 800f250:	f844 3c04 	str.w	r3, [r4, #-4]
 800f254:	2501      	movs	r5, #1
 800f256:	3c04      	subs	r4, #4
 800f258:	6822      	ldr	r2, [r4, #0]
 800f25a:	f000 000f 	and.w	r0, r0, #15
 800f25e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f262:	6020      	str	r0, [r4, #0]
 800f264:	e7b5      	b.n	800f1d2 <__hexnan+0x7a>
 800f266:	2508      	movs	r5, #8
 800f268:	e7b3      	b.n	800f1d2 <__hexnan+0x7a>
 800f26a:	9b01      	ldr	r3, [sp, #4]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d0dd      	beq.n	800f22c <__hexnan+0xd4>
 800f270:	f1c3 0320 	rsb	r3, r3, #32
 800f274:	f04f 32ff 	mov.w	r2, #4294967295
 800f278:	40da      	lsrs	r2, r3
 800f27a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f27e:	4013      	ands	r3, r2
 800f280:	f846 3c04 	str.w	r3, [r6, #-4]
 800f284:	e7d2      	b.n	800f22c <__hexnan+0xd4>
 800f286:	3f04      	subs	r7, #4
 800f288:	e7d0      	b.n	800f22c <__hexnan+0xd4>
 800f28a:	2004      	movs	r0, #4
 800f28c:	e7d5      	b.n	800f23a <__hexnan+0xe2>

0800f28e <__ascii_mbtowc>:
 800f28e:	b082      	sub	sp, #8
 800f290:	b901      	cbnz	r1, 800f294 <__ascii_mbtowc+0x6>
 800f292:	a901      	add	r1, sp, #4
 800f294:	b142      	cbz	r2, 800f2a8 <__ascii_mbtowc+0x1a>
 800f296:	b14b      	cbz	r3, 800f2ac <__ascii_mbtowc+0x1e>
 800f298:	7813      	ldrb	r3, [r2, #0]
 800f29a:	600b      	str	r3, [r1, #0]
 800f29c:	7812      	ldrb	r2, [r2, #0]
 800f29e:	1e10      	subs	r0, r2, #0
 800f2a0:	bf18      	it	ne
 800f2a2:	2001      	movne	r0, #1
 800f2a4:	b002      	add	sp, #8
 800f2a6:	4770      	bx	lr
 800f2a8:	4610      	mov	r0, r2
 800f2aa:	e7fb      	b.n	800f2a4 <__ascii_mbtowc+0x16>
 800f2ac:	f06f 0001 	mvn.w	r0, #1
 800f2b0:	e7f8      	b.n	800f2a4 <__ascii_mbtowc+0x16>
	...

0800f2b4 <_Balloc>:
 800f2b4:	b570      	push	{r4, r5, r6, lr}
 800f2b6:	69c6      	ldr	r6, [r0, #28]
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	460d      	mov	r5, r1
 800f2bc:	b976      	cbnz	r6, 800f2dc <_Balloc+0x28>
 800f2be:	2010      	movs	r0, #16
 800f2c0:	f7fc ffec 	bl	800c29c <malloc>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	61e0      	str	r0, [r4, #28]
 800f2c8:	b920      	cbnz	r0, 800f2d4 <_Balloc+0x20>
 800f2ca:	4b18      	ldr	r3, [pc, #96]	@ (800f32c <_Balloc+0x78>)
 800f2cc:	4818      	ldr	r0, [pc, #96]	@ (800f330 <_Balloc+0x7c>)
 800f2ce:	216b      	movs	r1, #107	@ 0x6b
 800f2d0:	f7fe fde2 	bl	800de98 <__assert_func>
 800f2d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2d8:	6006      	str	r6, [r0, #0]
 800f2da:	60c6      	str	r6, [r0, #12]
 800f2dc:	69e6      	ldr	r6, [r4, #28]
 800f2de:	68f3      	ldr	r3, [r6, #12]
 800f2e0:	b183      	cbz	r3, 800f304 <_Balloc+0x50>
 800f2e2:	69e3      	ldr	r3, [r4, #28]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2ea:	b9b8      	cbnz	r0, 800f31c <_Balloc+0x68>
 800f2ec:	2101      	movs	r1, #1
 800f2ee:	fa01 f605 	lsl.w	r6, r1, r5
 800f2f2:	1d72      	adds	r2, r6, #5
 800f2f4:	0092      	lsls	r2, r2, #2
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f000 ff2d 	bl	8010156 <_calloc_r>
 800f2fc:	b160      	cbz	r0, 800f318 <_Balloc+0x64>
 800f2fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f302:	e00e      	b.n	800f322 <_Balloc+0x6e>
 800f304:	2221      	movs	r2, #33	@ 0x21
 800f306:	2104      	movs	r1, #4
 800f308:	4620      	mov	r0, r4
 800f30a:	f000 ff24 	bl	8010156 <_calloc_r>
 800f30e:	69e3      	ldr	r3, [r4, #28]
 800f310:	60f0      	str	r0, [r6, #12]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d1e4      	bne.n	800f2e2 <_Balloc+0x2e>
 800f318:	2000      	movs	r0, #0
 800f31a:	bd70      	pop	{r4, r5, r6, pc}
 800f31c:	6802      	ldr	r2, [r0, #0]
 800f31e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f322:	2300      	movs	r3, #0
 800f324:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f328:	e7f7      	b.n	800f31a <_Balloc+0x66>
 800f32a:	bf00      	nop
 800f32c:	0801046a 	.word	0x0801046a
 800f330:	080105f5 	.word	0x080105f5

0800f334 <_Bfree>:
 800f334:	b570      	push	{r4, r5, r6, lr}
 800f336:	69c6      	ldr	r6, [r0, #28]
 800f338:	4605      	mov	r5, r0
 800f33a:	460c      	mov	r4, r1
 800f33c:	b976      	cbnz	r6, 800f35c <_Bfree+0x28>
 800f33e:	2010      	movs	r0, #16
 800f340:	f7fc ffac 	bl	800c29c <malloc>
 800f344:	4602      	mov	r2, r0
 800f346:	61e8      	str	r0, [r5, #28]
 800f348:	b920      	cbnz	r0, 800f354 <_Bfree+0x20>
 800f34a:	4b09      	ldr	r3, [pc, #36]	@ (800f370 <_Bfree+0x3c>)
 800f34c:	4809      	ldr	r0, [pc, #36]	@ (800f374 <_Bfree+0x40>)
 800f34e:	218f      	movs	r1, #143	@ 0x8f
 800f350:	f7fe fda2 	bl	800de98 <__assert_func>
 800f354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f358:	6006      	str	r6, [r0, #0]
 800f35a:	60c6      	str	r6, [r0, #12]
 800f35c:	b13c      	cbz	r4, 800f36e <_Bfree+0x3a>
 800f35e:	69eb      	ldr	r3, [r5, #28]
 800f360:	6862      	ldr	r2, [r4, #4]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f368:	6021      	str	r1, [r4, #0]
 800f36a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f36e:	bd70      	pop	{r4, r5, r6, pc}
 800f370:	0801046a 	.word	0x0801046a
 800f374:	080105f5 	.word	0x080105f5

0800f378 <__multadd>:
 800f378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f37c:	690d      	ldr	r5, [r1, #16]
 800f37e:	4607      	mov	r7, r0
 800f380:	460c      	mov	r4, r1
 800f382:	461e      	mov	r6, r3
 800f384:	f101 0c14 	add.w	ip, r1, #20
 800f388:	2000      	movs	r0, #0
 800f38a:	f8dc 3000 	ldr.w	r3, [ip]
 800f38e:	b299      	uxth	r1, r3
 800f390:	fb02 6101 	mla	r1, r2, r1, r6
 800f394:	0c1e      	lsrs	r6, r3, #16
 800f396:	0c0b      	lsrs	r3, r1, #16
 800f398:	fb02 3306 	mla	r3, r2, r6, r3
 800f39c:	b289      	uxth	r1, r1
 800f39e:	3001      	adds	r0, #1
 800f3a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3a4:	4285      	cmp	r5, r0
 800f3a6:	f84c 1b04 	str.w	r1, [ip], #4
 800f3aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3ae:	dcec      	bgt.n	800f38a <__multadd+0x12>
 800f3b0:	b30e      	cbz	r6, 800f3f6 <__multadd+0x7e>
 800f3b2:	68a3      	ldr	r3, [r4, #8]
 800f3b4:	42ab      	cmp	r3, r5
 800f3b6:	dc19      	bgt.n	800f3ec <__multadd+0x74>
 800f3b8:	6861      	ldr	r1, [r4, #4]
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	3101      	adds	r1, #1
 800f3be:	f7ff ff79 	bl	800f2b4 <_Balloc>
 800f3c2:	4680      	mov	r8, r0
 800f3c4:	b928      	cbnz	r0, 800f3d2 <__multadd+0x5a>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	4b0c      	ldr	r3, [pc, #48]	@ (800f3fc <__multadd+0x84>)
 800f3ca:	480d      	ldr	r0, [pc, #52]	@ (800f400 <__multadd+0x88>)
 800f3cc:	21ba      	movs	r1, #186	@ 0xba
 800f3ce:	f7fe fd63 	bl	800de98 <__assert_func>
 800f3d2:	6922      	ldr	r2, [r4, #16]
 800f3d4:	3202      	adds	r2, #2
 800f3d6:	f104 010c 	add.w	r1, r4, #12
 800f3da:	0092      	lsls	r2, r2, #2
 800f3dc:	300c      	adds	r0, #12
 800f3de:	f7fe fd42 	bl	800de66 <memcpy>
 800f3e2:	4621      	mov	r1, r4
 800f3e4:	4638      	mov	r0, r7
 800f3e6:	f7ff ffa5 	bl	800f334 <_Bfree>
 800f3ea:	4644      	mov	r4, r8
 800f3ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f3f0:	3501      	adds	r5, #1
 800f3f2:	615e      	str	r6, [r3, #20]
 800f3f4:	6125      	str	r5, [r4, #16]
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3fc:	08010584 	.word	0x08010584
 800f400:	080105f5 	.word	0x080105f5

0800f404 <__s2b>:
 800f404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f408:	460c      	mov	r4, r1
 800f40a:	4615      	mov	r5, r2
 800f40c:	461f      	mov	r7, r3
 800f40e:	2209      	movs	r2, #9
 800f410:	3308      	adds	r3, #8
 800f412:	4606      	mov	r6, r0
 800f414:	fb93 f3f2 	sdiv	r3, r3, r2
 800f418:	2100      	movs	r1, #0
 800f41a:	2201      	movs	r2, #1
 800f41c:	429a      	cmp	r2, r3
 800f41e:	db09      	blt.n	800f434 <__s2b+0x30>
 800f420:	4630      	mov	r0, r6
 800f422:	f7ff ff47 	bl	800f2b4 <_Balloc>
 800f426:	b940      	cbnz	r0, 800f43a <__s2b+0x36>
 800f428:	4602      	mov	r2, r0
 800f42a:	4b19      	ldr	r3, [pc, #100]	@ (800f490 <__s2b+0x8c>)
 800f42c:	4819      	ldr	r0, [pc, #100]	@ (800f494 <__s2b+0x90>)
 800f42e:	21d3      	movs	r1, #211	@ 0xd3
 800f430:	f7fe fd32 	bl	800de98 <__assert_func>
 800f434:	0052      	lsls	r2, r2, #1
 800f436:	3101      	adds	r1, #1
 800f438:	e7f0      	b.n	800f41c <__s2b+0x18>
 800f43a:	9b08      	ldr	r3, [sp, #32]
 800f43c:	6143      	str	r3, [r0, #20]
 800f43e:	2d09      	cmp	r5, #9
 800f440:	f04f 0301 	mov.w	r3, #1
 800f444:	6103      	str	r3, [r0, #16]
 800f446:	dd16      	ble.n	800f476 <__s2b+0x72>
 800f448:	f104 0909 	add.w	r9, r4, #9
 800f44c:	46c8      	mov	r8, r9
 800f44e:	442c      	add	r4, r5
 800f450:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f454:	4601      	mov	r1, r0
 800f456:	3b30      	subs	r3, #48	@ 0x30
 800f458:	220a      	movs	r2, #10
 800f45a:	4630      	mov	r0, r6
 800f45c:	f7ff ff8c 	bl	800f378 <__multadd>
 800f460:	45a0      	cmp	r8, r4
 800f462:	d1f5      	bne.n	800f450 <__s2b+0x4c>
 800f464:	f1a5 0408 	sub.w	r4, r5, #8
 800f468:	444c      	add	r4, r9
 800f46a:	1b2d      	subs	r5, r5, r4
 800f46c:	1963      	adds	r3, r4, r5
 800f46e:	42bb      	cmp	r3, r7
 800f470:	db04      	blt.n	800f47c <__s2b+0x78>
 800f472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f476:	340a      	adds	r4, #10
 800f478:	2509      	movs	r5, #9
 800f47a:	e7f6      	b.n	800f46a <__s2b+0x66>
 800f47c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f480:	4601      	mov	r1, r0
 800f482:	3b30      	subs	r3, #48	@ 0x30
 800f484:	220a      	movs	r2, #10
 800f486:	4630      	mov	r0, r6
 800f488:	f7ff ff76 	bl	800f378 <__multadd>
 800f48c:	e7ee      	b.n	800f46c <__s2b+0x68>
 800f48e:	bf00      	nop
 800f490:	08010584 	.word	0x08010584
 800f494:	080105f5 	.word	0x080105f5

0800f498 <__hi0bits>:
 800f498:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f49c:	4603      	mov	r3, r0
 800f49e:	bf36      	itet	cc
 800f4a0:	0403      	lslcc	r3, r0, #16
 800f4a2:	2000      	movcs	r0, #0
 800f4a4:	2010      	movcc	r0, #16
 800f4a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4aa:	bf3c      	itt	cc
 800f4ac:	021b      	lslcc	r3, r3, #8
 800f4ae:	3008      	addcc	r0, #8
 800f4b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4b4:	bf3c      	itt	cc
 800f4b6:	011b      	lslcc	r3, r3, #4
 800f4b8:	3004      	addcc	r0, #4
 800f4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4be:	bf3c      	itt	cc
 800f4c0:	009b      	lslcc	r3, r3, #2
 800f4c2:	3002      	addcc	r0, #2
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	db05      	blt.n	800f4d4 <__hi0bits+0x3c>
 800f4c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f4cc:	f100 0001 	add.w	r0, r0, #1
 800f4d0:	bf08      	it	eq
 800f4d2:	2020      	moveq	r0, #32
 800f4d4:	4770      	bx	lr

0800f4d6 <__lo0bits>:
 800f4d6:	6803      	ldr	r3, [r0, #0]
 800f4d8:	4602      	mov	r2, r0
 800f4da:	f013 0007 	ands.w	r0, r3, #7
 800f4de:	d00b      	beq.n	800f4f8 <__lo0bits+0x22>
 800f4e0:	07d9      	lsls	r1, r3, #31
 800f4e2:	d421      	bmi.n	800f528 <__lo0bits+0x52>
 800f4e4:	0798      	lsls	r0, r3, #30
 800f4e6:	bf49      	itett	mi
 800f4e8:	085b      	lsrmi	r3, r3, #1
 800f4ea:	089b      	lsrpl	r3, r3, #2
 800f4ec:	2001      	movmi	r0, #1
 800f4ee:	6013      	strmi	r3, [r2, #0]
 800f4f0:	bf5c      	itt	pl
 800f4f2:	6013      	strpl	r3, [r2, #0]
 800f4f4:	2002      	movpl	r0, #2
 800f4f6:	4770      	bx	lr
 800f4f8:	b299      	uxth	r1, r3
 800f4fa:	b909      	cbnz	r1, 800f500 <__lo0bits+0x2a>
 800f4fc:	0c1b      	lsrs	r3, r3, #16
 800f4fe:	2010      	movs	r0, #16
 800f500:	b2d9      	uxtb	r1, r3
 800f502:	b909      	cbnz	r1, 800f508 <__lo0bits+0x32>
 800f504:	3008      	adds	r0, #8
 800f506:	0a1b      	lsrs	r3, r3, #8
 800f508:	0719      	lsls	r1, r3, #28
 800f50a:	bf04      	itt	eq
 800f50c:	091b      	lsreq	r3, r3, #4
 800f50e:	3004      	addeq	r0, #4
 800f510:	0799      	lsls	r1, r3, #30
 800f512:	bf04      	itt	eq
 800f514:	089b      	lsreq	r3, r3, #2
 800f516:	3002      	addeq	r0, #2
 800f518:	07d9      	lsls	r1, r3, #31
 800f51a:	d403      	bmi.n	800f524 <__lo0bits+0x4e>
 800f51c:	085b      	lsrs	r3, r3, #1
 800f51e:	f100 0001 	add.w	r0, r0, #1
 800f522:	d003      	beq.n	800f52c <__lo0bits+0x56>
 800f524:	6013      	str	r3, [r2, #0]
 800f526:	4770      	bx	lr
 800f528:	2000      	movs	r0, #0
 800f52a:	4770      	bx	lr
 800f52c:	2020      	movs	r0, #32
 800f52e:	4770      	bx	lr

0800f530 <__i2b>:
 800f530:	b510      	push	{r4, lr}
 800f532:	460c      	mov	r4, r1
 800f534:	2101      	movs	r1, #1
 800f536:	f7ff febd 	bl	800f2b4 <_Balloc>
 800f53a:	4602      	mov	r2, r0
 800f53c:	b928      	cbnz	r0, 800f54a <__i2b+0x1a>
 800f53e:	4b05      	ldr	r3, [pc, #20]	@ (800f554 <__i2b+0x24>)
 800f540:	4805      	ldr	r0, [pc, #20]	@ (800f558 <__i2b+0x28>)
 800f542:	f240 1145 	movw	r1, #325	@ 0x145
 800f546:	f7fe fca7 	bl	800de98 <__assert_func>
 800f54a:	2301      	movs	r3, #1
 800f54c:	6144      	str	r4, [r0, #20]
 800f54e:	6103      	str	r3, [r0, #16]
 800f550:	bd10      	pop	{r4, pc}
 800f552:	bf00      	nop
 800f554:	08010584 	.word	0x08010584
 800f558:	080105f5 	.word	0x080105f5

0800f55c <__multiply>:
 800f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f560:	4617      	mov	r7, r2
 800f562:	690a      	ldr	r2, [r1, #16]
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	429a      	cmp	r2, r3
 800f568:	bfa8      	it	ge
 800f56a:	463b      	movge	r3, r7
 800f56c:	4689      	mov	r9, r1
 800f56e:	bfa4      	itt	ge
 800f570:	460f      	movge	r7, r1
 800f572:	4699      	movge	r9, r3
 800f574:	693d      	ldr	r5, [r7, #16]
 800f576:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	6879      	ldr	r1, [r7, #4]
 800f57e:	eb05 060a 	add.w	r6, r5, sl
 800f582:	42b3      	cmp	r3, r6
 800f584:	b085      	sub	sp, #20
 800f586:	bfb8      	it	lt
 800f588:	3101      	addlt	r1, #1
 800f58a:	f7ff fe93 	bl	800f2b4 <_Balloc>
 800f58e:	b930      	cbnz	r0, 800f59e <__multiply+0x42>
 800f590:	4602      	mov	r2, r0
 800f592:	4b41      	ldr	r3, [pc, #260]	@ (800f698 <__multiply+0x13c>)
 800f594:	4841      	ldr	r0, [pc, #260]	@ (800f69c <__multiply+0x140>)
 800f596:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f59a:	f7fe fc7d 	bl	800de98 <__assert_func>
 800f59e:	f100 0414 	add.w	r4, r0, #20
 800f5a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f5a6:	4623      	mov	r3, r4
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	4573      	cmp	r3, lr
 800f5ac:	d320      	bcc.n	800f5f0 <__multiply+0x94>
 800f5ae:	f107 0814 	add.w	r8, r7, #20
 800f5b2:	f109 0114 	add.w	r1, r9, #20
 800f5b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f5ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f5be:	9302      	str	r3, [sp, #8]
 800f5c0:	1beb      	subs	r3, r5, r7
 800f5c2:	3b15      	subs	r3, #21
 800f5c4:	f023 0303 	bic.w	r3, r3, #3
 800f5c8:	3304      	adds	r3, #4
 800f5ca:	3715      	adds	r7, #21
 800f5cc:	42bd      	cmp	r5, r7
 800f5ce:	bf38      	it	cc
 800f5d0:	2304      	movcc	r3, #4
 800f5d2:	9301      	str	r3, [sp, #4]
 800f5d4:	9b02      	ldr	r3, [sp, #8]
 800f5d6:	9103      	str	r1, [sp, #12]
 800f5d8:	428b      	cmp	r3, r1
 800f5da:	d80c      	bhi.n	800f5f6 <__multiply+0x9a>
 800f5dc:	2e00      	cmp	r6, #0
 800f5de:	dd03      	ble.n	800f5e8 <__multiply+0x8c>
 800f5e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d055      	beq.n	800f694 <__multiply+0x138>
 800f5e8:	6106      	str	r6, [r0, #16]
 800f5ea:	b005      	add	sp, #20
 800f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f0:	f843 2b04 	str.w	r2, [r3], #4
 800f5f4:	e7d9      	b.n	800f5aa <__multiply+0x4e>
 800f5f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f5fa:	f1ba 0f00 	cmp.w	sl, #0
 800f5fe:	d01f      	beq.n	800f640 <__multiply+0xe4>
 800f600:	46c4      	mov	ip, r8
 800f602:	46a1      	mov	r9, r4
 800f604:	2700      	movs	r7, #0
 800f606:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f60a:	f8d9 3000 	ldr.w	r3, [r9]
 800f60e:	fa1f fb82 	uxth.w	fp, r2
 800f612:	b29b      	uxth	r3, r3
 800f614:	fb0a 330b 	mla	r3, sl, fp, r3
 800f618:	443b      	add	r3, r7
 800f61a:	f8d9 7000 	ldr.w	r7, [r9]
 800f61e:	0c12      	lsrs	r2, r2, #16
 800f620:	0c3f      	lsrs	r7, r7, #16
 800f622:	fb0a 7202 	mla	r2, sl, r2, r7
 800f626:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f630:	4565      	cmp	r5, ip
 800f632:	f849 3b04 	str.w	r3, [r9], #4
 800f636:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f63a:	d8e4      	bhi.n	800f606 <__multiply+0xaa>
 800f63c:	9b01      	ldr	r3, [sp, #4]
 800f63e:	50e7      	str	r7, [r4, r3]
 800f640:	9b03      	ldr	r3, [sp, #12]
 800f642:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f646:	3104      	adds	r1, #4
 800f648:	f1b9 0f00 	cmp.w	r9, #0
 800f64c:	d020      	beq.n	800f690 <__multiply+0x134>
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	4647      	mov	r7, r8
 800f652:	46a4      	mov	ip, r4
 800f654:	f04f 0a00 	mov.w	sl, #0
 800f658:	f8b7 b000 	ldrh.w	fp, [r7]
 800f65c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f660:	fb09 220b 	mla	r2, r9, fp, r2
 800f664:	4452      	add	r2, sl
 800f666:	b29b      	uxth	r3, r3
 800f668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f66c:	f84c 3b04 	str.w	r3, [ip], #4
 800f670:	f857 3b04 	ldr.w	r3, [r7], #4
 800f674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f678:	f8bc 3000 	ldrh.w	r3, [ip]
 800f67c:	fb09 330a 	mla	r3, r9, sl, r3
 800f680:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f684:	42bd      	cmp	r5, r7
 800f686:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f68a:	d8e5      	bhi.n	800f658 <__multiply+0xfc>
 800f68c:	9a01      	ldr	r2, [sp, #4]
 800f68e:	50a3      	str	r3, [r4, r2]
 800f690:	3404      	adds	r4, #4
 800f692:	e79f      	b.n	800f5d4 <__multiply+0x78>
 800f694:	3e01      	subs	r6, #1
 800f696:	e7a1      	b.n	800f5dc <__multiply+0x80>
 800f698:	08010584 	.word	0x08010584
 800f69c:	080105f5 	.word	0x080105f5

0800f6a0 <__pow5mult>:
 800f6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6a4:	4615      	mov	r5, r2
 800f6a6:	f012 0203 	ands.w	r2, r2, #3
 800f6aa:	4607      	mov	r7, r0
 800f6ac:	460e      	mov	r6, r1
 800f6ae:	d007      	beq.n	800f6c0 <__pow5mult+0x20>
 800f6b0:	4c25      	ldr	r4, [pc, #148]	@ (800f748 <__pow5mult+0xa8>)
 800f6b2:	3a01      	subs	r2, #1
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6ba:	f7ff fe5d 	bl	800f378 <__multadd>
 800f6be:	4606      	mov	r6, r0
 800f6c0:	10ad      	asrs	r5, r5, #2
 800f6c2:	d03d      	beq.n	800f740 <__pow5mult+0xa0>
 800f6c4:	69fc      	ldr	r4, [r7, #28]
 800f6c6:	b97c      	cbnz	r4, 800f6e8 <__pow5mult+0x48>
 800f6c8:	2010      	movs	r0, #16
 800f6ca:	f7fc fde7 	bl	800c29c <malloc>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	61f8      	str	r0, [r7, #28]
 800f6d2:	b928      	cbnz	r0, 800f6e0 <__pow5mult+0x40>
 800f6d4:	4b1d      	ldr	r3, [pc, #116]	@ (800f74c <__pow5mult+0xac>)
 800f6d6:	481e      	ldr	r0, [pc, #120]	@ (800f750 <__pow5mult+0xb0>)
 800f6d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f6dc:	f7fe fbdc 	bl	800de98 <__assert_func>
 800f6e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6e4:	6004      	str	r4, [r0, #0]
 800f6e6:	60c4      	str	r4, [r0, #12]
 800f6e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f6ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6f0:	b94c      	cbnz	r4, 800f706 <__pow5mult+0x66>
 800f6f2:	f240 2171 	movw	r1, #625	@ 0x271
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	f7ff ff1a 	bl	800f530 <__i2b>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800f702:	4604      	mov	r4, r0
 800f704:	6003      	str	r3, [r0, #0]
 800f706:	f04f 0900 	mov.w	r9, #0
 800f70a:	07eb      	lsls	r3, r5, #31
 800f70c:	d50a      	bpl.n	800f724 <__pow5mult+0x84>
 800f70e:	4631      	mov	r1, r6
 800f710:	4622      	mov	r2, r4
 800f712:	4638      	mov	r0, r7
 800f714:	f7ff ff22 	bl	800f55c <__multiply>
 800f718:	4631      	mov	r1, r6
 800f71a:	4680      	mov	r8, r0
 800f71c:	4638      	mov	r0, r7
 800f71e:	f7ff fe09 	bl	800f334 <_Bfree>
 800f722:	4646      	mov	r6, r8
 800f724:	106d      	asrs	r5, r5, #1
 800f726:	d00b      	beq.n	800f740 <__pow5mult+0xa0>
 800f728:	6820      	ldr	r0, [r4, #0]
 800f72a:	b938      	cbnz	r0, 800f73c <__pow5mult+0x9c>
 800f72c:	4622      	mov	r2, r4
 800f72e:	4621      	mov	r1, r4
 800f730:	4638      	mov	r0, r7
 800f732:	f7ff ff13 	bl	800f55c <__multiply>
 800f736:	6020      	str	r0, [r4, #0]
 800f738:	f8c0 9000 	str.w	r9, [r0]
 800f73c:	4604      	mov	r4, r0
 800f73e:	e7e4      	b.n	800f70a <__pow5mult+0x6a>
 800f740:	4630      	mov	r0, r6
 800f742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f746:	bf00      	nop
 800f748:	080107b4 	.word	0x080107b4
 800f74c:	0801046a 	.word	0x0801046a
 800f750:	080105f5 	.word	0x080105f5

0800f754 <__lshift>:
 800f754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f758:	460c      	mov	r4, r1
 800f75a:	6849      	ldr	r1, [r1, #4]
 800f75c:	6923      	ldr	r3, [r4, #16]
 800f75e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f762:	68a3      	ldr	r3, [r4, #8]
 800f764:	4607      	mov	r7, r0
 800f766:	4691      	mov	r9, r2
 800f768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f76c:	f108 0601 	add.w	r6, r8, #1
 800f770:	42b3      	cmp	r3, r6
 800f772:	db0b      	blt.n	800f78c <__lshift+0x38>
 800f774:	4638      	mov	r0, r7
 800f776:	f7ff fd9d 	bl	800f2b4 <_Balloc>
 800f77a:	4605      	mov	r5, r0
 800f77c:	b948      	cbnz	r0, 800f792 <__lshift+0x3e>
 800f77e:	4602      	mov	r2, r0
 800f780:	4b28      	ldr	r3, [pc, #160]	@ (800f824 <__lshift+0xd0>)
 800f782:	4829      	ldr	r0, [pc, #164]	@ (800f828 <__lshift+0xd4>)
 800f784:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f788:	f7fe fb86 	bl	800de98 <__assert_func>
 800f78c:	3101      	adds	r1, #1
 800f78e:	005b      	lsls	r3, r3, #1
 800f790:	e7ee      	b.n	800f770 <__lshift+0x1c>
 800f792:	2300      	movs	r3, #0
 800f794:	f100 0114 	add.w	r1, r0, #20
 800f798:	f100 0210 	add.w	r2, r0, #16
 800f79c:	4618      	mov	r0, r3
 800f79e:	4553      	cmp	r3, sl
 800f7a0:	db33      	blt.n	800f80a <__lshift+0xb6>
 800f7a2:	6920      	ldr	r0, [r4, #16]
 800f7a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7a8:	f104 0314 	add.w	r3, r4, #20
 800f7ac:	f019 091f 	ands.w	r9, r9, #31
 800f7b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7b8:	d02b      	beq.n	800f812 <__lshift+0xbe>
 800f7ba:	f1c9 0e20 	rsb	lr, r9, #32
 800f7be:	468a      	mov	sl, r1
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	6818      	ldr	r0, [r3, #0]
 800f7c4:	fa00 f009 	lsl.w	r0, r0, r9
 800f7c8:	4310      	orrs	r0, r2
 800f7ca:	f84a 0b04 	str.w	r0, [sl], #4
 800f7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7d2:	459c      	cmp	ip, r3
 800f7d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f7d8:	d8f3      	bhi.n	800f7c2 <__lshift+0x6e>
 800f7da:	ebac 0304 	sub.w	r3, ip, r4
 800f7de:	3b15      	subs	r3, #21
 800f7e0:	f023 0303 	bic.w	r3, r3, #3
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	f104 0015 	add.w	r0, r4, #21
 800f7ea:	4560      	cmp	r0, ip
 800f7ec:	bf88      	it	hi
 800f7ee:	2304      	movhi	r3, #4
 800f7f0:	50ca      	str	r2, [r1, r3]
 800f7f2:	b10a      	cbz	r2, 800f7f8 <__lshift+0xa4>
 800f7f4:	f108 0602 	add.w	r6, r8, #2
 800f7f8:	3e01      	subs	r6, #1
 800f7fa:	4638      	mov	r0, r7
 800f7fc:	612e      	str	r6, [r5, #16]
 800f7fe:	4621      	mov	r1, r4
 800f800:	f7ff fd98 	bl	800f334 <_Bfree>
 800f804:	4628      	mov	r0, r5
 800f806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f80a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f80e:	3301      	adds	r3, #1
 800f810:	e7c5      	b.n	800f79e <__lshift+0x4a>
 800f812:	3904      	subs	r1, #4
 800f814:	f853 2b04 	ldr.w	r2, [r3], #4
 800f818:	f841 2f04 	str.w	r2, [r1, #4]!
 800f81c:	459c      	cmp	ip, r3
 800f81e:	d8f9      	bhi.n	800f814 <__lshift+0xc0>
 800f820:	e7ea      	b.n	800f7f8 <__lshift+0xa4>
 800f822:	bf00      	nop
 800f824:	08010584 	.word	0x08010584
 800f828:	080105f5 	.word	0x080105f5

0800f82c <__mcmp>:
 800f82c:	690a      	ldr	r2, [r1, #16]
 800f82e:	4603      	mov	r3, r0
 800f830:	6900      	ldr	r0, [r0, #16]
 800f832:	1a80      	subs	r0, r0, r2
 800f834:	b530      	push	{r4, r5, lr}
 800f836:	d10e      	bne.n	800f856 <__mcmp+0x2a>
 800f838:	3314      	adds	r3, #20
 800f83a:	3114      	adds	r1, #20
 800f83c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f840:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f844:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f848:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f84c:	4295      	cmp	r5, r2
 800f84e:	d003      	beq.n	800f858 <__mcmp+0x2c>
 800f850:	d205      	bcs.n	800f85e <__mcmp+0x32>
 800f852:	f04f 30ff 	mov.w	r0, #4294967295
 800f856:	bd30      	pop	{r4, r5, pc}
 800f858:	42a3      	cmp	r3, r4
 800f85a:	d3f3      	bcc.n	800f844 <__mcmp+0x18>
 800f85c:	e7fb      	b.n	800f856 <__mcmp+0x2a>
 800f85e:	2001      	movs	r0, #1
 800f860:	e7f9      	b.n	800f856 <__mcmp+0x2a>
	...

0800f864 <__mdiff>:
 800f864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f868:	4689      	mov	r9, r1
 800f86a:	4606      	mov	r6, r0
 800f86c:	4611      	mov	r1, r2
 800f86e:	4648      	mov	r0, r9
 800f870:	4614      	mov	r4, r2
 800f872:	f7ff ffdb 	bl	800f82c <__mcmp>
 800f876:	1e05      	subs	r5, r0, #0
 800f878:	d112      	bne.n	800f8a0 <__mdiff+0x3c>
 800f87a:	4629      	mov	r1, r5
 800f87c:	4630      	mov	r0, r6
 800f87e:	f7ff fd19 	bl	800f2b4 <_Balloc>
 800f882:	4602      	mov	r2, r0
 800f884:	b928      	cbnz	r0, 800f892 <__mdiff+0x2e>
 800f886:	4b3f      	ldr	r3, [pc, #252]	@ (800f984 <__mdiff+0x120>)
 800f888:	f240 2137 	movw	r1, #567	@ 0x237
 800f88c:	483e      	ldr	r0, [pc, #248]	@ (800f988 <__mdiff+0x124>)
 800f88e:	f7fe fb03 	bl	800de98 <__assert_func>
 800f892:	2301      	movs	r3, #1
 800f894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f898:	4610      	mov	r0, r2
 800f89a:	b003      	add	sp, #12
 800f89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8a0:	bfbc      	itt	lt
 800f8a2:	464b      	movlt	r3, r9
 800f8a4:	46a1      	movlt	r9, r4
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f8ac:	bfba      	itte	lt
 800f8ae:	461c      	movlt	r4, r3
 800f8b0:	2501      	movlt	r5, #1
 800f8b2:	2500      	movge	r5, #0
 800f8b4:	f7ff fcfe 	bl	800f2b4 <_Balloc>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	b918      	cbnz	r0, 800f8c4 <__mdiff+0x60>
 800f8bc:	4b31      	ldr	r3, [pc, #196]	@ (800f984 <__mdiff+0x120>)
 800f8be:	f240 2145 	movw	r1, #581	@ 0x245
 800f8c2:	e7e3      	b.n	800f88c <__mdiff+0x28>
 800f8c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f8c8:	6926      	ldr	r6, [r4, #16]
 800f8ca:	60c5      	str	r5, [r0, #12]
 800f8cc:	f109 0310 	add.w	r3, r9, #16
 800f8d0:	f109 0514 	add.w	r5, r9, #20
 800f8d4:	f104 0e14 	add.w	lr, r4, #20
 800f8d8:	f100 0b14 	add.w	fp, r0, #20
 800f8dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f8e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f8e4:	9301      	str	r3, [sp, #4]
 800f8e6:	46d9      	mov	r9, fp
 800f8e8:	f04f 0c00 	mov.w	ip, #0
 800f8ec:	9b01      	ldr	r3, [sp, #4]
 800f8ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f8f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f8f6:	9301      	str	r3, [sp, #4]
 800f8f8:	fa1f f38a 	uxth.w	r3, sl
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	b283      	uxth	r3, r0
 800f900:	1acb      	subs	r3, r1, r3
 800f902:	0c00      	lsrs	r0, r0, #16
 800f904:	4463      	add	r3, ip
 800f906:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f90a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f90e:	b29b      	uxth	r3, r3
 800f910:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f914:	4576      	cmp	r6, lr
 800f916:	f849 3b04 	str.w	r3, [r9], #4
 800f91a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f91e:	d8e5      	bhi.n	800f8ec <__mdiff+0x88>
 800f920:	1b33      	subs	r3, r6, r4
 800f922:	3b15      	subs	r3, #21
 800f924:	f023 0303 	bic.w	r3, r3, #3
 800f928:	3415      	adds	r4, #21
 800f92a:	3304      	adds	r3, #4
 800f92c:	42a6      	cmp	r6, r4
 800f92e:	bf38      	it	cc
 800f930:	2304      	movcc	r3, #4
 800f932:	441d      	add	r5, r3
 800f934:	445b      	add	r3, fp
 800f936:	461e      	mov	r6, r3
 800f938:	462c      	mov	r4, r5
 800f93a:	4544      	cmp	r4, r8
 800f93c:	d30e      	bcc.n	800f95c <__mdiff+0xf8>
 800f93e:	f108 0103 	add.w	r1, r8, #3
 800f942:	1b49      	subs	r1, r1, r5
 800f944:	f021 0103 	bic.w	r1, r1, #3
 800f948:	3d03      	subs	r5, #3
 800f94a:	45a8      	cmp	r8, r5
 800f94c:	bf38      	it	cc
 800f94e:	2100      	movcc	r1, #0
 800f950:	440b      	add	r3, r1
 800f952:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f956:	b191      	cbz	r1, 800f97e <__mdiff+0x11a>
 800f958:	6117      	str	r7, [r2, #16]
 800f95a:	e79d      	b.n	800f898 <__mdiff+0x34>
 800f95c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f960:	46e6      	mov	lr, ip
 800f962:	0c08      	lsrs	r0, r1, #16
 800f964:	fa1c fc81 	uxtah	ip, ip, r1
 800f968:	4471      	add	r1, lr
 800f96a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f96e:	b289      	uxth	r1, r1
 800f970:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f974:	f846 1b04 	str.w	r1, [r6], #4
 800f978:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f97c:	e7dd      	b.n	800f93a <__mdiff+0xd6>
 800f97e:	3f01      	subs	r7, #1
 800f980:	e7e7      	b.n	800f952 <__mdiff+0xee>
 800f982:	bf00      	nop
 800f984:	08010584 	.word	0x08010584
 800f988:	080105f5 	.word	0x080105f5

0800f98c <__ulp>:
 800f98c:	b082      	sub	sp, #8
 800f98e:	ed8d 0b00 	vstr	d0, [sp]
 800f992:	9a01      	ldr	r2, [sp, #4]
 800f994:	4b0f      	ldr	r3, [pc, #60]	@ (800f9d4 <__ulp+0x48>)
 800f996:	4013      	ands	r3, r2
 800f998:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	dc08      	bgt.n	800f9b2 <__ulp+0x26>
 800f9a0:	425b      	negs	r3, r3
 800f9a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f9a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f9aa:	da04      	bge.n	800f9b6 <__ulp+0x2a>
 800f9ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f9b0:	4113      	asrs	r3, r2
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	e008      	b.n	800f9c8 <__ulp+0x3c>
 800f9b6:	f1a2 0314 	sub.w	r3, r2, #20
 800f9ba:	2b1e      	cmp	r3, #30
 800f9bc:	bfda      	itte	le
 800f9be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f9c2:	40da      	lsrle	r2, r3
 800f9c4:	2201      	movgt	r2, #1
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	4610      	mov	r0, r2
 800f9cc:	ec41 0b10 	vmov	d0, r0, r1
 800f9d0:	b002      	add	sp, #8
 800f9d2:	4770      	bx	lr
 800f9d4:	7ff00000 	.word	0x7ff00000

0800f9d8 <__b2d>:
 800f9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9dc:	6906      	ldr	r6, [r0, #16]
 800f9de:	f100 0814 	add.w	r8, r0, #20
 800f9e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f9e6:	1f37      	subs	r7, r6, #4
 800f9e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f9ec:	4610      	mov	r0, r2
 800f9ee:	f7ff fd53 	bl	800f498 <__hi0bits>
 800f9f2:	f1c0 0320 	rsb	r3, r0, #32
 800f9f6:	280a      	cmp	r0, #10
 800f9f8:	600b      	str	r3, [r1, #0]
 800f9fa:	491b      	ldr	r1, [pc, #108]	@ (800fa68 <__b2d+0x90>)
 800f9fc:	dc15      	bgt.n	800fa2a <__b2d+0x52>
 800f9fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa02:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa06:	45b8      	cmp	r8, r7
 800fa08:	ea43 0501 	orr.w	r5, r3, r1
 800fa0c:	bf34      	ite	cc
 800fa0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa12:	2300      	movcs	r3, #0
 800fa14:	3015      	adds	r0, #21
 800fa16:	fa02 f000 	lsl.w	r0, r2, r0
 800fa1a:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa1e:	4303      	orrs	r3, r0
 800fa20:	461c      	mov	r4, r3
 800fa22:	ec45 4b10 	vmov	d0, r4, r5
 800fa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa2a:	45b8      	cmp	r8, r7
 800fa2c:	bf3a      	itte	cc
 800fa2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa32:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa36:	2300      	movcs	r3, #0
 800fa38:	380b      	subs	r0, #11
 800fa3a:	d012      	beq.n	800fa62 <__b2d+0x8a>
 800fa3c:	f1c0 0120 	rsb	r1, r0, #32
 800fa40:	fa23 f401 	lsr.w	r4, r3, r1
 800fa44:	4082      	lsls	r2, r0
 800fa46:	4322      	orrs	r2, r4
 800fa48:	4547      	cmp	r7, r8
 800fa4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fa4e:	bf8c      	ite	hi
 800fa50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fa54:	2200      	movls	r2, #0
 800fa56:	4083      	lsls	r3, r0
 800fa58:	40ca      	lsrs	r2, r1
 800fa5a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	e7de      	b.n	800fa20 <__b2d+0x48>
 800fa62:	ea42 0501 	orr.w	r5, r2, r1
 800fa66:	e7db      	b.n	800fa20 <__b2d+0x48>
 800fa68:	3ff00000 	.word	0x3ff00000

0800fa6c <__d2b>:
 800fa6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa70:	460f      	mov	r7, r1
 800fa72:	2101      	movs	r1, #1
 800fa74:	ec59 8b10 	vmov	r8, r9, d0
 800fa78:	4616      	mov	r6, r2
 800fa7a:	f7ff fc1b 	bl	800f2b4 <_Balloc>
 800fa7e:	4604      	mov	r4, r0
 800fa80:	b930      	cbnz	r0, 800fa90 <__d2b+0x24>
 800fa82:	4602      	mov	r2, r0
 800fa84:	4b23      	ldr	r3, [pc, #140]	@ (800fb14 <__d2b+0xa8>)
 800fa86:	4824      	ldr	r0, [pc, #144]	@ (800fb18 <__d2b+0xac>)
 800fa88:	f240 310f 	movw	r1, #783	@ 0x30f
 800fa8c:	f7fe fa04 	bl	800de98 <__assert_func>
 800fa90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fa94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa98:	b10d      	cbz	r5, 800fa9e <__d2b+0x32>
 800fa9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fa9e:	9301      	str	r3, [sp, #4]
 800faa0:	f1b8 0300 	subs.w	r3, r8, #0
 800faa4:	d023      	beq.n	800faee <__d2b+0x82>
 800faa6:	4668      	mov	r0, sp
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	f7ff fd14 	bl	800f4d6 <__lo0bits>
 800faae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fab2:	b1d0      	cbz	r0, 800faea <__d2b+0x7e>
 800fab4:	f1c0 0320 	rsb	r3, r0, #32
 800fab8:	fa02 f303 	lsl.w	r3, r2, r3
 800fabc:	430b      	orrs	r3, r1
 800fabe:	40c2      	lsrs	r2, r0
 800fac0:	6163      	str	r3, [r4, #20]
 800fac2:	9201      	str	r2, [sp, #4]
 800fac4:	9b01      	ldr	r3, [sp, #4]
 800fac6:	61a3      	str	r3, [r4, #24]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	bf0c      	ite	eq
 800facc:	2201      	moveq	r2, #1
 800face:	2202      	movne	r2, #2
 800fad0:	6122      	str	r2, [r4, #16]
 800fad2:	b1a5      	cbz	r5, 800fafe <__d2b+0x92>
 800fad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fad8:	4405      	add	r5, r0
 800fada:	603d      	str	r5, [r7, #0]
 800fadc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fae0:	6030      	str	r0, [r6, #0]
 800fae2:	4620      	mov	r0, r4
 800fae4:	b003      	add	sp, #12
 800fae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faea:	6161      	str	r1, [r4, #20]
 800faec:	e7ea      	b.n	800fac4 <__d2b+0x58>
 800faee:	a801      	add	r0, sp, #4
 800faf0:	f7ff fcf1 	bl	800f4d6 <__lo0bits>
 800faf4:	9b01      	ldr	r3, [sp, #4]
 800faf6:	6163      	str	r3, [r4, #20]
 800faf8:	3020      	adds	r0, #32
 800fafa:	2201      	movs	r2, #1
 800fafc:	e7e8      	b.n	800fad0 <__d2b+0x64>
 800fafe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb06:	6038      	str	r0, [r7, #0]
 800fb08:	6918      	ldr	r0, [r3, #16]
 800fb0a:	f7ff fcc5 	bl	800f498 <__hi0bits>
 800fb0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb12:	e7e5      	b.n	800fae0 <__d2b+0x74>
 800fb14:	08010584 	.word	0x08010584
 800fb18:	080105f5 	.word	0x080105f5

0800fb1c <__ratio>:
 800fb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb20:	b085      	sub	sp, #20
 800fb22:	e9cd 1000 	strd	r1, r0, [sp]
 800fb26:	a902      	add	r1, sp, #8
 800fb28:	f7ff ff56 	bl	800f9d8 <__b2d>
 800fb2c:	9800      	ldr	r0, [sp, #0]
 800fb2e:	a903      	add	r1, sp, #12
 800fb30:	ec55 4b10 	vmov	r4, r5, d0
 800fb34:	f7ff ff50 	bl	800f9d8 <__b2d>
 800fb38:	9b01      	ldr	r3, [sp, #4]
 800fb3a:	6919      	ldr	r1, [r3, #16]
 800fb3c:	9b00      	ldr	r3, [sp, #0]
 800fb3e:	691b      	ldr	r3, [r3, #16]
 800fb40:	1ac9      	subs	r1, r1, r3
 800fb42:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fb46:	1a9b      	subs	r3, r3, r2
 800fb48:	ec5b ab10 	vmov	sl, fp, d0
 800fb4c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	bfce      	itee	gt
 800fb54:	462a      	movgt	r2, r5
 800fb56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb5a:	465a      	movle	r2, fp
 800fb5c:	462f      	mov	r7, r5
 800fb5e:	46d9      	mov	r9, fp
 800fb60:	bfcc      	ite	gt
 800fb62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb66:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fb6a:	464b      	mov	r3, r9
 800fb6c:	4652      	mov	r2, sl
 800fb6e:	4620      	mov	r0, r4
 800fb70:	4639      	mov	r1, r7
 800fb72:	f7f0 fe7b 	bl	800086c <__aeabi_ddiv>
 800fb76:	ec41 0b10 	vmov	d0, r0, r1
 800fb7a:	b005      	add	sp, #20
 800fb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb80 <__copybits>:
 800fb80:	3901      	subs	r1, #1
 800fb82:	b570      	push	{r4, r5, r6, lr}
 800fb84:	1149      	asrs	r1, r1, #5
 800fb86:	6914      	ldr	r4, [r2, #16]
 800fb88:	3101      	adds	r1, #1
 800fb8a:	f102 0314 	add.w	r3, r2, #20
 800fb8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fb92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb96:	1f05      	subs	r5, r0, #4
 800fb98:	42a3      	cmp	r3, r4
 800fb9a:	d30c      	bcc.n	800fbb6 <__copybits+0x36>
 800fb9c:	1aa3      	subs	r3, r4, r2
 800fb9e:	3b11      	subs	r3, #17
 800fba0:	f023 0303 	bic.w	r3, r3, #3
 800fba4:	3211      	adds	r2, #17
 800fba6:	42a2      	cmp	r2, r4
 800fba8:	bf88      	it	hi
 800fbaa:	2300      	movhi	r3, #0
 800fbac:	4418      	add	r0, r3
 800fbae:	2300      	movs	r3, #0
 800fbb0:	4288      	cmp	r0, r1
 800fbb2:	d305      	bcc.n	800fbc0 <__copybits+0x40>
 800fbb4:	bd70      	pop	{r4, r5, r6, pc}
 800fbb6:	f853 6b04 	ldr.w	r6, [r3], #4
 800fbba:	f845 6f04 	str.w	r6, [r5, #4]!
 800fbbe:	e7eb      	b.n	800fb98 <__copybits+0x18>
 800fbc0:	f840 3b04 	str.w	r3, [r0], #4
 800fbc4:	e7f4      	b.n	800fbb0 <__copybits+0x30>

0800fbc6 <__any_on>:
 800fbc6:	f100 0214 	add.w	r2, r0, #20
 800fbca:	6900      	ldr	r0, [r0, #16]
 800fbcc:	114b      	asrs	r3, r1, #5
 800fbce:	4298      	cmp	r0, r3
 800fbd0:	b510      	push	{r4, lr}
 800fbd2:	db11      	blt.n	800fbf8 <__any_on+0x32>
 800fbd4:	dd0a      	ble.n	800fbec <__any_on+0x26>
 800fbd6:	f011 011f 	ands.w	r1, r1, #31
 800fbda:	d007      	beq.n	800fbec <__any_on+0x26>
 800fbdc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fbe0:	fa24 f001 	lsr.w	r0, r4, r1
 800fbe4:	fa00 f101 	lsl.w	r1, r0, r1
 800fbe8:	428c      	cmp	r4, r1
 800fbea:	d10b      	bne.n	800fc04 <__any_on+0x3e>
 800fbec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d803      	bhi.n	800fbfc <__any_on+0x36>
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	bd10      	pop	{r4, pc}
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	e7f7      	b.n	800fbec <__any_on+0x26>
 800fbfc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc00:	2900      	cmp	r1, #0
 800fc02:	d0f5      	beq.n	800fbf0 <__any_on+0x2a>
 800fc04:	2001      	movs	r0, #1
 800fc06:	e7f6      	b.n	800fbf6 <__any_on+0x30>

0800fc08 <__ascii_wctomb>:
 800fc08:	4603      	mov	r3, r0
 800fc0a:	4608      	mov	r0, r1
 800fc0c:	b141      	cbz	r1, 800fc20 <__ascii_wctomb+0x18>
 800fc0e:	2aff      	cmp	r2, #255	@ 0xff
 800fc10:	d904      	bls.n	800fc1c <__ascii_wctomb+0x14>
 800fc12:	228a      	movs	r2, #138	@ 0x8a
 800fc14:	601a      	str	r2, [r3, #0]
 800fc16:	f04f 30ff 	mov.w	r0, #4294967295
 800fc1a:	4770      	bx	lr
 800fc1c:	700a      	strb	r2, [r1, #0]
 800fc1e:	2001      	movs	r0, #1
 800fc20:	4770      	bx	lr

0800fc22 <__sfputc_r>:
 800fc22:	6893      	ldr	r3, [r2, #8]
 800fc24:	3b01      	subs	r3, #1
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	b410      	push	{r4}
 800fc2a:	6093      	str	r3, [r2, #8]
 800fc2c:	da08      	bge.n	800fc40 <__sfputc_r+0x1e>
 800fc2e:	6994      	ldr	r4, [r2, #24]
 800fc30:	42a3      	cmp	r3, r4
 800fc32:	db01      	blt.n	800fc38 <__sfputc_r+0x16>
 800fc34:	290a      	cmp	r1, #10
 800fc36:	d103      	bne.n	800fc40 <__sfputc_r+0x1e>
 800fc38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc3c:	f000 b9f0 	b.w	8010020 <__swbuf_r>
 800fc40:	6813      	ldr	r3, [r2, #0]
 800fc42:	1c58      	adds	r0, r3, #1
 800fc44:	6010      	str	r0, [r2, #0]
 800fc46:	7019      	strb	r1, [r3, #0]
 800fc48:	4608      	mov	r0, r1
 800fc4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc4e:	4770      	bx	lr

0800fc50 <__sfputs_r>:
 800fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc52:	4606      	mov	r6, r0
 800fc54:	460f      	mov	r7, r1
 800fc56:	4614      	mov	r4, r2
 800fc58:	18d5      	adds	r5, r2, r3
 800fc5a:	42ac      	cmp	r4, r5
 800fc5c:	d101      	bne.n	800fc62 <__sfputs_r+0x12>
 800fc5e:	2000      	movs	r0, #0
 800fc60:	e007      	b.n	800fc72 <__sfputs_r+0x22>
 800fc62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc66:	463a      	mov	r2, r7
 800fc68:	4630      	mov	r0, r6
 800fc6a:	f7ff ffda 	bl	800fc22 <__sfputc_r>
 800fc6e:	1c43      	adds	r3, r0, #1
 800fc70:	d1f3      	bne.n	800fc5a <__sfputs_r+0xa>
 800fc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc74 <_vfiprintf_r>:
 800fc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc78:	460d      	mov	r5, r1
 800fc7a:	b09d      	sub	sp, #116	@ 0x74
 800fc7c:	4614      	mov	r4, r2
 800fc7e:	4698      	mov	r8, r3
 800fc80:	4606      	mov	r6, r0
 800fc82:	b118      	cbz	r0, 800fc8c <_vfiprintf_r+0x18>
 800fc84:	6a03      	ldr	r3, [r0, #32]
 800fc86:	b90b      	cbnz	r3, 800fc8c <_vfiprintf_r+0x18>
 800fc88:	f7fd ff34 	bl	800daf4 <__sinit>
 800fc8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc8e:	07d9      	lsls	r1, r3, #31
 800fc90:	d405      	bmi.n	800fc9e <_vfiprintf_r+0x2a>
 800fc92:	89ab      	ldrh	r3, [r5, #12]
 800fc94:	059a      	lsls	r2, r3, #22
 800fc96:	d402      	bmi.n	800fc9e <_vfiprintf_r+0x2a>
 800fc98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc9a:	f7fe f8e2 	bl	800de62 <__retarget_lock_acquire_recursive>
 800fc9e:	89ab      	ldrh	r3, [r5, #12]
 800fca0:	071b      	lsls	r3, r3, #28
 800fca2:	d501      	bpl.n	800fca8 <_vfiprintf_r+0x34>
 800fca4:	692b      	ldr	r3, [r5, #16]
 800fca6:	b99b      	cbnz	r3, 800fcd0 <_vfiprintf_r+0x5c>
 800fca8:	4629      	mov	r1, r5
 800fcaa:	4630      	mov	r0, r6
 800fcac:	f000 f9f6 	bl	801009c <__swsetup_r>
 800fcb0:	b170      	cbz	r0, 800fcd0 <_vfiprintf_r+0x5c>
 800fcb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fcb4:	07dc      	lsls	r4, r3, #31
 800fcb6:	d504      	bpl.n	800fcc2 <_vfiprintf_r+0x4e>
 800fcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800fcbc:	b01d      	add	sp, #116	@ 0x74
 800fcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc2:	89ab      	ldrh	r3, [r5, #12]
 800fcc4:	0598      	lsls	r0, r3, #22
 800fcc6:	d4f7      	bmi.n	800fcb8 <_vfiprintf_r+0x44>
 800fcc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcca:	f7fe f8cb 	bl	800de64 <__retarget_lock_release_recursive>
 800fcce:	e7f3      	b.n	800fcb8 <_vfiprintf_r+0x44>
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcd4:	2320      	movs	r3, #32
 800fcd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fcda:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcde:	2330      	movs	r3, #48	@ 0x30
 800fce0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fe90 <_vfiprintf_r+0x21c>
 800fce4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fce8:	f04f 0901 	mov.w	r9, #1
 800fcec:	4623      	mov	r3, r4
 800fcee:	469a      	mov	sl, r3
 800fcf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcf4:	b10a      	cbz	r2, 800fcfa <_vfiprintf_r+0x86>
 800fcf6:	2a25      	cmp	r2, #37	@ 0x25
 800fcf8:	d1f9      	bne.n	800fcee <_vfiprintf_r+0x7a>
 800fcfa:	ebba 0b04 	subs.w	fp, sl, r4
 800fcfe:	d00b      	beq.n	800fd18 <_vfiprintf_r+0xa4>
 800fd00:	465b      	mov	r3, fp
 800fd02:	4622      	mov	r2, r4
 800fd04:	4629      	mov	r1, r5
 800fd06:	4630      	mov	r0, r6
 800fd08:	f7ff ffa2 	bl	800fc50 <__sfputs_r>
 800fd0c:	3001      	adds	r0, #1
 800fd0e:	f000 80a7 	beq.w	800fe60 <_vfiprintf_r+0x1ec>
 800fd12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd14:	445a      	add	r2, fp
 800fd16:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd18:	f89a 3000 	ldrb.w	r3, [sl]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f000 809f 	beq.w	800fe60 <_vfiprintf_r+0x1ec>
 800fd22:	2300      	movs	r3, #0
 800fd24:	f04f 32ff 	mov.w	r2, #4294967295
 800fd28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd2c:	f10a 0a01 	add.w	sl, sl, #1
 800fd30:	9304      	str	r3, [sp, #16]
 800fd32:	9307      	str	r3, [sp, #28]
 800fd34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd38:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd3a:	4654      	mov	r4, sl
 800fd3c:	2205      	movs	r2, #5
 800fd3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd42:	4853      	ldr	r0, [pc, #332]	@ (800fe90 <_vfiprintf_r+0x21c>)
 800fd44:	f7f0 fa54 	bl	80001f0 <memchr>
 800fd48:	9a04      	ldr	r2, [sp, #16]
 800fd4a:	b9d8      	cbnz	r0, 800fd84 <_vfiprintf_r+0x110>
 800fd4c:	06d1      	lsls	r1, r2, #27
 800fd4e:	bf44      	itt	mi
 800fd50:	2320      	movmi	r3, #32
 800fd52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd56:	0713      	lsls	r3, r2, #28
 800fd58:	bf44      	itt	mi
 800fd5a:	232b      	movmi	r3, #43	@ 0x2b
 800fd5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd60:	f89a 3000 	ldrb.w	r3, [sl]
 800fd64:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd66:	d015      	beq.n	800fd94 <_vfiprintf_r+0x120>
 800fd68:	9a07      	ldr	r2, [sp, #28]
 800fd6a:	4654      	mov	r4, sl
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	f04f 0c0a 	mov.w	ip, #10
 800fd72:	4621      	mov	r1, r4
 800fd74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd78:	3b30      	subs	r3, #48	@ 0x30
 800fd7a:	2b09      	cmp	r3, #9
 800fd7c:	d94b      	bls.n	800fe16 <_vfiprintf_r+0x1a2>
 800fd7e:	b1b0      	cbz	r0, 800fdae <_vfiprintf_r+0x13a>
 800fd80:	9207      	str	r2, [sp, #28]
 800fd82:	e014      	b.n	800fdae <_vfiprintf_r+0x13a>
 800fd84:	eba0 0308 	sub.w	r3, r0, r8
 800fd88:	fa09 f303 	lsl.w	r3, r9, r3
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	9304      	str	r3, [sp, #16]
 800fd90:	46a2      	mov	sl, r4
 800fd92:	e7d2      	b.n	800fd3a <_vfiprintf_r+0xc6>
 800fd94:	9b03      	ldr	r3, [sp, #12]
 800fd96:	1d19      	adds	r1, r3, #4
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	9103      	str	r1, [sp, #12]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	bfbb      	ittet	lt
 800fda0:	425b      	neglt	r3, r3
 800fda2:	f042 0202 	orrlt.w	r2, r2, #2
 800fda6:	9307      	strge	r3, [sp, #28]
 800fda8:	9307      	strlt	r3, [sp, #28]
 800fdaa:	bfb8      	it	lt
 800fdac:	9204      	strlt	r2, [sp, #16]
 800fdae:	7823      	ldrb	r3, [r4, #0]
 800fdb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdb2:	d10a      	bne.n	800fdca <_vfiprintf_r+0x156>
 800fdb4:	7863      	ldrb	r3, [r4, #1]
 800fdb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdb8:	d132      	bne.n	800fe20 <_vfiprintf_r+0x1ac>
 800fdba:	9b03      	ldr	r3, [sp, #12]
 800fdbc:	1d1a      	adds	r2, r3, #4
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	9203      	str	r2, [sp, #12]
 800fdc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fdc6:	3402      	adds	r4, #2
 800fdc8:	9305      	str	r3, [sp, #20]
 800fdca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fea0 <_vfiprintf_r+0x22c>
 800fdce:	7821      	ldrb	r1, [r4, #0]
 800fdd0:	2203      	movs	r2, #3
 800fdd2:	4650      	mov	r0, sl
 800fdd4:	f7f0 fa0c 	bl	80001f0 <memchr>
 800fdd8:	b138      	cbz	r0, 800fdea <_vfiprintf_r+0x176>
 800fdda:	9b04      	ldr	r3, [sp, #16]
 800fddc:	eba0 000a 	sub.w	r0, r0, sl
 800fde0:	2240      	movs	r2, #64	@ 0x40
 800fde2:	4082      	lsls	r2, r0
 800fde4:	4313      	orrs	r3, r2
 800fde6:	3401      	adds	r4, #1
 800fde8:	9304      	str	r3, [sp, #16]
 800fdea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdee:	4829      	ldr	r0, [pc, #164]	@ (800fe94 <_vfiprintf_r+0x220>)
 800fdf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fdf4:	2206      	movs	r2, #6
 800fdf6:	f7f0 f9fb 	bl	80001f0 <memchr>
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	d03f      	beq.n	800fe7e <_vfiprintf_r+0x20a>
 800fdfe:	4b26      	ldr	r3, [pc, #152]	@ (800fe98 <_vfiprintf_r+0x224>)
 800fe00:	bb1b      	cbnz	r3, 800fe4a <_vfiprintf_r+0x1d6>
 800fe02:	9b03      	ldr	r3, [sp, #12]
 800fe04:	3307      	adds	r3, #7
 800fe06:	f023 0307 	bic.w	r3, r3, #7
 800fe0a:	3308      	adds	r3, #8
 800fe0c:	9303      	str	r3, [sp, #12]
 800fe0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe10:	443b      	add	r3, r7
 800fe12:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe14:	e76a      	b.n	800fcec <_vfiprintf_r+0x78>
 800fe16:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	2001      	movs	r0, #1
 800fe1e:	e7a8      	b.n	800fd72 <_vfiprintf_r+0xfe>
 800fe20:	2300      	movs	r3, #0
 800fe22:	3401      	adds	r4, #1
 800fe24:	9305      	str	r3, [sp, #20]
 800fe26:	4619      	mov	r1, r3
 800fe28:	f04f 0c0a 	mov.w	ip, #10
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe32:	3a30      	subs	r2, #48	@ 0x30
 800fe34:	2a09      	cmp	r2, #9
 800fe36:	d903      	bls.n	800fe40 <_vfiprintf_r+0x1cc>
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d0c6      	beq.n	800fdca <_vfiprintf_r+0x156>
 800fe3c:	9105      	str	r1, [sp, #20]
 800fe3e:	e7c4      	b.n	800fdca <_vfiprintf_r+0x156>
 800fe40:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe44:	4604      	mov	r4, r0
 800fe46:	2301      	movs	r3, #1
 800fe48:	e7f0      	b.n	800fe2c <_vfiprintf_r+0x1b8>
 800fe4a:	ab03      	add	r3, sp, #12
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	462a      	mov	r2, r5
 800fe50:	4b12      	ldr	r3, [pc, #72]	@ (800fe9c <_vfiprintf_r+0x228>)
 800fe52:	a904      	add	r1, sp, #16
 800fe54:	4630      	mov	r0, r6
 800fe56:	f7fd fa0b 	bl	800d270 <_printf_float>
 800fe5a:	4607      	mov	r7, r0
 800fe5c:	1c78      	adds	r0, r7, #1
 800fe5e:	d1d6      	bne.n	800fe0e <_vfiprintf_r+0x19a>
 800fe60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe62:	07d9      	lsls	r1, r3, #31
 800fe64:	d405      	bmi.n	800fe72 <_vfiprintf_r+0x1fe>
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	059a      	lsls	r2, r3, #22
 800fe6a:	d402      	bmi.n	800fe72 <_vfiprintf_r+0x1fe>
 800fe6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe6e:	f7fd fff9 	bl	800de64 <__retarget_lock_release_recursive>
 800fe72:	89ab      	ldrh	r3, [r5, #12]
 800fe74:	065b      	lsls	r3, r3, #25
 800fe76:	f53f af1f 	bmi.w	800fcb8 <_vfiprintf_r+0x44>
 800fe7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe7c:	e71e      	b.n	800fcbc <_vfiprintf_r+0x48>
 800fe7e:	ab03      	add	r3, sp, #12
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	462a      	mov	r2, r5
 800fe84:	4b05      	ldr	r3, [pc, #20]	@ (800fe9c <_vfiprintf_r+0x228>)
 800fe86:	a904      	add	r1, sp, #16
 800fe88:	4630      	mov	r0, r6
 800fe8a:	f7fd fc89 	bl	800d7a0 <_printf_i>
 800fe8e:	e7e4      	b.n	800fe5a <_vfiprintf_r+0x1e6>
 800fe90:	0801064e 	.word	0x0801064e
 800fe94:	08010658 	.word	0x08010658
 800fe98:	0800d271 	.word	0x0800d271
 800fe9c:	0800fc51 	.word	0x0800fc51
 800fea0:	08010654 	.word	0x08010654

0800fea4 <__sflush_r>:
 800fea4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feac:	0716      	lsls	r6, r2, #28
 800feae:	4605      	mov	r5, r0
 800feb0:	460c      	mov	r4, r1
 800feb2:	d454      	bmi.n	800ff5e <__sflush_r+0xba>
 800feb4:	684b      	ldr	r3, [r1, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	dc02      	bgt.n	800fec0 <__sflush_r+0x1c>
 800feba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800febc:	2b00      	cmp	r3, #0
 800febe:	dd48      	ble.n	800ff52 <__sflush_r+0xae>
 800fec0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fec2:	2e00      	cmp	r6, #0
 800fec4:	d045      	beq.n	800ff52 <__sflush_r+0xae>
 800fec6:	2300      	movs	r3, #0
 800fec8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fecc:	682f      	ldr	r7, [r5, #0]
 800fece:	6a21      	ldr	r1, [r4, #32]
 800fed0:	602b      	str	r3, [r5, #0]
 800fed2:	d030      	beq.n	800ff36 <__sflush_r+0x92>
 800fed4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fed6:	89a3      	ldrh	r3, [r4, #12]
 800fed8:	0759      	lsls	r1, r3, #29
 800feda:	d505      	bpl.n	800fee8 <__sflush_r+0x44>
 800fedc:	6863      	ldr	r3, [r4, #4]
 800fede:	1ad2      	subs	r2, r2, r3
 800fee0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fee2:	b10b      	cbz	r3, 800fee8 <__sflush_r+0x44>
 800fee4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fee6:	1ad2      	subs	r2, r2, r3
 800fee8:	2300      	movs	r3, #0
 800feea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800feec:	6a21      	ldr	r1, [r4, #32]
 800feee:	4628      	mov	r0, r5
 800fef0:	47b0      	blx	r6
 800fef2:	1c43      	adds	r3, r0, #1
 800fef4:	89a3      	ldrh	r3, [r4, #12]
 800fef6:	d106      	bne.n	800ff06 <__sflush_r+0x62>
 800fef8:	6829      	ldr	r1, [r5, #0]
 800fefa:	291d      	cmp	r1, #29
 800fefc:	d82b      	bhi.n	800ff56 <__sflush_r+0xb2>
 800fefe:	4a2a      	ldr	r2, [pc, #168]	@ (800ffa8 <__sflush_r+0x104>)
 800ff00:	40ca      	lsrs	r2, r1
 800ff02:	07d6      	lsls	r6, r2, #31
 800ff04:	d527      	bpl.n	800ff56 <__sflush_r+0xb2>
 800ff06:	2200      	movs	r2, #0
 800ff08:	6062      	str	r2, [r4, #4]
 800ff0a:	04d9      	lsls	r1, r3, #19
 800ff0c:	6922      	ldr	r2, [r4, #16]
 800ff0e:	6022      	str	r2, [r4, #0]
 800ff10:	d504      	bpl.n	800ff1c <__sflush_r+0x78>
 800ff12:	1c42      	adds	r2, r0, #1
 800ff14:	d101      	bne.n	800ff1a <__sflush_r+0x76>
 800ff16:	682b      	ldr	r3, [r5, #0]
 800ff18:	b903      	cbnz	r3, 800ff1c <__sflush_r+0x78>
 800ff1a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff1e:	602f      	str	r7, [r5, #0]
 800ff20:	b1b9      	cbz	r1, 800ff52 <__sflush_r+0xae>
 800ff22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff26:	4299      	cmp	r1, r3
 800ff28:	d002      	beq.n	800ff30 <__sflush_r+0x8c>
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	f7fe fe2c 	bl	800eb88 <_free_r>
 800ff30:	2300      	movs	r3, #0
 800ff32:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff34:	e00d      	b.n	800ff52 <__sflush_r+0xae>
 800ff36:	2301      	movs	r3, #1
 800ff38:	4628      	mov	r0, r5
 800ff3a:	47b0      	blx	r6
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	1c50      	adds	r0, r2, #1
 800ff40:	d1c9      	bne.n	800fed6 <__sflush_r+0x32>
 800ff42:	682b      	ldr	r3, [r5, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d0c6      	beq.n	800fed6 <__sflush_r+0x32>
 800ff48:	2b1d      	cmp	r3, #29
 800ff4a:	d001      	beq.n	800ff50 <__sflush_r+0xac>
 800ff4c:	2b16      	cmp	r3, #22
 800ff4e:	d11e      	bne.n	800ff8e <__sflush_r+0xea>
 800ff50:	602f      	str	r7, [r5, #0]
 800ff52:	2000      	movs	r0, #0
 800ff54:	e022      	b.n	800ff9c <__sflush_r+0xf8>
 800ff56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff5a:	b21b      	sxth	r3, r3
 800ff5c:	e01b      	b.n	800ff96 <__sflush_r+0xf2>
 800ff5e:	690f      	ldr	r7, [r1, #16]
 800ff60:	2f00      	cmp	r7, #0
 800ff62:	d0f6      	beq.n	800ff52 <__sflush_r+0xae>
 800ff64:	0793      	lsls	r3, r2, #30
 800ff66:	680e      	ldr	r6, [r1, #0]
 800ff68:	bf08      	it	eq
 800ff6a:	694b      	ldreq	r3, [r1, #20]
 800ff6c:	600f      	str	r7, [r1, #0]
 800ff6e:	bf18      	it	ne
 800ff70:	2300      	movne	r3, #0
 800ff72:	eba6 0807 	sub.w	r8, r6, r7
 800ff76:	608b      	str	r3, [r1, #8]
 800ff78:	f1b8 0f00 	cmp.w	r8, #0
 800ff7c:	dde9      	ble.n	800ff52 <__sflush_r+0xae>
 800ff7e:	6a21      	ldr	r1, [r4, #32]
 800ff80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff82:	4643      	mov	r3, r8
 800ff84:	463a      	mov	r2, r7
 800ff86:	4628      	mov	r0, r5
 800ff88:	47b0      	blx	r6
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	dc08      	bgt.n	800ffa0 <__sflush_r+0xfc>
 800ff8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff96:	81a3      	strh	r3, [r4, #12]
 800ff98:	f04f 30ff 	mov.w	r0, #4294967295
 800ff9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa0:	4407      	add	r7, r0
 800ffa2:	eba8 0800 	sub.w	r8, r8, r0
 800ffa6:	e7e7      	b.n	800ff78 <__sflush_r+0xd4>
 800ffa8:	20400001 	.word	0x20400001

0800ffac <_fflush_r>:
 800ffac:	b538      	push	{r3, r4, r5, lr}
 800ffae:	690b      	ldr	r3, [r1, #16]
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	b913      	cbnz	r3, 800ffbc <_fflush_r+0x10>
 800ffb6:	2500      	movs	r5, #0
 800ffb8:	4628      	mov	r0, r5
 800ffba:	bd38      	pop	{r3, r4, r5, pc}
 800ffbc:	b118      	cbz	r0, 800ffc6 <_fflush_r+0x1a>
 800ffbe:	6a03      	ldr	r3, [r0, #32]
 800ffc0:	b90b      	cbnz	r3, 800ffc6 <_fflush_r+0x1a>
 800ffc2:	f7fd fd97 	bl	800daf4 <__sinit>
 800ffc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d0f3      	beq.n	800ffb6 <_fflush_r+0xa>
 800ffce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ffd0:	07d0      	lsls	r0, r2, #31
 800ffd2:	d404      	bmi.n	800ffde <_fflush_r+0x32>
 800ffd4:	0599      	lsls	r1, r3, #22
 800ffd6:	d402      	bmi.n	800ffde <_fflush_r+0x32>
 800ffd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffda:	f7fd ff42 	bl	800de62 <__retarget_lock_acquire_recursive>
 800ffde:	4628      	mov	r0, r5
 800ffe0:	4621      	mov	r1, r4
 800ffe2:	f7ff ff5f 	bl	800fea4 <__sflush_r>
 800ffe6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ffe8:	07da      	lsls	r2, r3, #31
 800ffea:	4605      	mov	r5, r0
 800ffec:	d4e4      	bmi.n	800ffb8 <_fflush_r+0xc>
 800ffee:	89a3      	ldrh	r3, [r4, #12]
 800fff0:	059b      	lsls	r3, r3, #22
 800fff2:	d4e1      	bmi.n	800ffb8 <_fflush_r+0xc>
 800fff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fff6:	f7fd ff35 	bl	800de64 <__retarget_lock_release_recursive>
 800fffa:	e7dd      	b.n	800ffb8 <_fflush_r+0xc>

0800fffc <fiprintf>:
 800fffc:	b40e      	push	{r1, r2, r3}
 800fffe:	b503      	push	{r0, r1, lr}
 8010000:	4601      	mov	r1, r0
 8010002:	ab03      	add	r3, sp, #12
 8010004:	4805      	ldr	r0, [pc, #20]	@ (801001c <fiprintf+0x20>)
 8010006:	f853 2b04 	ldr.w	r2, [r3], #4
 801000a:	6800      	ldr	r0, [r0, #0]
 801000c:	9301      	str	r3, [sp, #4]
 801000e:	f7ff fe31 	bl	800fc74 <_vfiprintf_r>
 8010012:	b002      	add	sp, #8
 8010014:	f85d eb04 	ldr.w	lr, [sp], #4
 8010018:	b003      	add	sp, #12
 801001a:	4770      	bx	lr
 801001c:	20000374 	.word	0x20000374

08010020 <__swbuf_r>:
 8010020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010022:	460e      	mov	r6, r1
 8010024:	4614      	mov	r4, r2
 8010026:	4605      	mov	r5, r0
 8010028:	b118      	cbz	r0, 8010032 <__swbuf_r+0x12>
 801002a:	6a03      	ldr	r3, [r0, #32]
 801002c:	b90b      	cbnz	r3, 8010032 <__swbuf_r+0x12>
 801002e:	f7fd fd61 	bl	800daf4 <__sinit>
 8010032:	69a3      	ldr	r3, [r4, #24]
 8010034:	60a3      	str	r3, [r4, #8]
 8010036:	89a3      	ldrh	r3, [r4, #12]
 8010038:	071a      	lsls	r2, r3, #28
 801003a:	d501      	bpl.n	8010040 <__swbuf_r+0x20>
 801003c:	6923      	ldr	r3, [r4, #16]
 801003e:	b943      	cbnz	r3, 8010052 <__swbuf_r+0x32>
 8010040:	4621      	mov	r1, r4
 8010042:	4628      	mov	r0, r5
 8010044:	f000 f82a 	bl	801009c <__swsetup_r>
 8010048:	b118      	cbz	r0, 8010052 <__swbuf_r+0x32>
 801004a:	f04f 37ff 	mov.w	r7, #4294967295
 801004e:	4638      	mov	r0, r7
 8010050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	6922      	ldr	r2, [r4, #16]
 8010056:	1a98      	subs	r0, r3, r2
 8010058:	6963      	ldr	r3, [r4, #20]
 801005a:	b2f6      	uxtb	r6, r6
 801005c:	4283      	cmp	r3, r0
 801005e:	4637      	mov	r7, r6
 8010060:	dc05      	bgt.n	801006e <__swbuf_r+0x4e>
 8010062:	4621      	mov	r1, r4
 8010064:	4628      	mov	r0, r5
 8010066:	f7ff ffa1 	bl	800ffac <_fflush_r>
 801006a:	2800      	cmp	r0, #0
 801006c:	d1ed      	bne.n	801004a <__swbuf_r+0x2a>
 801006e:	68a3      	ldr	r3, [r4, #8]
 8010070:	3b01      	subs	r3, #1
 8010072:	60a3      	str	r3, [r4, #8]
 8010074:	6823      	ldr	r3, [r4, #0]
 8010076:	1c5a      	adds	r2, r3, #1
 8010078:	6022      	str	r2, [r4, #0]
 801007a:	701e      	strb	r6, [r3, #0]
 801007c:	6962      	ldr	r2, [r4, #20]
 801007e:	1c43      	adds	r3, r0, #1
 8010080:	429a      	cmp	r2, r3
 8010082:	d004      	beq.n	801008e <__swbuf_r+0x6e>
 8010084:	89a3      	ldrh	r3, [r4, #12]
 8010086:	07db      	lsls	r3, r3, #31
 8010088:	d5e1      	bpl.n	801004e <__swbuf_r+0x2e>
 801008a:	2e0a      	cmp	r6, #10
 801008c:	d1df      	bne.n	801004e <__swbuf_r+0x2e>
 801008e:	4621      	mov	r1, r4
 8010090:	4628      	mov	r0, r5
 8010092:	f7ff ff8b 	bl	800ffac <_fflush_r>
 8010096:	2800      	cmp	r0, #0
 8010098:	d0d9      	beq.n	801004e <__swbuf_r+0x2e>
 801009a:	e7d6      	b.n	801004a <__swbuf_r+0x2a>

0801009c <__swsetup_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4b29      	ldr	r3, [pc, #164]	@ (8010144 <__swsetup_r+0xa8>)
 80100a0:	4605      	mov	r5, r0
 80100a2:	6818      	ldr	r0, [r3, #0]
 80100a4:	460c      	mov	r4, r1
 80100a6:	b118      	cbz	r0, 80100b0 <__swsetup_r+0x14>
 80100a8:	6a03      	ldr	r3, [r0, #32]
 80100aa:	b90b      	cbnz	r3, 80100b0 <__swsetup_r+0x14>
 80100ac:	f7fd fd22 	bl	800daf4 <__sinit>
 80100b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100b4:	0719      	lsls	r1, r3, #28
 80100b6:	d422      	bmi.n	80100fe <__swsetup_r+0x62>
 80100b8:	06da      	lsls	r2, r3, #27
 80100ba:	d407      	bmi.n	80100cc <__swsetup_r+0x30>
 80100bc:	2209      	movs	r2, #9
 80100be:	602a      	str	r2, [r5, #0]
 80100c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100c4:	81a3      	strh	r3, [r4, #12]
 80100c6:	f04f 30ff 	mov.w	r0, #4294967295
 80100ca:	e033      	b.n	8010134 <__swsetup_r+0x98>
 80100cc:	0758      	lsls	r0, r3, #29
 80100ce:	d512      	bpl.n	80100f6 <__swsetup_r+0x5a>
 80100d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80100d2:	b141      	cbz	r1, 80100e6 <__swsetup_r+0x4a>
 80100d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100d8:	4299      	cmp	r1, r3
 80100da:	d002      	beq.n	80100e2 <__swsetup_r+0x46>
 80100dc:	4628      	mov	r0, r5
 80100de:	f7fe fd53 	bl	800eb88 <_free_r>
 80100e2:	2300      	movs	r3, #0
 80100e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80100e6:	89a3      	ldrh	r3, [r4, #12]
 80100e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80100ec:	81a3      	strh	r3, [r4, #12]
 80100ee:	2300      	movs	r3, #0
 80100f0:	6063      	str	r3, [r4, #4]
 80100f2:	6923      	ldr	r3, [r4, #16]
 80100f4:	6023      	str	r3, [r4, #0]
 80100f6:	89a3      	ldrh	r3, [r4, #12]
 80100f8:	f043 0308 	orr.w	r3, r3, #8
 80100fc:	81a3      	strh	r3, [r4, #12]
 80100fe:	6923      	ldr	r3, [r4, #16]
 8010100:	b94b      	cbnz	r3, 8010116 <__swsetup_r+0x7a>
 8010102:	89a3      	ldrh	r3, [r4, #12]
 8010104:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801010c:	d003      	beq.n	8010116 <__swsetup_r+0x7a>
 801010e:	4621      	mov	r1, r4
 8010110:	4628      	mov	r0, r5
 8010112:	f000 f85a 	bl	80101ca <__smakebuf_r>
 8010116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801011a:	f013 0201 	ands.w	r2, r3, #1
 801011e:	d00a      	beq.n	8010136 <__swsetup_r+0x9a>
 8010120:	2200      	movs	r2, #0
 8010122:	60a2      	str	r2, [r4, #8]
 8010124:	6962      	ldr	r2, [r4, #20]
 8010126:	4252      	negs	r2, r2
 8010128:	61a2      	str	r2, [r4, #24]
 801012a:	6922      	ldr	r2, [r4, #16]
 801012c:	b942      	cbnz	r2, 8010140 <__swsetup_r+0xa4>
 801012e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010132:	d1c5      	bne.n	80100c0 <__swsetup_r+0x24>
 8010134:	bd38      	pop	{r3, r4, r5, pc}
 8010136:	0799      	lsls	r1, r3, #30
 8010138:	bf58      	it	pl
 801013a:	6962      	ldrpl	r2, [r4, #20]
 801013c:	60a2      	str	r2, [r4, #8]
 801013e:	e7f4      	b.n	801012a <__swsetup_r+0x8e>
 8010140:	2000      	movs	r0, #0
 8010142:	e7f7      	b.n	8010134 <__swsetup_r+0x98>
 8010144:	20000374 	.word	0x20000374

08010148 <abort>:
 8010148:	b508      	push	{r3, lr}
 801014a:	2006      	movs	r0, #6
 801014c:	f000 f8a2 	bl	8010294 <raise>
 8010150:	2001      	movs	r0, #1
 8010152:	f7f2 fb0f 	bl	8002774 <_exit>

08010156 <_calloc_r>:
 8010156:	b570      	push	{r4, r5, r6, lr}
 8010158:	fba1 5402 	umull	r5, r4, r1, r2
 801015c:	b934      	cbnz	r4, 801016c <_calloc_r+0x16>
 801015e:	4629      	mov	r1, r5
 8010160:	f7fc f8c6 	bl	800c2f0 <_malloc_r>
 8010164:	4606      	mov	r6, r0
 8010166:	b928      	cbnz	r0, 8010174 <_calloc_r+0x1e>
 8010168:	4630      	mov	r0, r6
 801016a:	bd70      	pop	{r4, r5, r6, pc}
 801016c:	220c      	movs	r2, #12
 801016e:	6002      	str	r2, [r0, #0]
 8010170:	2600      	movs	r6, #0
 8010172:	e7f9      	b.n	8010168 <_calloc_r+0x12>
 8010174:	462a      	mov	r2, r5
 8010176:	4621      	mov	r1, r4
 8010178:	f7fd fd47 	bl	800dc0a <memset>
 801017c:	e7f4      	b.n	8010168 <_calloc_r+0x12>

0801017e <__swhatbuf_r>:
 801017e:	b570      	push	{r4, r5, r6, lr}
 8010180:	460c      	mov	r4, r1
 8010182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010186:	2900      	cmp	r1, #0
 8010188:	b096      	sub	sp, #88	@ 0x58
 801018a:	4615      	mov	r5, r2
 801018c:	461e      	mov	r6, r3
 801018e:	da0d      	bge.n	80101ac <__swhatbuf_r+0x2e>
 8010190:	89a3      	ldrh	r3, [r4, #12]
 8010192:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010196:	f04f 0100 	mov.w	r1, #0
 801019a:	bf14      	ite	ne
 801019c:	2340      	movne	r3, #64	@ 0x40
 801019e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80101a2:	2000      	movs	r0, #0
 80101a4:	6031      	str	r1, [r6, #0]
 80101a6:	602b      	str	r3, [r5, #0]
 80101a8:	b016      	add	sp, #88	@ 0x58
 80101aa:	bd70      	pop	{r4, r5, r6, pc}
 80101ac:	466a      	mov	r2, sp
 80101ae:	f000 f879 	bl	80102a4 <_fstat_r>
 80101b2:	2800      	cmp	r0, #0
 80101b4:	dbec      	blt.n	8010190 <__swhatbuf_r+0x12>
 80101b6:	9901      	ldr	r1, [sp, #4]
 80101b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80101bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80101c0:	4259      	negs	r1, r3
 80101c2:	4159      	adcs	r1, r3
 80101c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101c8:	e7eb      	b.n	80101a2 <__swhatbuf_r+0x24>

080101ca <__smakebuf_r>:
 80101ca:	898b      	ldrh	r3, [r1, #12]
 80101cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101ce:	079d      	lsls	r5, r3, #30
 80101d0:	4606      	mov	r6, r0
 80101d2:	460c      	mov	r4, r1
 80101d4:	d507      	bpl.n	80101e6 <__smakebuf_r+0x1c>
 80101d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80101da:	6023      	str	r3, [r4, #0]
 80101dc:	6123      	str	r3, [r4, #16]
 80101de:	2301      	movs	r3, #1
 80101e0:	6163      	str	r3, [r4, #20]
 80101e2:	b003      	add	sp, #12
 80101e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101e6:	ab01      	add	r3, sp, #4
 80101e8:	466a      	mov	r2, sp
 80101ea:	f7ff ffc8 	bl	801017e <__swhatbuf_r>
 80101ee:	9f00      	ldr	r7, [sp, #0]
 80101f0:	4605      	mov	r5, r0
 80101f2:	4639      	mov	r1, r7
 80101f4:	4630      	mov	r0, r6
 80101f6:	f7fc f87b 	bl	800c2f0 <_malloc_r>
 80101fa:	b948      	cbnz	r0, 8010210 <__smakebuf_r+0x46>
 80101fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010200:	059a      	lsls	r2, r3, #22
 8010202:	d4ee      	bmi.n	80101e2 <__smakebuf_r+0x18>
 8010204:	f023 0303 	bic.w	r3, r3, #3
 8010208:	f043 0302 	orr.w	r3, r3, #2
 801020c:	81a3      	strh	r3, [r4, #12]
 801020e:	e7e2      	b.n	80101d6 <__smakebuf_r+0xc>
 8010210:	89a3      	ldrh	r3, [r4, #12]
 8010212:	6020      	str	r0, [r4, #0]
 8010214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010218:	81a3      	strh	r3, [r4, #12]
 801021a:	9b01      	ldr	r3, [sp, #4]
 801021c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010220:	b15b      	cbz	r3, 801023a <__smakebuf_r+0x70>
 8010222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010226:	4630      	mov	r0, r6
 8010228:	f000 f84e 	bl	80102c8 <_isatty_r>
 801022c:	b128      	cbz	r0, 801023a <__smakebuf_r+0x70>
 801022e:	89a3      	ldrh	r3, [r4, #12]
 8010230:	f023 0303 	bic.w	r3, r3, #3
 8010234:	f043 0301 	orr.w	r3, r3, #1
 8010238:	81a3      	strh	r3, [r4, #12]
 801023a:	89a3      	ldrh	r3, [r4, #12]
 801023c:	431d      	orrs	r5, r3
 801023e:	81a5      	strh	r5, [r4, #12]
 8010240:	e7cf      	b.n	80101e2 <__smakebuf_r+0x18>

08010242 <_raise_r>:
 8010242:	291f      	cmp	r1, #31
 8010244:	b538      	push	{r3, r4, r5, lr}
 8010246:	4605      	mov	r5, r0
 8010248:	460c      	mov	r4, r1
 801024a:	d904      	bls.n	8010256 <_raise_r+0x14>
 801024c:	2316      	movs	r3, #22
 801024e:	6003      	str	r3, [r0, #0]
 8010250:	f04f 30ff 	mov.w	r0, #4294967295
 8010254:	bd38      	pop	{r3, r4, r5, pc}
 8010256:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010258:	b112      	cbz	r2, 8010260 <_raise_r+0x1e>
 801025a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801025e:	b94b      	cbnz	r3, 8010274 <_raise_r+0x32>
 8010260:	4628      	mov	r0, r5
 8010262:	f000 f853 	bl	801030c <_getpid_r>
 8010266:	4622      	mov	r2, r4
 8010268:	4601      	mov	r1, r0
 801026a:	4628      	mov	r0, r5
 801026c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010270:	f000 b83a 	b.w	80102e8 <_kill_r>
 8010274:	2b01      	cmp	r3, #1
 8010276:	d00a      	beq.n	801028e <_raise_r+0x4c>
 8010278:	1c59      	adds	r1, r3, #1
 801027a:	d103      	bne.n	8010284 <_raise_r+0x42>
 801027c:	2316      	movs	r3, #22
 801027e:	6003      	str	r3, [r0, #0]
 8010280:	2001      	movs	r0, #1
 8010282:	e7e7      	b.n	8010254 <_raise_r+0x12>
 8010284:	2100      	movs	r1, #0
 8010286:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801028a:	4620      	mov	r0, r4
 801028c:	4798      	blx	r3
 801028e:	2000      	movs	r0, #0
 8010290:	e7e0      	b.n	8010254 <_raise_r+0x12>
	...

08010294 <raise>:
 8010294:	4b02      	ldr	r3, [pc, #8]	@ (80102a0 <raise+0xc>)
 8010296:	4601      	mov	r1, r0
 8010298:	6818      	ldr	r0, [r3, #0]
 801029a:	f7ff bfd2 	b.w	8010242 <_raise_r>
 801029e:	bf00      	nop
 80102a0:	20000374 	.word	0x20000374

080102a4 <_fstat_r>:
 80102a4:	b538      	push	{r3, r4, r5, lr}
 80102a6:	4d07      	ldr	r5, [pc, #28]	@ (80102c4 <_fstat_r+0x20>)
 80102a8:	2300      	movs	r3, #0
 80102aa:	4604      	mov	r4, r0
 80102ac:	4608      	mov	r0, r1
 80102ae:	4611      	mov	r1, r2
 80102b0:	602b      	str	r3, [r5, #0]
 80102b2:	f7f2 fa93 	bl	80027dc <_fstat>
 80102b6:	1c43      	adds	r3, r0, #1
 80102b8:	d102      	bne.n	80102c0 <_fstat_r+0x1c>
 80102ba:	682b      	ldr	r3, [r5, #0]
 80102bc:	b103      	cbz	r3, 80102c0 <_fstat_r+0x1c>
 80102be:	6023      	str	r3, [r4, #0]
 80102c0:	bd38      	pop	{r3, r4, r5, pc}
 80102c2:	bf00      	nop
 80102c4:	20002824 	.word	0x20002824

080102c8 <_isatty_r>:
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	4d06      	ldr	r5, [pc, #24]	@ (80102e4 <_isatty_r+0x1c>)
 80102cc:	2300      	movs	r3, #0
 80102ce:	4604      	mov	r4, r0
 80102d0:	4608      	mov	r0, r1
 80102d2:	602b      	str	r3, [r5, #0]
 80102d4:	f7f2 fa92 	bl	80027fc <_isatty>
 80102d8:	1c43      	adds	r3, r0, #1
 80102da:	d102      	bne.n	80102e2 <_isatty_r+0x1a>
 80102dc:	682b      	ldr	r3, [r5, #0]
 80102de:	b103      	cbz	r3, 80102e2 <_isatty_r+0x1a>
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	bd38      	pop	{r3, r4, r5, pc}
 80102e4:	20002824 	.word	0x20002824

080102e8 <_kill_r>:
 80102e8:	b538      	push	{r3, r4, r5, lr}
 80102ea:	4d07      	ldr	r5, [pc, #28]	@ (8010308 <_kill_r+0x20>)
 80102ec:	2300      	movs	r3, #0
 80102ee:	4604      	mov	r4, r0
 80102f0:	4608      	mov	r0, r1
 80102f2:	4611      	mov	r1, r2
 80102f4:	602b      	str	r3, [r5, #0]
 80102f6:	f7f2 fa2d 	bl	8002754 <_kill>
 80102fa:	1c43      	adds	r3, r0, #1
 80102fc:	d102      	bne.n	8010304 <_kill_r+0x1c>
 80102fe:	682b      	ldr	r3, [r5, #0]
 8010300:	b103      	cbz	r3, 8010304 <_kill_r+0x1c>
 8010302:	6023      	str	r3, [r4, #0]
 8010304:	bd38      	pop	{r3, r4, r5, pc}
 8010306:	bf00      	nop
 8010308:	20002824 	.word	0x20002824

0801030c <_getpid_r>:
 801030c:	f7f2 ba1a 	b.w	8002744 <_getpid>

08010310 <_init>:
 8010310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010312:	bf00      	nop
 8010314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010316:	bc08      	pop	{r3}
 8010318:	469e      	mov	lr, r3
 801031a:	4770      	bx	lr

0801031c <_fini>:
 801031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801031e:	bf00      	nop
 8010320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010322:	bc08      	pop	{r3}
 8010324:	469e      	mov	lr, r3
 8010326:	4770      	bx	lr
