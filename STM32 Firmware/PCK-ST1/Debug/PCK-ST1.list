
PCK-ST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f70  08003f70  00004f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fb8  08003fb8  00004fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fc0  08003fc0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc0  08003fc0  00004fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fc4  08003fc4  00004fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003fc8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  2000000c  08003fd4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08003fd4  00005584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b39  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249f  00000000  00000000  00018b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  0001b018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e76  00000000  00000000  0001c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ccd  00000000  00000000  0001d0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159d4  00000000  00000000  00043dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f321d  00000000  00000000  00059797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c9b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f8c  00000000  00000000  0014c9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00151984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f58 	.word	0x08003f58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f58 	.word	0x08003f58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fd02 	bl	8000f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f853 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f9b9 	bl	8000878 <MX_GPIO_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000506:	f000 f995 	bl	8000834 <MX_USB_OTG_FS_HCD_Init>
  MX_I2C3_Init();
 800050a:	f000 f89d 	bl	8000648 <MX_I2C3_Init>
  MX_UART4_Init();
 800050e:	f000 f901 	bl	8000714 <MX_UART4_Init>
  MX_UART5_Init();
 8000512:	f000 f92f 	bl	8000774 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000516:	f000 f95d 	bl	80007d4 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 800051a:	f000 f8d5 	bl	80006c8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(EL_EN_GPIO_Port,EL_EN_Pin, 1);
 800051e:	2201      	movs	r2, #1
 8000520:	2102      	movs	r1, #2
 8000522:	4820      	ldr	r0, [pc, #128]	@ (80005a4 <main+0xb0>)
 8000524:	f001 f82e 	bl	8001584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STEP_SLEEP_n_GPIO_Port,STEP_SLEEP_n_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	2101      	movs	r1, #1
 800052c:	481d      	ldr	r0, [pc, #116]	@ (80005a4 <main+0xb0>)
 800052e:	f001 f829 	bl	8001584 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_GPIO_ReadPin(PWR_STATE_GPIO_Port, PWR_STATE_Pin)==0)
 8000532:	2108      	movs	r1, #8
 8000534:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <main+0xb0>)
 8000536:	f001 f80d 	bl	8001554 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d109      	bne.n	8000554 <main+0x60>
	{
		HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, 1);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	4817      	ldr	r0, [pc, #92]	@ (80005a4 <main+0xb0>)
 8000546:	f001 f81d 	bl	8001584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_DC_GPIO_Port, LED_DC_Pin, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	4815      	ldr	r0, [pc, #84]	@ (80005a4 <main+0xb0>)
 8000550:	f001 f818 	bl	8001584 <HAL_GPIO_WritePin>
	}
	if(HAL_GPIO_ReadPin(PWR_STATE_GPIO_Port, PWR_STATE_Pin)==1)
 8000554:	2108      	movs	r1, #8
 8000556:	4813      	ldr	r0, [pc, #76]	@ (80005a4 <main+0xb0>)
 8000558:	f000 fffc 	bl	8001554 <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b01      	cmp	r3, #1
 8000560:	d109      	bne.n	8000576 <main+0x82>
	{
		HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2110      	movs	r1, #16
 8000566:	480f      	ldr	r0, [pc, #60]	@ (80005a4 <main+0xb0>)
 8000568:	f001 f80c 	bl	8001584 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_DC_GPIO_Port, LED_DC_Pin, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2120      	movs	r1, #32
 8000570:	480c      	ldr	r0, [pc, #48]	@ (80005a4 <main+0xb0>)
 8000572:	f001 f807 	bl	8001584 <HAL_GPIO_WritePin>
	}


	HAL_GPIO_TogglePin(EL_DIR_GPIO_Port, EL_DIR_Pin);
 8000576:	2104      	movs	r1, #4
 8000578:	480a      	ldr	r0, [pc, #40]	@ (80005a4 <main+0xb0>)
 800057a:	f001 f81b 	bl	80015b4 <HAL_GPIO_TogglePin>
	for(uint16_t i=0;i<1000;i++)
 800057e:	2300      	movs	r3, #0
 8000580:	80fb      	strh	r3, [r7, #6]
 8000582:	e00a      	b.n	800059a <main+0xa6>
	{
		HAL_GPIO_TogglePin(EL_STEP_GPIO_Port, EL_STEP_Pin);
 8000584:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000588:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <main+0xb0>)
 800058a:	f001 f813 	bl	80015b4 <HAL_GPIO_TogglePin>
		HAL_Delay(5);
 800058e:	2005      	movs	r0, #5
 8000590:	f000 fd2c 	bl	8000fec <HAL_Delay>
	for(uint16_t i=0;i<1000;i++)
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	3301      	adds	r3, #1
 8000598:	80fb      	strh	r3, [r7, #6]
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005a0:	d3f0      	bcc.n	8000584 <main+0x90>
	if(HAL_GPIO_ReadPin(PWR_STATE_GPIO_Port, PWR_STATE_Pin)==0)
 80005a2:	e7c6      	b.n	8000532 <main+0x3e>
 80005a4:	48000400 	.word	0x48000400

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	@ 0x58
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2244      	movs	r2, #68	@ 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fca2 	bl	8003f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ce:	f001 f9ab 	bl	8001928 <HAL_PWREx_ControlVoltageScaling>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d8:	f000 f9ec 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	2303      	movs	r3, #3
 80005ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005f2:	2308      	movs	r3, #8
 80005f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f9f4 	bl	80019f4 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000612:	f000 f9cf 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	2103      	movs	r1, #3
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fdbc 	bl	80021ac <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063a:	f000 f9bb 	bl	80009b4 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3758      	adds	r7, #88	@ 0x58
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_I2C3_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <MX_I2C3_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	@ (80006c4 <MX_I2C3_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_I2C3_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_I2C3_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2C3_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000684:	f001 f810 	bl	80016a8 <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 f991 	bl	80009b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000696:	f001 f8a2 	bl	80017de <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 f988 	bl	80009b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_I2C3_Init+0x74>)
 80006a8:	f001 f8e4 	bl	8001874 <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 f97f 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40005c00 	.word	0x40005c00
 80006c4:	10b17db5 	.word	0x10b17db5

080006c8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_TIM17_Init+0x44>)
 80006ce:	4a10      	ldr	r2, [pc, #64]	@ (8000710 <MX_TIM17_Init+0x48>)
 80006d0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_TIM17_Init+0x44>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_TIM17_Init+0x44>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_TIM17_Init+0x44>)
 80006e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006e4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_TIM17_Init+0x44>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_TIM17_Init+0x44>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_TIM17_Init+0x44>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_TIM17_Init+0x44>)
 80006fa:	f002 fc35 	bl	8002f68 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000704:	f000 f956 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000007c 	.word	0x2000007c
 8000710:	40014800 	.word	0x40014800

08000714 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_UART4_Init+0x58>)
 800071a:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <MX_UART4_Init+0x5c>)
 800071c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_UART4_Init+0x58>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_UART4_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_UART4_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_UART4_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_UART4_Init+0x58>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_UART4_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_UART4_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_UART4_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_UART4_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_UART4_Init+0x58>)
 8000758:	f002 fd04 	bl	8003164 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 f927 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000c8 	.word	0x200000c8
 8000770:	40004c00 	.word	0x40004c00

08000774 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_UART5_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <MX_UART5_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_UART5_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_UART5_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_UART5_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_UART5_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_UART5_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_UART5_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_UART5_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_UART5_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_UART5_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_UART5_Init+0x58>)
 80007b8:	f002 fcd4 	bl	8003164 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f8f7 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000150 	.word	0x20000150
 80007d0:	40005000 	.word	0x40005000

080007d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	@ (8000830 <MX_USART1_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART1_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART1_UART_Init+0x58>)
 8000818:	f002 fca4 	bl	8003164 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f8c7 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200001d8 	.word	0x200001d8
 8000830:	40013800 	.word	0x40013800

08000834 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800083a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800083e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000842:	2208      	movs	r2, #8
 8000844:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000848:	2201      	movs	r2, #1
 800084a:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000854:	2202      	movs	r2, #2
 8000856:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000860:	f000 fec2 	bl	80015e8 <HAL_HCD_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 800086a:	f000 f8a3 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000260 	.word	0x20000260

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	4b46      	ldr	r3, [pc, #280]	@ (80009a8 <MX_GPIO_Init+0x130>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	4a45      	ldr	r2, [pc, #276]	@ (80009a8 <MX_GPIO_Init+0x130>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089a:	4b43      	ldr	r3, [pc, #268]	@ (80009a8 <MX_GPIO_Init+0x130>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b40      	ldr	r3, [pc, #256]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a3f      	ldr	r2, [pc, #252]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b3d      	ldr	r3, [pc, #244]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b3a      	ldr	r3, [pc, #232]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	4a39      	ldr	r2, [pc, #228]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ca:	4b37      	ldr	r3, [pc, #220]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b34      	ldr	r3, [pc, #208]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a33      	ldr	r2, [pc, #204]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	4b2e      	ldr	r3, [pc, #184]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a2d      	ldr	r2, [pc, #180]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8000906:	2200      	movs	r2, #0
 8000908:	f24c 01e0 	movw	r1, #49376	@ 0xc0e0
 800090c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000910:	f000 fe38 	bl	8001584 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8000914:	2200      	movs	r2, #0
 8000916:	f240 4137 	movw	r1, #1079	@ 0x437
 800091a:	4824      	ldr	r0, [pc, #144]	@ (80009ac <MX_GPIO_Init+0x134>)
 800091c:	f000 fe32 	bl	8001584 <HAL_GPIO_WritePin>
                          |LED_USB_Pin|LED_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEC_EN_Pin|DEC_DIR_Pin|DEC_STEP_Pin|LED2_Pin
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 615c 	mov.w	r1, #3520	@ 0xdc0
 8000926:	4822      	ldr	r0, [pc, #136]	@ (80009b0 <MX_GPIO_Init+0x138>)
 8000928:	f000 fe2c 	bl	8001584 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : AZ_EN_Pin AZ_DIR_Pin AZ_STEP_Pin LED4_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 800092c:	f24c 03e0 	movw	r3, #49376	@ 0xc0e0
 8000930:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000948:	f000 fc5a 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_SLEEP_n_Pin EL_EN_Pin EL_DIR_Pin EL_STEP_Pin
                           LED_USB_Pin LED_DC_Pin */
  GPIO_InitStruct.Pin = STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 800094c:	f240 4337 	movw	r3, #1079	@ 0x437
 8000950:	617b      	str	r3, [r7, #20]
                          |LED_USB_Pin|LED_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4811      	ldr	r0, [pc, #68]	@ (80009ac <MX_GPIO_Init+0x134>)
 8000966:	f000 fc4b 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEC_EN_Pin DEC_DIR_Pin DEC_STEP_Pin LED2_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = DEC_EN_Pin|DEC_DIR_Pin|DEC_STEP_Pin|LED2_Pin
 800096a:	f44f 635c 	mov.w	r3, #3520	@ 0xdc0
 800096e:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <MX_GPIO_Init+0x138>)
 8000984:	f000 fc3c 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_STATE_Pin */
  GPIO_InitStruct.Pin = PWR_STATE_Pin;
 8000988:	2308      	movs	r3, #8
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000990:	2301      	movs	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_STATE_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_GPIO_Init+0x134>)
 800099c:	f000 fc30 	bl	8001200 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	@ 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000400 	.word	0x48000400
 80009b0:	48000800 	.word	0x48000800

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <Error_Handler+0x8>

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e2:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2288      	movs	r2, #136	@ 0x88
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 fa69 	bl	8003f00 <memset>
  if(hi2c->Instance==I2C3)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a21      	ldr	r2, [pc, #132]	@ (8000ab8 <HAL_I2C_MspInit+0xb0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d13b      	bne.n	8000ab0 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000a38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a3c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fdd2 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a52:	f7ff ffaf 	bl	80009b4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a74:	2312      	movs	r3, #18
 8000a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a86:	2304      	movs	r3, #4
 8000a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a90:	4619      	mov	r1, r3
 8000a92:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <HAL_I2C_MspInit+0xb8>)
 8000a94:	f000 fbb4 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9c:	4a07      	ldr	r2, [pc, #28]	@ (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_I2C_MspInit+0xb4>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000ab0:	bf00      	nop
 8000ab2:	37b0      	adds	r7, #176	@ 0xb0
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40005c00 	.word	0x40005c00
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000800 	.word	0x48000800

08000ac4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_TIM_Base_MspInit+0x38>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10b      	bne.n	8000aee <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ada:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <HAL_TIM_Base_MspInit+0x3c>)
 8000adc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ae0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40014800 	.word	0x40014800
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0b0      	sub	sp, #192	@ 0xc0
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b20:	2288      	movs	r2, #136	@ 0x88
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 f9eb 	bl	8003f00 <memset>
  if(huart->Instance==UART4)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a74      	ldr	r2, [pc, #464]	@ (8000d00 <HAL_UART_MspInit+0x1fc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d13c      	bne.n	8000bae <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b34:	2308      	movs	r3, #8
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 fd55 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b4c:	f7ff ff32 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b50:	4b6c      	ldr	r3, [pc, #432]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b54:	4a6b      	ldr	r2, [pc, #428]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000b56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5c:	4b69      	ldr	r3, [pc, #420]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b64:	623b      	str	r3, [r7, #32]
 8000b66:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b66      	ldr	r3, [pc, #408]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	4a65      	ldr	r2, [pc, #404]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b74:	4b63      	ldr	r3, [pc, #396]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b80:	2303      	movs	r3, #3
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f000 fb2a 	bl	8001200 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bac:	e0a4      	b.n	8000cf8 <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==UART5)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a55      	ldr	r2, [pc, #340]	@ (8000d08 <HAL_UART_MspInit+0x204>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d15d      	bne.n	8000c74 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fd13 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000bd0:	f7ff fef0 	bl	80009b4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be0:	4b48      	ldr	r3, [pc, #288]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	4b45      	ldr	r3, [pc, #276]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	4a44      	ldr	r2, [pc, #272]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf8:	4b42      	ldr	r3, [pc, #264]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b3f      	ldr	r3, [pc, #252]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	4a3e      	ldr	r2, [pc, #248]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c10:	4b3c      	ldr	r3, [pc, #240]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c36:	2308      	movs	r3, #8
 8000c38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c40:	4619      	mov	r1, r3
 8000c42:	4832      	ldr	r0, [pc, #200]	@ (8000d0c <HAL_UART_MspInit+0x208>)
 8000c44:	f000 fadc 	bl	8001200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c60:	2308      	movs	r3, #8
 8000c62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4828      	ldr	r0, [pc, #160]	@ (8000d10 <HAL_UART_MspInit+0x20c>)
 8000c6e:	f000 fac7 	bl	8001200 <HAL_GPIO_Init>
}
 8000c72:	e041      	b.n	8000cf8 <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==USART1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a26      	ldr	r2, [pc, #152]	@ (8000d14 <HAL_UART_MspInit+0x210>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d13c      	bne.n	8000cf8 <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c82:	2300      	movs	r3, #0
 8000c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fcb0 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000c96:	f7ff fe8d 	bl	80009b4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9e:	4a19      	ldr	r2, [pc, #100]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	4a13      	ldr	r2, [pc, #76]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_UART_MspInit+0x200>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf4:	f000 fa84 	bl	8001200 <HAL_GPIO_Init>
}
 8000cf8:	bf00      	nop
 8000cfa:	37c0      	adds	r7, #192	@ 0xc0
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40004c00 	.word	0x40004c00
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40005000 	.word	0x40005000
 8000d0c:	48000800 	.word	0x48000800
 8000d10:	48000c00 	.word	0x48000c00
 8000d14:	40013800 	.word	0x40013800

08000d18 <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2288      	movs	r2, #136	@ 0x88
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 f8e1 	bl	8003f00 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d46:	d16b      	bne.n	8000e20 <HAL_HCD_MspInit+0x108>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d4c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000d4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000d52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d56:	2303      	movs	r3, #3
 8000d58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000d5e:	230c      	movs	r3, #12
 8000d60:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d62:	2307      	movs	r3, #7
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000d66:	2304      	movs	r3, #4
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000d6e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fc39 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 8000d84:	f7ff fe16 	bl	80009b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000da0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dba:	230a      	movs	r3, #10
 8000dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dca:	f000 fa19 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dce:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000dd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d114      	bne.n	8000e1c <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000e0a:	f000 fde3 	bl	80019d4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <HAL_HCD_MspInit+0x110>)
 8000e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e18:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e1a:	e001      	b.n	8000e20 <HAL_HCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8000e1c:	f000 fdda 	bl	80019d4 <HAL_PWREx_EnableVddUSB>
}
 8000e20:	bf00      	nop
 8000e22:	37b0      	adds	r7, #176	@ 0xb0
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <NMI_Handler+0x4>

08000e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <MemManage_Handler+0x4>

08000e44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e82:	f000 f893 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb4:	f7ff ffea 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <LoopForever+0x6>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	@ (8000ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <LoopForever+0xe>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8000efc <LoopForever+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ede:	f003 f817 	bl	8003f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee2:	f7ff fb07 	bl	80004f4 <main>

08000ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee6:	e7fe      	b.n	8000ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ef4:	08003fc8 	.word	0x08003fc8
  ldr r2, =_sbss
 8000ef8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000efc:	20000584 	.word	0x20000584

08000f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_2_IRQHandler>

08000f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f943 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 f80e 	bl	8000f34 <HAL_InitTick>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	e001      	b.n	8000f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f24:	f7ff fd4c 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_InitTick+0x6c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d023      	beq.n	8000f90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_InitTick+0x70>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <HAL_InitTick+0x6c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f941 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10f      	bne.n	8000f8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d809      	bhi.n	8000f84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f919 	bl	80011ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_InitTick+0x74>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e007      	b.n	8000f94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e004      	b.n	8000f94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	e001      	b.n	8000f94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000580 	.word	0x20000580

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	@ (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000580 	.word	0x20000580

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff47 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff5c 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb0 	bl	8001154 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e17f      	b.n	8001510 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8171 	beq.w	800150a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d005      	beq.n	8001240 <HAL_GPIO_Init+0x40>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d130      	bne.n	80012a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001276:	2201      	movs	r2, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	f003 0201 	and.w	r2, r3, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d118      	bne.n	80012e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012b4:	2201      	movs	r2, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	f003 0201 	and.w	r2, r3, #1
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d017      	beq.n	800131c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d123      	bne.n	8001370 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3208      	adds	r2, #8
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0203 	and.w	r2, r3, #3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80ac 	beq.w	800150a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001530 <HAL_GPIO_Init+0x330>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001530 <HAL_GPIO_Init+0x330>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013be:	4b5c      	ldr	r3, [pc, #368]	@ (8001530 <HAL_GPIO_Init+0x330>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001534 <HAL_GPIO_Init+0x334>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013f4:	d025      	beq.n	8001442 <HAL_GPIO_Init+0x242>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001538 <HAL_GPIO_Init+0x338>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01f      	beq.n	800143e <HAL_GPIO_Init+0x23e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4e      	ldr	r2, [pc, #312]	@ (800153c <HAL_GPIO_Init+0x33c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0x23a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4d      	ldr	r2, [pc, #308]	@ (8001540 <HAL_GPIO_Init+0x340>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x236>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4c      	ldr	r2, [pc, #304]	@ (8001544 <HAL_GPIO_Init+0x344>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x232>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4b      	ldr	r2, [pc, #300]	@ (8001548 <HAL_GPIO_Init+0x348>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x22e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4a      	ldr	r2, [pc, #296]	@ (800154c <HAL_GPIO_Init+0x34c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x22a>
 8001426:	2306      	movs	r3, #6
 8001428:	e00c      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800142a:	2307      	movs	r3, #7
 800142c:	e00a      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800142e:	2305      	movs	r3, #5
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x244>
 8001432:	2304      	movs	r3, #4
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x244>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x244>
 8001442:	2300      	movs	r3, #0
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001454:	4937      	ldr	r1, [pc, #220]	@ (8001534 <HAL_GPIO_Init+0x334>)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001462:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <HAL_GPIO_Init+0x350>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001486:	4a32      	ldr	r2, [pc, #200]	@ (8001550 <HAL_GPIO_Init+0x350>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800148c:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <HAL_GPIO_Init+0x350>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b0:	4a27      	ldr	r2, [pc, #156]	@ (8001550 <HAL_GPIO_Init+0x350>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <HAL_GPIO_Init+0x350>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014da:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <HAL_GPIO_Init+0x350>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <HAL_GPIO_Init+0x350>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001504:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <HAL_GPIO_Init+0x350>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	f47f ae78 	bne.w	8001210 <HAL_GPIO_Init+0x10>
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	48000c00 	.word	0x48000c00
 8001544:	48001000 	.word	0x48001000
 8001548:	48001400 	.word	0x48001400
 800154c:	48001800 	.word	0x48001800
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e001      	b.n	8001576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43d9      	mvns	r1, r3
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	400b      	ands	r3, r1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e052      	b.n	80016a0 <HAL_HCD_Init+0xb8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3315 	ldrb.w	r3, [r3, #789]	@ 0x315
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fb82 	bl	8000d18 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2203      	movs	r2, #3
 8001618:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  /* Disable DMA mode for FS instance */
  hhcd->Init.dma_enable = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f002 faea 	bl	8003c00 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7c1a      	ldrb	r2, [r3, #16]
 8001634:	f88d 2000 	strb.w	r2, [sp]
 8001638:	3304      	adds	r3, #4
 800163a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163c:	f002 fab3 	bl	8003ba6 <USB_CoreInit>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_HCD_Init+0x6a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e026      	b.n	80016a0 <HAL_HCD_Init+0xb8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fae2 	bl	8003c22 <USB_SetCurrentMode>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_HCD_Init+0x88>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e017      	b.n	80016a0 <HAL_HCD_Init+0xb8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7c1a      	ldrb	r2, [r3, #16]
 8001678:	f88d 2000 	strb.w	r2, [sp]
 800167c:	3304      	adds	r3, #4
 800167e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001680:	f002 fbba 	bl	8003df8 <USB_HostInit>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <HAL_HCD_Init+0xae>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e004      	b.n	80016a0 <HAL_HCD_Init+0xb8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e08d      	b.n	80017d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff f99a 	bl	8000a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2224      	movs	r2, #36	@ 0x24
 80016d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001708:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d107      	bne.n	8001722 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	e006      	b.n	8001730 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800172e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d108      	bne.n	800174a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	e007      	b.n	800175a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001758:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800176c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800177c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69d9      	ldr	r1, [r3, #28]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1a      	ldr	r2, [r3, #32]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2220      	movs	r2, #32
 80017c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d138      	bne.n	8001866 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017fe:	2302      	movs	r3, #2
 8001800:	e032      	b.n	8001868 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2224      	movs	r2, #36	@ 0x24
 800180e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0201 	bic.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001830:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6819      	ldr	r1, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2220      	movs	r2, #32
 8001856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001866:	2302      	movs	r3, #2
  }
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b20      	cmp	r3, #32
 8001888:	d139      	bne.n	80018fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001894:	2302      	movs	r3, #2
 8001896:	e033      	b.n	8001900 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2224      	movs	r2, #36	@ 0x24
 80018a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2220      	movs	r2, #32
 80018ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
  }
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <HAL_PWREx_GetVoltageRange+0x18>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40007000 	.word	0x40007000

08001928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001936:	d130      	bne.n	800199a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001938:	4b23      	ldr	r3, [pc, #140]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001944:	d038      	beq.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001946:	4b20      	ldr	r3, [pc, #128]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800194e:	4a1e      	ldr	r2, [pc, #120]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001950:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001956:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2232      	movs	r2, #50	@ 0x32
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	4a1b      	ldr	r2, [pc, #108]	@ (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0c9b      	lsrs	r3, r3, #18
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196c:	e002      	b.n	8001974 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3b01      	subs	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001980:	d102      	bne.n	8001988 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f2      	bne.n	800196e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001988:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001994:	d110      	bne.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e00f      	b.n	80019ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019a6:	d007      	beq.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019b0:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40007000 	.word	0x40007000
 80019cc:	20000000 	.word	0x20000000
 80019d0:	431bde83 	.word	0x431bde83

080019d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e2:	6053      	str	r3, [r2, #4]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40007000 	.word	0x40007000

080019f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e3ca      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a06:	4b97      	ldr	r3, [pc, #604]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a10:	4b94      	ldr	r3, [pc, #592]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80e4 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_RCC_OscConfig+0x4a>
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	f040 808b 	bne.w	8001b4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	f040 8087 	bne.w	8001b4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a3e:	4b89      	ldr	r3, [pc, #548]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_RCC_OscConfig+0x62>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e3a2      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	4b82      	ldr	r3, [pc, #520]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_RCC_OscConfig+0x7c>
 8001a66:	4b7f      	ldr	r3, [pc, #508]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a6e:	e005      	b.n	8001a7c <HAL_RCC_OscConfig+0x88>
 8001a70:	4b7c      	ldr	r3, [pc, #496]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d223      	bcs.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fd53 	bl	8002530 <RCC_SetFlashLatencyFromMSIRange>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e383      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a94:	4b73      	ldr	r3, [pc, #460]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a72      	ldr	r2, [pc, #456]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b70      	ldr	r3, [pc, #448]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	496d      	ldr	r1, [pc, #436]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4968      	ldr	r1, [pc, #416]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
 8001ac6:	e025      	b.n	8001b14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac8:	4b66      	ldr	r3, [pc, #408]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a65      	ldr	r2, [pc, #404]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b63      	ldr	r3, [pc, #396]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4960      	ldr	r1, [pc, #384]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	495b      	ldr	r1, [pc, #364]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fd13 	bl	8002530 <RCC_SetFlashLatencyFromMSIRange>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e343      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b14:	f000 fc4a 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b52      	ldr	r3, [pc, #328]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	4950      	ldr	r1, [pc, #320]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	4a4e      	ldr	r2, [pc, #312]	@ (8001c6c <HAL_RCC_OscConfig+0x278>)
 8001b32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b34:	4b4e      	ldr	r3, [pc, #312]	@ (8001c70 <HAL_RCC_OscConfig+0x27c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f9fb 	bl	8000f34 <HAL_InitTick>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d052      	beq.n	8001bee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	e327      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d032      	beq.n	8001bba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b54:	4b43      	ldr	r3, [pc, #268]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a42      	ldr	r2, [pc, #264]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fa38 	bl	8000fd4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b68:	f7ff fa34 	bl	8000fd4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e310      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a36      	ldr	r2, [pc, #216]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4931      	ldr	r1, [pc, #196]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	492c      	ldr	r1, [pc, #176]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
 8001bb8:	e01a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bba:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a29      	ldr	r2, [pc, #164]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fa05 	bl	8000fd4 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bce:	f7ff fa01 	bl	8000fd4 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e2dd      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001be0:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x1da>
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d074      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x21a>
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	d10e      	bne.n	8001c26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d10b      	bne.n	8001c26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d064      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d160      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e2ba      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x24a>
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0b      	ldr	r2, [pc, #44]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e026      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c46:	d115      	bne.n	8001c74 <HAL_RCC_OscConfig+0x280>
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a02      	ldr	r2, [pc, #8]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e014      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08003f70 	.word	0x08003f70
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004
 8001c74:	4ba0      	ldr	r3, [pc, #640]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a9f      	ldr	r2, [pc, #636]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b9d      	ldr	r3, [pc, #628]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a9c      	ldr	r2, [pc, #624]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff f99e 	bl	8000fd4 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f99a 	bl	8000fd4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e276      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	4b92      	ldr	r3, [pc, #584]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x2a8>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f98a 	bl	8000fd4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f986 	bl	8000fd4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	@ 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e262      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd6:	4b88      	ldr	r3, [pc, #544]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2d0>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d060      	beq.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x310>
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d119      	bne.n	8001d32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d116      	bne.n	8001d32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d04:	4b7c      	ldr	r3, [pc, #496]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x328>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e23f      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b76      	ldr	r3, [pc, #472]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	4973      	ldr	r1, [pc, #460]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d30:	e040      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d023      	beq.n	8001d82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff f945 	bl	8000fd4 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f941 	bl	8000fd4 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e21d      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d60:	4b65      	ldr	r3, [pc, #404]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b62      	ldr	r3, [pc, #392]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	495f      	ldr	r1, [pc, #380]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	e018      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a5c      	ldr	r2, [pc, #368]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f921 	bl	8000fd4 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff f91d 	bl	8000fd4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1f9      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da8:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d03c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dce:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f8fc 	bl	8000fd4 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff f8f8 	bl	8000fd4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1d4      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df2:	4b41      	ldr	r3, [pc, #260]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ef      	beq.n	8001de0 <HAL_RCC_OscConfig+0x3ec>
 8001e00:	e01b      	b.n	8001e3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e08:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff f8df 	bl	8000fd4 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1a:	f7ff f8db 	bl	8000fd4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1b7      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e2c:	4b32      	ldr	r3, [pc, #200]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1ef      	bne.n	8001e1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80a6 	beq.w	8001f94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e64:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e74:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <HAL_RCC_OscConfig+0x508>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d118      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e80:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <HAL_RCC_OscConfig+0x508>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_RCC_OscConfig+0x508>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f8a2 	bl	8000fd4 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7ff f89e 	bl	8000fd4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e17a      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_RCC_OscConfig+0x508>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4d8>
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eca:	e029      	b.n	8001f20 <HAL_RCC_OscConfig+0x52c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d115      	bne.n	8001f00 <HAL_RCC_OscConfig+0x50c>
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eda:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eea:	4a03      	ldr	r2, [pc, #12]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef4:	e014      	b.n	8001f20 <HAL_RCC_OscConfig+0x52c>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40007000 	.word	0x40007000
 8001f00:	4b9c      	ldr	r3, [pc, #624]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f06:	4a9b      	ldr	r2, [pc, #620]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f10:	4b98      	ldr	r3, [pc, #608]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f16:	4a97      	ldr	r2, [pc, #604]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d016      	beq.n	8001f56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	f7ff f854 	bl	8000fd4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff f850 	bl	8000fd4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e12a      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f46:	4b8b      	ldr	r3, [pc, #556]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ed      	beq.n	8001f30 <HAL_RCC_OscConfig+0x53c>
 8001f54:	e015      	b.n	8001f82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff f83d 	bl	8000fd4 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff f839 	bl	8000fd4 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e113      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f74:	4b7f      	ldr	r3, [pc, #508]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ed      	bne.n	8001f5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b7a      	ldr	r3, [pc, #488]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	4a79      	ldr	r2, [pc, #484]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80fe 	beq.w	800219a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	f040 80d0 	bne.w	8002148 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fa8:	4b72      	ldr	r3, [pc, #456]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d130      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d127      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d11f      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fe8:	2a07      	cmp	r2, #7
 8001fea:	bf14      	ite	ne
 8001fec:	2201      	movne	r2, #1
 8001fee:	2200      	moveq	r2, #0
 8001ff0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d113      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	3b01      	subs	r3, #1
 8002004:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d109      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	3b01      	subs	r3, #1
 8002018:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d06e      	beq.n	80020fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d069      	beq.n	80020f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002030:	4b50      	ldr	r3, [pc, #320]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0ad      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002040:	4b4c      	ldr	r3, [pc, #304]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a4b      	ldr	r2, [pc, #300]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800204c:	f7fe ffc2 	bl	8000fd4 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe ffbe 	bl	8000fd4 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e09a      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002066:	4b43      	ldr	r3, [pc, #268]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002072:	4b40      	ldr	r3, [pc, #256]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b40      	ldr	r3, [pc, #256]	@ (8002178 <HAL_RCC_OscConfig+0x784>)
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002082:	3a01      	subs	r2, #1
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800208c:	0212      	lsls	r2, r2, #8
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002094:	0852      	lsrs	r2, r2, #1
 8002096:	3a01      	subs	r2, #1
 8002098:	0552      	lsls	r2, r2, #21
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020a0:	0852      	lsrs	r2, r2, #1
 80020a2:	3a01      	subs	r2, #1
 80020a4:	0652      	lsls	r2, r2, #25
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020ac:	0912      	lsrs	r2, r2, #4
 80020ae:	0452      	lsls	r2, r2, #17
 80020b0:	430a      	orrs	r2, r1
 80020b2:	4930      	ldr	r1, [pc, #192]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d0:	f7fe ff80 	bl	8000fd4 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe ff7c 	bl	8000fd4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e058      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ea:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f6:	e050      	b.n	800219a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e04f      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d148      	bne.n	800219a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a19      	ldr	r2, [pc, #100]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a16      	ldr	r2, [pc, #88]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800211e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002120:	f7fe ff58 	bl	8000fd4 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe ff54 	bl	8000fd4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e030      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x734>
 8002146:	e028      	b.n	800219a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d023      	beq.n	8002196 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a08      	ldr	r2, [pc, #32]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002154:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7fe ff3b 	bl	8000fd4 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	e00c      	b.n	800217c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7fe ff37 	bl	8000fd4 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d905      	bls.n	800217c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e013      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
 8002174:	40021000 	.word	0x40021000
 8002178:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_OscConfig+0x7b0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ec      	bne.n	8002162 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_RCC_OscConfig+0x7b0>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	4905      	ldr	r1, [pc, #20]	@ (80021a4 <HAL_RCC_OscConfig+0x7b0>)
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_RCC_OscConfig+0x7b4>)
 8002190:	4013      	ands	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
 8002194:	e001      	b.n	800219a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	feeefffc 	.word	0xfeeefffc

080021ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0e7      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b75      	ldr	r3, [pc, #468]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b72      	ldr	r3, [pc, #456]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4970      	ldr	r1, [pc, #448]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b6e      	ldr	r3, [pc, #440]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0cf      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4b66      	ldr	r3, [pc, #408]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002208:	429a      	cmp	r2, r3
 800220a:	d908      	bls.n	800221e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b63      	ldr	r3, [pc, #396]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4960      	ldr	r1, [pc, #384]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d04c      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	4b5a      	ldr	r3, [pc, #360]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d121      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0a6      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224a:	4b54      	ldr	r3, [pc, #336]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e09a      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002262:	4b4e      	ldr	r3, [pc, #312]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e08e      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002272:	4b4a      	ldr	r3, [pc, #296]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e086      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b46      	ldr	r3, [pc, #280]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4943      	ldr	r1, [pc, #268]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002294:	f7fe fe9e 	bl	8000fd4 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7fe fe9a 	bl	8000fd4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e06e      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d010      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	4b31      	ldr	r3, [pc, #196]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022dc:	429a      	cmp	r2, r3
 80022de:	d208      	bcs.n	80022f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b2e      	ldr	r3, [pc, #184]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	492b      	ldr	r1, [pc, #172]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f2:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d210      	bcs.n	8002322 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 0207 	bic.w	r2, r3, #7
 8002308:	4923      	ldr	r1, [pc, #140]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002310:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e036      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4918      	ldr	r1, [pc, #96]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4910      	ldr	r1, [pc, #64]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002360:	f000 f824 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	490b      	ldr	r1, [pc, #44]	@ (80023a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a09      	ldr	r2, [pc, #36]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f8>)
 800237e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fdd5 	bl	8000f34 <HAL_InitTick>
 800238a:	4603      	mov	r3, r0
 800238c:	72fb      	strb	r3, [r7, #11]

  return status;
 800238e:	7afb      	ldrb	r3, [r7, #11]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40022000 	.word	0x40022000
 800239c:	40021000 	.word	0x40021000
 80023a0:	08003f70 	.word	0x08003f70
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ba:	4b3e      	ldr	r3, [pc, #248]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c4:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x34>
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d121      	bne.n	800241e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d11e      	bne.n	800241e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023e0:	4b34      	ldr	r3, [pc, #208]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023ec:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e005      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023fc:	4b2d      	ldr	r3, [pc, #180]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002408:	4a2b      	ldr	r2, [pc, #172]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10d      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d102      	bne.n	800242a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e004      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d101      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002430:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002432:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d134      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800243a:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d003      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0xa6>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d003      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0xac>
 8002450:	e005      	b.n	800245e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002452:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002454:	617b      	str	r3, [r7, #20]
      break;
 8002456:	e005      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002458:	4b18      	ldr	r3, [pc, #96]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x110>)
 800245a:	617b      	str	r3, [r7, #20]
      break;
 800245c:	e002      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	617b      	str	r3, [r7, #20]
      break;
 8002462:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	3301      	adds	r3, #1
 8002470:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	fb03 f202 	mul.w	r2, r3, r2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	0e5b      	lsrs	r3, r3, #25
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	3301      	adds	r3, #1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	@ 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08003f88 	.word	0x08003f88
 80024bc:	00f42400 	.word	0x00f42400

080024c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000000 	.word	0x20000000

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024dc:	f7ff fff0 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4904      	ldr	r1, [pc, #16]	@ (8002500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	08003f80 	.word	0x08003f80

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002508:	f7ff ffda 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0adb      	lsrs	r3, r3, #11
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4904      	ldr	r1, [pc, #16]	@ (800252c <HAL_RCC_GetPCLK2Freq+0x28>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	08003f80 	.word	0x08003f80

08002530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800253c:	4b2a      	ldr	r3, [pc, #168]	@ (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002548:	f7ff f9e0 	bl	800190c <HAL_PWREx_GetVoltageRange>
 800254c:	6178      	str	r0, [r7, #20]
 800254e:	e014      	b.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	4b25      	ldr	r3, [pc, #148]	@ (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	4a24      	ldr	r2, [pc, #144]	@ (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800255a:	6593      	str	r3, [r2, #88]	@ 0x58
 800255c:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002568:	f7ff f9d0 	bl	800190c <HAL_PWREx_GetVoltageRange>
 800256c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800256e:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	4a1d      	ldr	r2, [pc, #116]	@ (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002578:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002580:	d10b      	bne.n	800259a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b80      	cmp	r3, #128	@ 0x80
 8002586:	d919      	bls.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2ba0      	cmp	r3, #160	@ 0xa0
 800258c:	d902      	bls.n	8002594 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800258e:	2302      	movs	r3, #2
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	e013      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002594:	2301      	movs	r3, #1
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	e010      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b80      	cmp	r3, #128	@ 0x80
 800259e:	d902      	bls.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025a0:	2303      	movs	r3, #3
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	e00a      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b80      	cmp	r3, #128	@ 0x80
 80025aa:	d102      	bne.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ac:	2302      	movs	r3, #2
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	e004      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b70      	cmp	r3, #112	@ 0x70
 80025b6:	d101      	bne.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025b8:	2301      	movs	r3, #1
 80025ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 0207 	bic.w	r2, r3, #7
 80025c4:	4909      	ldr	r1, [pc, #36]	@ (80025ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025cc:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d001      	beq.n	80025de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40022000 	.word	0x40022000

080025f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025f8:	2300      	movs	r3, #0
 80025fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025fc:	2300      	movs	r3, #0
 80025fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002608:	2b00      	cmp	r3, #0
 800260a:	d041      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002610:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002614:	d02a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002616:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800261a:	d824      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800261c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002622:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002626:	d81e      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800262c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002630:	d010      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002632:	e018      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002634:	4b86      	ldr	r3, [pc, #536]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a85      	ldr	r2, [pc, #532]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002640:	e015      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fabb 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002652:	e00c      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3320      	adds	r3, #32
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fba6 	bl	8002dac <RCCEx_PLLSAI2_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002664:	e003      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	74fb      	strb	r3, [r7, #19]
      break;
 800266a:	e000      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800266c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002674:	4b76      	ldr	r3, [pc, #472]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002682:	4973      	ldr	r1, [pc, #460]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800268a:	e001      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268c:	7cfb      	ldrb	r3, [r7, #19]
 800268e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d041      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026a4:	d02a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026aa:	d824      	bhi.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026b0:	d008      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026b6:	d81e      	bhi.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d010      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026c2:	e018      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026c4:	4b62      	ldr	r3, [pc, #392]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a61      	ldr	r2, [pc, #388]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026d0:	e015      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fa73 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 80026de:	4603      	mov	r3, r0
 80026e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026e2:	e00c      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3320      	adds	r3, #32
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fb5e 	bl	8002dac <RCCEx_PLLSAI2_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026f4:	e003      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	74fb      	strb	r3, [r7, #19]
      break;
 80026fa:	e000      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002704:	4b52      	ldr	r3, [pc, #328]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002712:	494f      	ldr	r1, [pc, #316]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800271a:	e001      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80a0 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002732:	4b47      	ldr	r3, [pc, #284]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002748:	4b41      	ldr	r3, [pc, #260]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	4a40      	ldr	r2, [pc, #256]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002752:	6593      	str	r3, [r2, #88]	@ 0x58
 8002754:	4b3e      	ldr	r3, [pc, #248]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002760:	2301      	movs	r3, #1
 8002762:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002764:	4b3b      	ldr	r3, [pc, #236]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a3a      	ldr	r2, [pc, #232]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800276a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002770:	f7fe fc30 	bl	8000fd4 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002776:	e009      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002778:	f7fe fc2c 	bl	8000fd4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	74fb      	strb	r3, [r7, #19]
        break;
 800278a:	e005      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800278c:	4b31      	ldr	r3, [pc, #196]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ef      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d15c      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800279e:	4b2c      	ldr	r3, [pc, #176]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01f      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d019      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027bc:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027c8:	4b21      	ldr	r3, [pc, #132]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	4a20      	ldr	r2, [pc, #128]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027de:	4a1c      	ldr	r2, [pc, #112]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027e8:	4a19      	ldr	r2, [pc, #100]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe fbeb 	bl	8000fd4 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002800:	e00b      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe fbe7 	bl	8000fd4 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d902      	bls.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	74fb      	strb	r3, [r7, #19]
            break;
 8002818:	e006      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281a:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ec      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10c      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800283e:	4904      	ldr	r1, [pc, #16]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002846:	e009      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	74bb      	strb	r3, [r7, #18]
 800284c:	e006      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4b9e      	ldr	r3, [pc, #632]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	4a9d      	ldr	r2, [pc, #628]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4b98      	ldr	r3, [pc, #608]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002888:	4994      	ldr	r1, [pc, #592]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4b8f      	ldr	r3, [pc, #572]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028aa:	498c      	ldr	r1, [pc, #560]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b87      	ldr	r3, [pc, #540]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	4983      	ldr	r1, [pc, #524]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b7e      	ldr	r3, [pc, #504]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	497b      	ldr	r1, [pc, #492]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b76      	ldr	r3, [pc, #472]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002910:	4972      	ldr	r1, [pc, #456]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b6d      	ldr	r3, [pc, #436]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002932:	496a      	ldr	r1, [pc, #424]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002946:	4b65      	ldr	r3, [pc, #404]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002954:	4961      	ldr	r1, [pc, #388]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002968:	4b5c      	ldr	r3, [pc, #368]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002976:	4959      	ldr	r1, [pc, #356]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800298a:	4b54      	ldr	r3, [pc, #336]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002990:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002998:	4950      	ldr	r1, [pc, #320]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ac:	4b4b      	ldr	r3, [pc, #300]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ba:	4948      	ldr	r1, [pc, #288]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ce:	4b43      	ldr	r3, [pc, #268]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	493f      	ldr	r1, [pc, #252]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d028      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f0:	4b3a      	ldr	r3, [pc, #232]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029fe:	4937      	ldr	r1, [pc, #220]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b32      	ldr	r3, [pc, #200]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a31      	ldr	r2, [pc, #196]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
 8002a1c:	e011      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a26:	d10c      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f8c8 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d028      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a4e:	4b23      	ldr	r3, [pc, #140]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5c:	491f      	ldr	r1, [pc, #124]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4a1a      	ldr	r2, [pc, #104]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a78:	60d3      	str	r3, [r2, #12]
 8002a7a:	e011      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f899 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d02b      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aba:	4908      	ldr	r1, [pc, #32]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aca:	d109      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a02      	ldr	r2, [pc, #8]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad6:	60d3      	str	r3, [r2, #12]
 8002ad8:	e014      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2101      	movs	r1, #1
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f867 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d02f      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b10:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b1e:	4928      	ldr	r1, [pc, #160]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b2e:	d10d      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	2102      	movs	r1, #2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f844 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d014      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	74bb      	strb	r3, [r7, #18]
 8002b4a:	e011      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3320      	adds	r3, #32
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f925 	bl	8002dac <RCCEx_PLLSAI2_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b7c:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b82:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b8a:	490d      	ldr	r1, [pc, #52]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bae:	4904      	ldr	r1, [pc, #16]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd2:	4b75      	ldr	r3, [pc, #468]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d018      	beq.n	8002c10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bde:	4b72      	ldr	r3, [pc, #456]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0203 	and.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d10d      	bne.n	8002c0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
       ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d047      	beq.n	8002c9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	e044      	b.n	8002c9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d018      	beq.n	8002c4a <RCCEx_PLLSAI1_Config+0x86>
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d825      	bhi.n	8002c68 <RCCEx_PLLSAI1_Config+0xa4>
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d002      	beq.n	8002c26 <RCCEx_PLLSAI1_Config+0x62>
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d009      	beq.n	8002c38 <RCCEx_PLLSAI1_Config+0x74>
 8002c24:	e020      	b.n	8002c68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c26:	4b60      	ldr	r3, [pc, #384]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11d      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c36:	e01a      	b.n	8002c6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c38:	4b5b      	ldr	r3, [pc, #364]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d116      	bne.n	8002c72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c48:	e013      	b.n	8002c72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c4a:	4b57      	ldr	r3, [pc, #348]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10f      	bne.n	8002c76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c56:	4b54      	ldr	r3, [pc, #336]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c66:	e006      	b.n	8002c76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e004      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c76:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	430b      	orrs	r3, r1
 8002c94:	4944      	ldr	r1, [pc, #272]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d17d      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ca0:	4b41      	ldr	r3, [pc, #260]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a40      	ldr	r2, [pc, #256]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cac:	f7fe f992 	bl	8000fd4 <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cb2:	e009      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cb4:	f7fe f98e 	bl	8000fd4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d902      	bls.n	8002cc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8002cc6:	e005      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cc8:	4b37      	ldr	r3, [pc, #220]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ef      	bne.n	8002cb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d160      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d111      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce0:	4b31      	ldr	r3, [pc, #196]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6892      	ldr	r2, [r2, #8]
 8002cf0:	0211      	lsls	r1, r2, #8
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	0912      	lsrs	r2, r2, #4
 8002cf8:	0452      	lsls	r2, r2, #17
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	492a      	ldr	r1, [pc, #168]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	610b      	str	r3, [r1, #16]
 8002d02:	e027      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d112      	bne.n	8002d30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d0a:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6892      	ldr	r2, [r2, #8]
 8002d1a:	0211      	lsls	r1, r2, #8
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6912      	ldr	r2, [r2, #16]
 8002d20:	0852      	lsrs	r2, r2, #1
 8002d22:	3a01      	subs	r2, #1
 8002d24:	0552      	lsls	r2, r2, #21
 8002d26:	430a      	orrs	r2, r1
 8002d28:	491f      	ldr	r1, [pc, #124]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	610b      	str	r3, [r1, #16]
 8002d2e:	e011      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d30:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6892      	ldr	r2, [r2, #8]
 8002d40:	0211      	lsls	r1, r2, #8
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6952      	ldr	r2, [r2, #20]
 8002d46:	0852      	lsrs	r2, r2, #1
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	0652      	lsls	r2, r2, #25
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	4916      	ldr	r1, [pc, #88]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d54:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a13      	ldr	r2, [pc, #76]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe f938 	bl	8000fd4 <HAL_GetTick>
 8002d64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d66:	e009      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d68:	f7fe f934 	bl	8000fd4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d902      	bls.n	8002d7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	73fb      	strb	r3, [r7, #15]
          break;
 8002d7a:	e005      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ef      	beq.n	8002d68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d8e:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	4904      	ldr	r1, [pc, #16]	@ (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000

08002dac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dba:	4b6a      	ldr	r3, [pc, #424]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d018      	beq.n	8002df8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dc6:	4b67      	ldr	r3, [pc, #412]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0203 	and.w	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d10d      	bne.n	8002df2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dde:	4b61      	ldr	r3, [pc, #388]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
       ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d047      	beq.n	8002e82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e044      	b.n	8002e82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d018      	beq.n	8002e32 <RCCEx_PLLSAI2_Config+0x86>
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d825      	bhi.n	8002e50 <RCCEx_PLLSAI2_Config+0xa4>
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d002      	beq.n	8002e0e <RCCEx_PLLSAI2_Config+0x62>
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d009      	beq.n	8002e20 <RCCEx_PLLSAI2_Config+0x74>
 8002e0c:	e020      	b.n	8002e50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e0e:	4b55      	ldr	r3, [pc, #340]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11d      	bne.n	8002e56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1e:	e01a      	b.n	8002e56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e20:	4b50      	ldr	r3, [pc, #320]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d116      	bne.n	8002e5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e30:	e013      	b.n	8002e5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e32:	4b4c      	ldr	r3, [pc, #304]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e3e:	4b49      	ldr	r3, [pc, #292]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e4e:	e006      	b.n	8002e5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      break;
 8002e54:	e004      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e56:	bf00      	nop
 8002e58:	e002      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e000      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10d      	bne.n	8002e82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e66:	4b3f      	ldr	r3, [pc, #252]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	4939      	ldr	r1, [pc, #228]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d167      	bne.n	8002f58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e88:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a35      	ldr	r2, [pc, #212]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e94:	f7fe f89e 	bl	8000fd4 <HAL_GetTick>
 8002e98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e9a:	e009      	b.n	8002eb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e9c:	f7fe f89a 	bl	8000fd4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d902      	bls.n	8002eb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	73fb      	strb	r3, [r7, #15]
        break;
 8002eae:	e005      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ef      	bne.n	8002e9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d14a      	bne.n	8002f58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ec8:	4b26      	ldr	r3, [pc, #152]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6892      	ldr	r2, [r2, #8]
 8002ed8:	0211      	lsls	r1, r2, #8
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	0912      	lsrs	r2, r2, #4
 8002ee0:	0452      	lsls	r2, r2, #17
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	491f      	ldr	r1, [pc, #124]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	614b      	str	r3, [r1, #20]
 8002eea:	e011      	b.n	8002f10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eec:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ef4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	0211      	lsls	r1, r2, #8
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6912      	ldr	r2, [r2, #16]
 8002f02:	0852      	lsrs	r2, r2, #1
 8002f04:	3a01      	subs	r2, #1
 8002f06:	0652      	lsls	r2, r2, #25
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	4916      	ldr	r1, [pc, #88]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f10:	4b14      	ldr	r3, [pc, #80]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a13      	ldr	r2, [pc, #76]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe f85a 	bl	8000fd4 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f24:	f7fe f856 	bl	8000fd4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
          break;
 8002f36:	e005      	b.n	8002f44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f38:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ef      	beq.n	8002f24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	4904      	ldr	r1, [pc, #16]	@ (8002f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e049      	b.n	800300e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd fd98 	bl	8000ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 f836 	bl	8003018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a46      	ldr	r2, [pc, #280]	@ (8003144 <TIM_Base_SetConfig+0x12c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003036:	d00f      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a43      	ldr	r2, [pc, #268]	@ (8003148 <TIM_Base_SetConfig+0x130>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00b      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a42      	ldr	r2, [pc, #264]	@ (800314c <TIM_Base_SetConfig+0x134>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d007      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a41      	ldr	r2, [pc, #260]	@ (8003150 <TIM_Base_SetConfig+0x138>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a40      	ldr	r2, [pc, #256]	@ (8003154 <TIM_Base_SetConfig+0x13c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800305e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a35      	ldr	r2, [pc, #212]	@ (8003144 <TIM_Base_SetConfig+0x12c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01f      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003078:	d01b      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a32      	ldr	r2, [pc, #200]	@ (8003148 <TIM_Base_SetConfig+0x130>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d017      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a31      	ldr	r2, [pc, #196]	@ (800314c <TIM_Base_SetConfig+0x134>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a30      	ldr	r2, [pc, #192]	@ (8003150 <TIM_Base_SetConfig+0x138>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00f      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2f      	ldr	r2, [pc, #188]	@ (8003154 <TIM_Base_SetConfig+0x13c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00b      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2e      	ldr	r2, [pc, #184]	@ (8003158 <TIM_Base_SetConfig+0x140>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a2d      	ldr	r2, [pc, #180]	@ (800315c <TIM_Base_SetConfig+0x144>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d003      	beq.n	80030b2 <TIM_Base_SetConfig+0x9a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003160 <TIM_Base_SetConfig+0x148>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d108      	bne.n	80030c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a16      	ldr	r2, [pc, #88]	@ (8003144 <TIM_Base_SetConfig+0x12c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00f      	beq.n	8003110 <TIM_Base_SetConfig+0xf8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <TIM_Base_SetConfig+0x13c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <TIM_Base_SetConfig+0xf8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a17      	ldr	r2, [pc, #92]	@ (8003158 <TIM_Base_SetConfig+0x140>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <TIM_Base_SetConfig+0xf8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a16      	ldr	r2, [pc, #88]	@ (800315c <TIM_Base_SetConfig+0x144>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_Base_SetConfig+0xf8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a15      	ldr	r2, [pc, #84]	@ (8003160 <TIM_Base_SetConfig+0x148>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d103      	bne.n	8003118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d105      	bne.n	8003136 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f023 0201 	bic.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	611a      	str	r2, [r3, #16]
  }
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40012c00 	.word	0x40012c00
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40013400 	.word	0x40013400
 8003158:	40014000 	.word	0x40014000
 800315c:	40014400 	.word	0x40014400
 8003160:	40014800 	.word	0x40014800

08003164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e040      	b.n	80031f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fcbc 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	@ 0x24
 8003190:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fae0 	bl	8003770 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f825 	bl	8003200 <UART_SetConfig>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e01b      	b.n	80031f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fb5f 	bl	80038b4 <UART_CheckIdleState>
 80031f6:	4603      	mov	r3, r0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003204:	b08a      	sub	sp, #40	@ 0x28
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	4313      	orrs	r3, r2
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4ba4      	ldr	r3, [pc, #656]	@ (80034c0 <UART_SetConfig+0x2c0>)
 8003230:	4013      	ands	r3, r2
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003238:	430b      	orrs	r3, r1
 800323a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a99      	ldr	r2, [pc, #612]	@ (80034c4 <UART_SetConfig+0x2c4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d004      	beq.n	800326c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003268:	4313      	orrs	r3, r2
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a90      	ldr	r2, [pc, #576]	@ (80034c8 <UART_SetConfig+0x2c8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d126      	bne.n	80032d8 <UART_SetConfig+0xd8>
 800328a:	4b90      	ldr	r3, [pc, #576]	@ (80034cc <UART_SetConfig+0x2cc>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b03      	cmp	r3, #3
 8003296:	d81b      	bhi.n	80032d0 <UART_SetConfig+0xd0>
 8003298:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <UART_SetConfig+0xa0>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032b1 	.word	0x080032b1
 80032a4:	080032c1 	.word	0x080032c1
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032c9 	.word	0x080032c9
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b6:	e116      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80032b8:	2302      	movs	r3, #2
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032be:	e112      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80032c0:	2304      	movs	r3, #4
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c6:	e10e      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80032c8:	2308      	movs	r3, #8
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ce:	e10a      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80032d0:	2310      	movs	r3, #16
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d6:	e106      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a7c      	ldr	r2, [pc, #496]	@ (80034d0 <UART_SetConfig+0x2d0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d138      	bne.n	8003354 <UART_SetConfig+0x154>
 80032e2:	4b7a      	ldr	r3, [pc, #488]	@ (80034cc <UART_SetConfig+0x2cc>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d82d      	bhi.n	800334c <UART_SetConfig+0x14c>
 80032f0:	a201      	add	r2, pc, #4	@ (adr r2, 80032f8 <UART_SetConfig+0xf8>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	0800332d 	.word	0x0800332d
 80032fc:	0800334d 	.word	0x0800334d
 8003300:	0800334d 	.word	0x0800334d
 8003304:	0800334d 	.word	0x0800334d
 8003308:	0800333d 	.word	0x0800333d
 800330c:	0800334d 	.word	0x0800334d
 8003310:	0800334d 	.word	0x0800334d
 8003314:	0800334d 	.word	0x0800334d
 8003318:	08003335 	.word	0x08003335
 800331c:	0800334d 	.word	0x0800334d
 8003320:	0800334d 	.word	0x0800334d
 8003324:	0800334d 	.word	0x0800334d
 8003328:	08003345 	.word	0x08003345
 800332c:	2300      	movs	r3, #0
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003332:	e0d8      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003334:	2302      	movs	r3, #2
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333a:	e0d4      	b.n	80034e6 <UART_SetConfig+0x2e6>
 800333c:	2304      	movs	r3, #4
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003342:	e0d0      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003344:	2308      	movs	r3, #8
 8003346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800334a:	e0cc      	b.n	80034e6 <UART_SetConfig+0x2e6>
 800334c:	2310      	movs	r3, #16
 800334e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003352:	e0c8      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5e      	ldr	r2, [pc, #376]	@ (80034d4 <UART_SetConfig+0x2d4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d125      	bne.n	80033aa <UART_SetConfig+0x1aa>
 800335e:	4b5b      	ldr	r3, [pc, #364]	@ (80034cc <UART_SetConfig+0x2cc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003368:	2b30      	cmp	r3, #48	@ 0x30
 800336a:	d016      	beq.n	800339a <UART_SetConfig+0x19a>
 800336c:	2b30      	cmp	r3, #48	@ 0x30
 800336e:	d818      	bhi.n	80033a2 <UART_SetConfig+0x1a2>
 8003370:	2b20      	cmp	r3, #32
 8003372:	d00a      	beq.n	800338a <UART_SetConfig+0x18a>
 8003374:	2b20      	cmp	r3, #32
 8003376:	d814      	bhi.n	80033a2 <UART_SetConfig+0x1a2>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <UART_SetConfig+0x182>
 800337c:	2b10      	cmp	r3, #16
 800337e:	d008      	beq.n	8003392 <UART_SetConfig+0x192>
 8003380:	e00f      	b.n	80033a2 <UART_SetConfig+0x1a2>
 8003382:	2300      	movs	r3, #0
 8003384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003388:	e0ad      	b.n	80034e6 <UART_SetConfig+0x2e6>
 800338a:	2302      	movs	r3, #2
 800338c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003390:	e0a9      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003392:	2304      	movs	r3, #4
 8003394:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003398:	e0a5      	b.n	80034e6 <UART_SetConfig+0x2e6>
 800339a:	2308      	movs	r3, #8
 800339c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033a0:	e0a1      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80033a2:	2310      	movs	r3, #16
 80033a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033a8:	e09d      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a4a      	ldr	r2, [pc, #296]	@ (80034d8 <UART_SetConfig+0x2d8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d125      	bne.n	8003400 <UART_SetConfig+0x200>
 80033b4:	4b45      	ldr	r3, [pc, #276]	@ (80034cc <UART_SetConfig+0x2cc>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033be:	2bc0      	cmp	r3, #192	@ 0xc0
 80033c0:	d016      	beq.n	80033f0 <UART_SetConfig+0x1f0>
 80033c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80033c4:	d818      	bhi.n	80033f8 <UART_SetConfig+0x1f8>
 80033c6:	2b80      	cmp	r3, #128	@ 0x80
 80033c8:	d00a      	beq.n	80033e0 <UART_SetConfig+0x1e0>
 80033ca:	2b80      	cmp	r3, #128	@ 0x80
 80033cc:	d814      	bhi.n	80033f8 <UART_SetConfig+0x1f8>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <UART_SetConfig+0x1d8>
 80033d2:	2b40      	cmp	r3, #64	@ 0x40
 80033d4:	d008      	beq.n	80033e8 <UART_SetConfig+0x1e8>
 80033d6:	e00f      	b.n	80033f8 <UART_SetConfig+0x1f8>
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033de:	e082      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80033e0:	2302      	movs	r3, #2
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e6:	e07e      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80033e8:	2304      	movs	r3, #4
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ee:	e07a      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80033f0:	2308      	movs	r3, #8
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f6:	e076      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80033f8:	2310      	movs	r3, #16
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033fe:	e072      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a35      	ldr	r2, [pc, #212]	@ (80034dc <UART_SetConfig+0x2dc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d12a      	bne.n	8003460 <UART_SetConfig+0x260>
 800340a:	4b30      	ldr	r3, [pc, #192]	@ (80034cc <UART_SetConfig+0x2cc>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003414:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003418:	d01a      	beq.n	8003450 <UART_SetConfig+0x250>
 800341a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800341e:	d81b      	bhi.n	8003458 <UART_SetConfig+0x258>
 8003420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003424:	d00c      	beq.n	8003440 <UART_SetConfig+0x240>
 8003426:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800342a:	d815      	bhi.n	8003458 <UART_SetConfig+0x258>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <UART_SetConfig+0x238>
 8003430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003434:	d008      	beq.n	8003448 <UART_SetConfig+0x248>
 8003436:	e00f      	b.n	8003458 <UART_SetConfig+0x258>
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800343e:	e052      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003440:	2302      	movs	r3, #2
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003446:	e04e      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003448:	2304      	movs	r3, #4
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344e:	e04a      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003450:	2308      	movs	r3, #8
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003456:	e046      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003458:	2310      	movs	r3, #16
 800345a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345e:	e042      	b.n	80034e6 <UART_SetConfig+0x2e6>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a17      	ldr	r2, [pc, #92]	@ (80034c4 <UART_SetConfig+0x2c4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d13a      	bne.n	80034e0 <UART_SetConfig+0x2e0>
 800346a:	4b18      	ldr	r3, [pc, #96]	@ (80034cc <UART_SetConfig+0x2cc>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003470:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003474:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003478:	d01a      	beq.n	80034b0 <UART_SetConfig+0x2b0>
 800347a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800347e:	d81b      	bhi.n	80034b8 <UART_SetConfig+0x2b8>
 8003480:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003484:	d00c      	beq.n	80034a0 <UART_SetConfig+0x2a0>
 8003486:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800348a:	d815      	bhi.n	80034b8 <UART_SetConfig+0x2b8>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <UART_SetConfig+0x298>
 8003490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003494:	d008      	beq.n	80034a8 <UART_SetConfig+0x2a8>
 8003496:	e00f      	b.n	80034b8 <UART_SetConfig+0x2b8>
 8003498:	2300      	movs	r3, #0
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349e:	e022      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80034a0:	2302      	movs	r3, #2
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a6:	e01e      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80034a8:	2304      	movs	r3, #4
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e01a      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80034b0:	2308      	movs	r3, #8
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b6:	e016      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80034b8:	2310      	movs	r3, #16
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034be:	e012      	b.n	80034e6 <UART_SetConfig+0x2e6>
 80034c0:	efff69f3 	.word	0xefff69f3
 80034c4:	40008000 	.word	0x40008000
 80034c8:	40013800 	.word	0x40013800
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40004400 	.word	0x40004400
 80034d4:	40004800 	.word	0x40004800
 80034d8:	40004c00 	.word	0x40004c00
 80034dc:	40005000 	.word	0x40005000
 80034e0:	2310      	movs	r3, #16
 80034e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a9f      	ldr	r2, [pc, #636]	@ (8003768 <UART_SetConfig+0x568>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d17a      	bne.n	80035e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d824      	bhi.n	8003542 <UART_SetConfig+0x342>
 80034f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <UART_SetConfig+0x300>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003525 	.word	0x08003525
 8003504:	08003543 	.word	0x08003543
 8003508:	0800352d 	.word	0x0800352d
 800350c:	08003543 	.word	0x08003543
 8003510:	08003533 	.word	0x08003533
 8003514:	08003543 	.word	0x08003543
 8003518:	08003543 	.word	0x08003543
 800351c:	08003543 	.word	0x08003543
 8003520:	0800353b 	.word	0x0800353b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003524:	f7fe ffd8 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8003528:	61f8      	str	r0, [r7, #28]
        break;
 800352a:	e010      	b.n	800354e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800352c:	4b8f      	ldr	r3, [pc, #572]	@ (800376c <UART_SetConfig+0x56c>)
 800352e:	61fb      	str	r3, [r7, #28]
        break;
 8003530:	e00d      	b.n	800354e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003532:	f7fe ff3b 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8003536:	61f8      	str	r0, [r7, #28]
        break;
 8003538:	e009      	b.n	800354e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800353e:	61fb      	str	r3, [r7, #28]
        break;
 8003540:	e005      	b.n	800354e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800354c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80fb 	beq.w	800374c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4413      	add	r3, r2
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	429a      	cmp	r2, r3
 8003564:	d305      	bcc.n	8003572 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	429a      	cmp	r2, r3
 8003570:	d903      	bls.n	800357a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003578:	e0e8      	b.n	800374c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	2200      	movs	r2, #0
 800357e:	461c      	mov	r4, r3
 8003580:	4615      	mov	r5, r2
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	022b      	lsls	r3, r5, #8
 800358c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003590:	0222      	lsls	r2, r4, #8
 8003592:	68f9      	ldr	r1, [r7, #12]
 8003594:	6849      	ldr	r1, [r1, #4]
 8003596:	0849      	lsrs	r1, r1, #1
 8003598:	2000      	movs	r0, #0
 800359a:	4688      	mov	r8, r1
 800359c:	4681      	mov	r9, r0
 800359e:	eb12 0a08 	adds.w	sl, r2, r8
 80035a2:	eb43 0b09 	adc.w	fp, r3, r9
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035b4:	4650      	mov	r0, sl
 80035b6:	4659      	mov	r1, fp
 80035b8:	f7fc fe06 	bl	80001c8 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4613      	mov	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035ca:	d308      	bcc.n	80035de <UART_SetConfig+0x3de>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035d2:	d204      	bcs.n	80035de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	60da      	str	r2, [r3, #12]
 80035dc:	e0b6      	b.n	800374c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035e4:	e0b2      	b.n	800374c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ee:	d15e      	bne.n	80036ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80035f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d828      	bhi.n	800364a <UART_SetConfig+0x44a>
 80035f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <UART_SetConfig+0x400>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003625 	.word	0x08003625
 8003604:	0800362d 	.word	0x0800362d
 8003608:	08003635 	.word	0x08003635
 800360c:	0800364b 	.word	0x0800364b
 8003610:	0800363b 	.word	0x0800363b
 8003614:	0800364b 	.word	0x0800364b
 8003618:	0800364b 	.word	0x0800364b
 800361c:	0800364b 	.word	0x0800364b
 8003620:	08003643 	.word	0x08003643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003624:	f7fe ff58 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8003628:	61f8      	str	r0, [r7, #28]
        break;
 800362a:	e014      	b.n	8003656 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800362c:	f7fe ff6a 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8003630:	61f8      	str	r0, [r7, #28]
        break;
 8003632:	e010      	b.n	8003656 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003634:	4b4d      	ldr	r3, [pc, #308]	@ (800376c <UART_SetConfig+0x56c>)
 8003636:	61fb      	str	r3, [r7, #28]
        break;
 8003638:	e00d      	b.n	8003656 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363a:	f7fe feb7 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 800363e:	61f8      	str	r0, [r7, #28]
        break;
 8003640:	e009      	b.n	8003656 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003646:	61fb      	str	r3, [r7, #28]
        break;
 8003648:	e005      	b.n	8003656 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d077      	beq.n	800374c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005a      	lsls	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	441a      	add	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d916      	bls.n	80036a6 <UART_SetConfig+0x4a6>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800367e:	d212      	bcs.n	80036a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	b29b      	uxth	r3, r3
 8003684:	f023 030f 	bic.w	r3, r3, #15
 8003688:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	b29b      	uxth	r3, r3
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	b29a      	uxth	r2, r3
 8003696:	8afb      	ldrh	r3, [r7, #22]
 8003698:	4313      	orrs	r3, r2
 800369a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	8afa      	ldrh	r2, [r7, #22]
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	e052      	b.n	800374c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036ac:	e04e      	b.n	800374c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d827      	bhi.n	8003706 <UART_SetConfig+0x506>
 80036b6:	a201      	add	r2, pc, #4	@ (adr r2, 80036bc <UART_SetConfig+0x4bc>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036e1 	.word	0x080036e1
 80036c0:	080036e9 	.word	0x080036e9
 80036c4:	080036f1 	.word	0x080036f1
 80036c8:	08003707 	.word	0x08003707
 80036cc:	080036f7 	.word	0x080036f7
 80036d0:	08003707 	.word	0x08003707
 80036d4:	08003707 	.word	0x08003707
 80036d8:	08003707 	.word	0x08003707
 80036dc:	080036ff 	.word	0x080036ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e0:	f7fe fefa 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 80036e4:	61f8      	str	r0, [r7, #28]
        break;
 80036e6:	e014      	b.n	8003712 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e8:	f7fe ff0c 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 80036ec:	61f8      	str	r0, [r7, #28]
        break;
 80036ee:	e010      	b.n	8003712 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f0:	4b1e      	ldr	r3, [pc, #120]	@ (800376c <UART_SetConfig+0x56c>)
 80036f2:	61fb      	str	r3, [r7, #28]
        break;
 80036f4:	e00d      	b.n	8003712 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f6:	f7fe fe59 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 80036fa:	61f8      	str	r0, [r7, #28]
        break;
 80036fc:	e009      	b.n	8003712 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003702:	61fb      	str	r3, [r7, #28]
        break;
 8003704:	e005      	b.n	8003712 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003710:	bf00      	nop
    }

    if (pclk != 0U)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d019      	beq.n	800374c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	085a      	lsrs	r2, r3, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	441a      	add	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b0f      	cmp	r3, #15
 8003730:	d909      	bls.n	8003746 <UART_SetConfig+0x546>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003738:	d205      	bcs.n	8003746 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	e002      	b.n	800374c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003758:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800375c:	4618      	mov	r0, r3
 800375e:	3728      	adds	r7, #40	@ 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop
 8003768:	40008000 	.word	0x40008000
 800376c:	00f42400 	.word	0x00f42400

08003770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01a      	beq.n	8003886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800386e:	d10a      	bne.n	8003886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b098      	sub	sp, #96	@ 0x60
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038c4:	f7fd fb86 	bl	8000fd4 <HAL_GetTick>
 80038c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d12e      	bne.n	8003936 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f88c 	bl	8003a04 <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d021      	beq.n	8003936 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003906:	653b      	str	r3, [r7, #80]	@ 0x50
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003910:	647b      	str	r3, [r7, #68]	@ 0x44
 8003912:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800391e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e6      	bne.n	80038f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e062      	b.n	80039fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b04      	cmp	r3, #4
 8003942:	d149      	bne.n	80039d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003944:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394c:	2200      	movs	r2, #0
 800394e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f856 	bl	8003a04 <UART_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d03c      	beq.n	80039d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	623b      	str	r3, [r7, #32]
   return(result);
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800397c:	633b      	str	r3, [r7, #48]	@ 0x30
 800397e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e6      	bne.n	800395e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3308      	adds	r3, #8
 8003996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3308      	adds	r3, #8
 80039ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039b0:	61fa      	str	r2, [r7, #28]
 80039b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	69b9      	ldr	r1, [r7, #24]
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	617b      	str	r3, [r7, #20]
   return(result);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e5      	bne.n	8003990 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e011      	b.n	80039fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3758      	adds	r7, #88	@ 0x58
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a14:	e04f      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d04b      	beq.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1e:	f7fd fad9 	bl	8000fd4 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d302      	bcc.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e04e      	b.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d037      	beq.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b80      	cmp	r3, #128	@ 0x80
 8003a4a:	d034      	beq.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b40      	cmp	r3, #64	@ 0x40
 8003a50:	d031      	beq.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d110      	bne.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2208      	movs	r2, #8
 8003a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f838 	bl	8003ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2208      	movs	r2, #8
 8003a72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e029      	b.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a90:	d111      	bne.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f81e 	bl	8003ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e00f      	b.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	bf0c      	ite	eq
 8003ac6:	2301      	moveq	r3, #1
 8003ac8:	2300      	movne	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d0a0      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b095      	sub	sp, #84	@ 0x54
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b04:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e6      	bne.n	8003ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f023 0301 	bic.w	r3, r3, #1
 8003b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3308      	adds	r3, #8
 8003b36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e5      	bne.n	8003b18 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d118      	bne.n	8003b86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f023 0310 	bic.w	r3, r3, #16
 8003b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6979      	ldr	r1, [r7, #20]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e6      	bne.n	8003b54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b9a:	bf00      	nop
 8003b9c:	3754      	adds	r7, #84	@ 0x54
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	f107 001c 	add.w	r0, r7, #28
 8003bb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f8e6 	bl	8003d96 <USB_CoreReset>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003bce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003be2:	e005      	b.n	8003bf0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bfc:	b004      	add	sp, #16
 8003bfe:	4770      	bx	lr

08003c00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 0201 	bic.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d115      	bne.n	8003c70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c50:	200a      	movs	r0, #10
 8003c52:	f7fd f9cb 	bl	8000fec <HAL_Delay>
      ms += 10U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	330a      	adds	r3, #10
 8003c5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f88c 	bl	8003d7a <USB_GetMode>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d01e      	beq.n	8003ca6 <USB_SetCurrentMode+0x84>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c6c:	d9f0      	bls.n	8003c50 <USB_SetCurrentMode+0x2e>
 8003c6e:	e01a      	b.n	8003ca6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d115      	bne.n	8003ca2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c82:	200a      	movs	r0, #10
 8003c84:	f7fd f9b2 	bl	8000fec <HAL_Delay>
      ms += 10U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	330a      	adds	r3, #10
 8003c8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f873 	bl	8003d7a <USB_GetMode>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <USB_SetCurrentMode+0x84>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c9e:	d9f0      	bls.n	8003c82 <USB_SetCurrentMode+0x60>
 8003ca0:	e001      	b.n	8003ca6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e005      	b.n	8003cb2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2bc8      	cmp	r3, #200	@ 0xc8
 8003caa:	d101      	bne.n	8003cb0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cd4:	d901      	bls.n	8003cda <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e01b      	b.n	8003d12 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	daf2      	bge.n	8003cc8 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	019b      	lsls	r3, r3, #6
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cfe:	d901      	bls.n	8003d04 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e006      	b.n	8003d12 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d0f0      	beq.n	8003cf2 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d36:	d901      	bls.n	8003d3c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e018      	b.n	8003d6e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	daf2      	bge.n	8003d2a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2210      	movs	r2, #16
 8003d4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d5a:	d901      	bls.n	8003d60 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d0f0      	beq.n	8003d4e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0301 	and.w	r3, r3, #1
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3301      	adds	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dae:	d901      	bls.n	8003db4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e01b      	b.n	8003dec <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	daf2      	bge.n	8003da2 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dd8:	d901      	bls.n	8003dde <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e006      	b.n	8003dec <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d0f0      	beq.n	8003dcc <USB_CoreReset+0x36>

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df8:	b084      	sub	sp, #16
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b086      	sub	sp, #24
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e22:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003e44:	f023 0304 	bic.w	r3, r3, #4
 8003e48:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e4a:	2110      	movs	r1, #16
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff34 	bl	8003cba <USB_FlushTxFifo>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff5e 	bl	8003d1e <USB_FlushRxFifo>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	e015      	b.n	8003e9e <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295
 8003e84:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e92:	461a      	mov	r2, r3
 8003e94:	2300      	movs	r3, #0
 8003e96:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d3e3      	bcc.n	8003e72 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb6:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2280      	movs	r2, #128	@ 0x80
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef4 <USB_HostInit+0xfc>)
 8003ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef8 <USB_HostInit+0x100>)
 8003ec8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f043 0210 	orr.w	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	4b07      	ldr	r3, [pc, #28]	@ (8003efc <USB_HostInit+0x104>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ef0:	b004      	add	sp, #16
 8003ef2:	4770      	bx	lr
 8003ef4:	00600080 	.word	0x00600080
 8003ef8:	004000e0 	.word	0x004000e0
 8003efc:	a3200008 	.word	0xa3200008

08003f00 <memset>:
 8003f00:	4402      	add	r2, r0
 8003f02:	4603      	mov	r3, r0
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d100      	bne.n	8003f0a <memset+0xa>
 8003f08:	4770      	bx	lr
 8003f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f0e:	e7f9      	b.n	8003f04 <memset+0x4>

08003f10 <__libc_init_array>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	4d0d      	ldr	r5, [pc, #52]	@ (8003f48 <__libc_init_array+0x38>)
 8003f14:	4c0d      	ldr	r4, [pc, #52]	@ (8003f4c <__libc_init_array+0x3c>)
 8003f16:	1b64      	subs	r4, r4, r5
 8003f18:	10a4      	asrs	r4, r4, #2
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	42a6      	cmp	r6, r4
 8003f1e:	d109      	bne.n	8003f34 <__libc_init_array+0x24>
 8003f20:	4d0b      	ldr	r5, [pc, #44]	@ (8003f50 <__libc_init_array+0x40>)
 8003f22:	4c0c      	ldr	r4, [pc, #48]	@ (8003f54 <__libc_init_array+0x44>)
 8003f24:	f000 f818 	bl	8003f58 <_init>
 8003f28:	1b64      	subs	r4, r4, r5
 8003f2a:	10a4      	asrs	r4, r4, #2
 8003f2c:	2600      	movs	r6, #0
 8003f2e:	42a6      	cmp	r6, r4
 8003f30:	d105      	bne.n	8003f3e <__libc_init_array+0x2e>
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
 8003f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f38:	4798      	blx	r3
 8003f3a:	3601      	adds	r6, #1
 8003f3c:	e7ee      	b.n	8003f1c <__libc_init_array+0xc>
 8003f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f42:	4798      	blx	r3
 8003f44:	3601      	adds	r6, #1
 8003f46:	e7f2      	b.n	8003f2e <__libc_init_array+0x1e>
 8003f48:	08003fc0 	.word	0x08003fc0
 8003f4c:	08003fc0 	.word	0x08003fc0
 8003f50:	08003fc0 	.word	0x08003fc0
 8003f54:	08003fc4 	.word	0x08003fc4

08003f58 <_init>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr

08003f64 <_fini>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr
