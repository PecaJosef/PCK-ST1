
PCK-ST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f80  08003f80  00004f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc8  08003fc8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fc8  08003fc8  00004fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fd0  08003fd0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd0  08003fd0  00004fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fd4  08003fd4  00004fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003fd8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  2000000c  08003fe4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08003fe4  00005584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b14  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246f  00000000  00000000  00018b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  0001afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e77  00000000  00000000  0001c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c31  00000000  00000000  0001d09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159d9  00000000  00000000  00043cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2f76  00000000  00000000  000596a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c61f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f80  00000000  00000000  0014c664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001515e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f68 	.word	0x08003f68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f68 	.word	0x08003f68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fd3d 	bl	8000f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f85a 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9c0 	bl	8000884 <MX_GPIO_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000504:	f000 f99c 	bl	8000840 <MX_USB_OTG_FS_HCD_Init>
  MX_I2C3_Init();
 8000508:	f000 f8a4 	bl	8000654 <MX_I2C3_Init>
  MX_UART4_Init();
 800050c:	f000 f908 	bl	8000720 <MX_UART4_Init>
  MX_UART5_Init();
 8000510:	f000 f936 	bl	8000780 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000514:	f000 f964 	bl	80007e0 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 8000518:	f000 f8dc 	bl	80006d4 <MX_TIM17_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000522:	4823      	ldr	r0, [pc, #140]	@ (80005b0 <main+0xbc>)
 8000524:	f001 f850 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052c:	f000 fd98 	bl	8001060 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000536:	481e      	ldr	r0, [pc, #120]	@ (80005b0 <main+0xbc>)
 8000538:	f001 f846 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000540:	f000 fd8e 	bl	8001060 <HAL_Delay>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800054a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054e:	f001 f83b 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000556:	f000 fd83 	bl	8001060 <HAL_Delay>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000564:	f001 f830 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000568:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800056c:	f000 fd78 	bl	8001060 <HAL_Delay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000576:	480e      	ldr	r0, [pc, #56]	@ (80005b0 <main+0xbc>)
 8000578:	f001 f826 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000582:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <main+0xbc>)
 8000584:	f001 f820 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800058e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000592:	f001 f819 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800059c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a0:	f001 f812 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_Delay(2500);
 80005a4:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80005a8:	f000 fd5a 	bl	8001060 <HAL_Delay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80005ac:	bf00      	nop
 80005ae:	e7b5      	b.n	800051c <main+0x28>
 80005b0:	48000800 	.word	0x48000800

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	@ 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	@ 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fca4 	bl	8003f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005da:	f001 f9ad 	bl	8001938 <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f9fe 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	2303      	movs	r3, #3
 80005f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005fe:	2308      	movs	r3, #8
 8000600:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f9f6 	bl	8001a04 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800061e:	f000 f9e1 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	2103      	movs	r1, #3
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fdbe 	bl	80021bc <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000646:	f000 f9cd 	bl	80009e4 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3758      	adds	r7, #88	@ 0x58
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_I2C3_Init+0x74>)
 800065a:	4a1c      	ldr	r2, [pc, #112]	@ (80006cc <MX_I2C3_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_I2C3_Init+0x74>)
 8000660:	4a1b      	ldr	r2, [pc, #108]	@ (80006d0 <MX_I2C3_Init+0x7c>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_I2C3_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <MX_I2C3_Init+0x74>)
 800066c:	2201      	movs	r2, #1
 800066e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <MX_I2C3_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_I2C3_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_I2C3_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_I2C3_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_I2C3_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800068e:	480e      	ldr	r0, [pc, #56]	@ (80006c8 <MX_I2C3_Init+0x74>)
 8000690:	f001 f812 	bl	80016b8 <HAL_I2C_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800069a:	f000 f9a3 	bl	80009e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	4809      	ldr	r0, [pc, #36]	@ (80006c8 <MX_I2C3_Init+0x74>)
 80006a2:	f001 f8a4 	bl	80017ee <HAL_I2CEx_ConfigAnalogFilter>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006ac:	f000 f99a 	bl	80009e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_I2C3_Init+0x74>)
 80006b4:	f001 f8e6 	bl	8001884 <HAL_I2CEx_ConfigDigitalFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 f991 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000028 	.word	0x20000028
 80006cc:	40005c00 	.word	0x40005c00
 80006d0:	10b17db5 	.word	0x10b17db5

080006d4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_TIM17_Init+0x44>)
 80006da:	4a10      	ldr	r2, [pc, #64]	@ (800071c <MX_TIM17_Init+0x48>)
 80006dc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_TIM17_Init+0x44>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_TIM17_Init+0x44>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_TIM17_Init+0x44>)
 80006ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006f0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_TIM17_Init+0x44>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_TIM17_Init+0x44>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_TIM17_Init+0x44>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_TIM17_Init+0x44>)
 8000706:	f002 fc37 	bl	8002f78 <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000710:	f000 f968 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000007c 	.word	0x2000007c
 800071c:	40014800 	.word	0x40014800

08000720 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_UART4_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	@ (800077c <MX_UART4_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_UART4_Init+0x58>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_UART4_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_UART4_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_UART4_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_UART4_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_UART4_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_UART4_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_UART4_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_UART4_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_UART4_Init+0x58>)
 8000764:	f002 fd06 	bl	8003174 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f939 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000c8 	.word	0x200000c8
 800077c:	40004c00 	.word	0x40004c00

08000780 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_UART5_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <MX_UART5_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_UART5_Init+0x58>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_UART5_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_UART5_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_UART5_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_UART5_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_UART5_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_UART5_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_UART5_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_UART5_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_UART5_Init+0x58>)
 80007c4:	f002 fcd6 	bl	8003174 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f909 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000150 	.word	0x20000150
 80007dc:	40005000 	.word	0x40005000

080007e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	@ (800083c <MX_USART1_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_USART1_UART_Init+0x58>)
 8000824:	f002 fca6 	bl	8003174 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f8d9 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001d8 	.word	0x200001d8
 800083c:	40013800 	.word	0x40013800

08000840 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000846:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800084a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800084e:	2208      	movs	r2, #8
 8000850:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000854:	2201      	movs	r2, #1
 8000856:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000860:	2202      	movs	r2, #2
 8000862:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800086c:	f000 fec4 	bl	80015f8 <HAL_HCD_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000876:	f000 f8b5 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000260 	.word	0x20000260

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	4b4f      	ldr	r3, [pc, #316]	@ (80009d8 <MX_GPIO_Init+0x154>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a4e      	ldr	r2, [pc, #312]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b4c      	ldr	r3, [pc, #304]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b49      	ldr	r3, [pc, #292]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a48      	ldr	r2, [pc, #288]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b46      	ldr	r3, [pc, #280]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b43      	ldr	r3, [pc, #268]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a42      	ldr	r2, [pc, #264]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b40      	ldr	r3, [pc, #256]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b3d      	ldr	r3, [pc, #244]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a3c      	ldr	r2, [pc, #240]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b3a      	ldr	r3, [pc, #232]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b37      	ldr	r3, [pc, #220]	@ (80009d8 <MX_GPIO_Init+0x154>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a36      	ldr	r2, [pc, #216]	@ (80009d8 <MX_GPIO_Init+0x154>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b34      	ldr	r3, [pc, #208]	@ (80009d8 <MX_GPIO_Init+0x154>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f000 fe54 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000926:	482d      	ldr	r0, [pc, #180]	@ (80009dc <MX_GPIO_Init+0x158>)
 8000928:	f000 fe4e 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800092c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800093e:	2301      	movs	r3, #1
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4825      	ldr	r0, [pc, #148]	@ (80009e0 <MX_GPIO_Init+0x15c>)
 800094a:	f000 fc93 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800094e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000960:	230e      	movs	r3, #14
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	481d      	ldr	r0, [pc, #116]	@ (80009e0 <MX_GPIO_Init+0x15c>)
 800096c:	f000 fc82 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000982:	2303      	movs	r3, #3
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	@ (80009dc <MX_GPIO_Init+0x158>)
 800098e:	f000 fc71 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin;
 8000992:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ae:	f000 fc61 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80009b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_GPIO_Init+0x158>)
 80009cc:	f000 fc52 	bl	8001274 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	@ 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000800 	.word	0x48000800
 80009e0:	48000400 	.word	0x48000400

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000a34 <HAL_MspInit+0x44>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2288      	movs	r2, #136	@ 0x88
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 fa59 	bl	8003f10 <memset>
  if(hi2c->Instance==I2C3)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <HAL_I2C_MspInit+0xb0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d13b      	bne.n	8000ae0 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a6c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fdc2 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a82:	f7ff ffaf 	bl	80009e4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_I2C_MspInit+0xb4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <HAL_I2C_MspInit+0xb4>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <HAL_I2C_MspInit+0xb4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <HAL_I2C_MspInit+0xb8>)
 8000ac4:	f000 fbd6 	bl	8001274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_I2C_MspInit+0xb4>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000acc:	4a07      	ldr	r2, [pc, #28]	@ (8000aec <HAL_I2C_MspInit+0xb4>)
 8000ace:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_I2C_MspInit+0xb4>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000ae0:	bf00      	nop
 8000ae2:	37b0      	adds	r7, #176	@ 0xb0
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40005c00 	.word	0x40005c00
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000800 	.word	0x48000800

08000af4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM17)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a17      	ldr	r2, [pc, #92]	@ (8000b70 <HAL_TIM_Base_MspInit+0x7c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d128      	bne.n	8000b68 <HAL_TIM_Base_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_TIM_Base_MspInit+0x80>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1a:	4a16      	ldr	r2, [pc, #88]	@ (8000b74 <HAL_TIM_Base_MspInit+0x80>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <HAL_TIM_Base_MspInit+0x80>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <HAL_TIM_Base_MspInit+0x80>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a10      	ldr	r2, [pc, #64]	@ (8000b74 <HAL_TIM_Base_MspInit+0x80>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <HAL_TIM_Base_MspInit+0x80>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b46:	2380      	movs	r3, #128	@ 0x80
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000b56:	230e      	movs	r3, #14
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f000 fb86 	bl	8001274 <HAL_GPIO_Init>

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40014800 	.word	0x40014800
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0b0      	sub	sp, #192	@ 0xc0
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	2288      	movs	r2, #136	@ 0x88
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 f9b9 	bl	8003f10 <memset>
  if(huart->Instance==UART4)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a74      	ldr	r2, [pc, #464]	@ (8000d74 <HAL_UART_MspInit+0x1fc>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d13c      	bne.n	8000c22 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fd23 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc0:	f7ff ff10 	bl	80009e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc8:	4a6b      	ldr	r2, [pc, #428]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000bca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd0:	4b69      	ldr	r3, [pc, #420]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b66      	ldr	r3, [pc, #408]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be0:	4a65      	ldr	r2, [pc, #404]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be8:	4b63      	ldr	r3, [pc, #396]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1c:	f000 fb2a 	bl	8001274 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c20:	e0a4      	b.n	8000d6c <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==UART5)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a55      	ldr	r2, [pc, #340]	@ (8000d7c <HAL_UART_MspInit+0x204>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d15d      	bne.n	8000ce8 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fce1 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000c44:	f7ff fece 	bl	80009e4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c48:	4b4b      	ldr	r3, [pc, #300]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4c:	4a4a      	ldr	r2, [pc, #296]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c54:	4b48      	ldr	r3, [pc, #288]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c60:	4b45      	ldr	r3, [pc, #276]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c64:	4a44      	ldr	r2, [pc, #272]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6c:	4b42      	ldr	r3, [pc, #264]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c78:	4b3f      	ldr	r3, [pc, #252]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7c:	4a3e      	ldr	r2, [pc, #248]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c84:	4b3c      	ldr	r3, [pc, #240]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000caa:	2308      	movs	r3, #8
 8000cac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4832      	ldr	r0, [pc, #200]	@ (8000d80 <HAL_UART_MspInit+0x208>)
 8000cb8:	f000 fadc 	bl	8001274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4828      	ldr	r0, [pc, #160]	@ (8000d84 <HAL_UART_MspInit+0x20c>)
 8000ce2:	f000 fac7 	bl	8001274 <HAL_GPIO_Init>
}
 8000ce6:	e041      	b.n	8000d6c <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==USART1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a26      	ldr	r2, [pc, #152]	@ (8000d88 <HAL_UART_MspInit+0x210>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d13c      	bne.n	8000d6c <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fc7e 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000d0a:	f7ff fe6b 	bl	80009e4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d12:	4a19      	ldr	r2, [pc, #100]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <HAL_UART_MspInit+0x200>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d68:	f000 fa84 	bl	8001274 <HAL_GPIO_Init>
}
 8000d6c:	bf00      	nop
 8000d6e:	37c0      	adds	r7, #192	@ 0xc0
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40004c00 	.word	0x40004c00
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40005000 	.word	0x40005000
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	40013800 	.word	0x40013800

08000d8c <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2288      	movs	r2, #136	@ 0x88
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 f8af 	bl	8003f10 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dba:	d16b      	bne.n	8000e94 <HAL_HCD_MspInit+0x108>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000dc2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000dc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000de2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fc07 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 8000df8:	f7ff fdf4 	bl	80009e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e00:	4a26      	ldr	r2, [pc, #152]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e2e:	230a      	movs	r3, #10
 8000e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3e:	f000 fa19 	bl	8001274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	4a15      	ldr	r2, [pc, #84]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d114      	bne.n	8000e90 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000e7e:	f000 fdb1 	bl	80019e4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <HAL_HCD_MspInit+0x110>)
 8000e88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e8e:	e001      	b.n	8000e94 <HAL_HCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8000e90:	f000 fda8 	bl	80019e4 <HAL_PWREx_EnableVddUSB>
}
 8000e94:	bf00      	nop
 8000e96:	37b0      	adds	r7, #176	@ 0xb0
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 f893 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f28:	f7ff ffea 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	@ (8000f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <LoopForever+0xe>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	@ (8000f70 <LoopForever+0x16>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f002 ffe5 	bl	8003f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f56:	f7ff facd 	bl	80004f4 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f68:	08003fd8 	.word	0x08003fd8
  ldr r2, =_sbss
 8000f6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f70:	20000584 	.word	0x20000584

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>

08000f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f943 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f80e 	bl	8000fa8 <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e001      	b.n	8000f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f98:	f7ff fd2a 	bl	80009f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <HAL_InitTick+0x6c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d023      	beq.n	8001004 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fbc:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <HAL_InitTick+0x70>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_InitTick+0x6c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f941 	bl	800125a <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10f      	bne.n	8000ffe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d809      	bhi.n	8000ff8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f919 	bl	8001222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <HAL_InitTick+0x74>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e007      	b.n	8001008 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e004      	b.n	8001008 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e001      	b.n	8001008 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	20000000 	.word	0x20000000
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	20000580 	.word	0x20000580

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000580 	.word	0x20000580

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	@ (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	@ (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	@ 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff47 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff5c 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff8e 	bl	8001160 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5d 	bl	800110c <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffb0 	bl	80011c8 <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e17f      	b.n	8001584 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8171 	beq.w	800157e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d005      	beq.n	80012b4 <HAL_GPIO_Init+0x40>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d130      	bne.n	8001316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ea:	2201      	movs	r2, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 0201 	and.w	r2, r3, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b03      	cmp	r3, #3
 8001320:	d118      	bne.n	8001354 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001328:	2201      	movs	r2, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b03      	cmp	r3, #3
 800135e:	d017      	beq.n	8001390 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80ac 	beq.w	800157e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b5f      	ldr	r3, [pc, #380]	@ (80015a4 <HAL_GPIO_Init+0x330>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142a:	4a5e      	ldr	r2, [pc, #376]	@ (80015a4 <HAL_GPIO_Init+0x330>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	@ 0x60
 8001432:	4b5c      	ldr	r3, [pc, #368]	@ (80015a4 <HAL_GPIO_Init+0x330>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800143e:	4a5a      	ldr	r2, [pc, #360]	@ (80015a8 <HAL_GPIO_Init+0x334>)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001468:	d025      	beq.n	80014b6 <HAL_GPIO_Init+0x242>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	@ (80015ac <HAL_GPIO_Init+0x338>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01f      	beq.n	80014b2 <HAL_GPIO_Init+0x23e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4e      	ldr	r2, [pc, #312]	@ (80015b0 <HAL_GPIO_Init+0x33c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x23a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4d      	ldr	r2, [pc, #308]	@ (80015b4 <HAL_GPIO_Init+0x340>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x236>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4c      	ldr	r2, [pc, #304]	@ (80015b8 <HAL_GPIO_Init+0x344>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x232>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4b      	ldr	r2, [pc, #300]	@ (80015bc <HAL_GPIO_Init+0x348>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x22e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4a      	ldr	r2, [pc, #296]	@ (80015c0 <HAL_GPIO_Init+0x34c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x22a>
 800149a:	2306      	movs	r3, #6
 800149c:	e00c      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 800149e:	2307      	movs	r3, #7
 80014a0:	e00a      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b6:	2300      	movs	r3, #0
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c8:	4937      	ldr	r1, [pc, #220]	@ (80015a8 <HAL_GPIO_Init+0x334>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	@ (80015c4 <HAL_GPIO_Init+0x350>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014fa:	4a32      	ldr	r2, [pc, #200]	@ (80015c4 <HAL_GPIO_Init+0x350>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001500:	4b30      	ldr	r3, [pc, #192]	@ (80015c4 <HAL_GPIO_Init+0x350>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001524:	4a27      	ldr	r2, [pc, #156]	@ (80015c4 <HAL_GPIO_Init+0x350>)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800152a:	4b26      	ldr	r3, [pc, #152]	@ (80015c4 <HAL_GPIO_Init+0x350>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800154e:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <HAL_GPIO_Init+0x350>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_GPIO_Init+0x350>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001578:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <HAL_GPIO_Init+0x350>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa22 f303 	lsr.w	r3, r2, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	f47f ae78 	bne.w	8001284 <HAL_GPIO_Init+0x10>
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000c00 	.word	0x48000c00
 80015b8:	48001000 	.word	0x48001000
 80015bc:	48001400 	.word	0x48001400
 80015c0:	48001800 	.word	0x48001800
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015e4:	e002      	b.n	80015ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e052      	b.n	80016b0 <HAL_HCD_Init+0xb8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3315 	ldrb.w	r3, [r3, #789]	@ 0x315
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d106      	bne.n	8001624 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fbb4 	bl	8000d8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2203      	movs	r2, #3
 8001628:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  /* Disable DMA mode for FS instance */
  hhcd->Init.dma_enable = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f002 faea 	bl	8003c10 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7c1a      	ldrb	r2, [r3, #16]
 8001644:	f88d 2000 	strb.w	r2, [sp]
 8001648:	3304      	adds	r3, #4
 800164a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164c:	f002 fab3 	bl	8003bb6 <USB_CoreInit>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_HCD_Init+0x6a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e026      	b.n	80016b0 <HAL_HCD_Init+0xb8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fae2 	bl	8003c32 <USB_SetCurrentMode>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_HCD_Init+0x88>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2202      	movs	r2, #2
 8001678:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e017      	b.n	80016b0 <HAL_HCD_Init+0xb8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7c1a      	ldrb	r2, [r3, #16]
 8001688:	f88d 2000 	strb.w	r2, [sp]
 800168c:	3304      	adds	r3, #4
 800168e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001690:	f002 fbba 	bl	8003e08 <USB_HostInit>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_HCD_Init+0xae>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e004      	b.n	80016b0 <HAL_HCD_Init+0xb8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e08d      	b.n	80017e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff f9aa 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2224      	movs	r2, #36	@ 0x24
 80016e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001708:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001718:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e006      	b.n	8001740 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800173e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d108      	bne.n	800175a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	e007      	b.n	800176a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001768:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800177c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800178c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69d9      	ldr	r1, [r3, #28]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1a      	ldr	r2, [r3, #32]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2220      	movs	r2, #32
 80017d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b20      	cmp	r3, #32
 8001802:	d138      	bne.n	8001876 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800180e:	2302      	movs	r3, #2
 8001810:	e032      	b.n	8001878 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2224      	movs	r2, #36	@ 0x24
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001840:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6819      	ldr	r1, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001876:	2302      	movs	r3, #2
  }
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b20      	cmp	r3, #32
 8001898:	d139      	bne.n	800190e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e033      	b.n	8001910 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2224      	movs	r2, #36	@ 0x24
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2220      	movs	r2, #32
 80018fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800190e:	2302      	movs	r3, #2
  }
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <HAL_PWREx_GetVoltageRange+0x18>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40007000 	.word	0x40007000

08001938 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001946:	d130      	bne.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001954:	d038      	beq.n	80019c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001956:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800195e:	4a1e      	ldr	r2, [pc, #120]	@ (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001960:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2232      	movs	r2, #50	@ 0x32
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	0c9b      	lsrs	r3, r3, #18
 8001978:	3301      	adds	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800197c:	e002      	b.n	8001984 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3b01      	subs	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001990:	d102      	bne.n	8001998 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f2      	bne.n	800197e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019a4:	d110      	bne.n	80019c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e00f      	b.n	80019ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b6:	d007      	beq.n	80019c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019c0:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000
 80019dc:	20000000 	.word	0x20000000
 80019e0:	431bde83 	.word	0x431bde83

080019e4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_PWREx_EnableVddUSB+0x1c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <HAL_PWREx_EnableVddUSB+0x1c>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019f2:	6053      	str	r3, [r2, #4]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40007000 	.word	0x40007000

08001a04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e3ca      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a16:	4b97      	ldr	r3, [pc, #604]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a20:	4b94      	ldr	r3, [pc, #592]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80e4 	beq.w	8001c00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4a>
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	f040 808b 	bne.w	8001b5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	f040 8087 	bne.w	8001b5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4e:	4b89      	ldr	r3, [pc, #548]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x62>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e3a2      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1a      	ldr	r2, [r3, #32]
 8001a6a:	4b82      	ldr	r3, [pc, #520]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <HAL_RCC_OscConfig+0x7c>
 8001a76:	4b7f      	ldr	r3, [pc, #508]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a7e:	e005      	b.n	8001a8c <HAL_RCC_OscConfig+0x88>
 8001a80:	4b7c      	ldr	r3, [pc, #496]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d223      	bcs.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fd53 	bl	8002540 <RCC_SetFlashLatencyFromMSIRange>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e383      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa4:	4b73      	ldr	r3, [pc, #460]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a72      	ldr	r2, [pc, #456]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b70      	ldr	r3, [pc, #448]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	496d      	ldr	r1, [pc, #436]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac2:	4b6c      	ldr	r3, [pc, #432]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	4968      	ldr	r1, [pc, #416]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
 8001ad6:	e025      	b.n	8001b24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad8:	4b66      	ldr	r3, [pc, #408]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a65      	ldr	r2, [pc, #404]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b63      	ldr	r3, [pc, #396]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4960      	ldr	r1, [pc, #384]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	495b      	ldr	r1, [pc, #364]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 fd13 	bl	8002540 <RCC_SetFlashLatencyFromMSIRange>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e343      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b24:	f000 fc4a 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b52      	ldr	r3, [pc, #328]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	4950      	ldr	r1, [pc, #320]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	4a4e      	ldr	r2, [pc, #312]	@ (8001c7c <HAL_RCC_OscConfig+0x278>)
 8001b42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b44:	4b4e      	ldr	r3, [pc, #312]	@ (8001c80 <HAL_RCC_OscConfig+0x27c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fa2d 	bl	8000fa8 <HAL_InitTick>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d052      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	e327      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d032      	beq.n	8001bca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b64:	4b43      	ldr	r3, [pc, #268]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a42      	ldr	r2, [pc, #264]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fa6a 	bl	8001048 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b78:	f7ff fa66 	bl	8001048 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e310      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b96:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a36      	ldr	r2, [pc, #216]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4931      	ldr	r1, [pc, #196]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	492c      	ldr	r1, [pc, #176]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
 8001bc8:	e01a      	b.n	8001c00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bca:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a29      	ldr	r2, [pc, #164]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fa37 	bl	8001048 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bde:	f7ff fa33 	bl	8001048 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e2dd      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bf0:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x1da>
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d074      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d005      	beq.n	8001c1e <HAL_RCC_OscConfig+0x21a>
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d10e      	bne.n	8001c36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d10b      	bne.n	8001c36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d064      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d160      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e2ba      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x24a>
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0b      	ldr	r2, [pc, #44]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e026      	b.n	8001c9c <HAL_RCC_OscConfig+0x298>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c56:	d115      	bne.n	8001c84 <HAL_RCC_OscConfig+0x280>
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a02      	ldr	r2, [pc, #8]	@ (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e014      	b.n	8001c9c <HAL_RCC_OscConfig+0x298>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08003f80 	.word	0x08003f80
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004
 8001c84:	4ba0      	ldr	r3, [pc, #640]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a9f      	ldr	r2, [pc, #636]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b9d      	ldr	r3, [pc, #628]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a9c      	ldr	r2, [pc, #624]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f9d0 	bl	8001048 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff f9cc 	bl	8001048 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	@ 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e276      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	4b92      	ldr	r3, [pc, #584]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x2a8>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f9bc 	bl	8001048 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b8 	bl	8001048 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	@ 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e262      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce6:	4b88      	ldr	r3, [pc, #544]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2d0>
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d060      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_OscConfig+0x310>
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d119      	bne.n	8001d42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d116      	bne.n	8001d42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d14:	4b7c      	ldr	r3, [pc, #496]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x328>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e23f      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b76      	ldr	r3, [pc, #472]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	4973      	ldr	r1, [pc, #460]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d40:	e040      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d023      	beq.n	8001d92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff f977 	bl	8001048 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff f973 	bl	8001048 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e21d      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d70:	4b65      	ldr	r3, [pc, #404]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b62      	ldr	r3, [pc, #392]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	495f      	ldr	r1, [pc, #380]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
 8001d90:	e018      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b5d      	ldr	r3, [pc, #372]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a5c      	ldr	r2, [pc, #368]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff f953 	bl	8001048 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff f94f 	bl	8001048 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1f9      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db8:	4b53      	ldr	r3, [pc, #332]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d03c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01c      	beq.n	8001e12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dde:	4a4a      	ldr	r2, [pc, #296]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff f92e 	bl	8001048 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff f92a 	bl	8001048 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1d4      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e02:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ef      	beq.n	8001df0 <HAL_RCC_OscConfig+0x3ec>
 8001e10:	e01b      	b.n	8001e4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e12:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e18:	4a3b      	ldr	r2, [pc, #236]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff f911 	bl	8001048 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7ff f90d 	bl	8001048 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e1b7      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e3c:	4b32      	ldr	r3, [pc, #200]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ef      	bne.n	8001e2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80a6 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	4b27      	ldr	r3, [pc, #156]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	4a26      	ldr	r2, [pc, #152]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e74:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e84:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <HAL_RCC_OscConfig+0x508>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d118      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <HAL_RCC_OscConfig+0x508>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1d      	ldr	r2, [pc, #116]	@ (8001f0c <HAL_RCC_OscConfig+0x508>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff f8d4 	bl	8001048 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7ff f8d0 	bl	8001048 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e17a      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_RCC_OscConfig+0x508>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d108      	bne.n	8001edc <HAL_RCC_OscConfig+0x4d8>
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eda:	e029      	b.n	8001f30 <HAL_RCC_OscConfig+0x52c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d115      	bne.n	8001f10 <HAL_RCC_OscConfig+0x50c>
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eea:	4a07      	ldr	r2, [pc, #28]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	4a03      	ldr	r2, [pc, #12]	@ (8001f08 <HAL_RCC_OscConfig+0x504>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x52c>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	4b9c      	ldr	r3, [pc, #624]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f16:	4a9b      	ldr	r2, [pc, #620]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f20:	4b98      	ldr	r3, [pc, #608]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f26:	4a97      	ldr	r2, [pc, #604]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d016      	beq.n	8001f66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff f886 	bl	8001048 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f7ff f882 	bl	8001048 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e12a      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f56:	4b8b      	ldr	r3, [pc, #556]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ed      	beq.n	8001f40 <HAL_RCC_OscConfig+0x53c>
 8001f64:	e015      	b.n	8001f92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff f86f 	bl	8001048 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7ff f86b 	bl	8001048 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e113      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f84:	4b7f      	ldr	r3, [pc, #508]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ed      	bne.n	8001f6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f92:	7ffb      	ldrb	r3, [r7, #31]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f98:	4b7a      	ldr	r3, [pc, #488]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	4a79      	ldr	r2, [pc, #484]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8001f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80fe 	beq.w	80021aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	f040 80d0 	bne.w	8002158 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fb8:	4b72      	ldr	r3, [pc, #456]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d130      	bne.n	800202e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d127      	bne.n	800202e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d11f      	bne.n	800202e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ff8:	2a07      	cmp	r2, #7
 8001ffa:	bf14      	ite	ne
 8001ffc:	2201      	movne	r2, #1
 8001ffe:	2200      	moveq	r2, #0
 8002000:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002002:	4293      	cmp	r3, r2
 8002004:	d113      	bne.n	800202e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	3b01      	subs	r3, #1
 8002014:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d109      	bne.n	800202e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	3b01      	subs	r3, #1
 8002028:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d06e      	beq.n	800210c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b0c      	cmp	r3, #12
 8002032:	d069      	beq.n	8002108 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002034:	4b53      	ldr	r3, [pc, #332]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d105      	bne.n	800204c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002040:	4b50      	ldr	r3, [pc, #320]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0ad      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002050:	4b4c      	ldr	r3, [pc, #304]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a4b      	ldr	r2, [pc, #300]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8002056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800205c:	f7fe fff4 	bl	8001048 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7fe fff0 	bl	8001048 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e09a      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002076:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002082:	4b40      	ldr	r3, [pc, #256]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	4b40      	ldr	r3, [pc, #256]	@ (8002188 <HAL_RCC_OscConfig+0x784>)
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002092:	3a01      	subs	r2, #1
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	4311      	orrs	r1, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800209c:	0212      	lsls	r2, r2, #8
 800209e:	4311      	orrs	r1, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020a4:	0852      	lsrs	r2, r2, #1
 80020a6:	3a01      	subs	r2, #1
 80020a8:	0552      	lsls	r2, r2, #21
 80020aa:	4311      	orrs	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020b0:	0852      	lsrs	r2, r2, #1
 80020b2:	3a01      	subs	r2, #1
 80020b4:	0652      	lsls	r2, r2, #25
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020bc:	0912      	lsrs	r2, r2, #4
 80020be:	0452      	lsls	r2, r2, #17
 80020c0:	430a      	orrs	r2, r1
 80020c2:	4930      	ldr	r1, [pc, #192]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 80020ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 80020da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e0:	f7fe ffb2 	bl	8001048 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe ffae 	bl	8001048 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e058      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fa:	4b22      	ldr	r3, [pc, #136]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002106:	e050      	b.n	80021aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e04f      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210c:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d148      	bne.n	80021aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002118:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 800211e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a16      	ldr	r2, [pc, #88]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800212e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002130:	f7fe ff8a 	bl	8001048 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe ff86 	bl	8001048 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e030      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x734>
 8002156:	e028      	b.n	80021aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d023      	beq.n	80021a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a08      	ldr	r2, [pc, #32]	@ (8002184 <HAL_RCC_OscConfig+0x780>)
 8002164:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7fe ff6d 	bl	8001048 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	e00c      	b.n	800218c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7fe ff69 	bl	8001048 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d905      	bls.n	800218c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e013      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
 8002184:	40021000 	.word	0x40021000
 8002188:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_RCC_OscConfig+0x7b0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ec      	bne.n	8002172 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_RCC_OscConfig+0x7b0>)
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	4905      	ldr	r1, [pc, #20]	@ (80021b4 <HAL_RCC_OscConfig+0x7b0>)
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_RCC_OscConfig+0x7b4>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
 80021a4:	e001      	b.n	80021aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	feeefffc 	.word	0xfeeefffc

080021bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0e7      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d0:	4b75      	ldr	r3, [pc, #468]	@ (80023a8 <HAL_RCC_ClockConfig+0x1ec>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d910      	bls.n	8002200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b72      	ldr	r3, [pc, #456]	@ (80023a8 <HAL_RCC_ClockConfig+0x1ec>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 0207 	bic.w	r2, r3, #7
 80021e6:	4970      	ldr	r1, [pc, #448]	@ (80023a8 <HAL_RCC_ClockConfig+0x1ec>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b6e      	ldr	r3, [pc, #440]	@ (80023a8 <HAL_RCC_ClockConfig+0x1ec>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0cf      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d010      	beq.n	800222e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	4b66      	ldr	r3, [pc, #408]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002218:	429a      	cmp	r2, r3
 800221a:	d908      	bls.n	800222e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b63      	ldr	r3, [pc, #396]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4960      	ldr	r1, [pc, #384]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d04c      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002242:	4b5a      	ldr	r3, [pc, #360]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d121      	bne.n	8002292 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0a6      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800225a:	4b54      	ldr	r3, [pc, #336]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d115      	bne.n	8002292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e09a      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002272:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e08e      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002282:	4b4a      	ldr	r3, [pc, #296]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e086      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4943      	ldr	r1, [pc, #268]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a4:	f7fe fed0 	bl	8001048 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fecc 	bl	8001048 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e06e      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d010      	beq.n	8002302 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d208      	bcs.n	8002302 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f0:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	492b      	ldr	r1, [pc, #172]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002302:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d210      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 0207 	bic.w	r2, r3, #7
 8002318:	4923      	ldr	r1, [pc, #140]	@ (80023a8 <HAL_RCC_ClockConfig+0x1ec>)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002320:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e036      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4918      	ldr	r1, [pc, #96]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	4313      	orrs	r3, r2
 800234e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4910      	ldr	r1, [pc, #64]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002370:	f000 f824 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b0d      	ldr	r3, [pc, #52]	@ (80023ac <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	490b      	ldr	r1, [pc, #44]	@ (80023b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	4a09      	ldr	r2, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1f8>)
 800238e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fe07 	bl	8000fa8 <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	72fb      	strb	r3, [r7, #11]

  return status;
 800239e:	7afb      	ldrb	r3, [r7, #11]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08003f80 	.word	0x08003f80
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ca:	4b3e      	ldr	r3, [pc, #248]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d4:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x34>
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d121      	bne.n	800242e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d11e      	bne.n	800242e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023f0:	4b34      	ldr	r3, [pc, #208]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023fc:	4b31      	ldr	r3, [pc, #196]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e005      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800240c:	4b2d      	ldr	r3, [pc, #180]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002418:	4a2b      	ldr	r2, [pc, #172]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10d      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b04      	cmp	r3, #4
 8002432:	d102      	bne.n	800243a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	e004      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d101      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002440:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002442:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d134      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0xa6>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d003      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0xac>
 8002460:	e005      	b.n	800246e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002462:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002464:	617b      	str	r3, [r7, #20]
      break;
 8002466:	e005      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002468:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x110>)
 800246a:	617b      	str	r3, [r7, #20]
      break;
 800246c:	e002      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	617b      	str	r3, [r7, #20]
      break;
 8002472:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	3301      	adds	r3, #1
 8002480:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	fb03 f202 	mul.w	r2, r3, r2
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	0e5b      	lsrs	r3, r3, #25
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	3301      	adds	r3, #1
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024b4:	69bb      	ldr	r3, [r7, #24]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	@ 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08003f98 	.word	0x08003f98
 80024cc:	00f42400 	.word	0x00f42400

080024d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4904      	ldr	r1, [pc, #16]	@ (8002510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	08003f90 	.word	0x08003f90

08002514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002518:	f7ff ffda 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0adb      	lsrs	r3, r3, #11
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4904      	ldr	r1, [pc, #16]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x28>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	08003f90 	.word	0x08003f90

08002540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800254c:	4b2a      	ldr	r3, [pc, #168]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002558:	f7ff f9e0 	bl	800191c <HAL_PWREx_GetVoltageRange>
 800255c:	6178      	str	r0, [r7, #20]
 800255e:	e014      	b.n	800258a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002560:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002564:	4a24      	ldr	r2, [pc, #144]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256a:	6593      	str	r3, [r2, #88]	@ 0x58
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002578:	f7ff f9d0 	bl	800191c <HAL_PWREx_GetVoltageRange>
 800257c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800257e:	4b1e      	ldr	r3, [pc, #120]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	4a1d      	ldr	r2, [pc, #116]	@ (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002588:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002590:	d10b      	bne.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b80      	cmp	r3, #128	@ 0x80
 8002596:	d919      	bls.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2ba0      	cmp	r3, #160	@ 0xa0
 800259c:	d902      	bls.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800259e:	2302      	movs	r3, #2
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e013      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a4:	2301      	movs	r3, #1
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	e010      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b80      	cmp	r3, #128	@ 0x80
 80025ae:	d902      	bls.n	80025b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025b0:	2303      	movs	r3, #3
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	e00a      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b80      	cmp	r3, #128	@ 0x80
 80025ba:	d102      	bne.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025bc:	2302      	movs	r3, #2
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	e004      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b70      	cmp	r3, #112	@ 0x70
 80025c6:	d101      	bne.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c8:	2301      	movs	r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 0207 	bic.w	r2, r3, #7
 80025d4:	4909      	ldr	r1, [pc, #36]	@ (80025fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025dc:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d001      	beq.n	80025ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40022000 	.word	0x40022000

08002600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002608:	2300      	movs	r3, #0
 800260a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800260c:	2300      	movs	r3, #0
 800260e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002618:	2b00      	cmp	r3, #0
 800261a:	d041      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002620:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002624:	d02a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002626:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800262a:	d824      	bhi.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800262c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002632:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002636:	d81e      	bhi.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800263c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002640:	d010      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002642:	e018      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002644:	4b86      	ldr	r3, [pc, #536]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a85      	ldr	r2, [pc, #532]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002650:	e015      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fabb 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002662:	e00c      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3320      	adds	r3, #32
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fba6 	bl	8002dbc <RCCEx_PLLSAI2_Config>
 8002670:	4603      	mov	r3, r0
 8002672:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002674:	e003      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	74fb      	strb	r3, [r7, #19]
      break;
 800267a:	e000      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800267c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b76      	ldr	r3, [pc, #472]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002692:	4973      	ldr	r1, [pc, #460]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800269a:	e001      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d041      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026b4:	d02a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026ba:	d824      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026c0:	d008      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026c6:	d81e      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026d0:	d010      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026d2:	e018      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026d4:	4b62      	ldr	r3, [pc, #392]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a61      	ldr	r2, [pc, #388]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026e0:	e015      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fa73 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026f2:	e00c      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3320      	adds	r3, #32
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fb5e 	bl	8002dbc <RCCEx_PLLSAI2_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002704:	e003      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	74fb      	strb	r3, [r7, #19]
      break;
 800270a:	e000      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800270c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002714:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002722:	494f      	ldr	r1, [pc, #316]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800272a:	e001      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a0 	beq.w	800287e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002742:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275c:	4a40      	ldr	r2, [pc, #256]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002762:	6593      	str	r3, [r2, #88]	@ 0x58
 8002764:	4b3e      	ldr	r3, [pc, #248]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002770:	2301      	movs	r3, #1
 8002772:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002774:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002780:	f7fe fc62 	bl	8001048 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002786:	e009      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fe fc5e 	bl	8001048 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	74fb      	strb	r3, [r7, #19]
        break;
 800279a:	e005      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800279c:	4b31      	ldr	r3, [pc, #196]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ef      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d15c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d019      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027d8:	4b21      	ldr	r3, [pc, #132]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027de:	4a20      	ldr	r2, [pc, #128]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fe fc1d 	bl	8001048 <HAL_GetTick>
 800280e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002810:	e00b      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe fc19 	bl	8001048 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d902      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	74fb      	strb	r3, [r7, #19]
            break;
 8002828:	e006      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ec      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002844:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800284e:	4904      	ldr	r1, [pc, #16]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002856:	e009      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
 800285c:	e006      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286c:	7c7b      	ldrb	r3, [r7, #17]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b9e      	ldr	r3, [pc, #632]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002876:	4a9d      	ldr	r2, [pc, #628]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800288a:	4b98      	ldr	r3, [pc, #608]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002890:	f023 0203 	bic.w	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	4994      	ldr	r1, [pc, #592]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ac:	4b8f      	ldr	r3, [pc, #572]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b2:	f023 020c 	bic.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ba:	498c      	ldr	r1, [pc, #560]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ce:	4b87      	ldr	r3, [pc, #540]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	4983      	ldr	r1, [pc, #524]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028f0:	4b7e      	ldr	r3, [pc, #504]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	497b      	ldr	r1, [pc, #492]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002912:	4b76      	ldr	r3, [pc, #472]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002920:	4972      	ldr	r1, [pc, #456]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002934:	4b6d      	ldr	r3, [pc, #436]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	496a      	ldr	r1, [pc, #424]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002956:	4b65      	ldr	r3, [pc, #404]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	4961      	ldr	r1, [pc, #388]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002978:	4b5c      	ldr	r3, [pc, #368]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	4959      	ldr	r1, [pc, #356]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800299a:	4b54      	ldr	r3, [pc, #336]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a8:	4950      	ldr	r1, [pc, #320]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029bc:	4b4b      	ldr	r3, [pc, #300]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	4948      	ldr	r1, [pc, #288]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029de:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ec:	493f      	ldr	r1, [pc, #252]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d028      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a00:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a0e:	4937      	ldr	r1, [pc, #220]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a20:	4b32      	ldr	r3, [pc, #200]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a31      	ldr	r2, [pc, #196]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a2a:	60d3      	str	r3, [r2, #12]
 8002a2c:	e011      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f8c8 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a5e:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6c:	491f      	ldr	r1, [pc, #124]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a1a      	ldr	r2, [pc, #104]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a88:	60d3      	str	r3, [r2, #12]
 8002a8a:	e011      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f899 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02b      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aca:	4908      	ldr	r1, [pc, #32]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ada:	d109      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a02      	ldr	r2, [pc, #8]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ae6:	60d3      	str	r3, [r2, #12]
 8002ae8:	e014      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f867 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02f      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b20:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b2e:	4928      	ldr	r1, [pc, #160]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f844 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d014      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	74bb      	strb	r3, [r7, #18]
 8002b5a:	e011      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3320      	adds	r3, #32
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f925 	bl	8002dbc <RCCEx_PLLSAI2_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b8c:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b9a:	490d      	ldr	r1, [pc, #52]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bae:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bbe:	4904      	ldr	r1, [pc, #16]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002be2:	4b75      	ldr	r3, [pc, #468]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bee:	4b72      	ldr	r3, [pc, #456]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0203 	and.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d10d      	bne.n	8002c1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
       ||
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c06:	4b6c      	ldr	r3, [pc, #432]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
       ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d047      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	e044      	b.n	8002caa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d018      	beq.n	8002c5a <RCCEx_PLLSAI1_Config+0x86>
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d825      	bhi.n	8002c78 <RCCEx_PLLSAI1_Config+0xa4>
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d002      	beq.n	8002c36 <RCCEx_PLLSAI1_Config+0x62>
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d009      	beq.n	8002c48 <RCCEx_PLLSAI1_Config+0x74>
 8002c34:	e020      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c36:	4b60      	ldr	r3, [pc, #384]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11d      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c46:	e01a      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c48:	4b5b      	ldr	r3, [pc, #364]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c58:	e013      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c5a:	4b57      	ldr	r3, [pc, #348]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10f      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c66:	4b54      	ldr	r3, [pc, #336]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c76:	e006      	b.n	8002c86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7c:	e004      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e002      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c82:	bf00      	nop
 8002c84:	e000      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c86:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	4944      	ldr	r1, [pc, #272]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d17d      	bne.n	8002dac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cb0:	4b41      	ldr	r3, [pc, #260]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a40      	ldr	r2, [pc, #256]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cbc:	f7fe f9c4 	bl	8001048 <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cc2:	e009      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cc4:	f7fe f9c0 	bl	8001048 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d902      	bls.n	8002cd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8002cd6:	e005      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd8:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ef      	bne.n	8002cc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d160      	bne.n	8002dac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d111      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf0:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6892      	ldr	r2, [r2, #8]
 8002d00:	0211      	lsls	r1, r2, #8
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68d2      	ldr	r2, [r2, #12]
 8002d06:	0912      	lsrs	r2, r2, #4
 8002d08:	0452      	lsls	r2, r2, #17
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	492a      	ldr	r1, [pc, #168]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	610b      	str	r3, [r1, #16]
 8002d12:	e027      	b.n	8002d64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d112      	bne.n	8002d40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d1a:	4b27      	ldr	r3, [pc, #156]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6892      	ldr	r2, [r2, #8]
 8002d2a:	0211      	lsls	r1, r2, #8
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6912      	ldr	r2, [r2, #16]
 8002d30:	0852      	lsrs	r2, r2, #1
 8002d32:	3a01      	subs	r2, #1
 8002d34:	0552      	lsls	r2, r2, #21
 8002d36:	430a      	orrs	r2, r1
 8002d38:	491f      	ldr	r1, [pc, #124]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	610b      	str	r3, [r1, #16]
 8002d3e:	e011      	b.n	8002d64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d40:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6892      	ldr	r2, [r2, #8]
 8002d50:	0211      	lsls	r1, r2, #8
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6952      	ldr	r2, [r2, #20]
 8002d56:	0852      	lsrs	r2, r2, #1
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	0652      	lsls	r2, r2, #25
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	4916      	ldr	r1, [pc, #88]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d64:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe f96a 	bl	8001048 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d76:	e009      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d78:	f7fe f966 	bl	8001048 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	73fb      	strb	r3, [r7, #15]
          break;
 8002d8a:	e005      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ef      	beq.n	8002d78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	4904      	ldr	r1, [pc, #16]	@ (8002db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dca:	4b6a      	ldr	r3, [pc, #424]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d018      	beq.n	8002e08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dd6:	4b67      	ldr	r3, [pc, #412]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0203 	and.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d10d      	bne.n	8002e02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dee:	4b61      	ldr	r3, [pc, #388]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
       ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d047      	beq.n	8002e92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	e044      	b.n	8002e92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d018      	beq.n	8002e42 <RCCEx_PLLSAI2_Config+0x86>
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d825      	bhi.n	8002e60 <RCCEx_PLLSAI2_Config+0xa4>
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d002      	beq.n	8002e1e <RCCEx_PLLSAI2_Config+0x62>
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d009      	beq.n	8002e30 <RCCEx_PLLSAI2_Config+0x74>
 8002e1c:	e020      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e1e:	4b55      	ldr	r3, [pc, #340]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d11d      	bne.n	8002e66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2e:	e01a      	b.n	8002e66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e30:	4b50      	ldr	r3, [pc, #320]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d116      	bne.n	8002e6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e013      	b.n	8002e6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e42:	4b4c      	ldr	r3, [pc, #304]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e4e:	4b49      	ldr	r3, [pc, #292]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e5e:	e006      	b.n	8002e6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e004      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e66:	bf00      	nop
 8002e68:	e002      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e76:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6819      	ldr	r1, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	4939      	ldr	r1, [pc, #228]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d167      	bne.n	8002f68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e98:	4b36      	ldr	r3, [pc, #216]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a35      	ldr	r2, [pc, #212]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea4:	f7fe f8d0 	bl	8001048 <HAL_GetTick>
 8002ea8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eaa:	e009      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eac:	f7fe f8cc 	bl	8001048 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d902      	bls.n	8002ec0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ebe:	e005      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ef      	bne.n	8002eac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d14a      	bne.n	8002f68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ed8:	4b26      	ldr	r3, [pc, #152]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6892      	ldr	r2, [r2, #8]
 8002ee8:	0211      	lsls	r1, r2, #8
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68d2      	ldr	r2, [r2, #12]
 8002eee:	0912      	lsrs	r2, r2, #4
 8002ef0:	0452      	lsls	r2, r2, #17
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	491f      	ldr	r1, [pc, #124]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	614b      	str	r3, [r1, #20]
 8002efa:	e011      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002efc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6892      	ldr	r2, [r2, #8]
 8002f0c:	0211      	lsls	r1, r2, #8
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6912      	ldr	r2, [r2, #16]
 8002f12:	0852      	lsrs	r2, r2, #1
 8002f14:	3a01      	subs	r2, #1
 8002f16:	0652      	lsls	r2, r2, #25
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	4916      	ldr	r1, [pc, #88]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f20:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a13      	ldr	r2, [pc, #76]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe f88c 	bl	8001048 <HAL_GetTick>
 8002f30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f32:	e009      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f34:	f7fe f888 	bl	8001048 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d902      	bls.n	8002f48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	73fb      	strb	r3, [r7, #15]
          break;
 8002f46:	e005      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f48:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ef      	beq.n	8002f34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	4904      	ldr	r1, [pc, #16]	@ (8002f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000

08002f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e049      	b.n	800301e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fda8 	bl	8000af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f000 f836 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a46      	ldr	r2, [pc, #280]	@ (8003154 <TIM_Base_SetConfig+0x12c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003046:	d00f      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a43      	ldr	r2, [pc, #268]	@ (8003158 <TIM_Base_SetConfig+0x130>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00b      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a42      	ldr	r2, [pc, #264]	@ (800315c <TIM_Base_SetConfig+0x134>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a41      	ldr	r2, [pc, #260]	@ (8003160 <TIM_Base_SetConfig+0x138>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a40      	ldr	r2, [pc, #256]	@ (8003164 <TIM_Base_SetConfig+0x13c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a35      	ldr	r2, [pc, #212]	@ (8003154 <TIM_Base_SetConfig+0x12c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003088:	d01b      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a32      	ldr	r2, [pc, #200]	@ (8003158 <TIM_Base_SetConfig+0x130>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d017      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a31      	ldr	r2, [pc, #196]	@ (800315c <TIM_Base_SetConfig+0x134>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a30      	ldr	r2, [pc, #192]	@ (8003160 <TIM_Base_SetConfig+0x138>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003164 <TIM_Base_SetConfig+0x13c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003168 <TIM_Base_SetConfig+0x140>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2d      	ldr	r2, [pc, #180]	@ (800316c <TIM_Base_SetConfig+0x144>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003170 <TIM_Base_SetConfig+0x148>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a16      	ldr	r2, [pc, #88]	@ (8003154 <TIM_Base_SetConfig+0x12c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00f      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a18      	ldr	r2, [pc, #96]	@ (8003164 <TIM_Base_SetConfig+0x13c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00b      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a17      	ldr	r2, [pc, #92]	@ (8003168 <TIM_Base_SetConfig+0x140>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d007      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a16      	ldr	r2, [pc, #88]	@ (800316c <TIM_Base_SetConfig+0x144>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a15      	ldr	r2, [pc, #84]	@ (8003170 <TIM_Base_SetConfig+0x148>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d103      	bne.n	8003128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d105      	bne.n	8003146 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f023 0201 	bic.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	611a      	str	r2, [r3, #16]
  }
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400
 800315c:	40000800 	.word	0x40000800
 8003160:	40000c00 	.word	0x40000c00
 8003164:	40013400 	.word	0x40013400
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800

08003174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e040      	b.n	8003208 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fcee 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	@ 0x24
 80031a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fae0 	bl	8003780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f825 	bl	8003210 <UART_SetConfig>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e01b      	b.n	8003208 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fb5f 	bl	80038c4 <UART_CheckIdleState>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003214:	b08a      	sub	sp, #40	@ 0x28
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	431a      	orrs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	431a      	orrs	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	4313      	orrs	r3, r2
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4ba4      	ldr	r3, [pc, #656]	@ (80034d0 <UART_SetConfig+0x2c0>)
 8003240:	4013      	ands	r3, r2
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003248:	430b      	orrs	r3, r1
 800324a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a99      	ldr	r2, [pc, #612]	@ (80034d4 <UART_SetConfig+0x2c4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003278:	4313      	orrs	r3, r2
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a90      	ldr	r2, [pc, #576]	@ (80034d8 <UART_SetConfig+0x2c8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d126      	bne.n	80032e8 <UART_SetConfig+0xd8>
 800329a:	4b90      	ldr	r3, [pc, #576]	@ (80034dc <UART_SetConfig+0x2cc>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d81b      	bhi.n	80032e0 <UART_SetConfig+0xd0>
 80032a8:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <UART_SetConfig+0xa0>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032d1 	.word	0x080032d1
 80032b8:	080032c9 	.word	0x080032c9
 80032bc:	080032d9 	.word	0x080032d9
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c6:	e116      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80032c8:	2302      	movs	r3, #2
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ce:	e112      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80032d0:	2304      	movs	r3, #4
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d6:	e10e      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80032d8:	2308      	movs	r3, #8
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032de:	e10a      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80032e0:	2310      	movs	r3, #16
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e6:	e106      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a7c      	ldr	r2, [pc, #496]	@ (80034e0 <UART_SetConfig+0x2d0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d138      	bne.n	8003364 <UART_SetConfig+0x154>
 80032f2:	4b7a      	ldr	r3, [pc, #488]	@ (80034dc <UART_SetConfig+0x2cc>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d82d      	bhi.n	800335c <UART_SetConfig+0x14c>
 8003300:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <UART_SetConfig+0xf8>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	0800333d 	.word	0x0800333d
 800330c:	0800335d 	.word	0x0800335d
 8003310:	0800335d 	.word	0x0800335d
 8003314:	0800335d 	.word	0x0800335d
 8003318:	0800334d 	.word	0x0800334d
 800331c:	0800335d 	.word	0x0800335d
 8003320:	0800335d 	.word	0x0800335d
 8003324:	0800335d 	.word	0x0800335d
 8003328:	08003345 	.word	0x08003345
 800332c:	0800335d 	.word	0x0800335d
 8003330:	0800335d 	.word	0x0800335d
 8003334:	0800335d 	.word	0x0800335d
 8003338:	08003355 	.word	0x08003355
 800333c:	2300      	movs	r3, #0
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003342:	e0d8      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003344:	2302      	movs	r3, #2
 8003346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800334a:	e0d4      	b.n	80034f6 <UART_SetConfig+0x2e6>
 800334c:	2304      	movs	r3, #4
 800334e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003352:	e0d0      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003354:	2308      	movs	r3, #8
 8003356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800335a:	e0cc      	b.n	80034f6 <UART_SetConfig+0x2e6>
 800335c:	2310      	movs	r3, #16
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003362:	e0c8      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5e      	ldr	r2, [pc, #376]	@ (80034e4 <UART_SetConfig+0x2d4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d125      	bne.n	80033ba <UART_SetConfig+0x1aa>
 800336e:	4b5b      	ldr	r3, [pc, #364]	@ (80034dc <UART_SetConfig+0x2cc>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003374:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003378:	2b30      	cmp	r3, #48	@ 0x30
 800337a:	d016      	beq.n	80033aa <UART_SetConfig+0x19a>
 800337c:	2b30      	cmp	r3, #48	@ 0x30
 800337e:	d818      	bhi.n	80033b2 <UART_SetConfig+0x1a2>
 8003380:	2b20      	cmp	r3, #32
 8003382:	d00a      	beq.n	800339a <UART_SetConfig+0x18a>
 8003384:	2b20      	cmp	r3, #32
 8003386:	d814      	bhi.n	80033b2 <UART_SetConfig+0x1a2>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <UART_SetConfig+0x182>
 800338c:	2b10      	cmp	r3, #16
 800338e:	d008      	beq.n	80033a2 <UART_SetConfig+0x192>
 8003390:	e00f      	b.n	80033b2 <UART_SetConfig+0x1a2>
 8003392:	2300      	movs	r3, #0
 8003394:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003398:	e0ad      	b.n	80034f6 <UART_SetConfig+0x2e6>
 800339a:	2302      	movs	r3, #2
 800339c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033a0:	e0a9      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80033a2:	2304      	movs	r3, #4
 80033a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033a8:	e0a5      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80033aa:	2308      	movs	r3, #8
 80033ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033b0:	e0a1      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80033b2:	2310      	movs	r3, #16
 80033b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033b8:	e09d      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a4a      	ldr	r2, [pc, #296]	@ (80034e8 <UART_SetConfig+0x2d8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d125      	bne.n	8003410 <UART_SetConfig+0x200>
 80033c4:	4b45      	ldr	r3, [pc, #276]	@ (80034dc <UART_SetConfig+0x2cc>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80033d0:	d016      	beq.n	8003400 <UART_SetConfig+0x1f0>
 80033d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80033d4:	d818      	bhi.n	8003408 <UART_SetConfig+0x1f8>
 80033d6:	2b80      	cmp	r3, #128	@ 0x80
 80033d8:	d00a      	beq.n	80033f0 <UART_SetConfig+0x1e0>
 80033da:	2b80      	cmp	r3, #128	@ 0x80
 80033dc:	d814      	bhi.n	8003408 <UART_SetConfig+0x1f8>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <UART_SetConfig+0x1d8>
 80033e2:	2b40      	cmp	r3, #64	@ 0x40
 80033e4:	d008      	beq.n	80033f8 <UART_SetConfig+0x1e8>
 80033e6:	e00f      	b.n	8003408 <UART_SetConfig+0x1f8>
 80033e8:	2300      	movs	r3, #0
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ee:	e082      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80033f0:	2302      	movs	r3, #2
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f6:	e07e      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80033f8:	2304      	movs	r3, #4
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033fe:	e07a      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003400:	2308      	movs	r3, #8
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003406:	e076      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003408:	2310      	movs	r3, #16
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340e:	e072      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a35      	ldr	r2, [pc, #212]	@ (80034ec <UART_SetConfig+0x2dc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d12a      	bne.n	8003470 <UART_SetConfig+0x260>
 800341a:	4b30      	ldr	r3, [pc, #192]	@ (80034dc <UART_SetConfig+0x2cc>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003424:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003428:	d01a      	beq.n	8003460 <UART_SetConfig+0x250>
 800342a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800342e:	d81b      	bhi.n	8003468 <UART_SetConfig+0x258>
 8003430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003434:	d00c      	beq.n	8003450 <UART_SetConfig+0x240>
 8003436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800343a:	d815      	bhi.n	8003468 <UART_SetConfig+0x258>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <UART_SetConfig+0x238>
 8003440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003444:	d008      	beq.n	8003458 <UART_SetConfig+0x248>
 8003446:	e00f      	b.n	8003468 <UART_SetConfig+0x258>
 8003448:	2300      	movs	r3, #0
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344e:	e052      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003450:	2302      	movs	r3, #2
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003456:	e04e      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003458:	2304      	movs	r3, #4
 800345a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345e:	e04a      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003460:	2308      	movs	r3, #8
 8003462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003466:	e046      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003468:	2310      	movs	r3, #16
 800346a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346e:	e042      	b.n	80034f6 <UART_SetConfig+0x2e6>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a17      	ldr	r2, [pc, #92]	@ (80034d4 <UART_SetConfig+0x2c4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d13a      	bne.n	80034f0 <UART_SetConfig+0x2e0>
 800347a:	4b18      	ldr	r3, [pc, #96]	@ (80034dc <UART_SetConfig+0x2cc>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003484:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003488:	d01a      	beq.n	80034c0 <UART_SetConfig+0x2b0>
 800348a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800348e:	d81b      	bhi.n	80034c8 <UART_SetConfig+0x2b8>
 8003490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003494:	d00c      	beq.n	80034b0 <UART_SetConfig+0x2a0>
 8003496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800349a:	d815      	bhi.n	80034c8 <UART_SetConfig+0x2b8>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <UART_SetConfig+0x298>
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a4:	d008      	beq.n	80034b8 <UART_SetConfig+0x2a8>
 80034a6:	e00f      	b.n	80034c8 <UART_SetConfig+0x2b8>
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e022      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80034b0:	2302      	movs	r3, #2
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b6:	e01e      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80034b8:	2304      	movs	r3, #4
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034be:	e01a      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80034c0:	2308      	movs	r3, #8
 80034c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c6:	e016      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80034c8:	2310      	movs	r3, #16
 80034ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ce:	e012      	b.n	80034f6 <UART_SetConfig+0x2e6>
 80034d0:	efff69f3 	.word	0xefff69f3
 80034d4:	40008000 	.word	0x40008000
 80034d8:	40013800 	.word	0x40013800
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40004400 	.word	0x40004400
 80034e4:	40004800 	.word	0x40004800
 80034e8:	40004c00 	.word	0x40004c00
 80034ec:	40005000 	.word	0x40005000
 80034f0:	2310      	movs	r3, #16
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a9f      	ldr	r2, [pc, #636]	@ (8003778 <UART_SetConfig+0x568>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d17a      	bne.n	80035f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003500:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003504:	2b08      	cmp	r3, #8
 8003506:	d824      	bhi.n	8003552 <UART_SetConfig+0x342>
 8003508:	a201      	add	r2, pc, #4	@ (adr r2, 8003510 <UART_SetConfig+0x300>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003535 	.word	0x08003535
 8003514:	08003553 	.word	0x08003553
 8003518:	0800353d 	.word	0x0800353d
 800351c:	08003553 	.word	0x08003553
 8003520:	08003543 	.word	0x08003543
 8003524:	08003553 	.word	0x08003553
 8003528:	08003553 	.word	0x08003553
 800352c:	08003553 	.word	0x08003553
 8003530:	0800354b 	.word	0x0800354b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003534:	f7fe ffd8 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8003538:	61f8      	str	r0, [r7, #28]
        break;
 800353a:	e010      	b.n	800355e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800353c:	4b8f      	ldr	r3, [pc, #572]	@ (800377c <UART_SetConfig+0x56c>)
 800353e:	61fb      	str	r3, [r7, #28]
        break;
 8003540:	e00d      	b.n	800355e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003542:	f7fe ff3b 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8003546:	61f8      	str	r0, [r7, #28]
        break;
 8003548:	e009      	b.n	800355e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800354e:	61fb      	str	r3, [r7, #28]
        break;
 8003550:	e005      	b.n	800355e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800355c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80fb 	beq.w	800375c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	429a      	cmp	r2, r3
 8003574:	d305      	bcc.n	8003582 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	429a      	cmp	r2, r3
 8003580:	d903      	bls.n	800358a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003588:	e0e8      	b.n	800375c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2200      	movs	r2, #0
 800358e:	461c      	mov	r4, r3
 8003590:	4615      	mov	r5, r2
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	022b      	lsls	r3, r5, #8
 800359c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80035a0:	0222      	lsls	r2, r4, #8
 80035a2:	68f9      	ldr	r1, [r7, #12]
 80035a4:	6849      	ldr	r1, [r1, #4]
 80035a6:	0849      	lsrs	r1, r1, #1
 80035a8:	2000      	movs	r0, #0
 80035aa:	4688      	mov	r8, r1
 80035ac:	4681      	mov	r9, r0
 80035ae:	eb12 0a08 	adds.w	sl, r2, r8
 80035b2:	eb43 0b09 	adc.w	fp, r3, r9
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035c4:	4650      	mov	r0, sl
 80035c6:	4659      	mov	r1, fp
 80035c8:	f7fc fdfe 	bl	80001c8 <__aeabi_uldivmod>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4613      	mov	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035da:	d308      	bcc.n	80035ee <UART_SetConfig+0x3de>
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e2:	d204      	bcs.n	80035ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	e0b6      	b.n	800375c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035f4:	e0b2      	b.n	800375c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035fe:	d15e      	bne.n	80036be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003600:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003604:	2b08      	cmp	r3, #8
 8003606:	d828      	bhi.n	800365a <UART_SetConfig+0x44a>
 8003608:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <UART_SetConfig+0x400>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003635 	.word	0x08003635
 8003614:	0800363d 	.word	0x0800363d
 8003618:	08003645 	.word	0x08003645
 800361c:	0800365b 	.word	0x0800365b
 8003620:	0800364b 	.word	0x0800364b
 8003624:	0800365b 	.word	0x0800365b
 8003628:	0800365b 	.word	0x0800365b
 800362c:	0800365b 	.word	0x0800365b
 8003630:	08003653 	.word	0x08003653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003634:	f7fe ff58 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8003638:	61f8      	str	r0, [r7, #28]
        break;
 800363a:	e014      	b.n	8003666 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800363c:	f7fe ff6a 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8003640:	61f8      	str	r0, [r7, #28]
        break;
 8003642:	e010      	b.n	8003666 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003644:	4b4d      	ldr	r3, [pc, #308]	@ (800377c <UART_SetConfig+0x56c>)
 8003646:	61fb      	str	r3, [r7, #28]
        break;
 8003648:	e00d      	b.n	8003666 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364a:	f7fe feb7 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800364e:	61f8      	str	r0, [r7, #28]
        break;
 8003650:	e009      	b.n	8003666 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003656:	61fb      	str	r3, [r7, #28]
        break;
 8003658:	e005      	b.n	8003666 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003664:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d077      	beq.n	800375c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	005a      	lsls	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	441a      	add	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d916      	bls.n	80036b6 <UART_SetConfig+0x4a6>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368e:	d212      	bcs.n	80036b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	b29b      	uxth	r3, r3
 8003694:	f023 030f 	bic.w	r3, r3, #15
 8003698:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	8afb      	ldrh	r3, [r7, #22]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	8afa      	ldrh	r2, [r7, #22]
 80036b2:	60da      	str	r2, [r3, #12]
 80036b4:	e052      	b.n	800375c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036bc:	e04e      	b.n	800375c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d827      	bhi.n	8003716 <UART_SetConfig+0x506>
 80036c6:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <UART_SetConfig+0x4bc>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	080036f1 	.word	0x080036f1
 80036d0:	080036f9 	.word	0x080036f9
 80036d4:	08003701 	.word	0x08003701
 80036d8:	08003717 	.word	0x08003717
 80036dc:	08003707 	.word	0x08003707
 80036e0:	08003717 	.word	0x08003717
 80036e4:	08003717 	.word	0x08003717
 80036e8:	08003717 	.word	0x08003717
 80036ec:	0800370f 	.word	0x0800370f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f0:	f7fe fefa 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 80036f4:	61f8      	str	r0, [r7, #28]
        break;
 80036f6:	e014      	b.n	8003722 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f8:	f7fe ff0c 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 80036fc:	61f8      	str	r0, [r7, #28]
        break;
 80036fe:	e010      	b.n	8003722 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003700:	4b1e      	ldr	r3, [pc, #120]	@ (800377c <UART_SetConfig+0x56c>)
 8003702:	61fb      	str	r3, [r7, #28]
        break;
 8003704:	e00d      	b.n	8003722 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003706:	f7fe fe59 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800370a:	61f8      	str	r0, [r7, #28]
        break;
 800370c:	e009      	b.n	8003722 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003712:	61fb      	str	r3, [r7, #28]
        break;
 8003714:	e005      	b.n	8003722 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003720:	bf00      	nop
    }

    if (pclk != 0U)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d019      	beq.n	800375c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	085a      	lsrs	r2, r3, #1
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	441a      	add	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	fbb2 f3f3 	udiv	r3, r2, r3
 800373a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b0f      	cmp	r3, #15
 8003740:	d909      	bls.n	8003756 <UART_SetConfig+0x546>
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003748:	d205      	bcs.n	8003756 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60da      	str	r2, [r3, #12]
 8003754:	e002      	b.n	800375c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003768:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800376c:	4618      	mov	r0, r3
 800376e:	3728      	adds	r7, #40	@ 0x28
 8003770:	46bd      	mov	sp, r7
 8003772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003776:	bf00      	nop
 8003778:	40008000 	.word	0x40008000
 800377c:	00f42400 	.word	0x00f42400

08003780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01a      	beq.n	8003896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800387e:	d10a      	bne.n	8003896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b098      	sub	sp, #96	@ 0x60
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d4:	f7fd fbb8 	bl	8001048 <HAL_GetTick>
 80038d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d12e      	bne.n	8003946 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f0:	2200      	movs	r2, #0
 80038f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f88c 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d021      	beq.n	8003946 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003916:	653b      	str	r3, [r7, #80]	@ 0x50
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003920:	647b      	str	r3, [r7, #68]	@ 0x44
 8003922:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800392e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e6      	bne.n	8003902 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e062      	b.n	8003a0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d149      	bne.n	80039e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003954:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	2200      	movs	r2, #0
 800395e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f856 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d03c      	beq.n	80039e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	623b      	str	r3, [r7, #32]
   return(result);
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398c:	633b      	str	r3, [r7, #48]	@ 0x30
 800398e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e6      	bne.n	800396e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039c0:	61fa      	str	r2, [r7, #28]
 80039c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	69b9      	ldr	r1, [r7, #24]
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	617b      	str	r3, [r7, #20]
   return(result);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e5      	bne.n	80039a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e011      	b.n	8003a0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3758      	adds	r7, #88	@ 0x58
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a24:	e04f      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d04b      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fd fb0b 	bl	8001048 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e04e      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d037      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b80      	cmp	r3, #128	@ 0x80
 8003a5a:	d034      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b40      	cmp	r3, #64	@ 0x40
 8003a60:	d031      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d110      	bne.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2208      	movs	r2, #8
 8003a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f838 	bl	8003aee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2208      	movs	r2, #8
 8003a82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e029      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aa0:	d111      	bne.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003aaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f81e 	bl	8003aee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e00f      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d0a0      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b095      	sub	sp, #84	@ 0x54
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b14:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e6      	bne.n	8003af6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3308      	adds	r3, #8
 8003b46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d118      	bne.n	8003b96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f023 0310 	bic.w	r3, r3, #16
 8003b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6979      	ldr	r1, [r7, #20]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e6      	bne.n	8003b64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003baa:	bf00      	nop
 8003bac:	3754      	adds	r7, #84	@ 0x54
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	f107 001c 	add.w	r0, r7, #28
 8003bc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f8e6 	bl	8003da6 <USB_CoreReset>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003bde:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003bf2:	e005      	b.n	8003c00 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c0c:	b004      	add	sp, #16
 8003c0e:	4770      	bx	lr

08003c10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 0201 	bic.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d115      	bne.n	8003c80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c60:	200a      	movs	r0, #10
 8003c62:	f7fd f9fd 	bl	8001060 <HAL_Delay>
      ms += 10U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	330a      	adds	r3, #10
 8003c6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f88c 	bl	8003d8a <USB_GetMode>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d01e      	beq.n	8003cb6 <USB_SetCurrentMode+0x84>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c7c:	d9f0      	bls.n	8003c60 <USB_SetCurrentMode+0x2e>
 8003c7e:	e01a      	b.n	8003cb6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d115      	bne.n	8003cb2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c92:	200a      	movs	r0, #10
 8003c94:	f7fd f9e4 	bl	8001060 <HAL_Delay>
      ms += 10U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	330a      	adds	r3, #10
 8003c9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f873 	bl	8003d8a <USB_GetMode>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <USB_SetCurrentMode+0x84>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cae:	d9f0      	bls.n	8003c92 <USB_SetCurrentMode+0x60>
 8003cb0:	e001      	b.n	8003cb6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e005      	b.n	8003cc2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2bc8      	cmp	r3, #200	@ 0xc8
 8003cba:	d101      	bne.n	8003cc0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ce4:	d901      	bls.n	8003cea <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e01b      	b.n	8003d22 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	daf2      	bge.n	8003cd8 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3301      	adds	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d0e:	d901      	bls.n	8003d14 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e006      	b.n	8003d22 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d0f0      	beq.n	8003d02 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d46:	d901      	bls.n	8003d4c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e018      	b.n	8003d7e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	daf2      	bge.n	8003d3a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d6a:	d901      	bls.n	8003d70 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e006      	b.n	8003d7e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d0f0      	beq.n	8003d5e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0301 	and.w	r3, r3, #1
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dbe:	d901      	bls.n	8003dc4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e01b      	b.n	8003dfc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	daf2      	bge.n	8003db2 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003de8:	d901      	bls.n	8003dee <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e006      	b.n	8003dfc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d0f0      	beq.n	8003ddc <USB_CoreReset+0x36>

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e08:	b084      	sub	sp, #16
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e5a:	2110      	movs	r1, #16
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff34 	bl	8003cca <USB_FlushTxFifo>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff5e 	bl	8003d2e <USB_FlushRxFifo>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e015      	b.n	8003eae <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f04f 33ff 	mov.w	r3, #4294967295
 8003e94:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d3e3      	bcc.n	8003e82 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2280      	movs	r2, #128	@ 0x80
 8003ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f04 <USB_HostInit+0xfc>)
 8003ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8003f08 <USB_HostInit+0x100>)
 8003ed8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	4b07      	ldr	r3, [pc, #28]	@ (8003f0c <USB_HostInit+0x104>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f00:	b004      	add	sp, #16
 8003f02:	4770      	bx	lr
 8003f04:	00600080 	.word	0x00600080
 8003f08:	004000e0 	.word	0x004000e0
 8003f0c:	a3200008 	.word	0xa3200008

08003f10 <memset>:
 8003f10:	4402      	add	r2, r0
 8003f12:	4603      	mov	r3, r0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d100      	bne.n	8003f1a <memset+0xa>
 8003f18:	4770      	bx	lr
 8003f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1e:	e7f9      	b.n	8003f14 <memset+0x4>

08003f20 <__libc_init_array>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	4d0d      	ldr	r5, [pc, #52]	@ (8003f58 <__libc_init_array+0x38>)
 8003f24:	4c0d      	ldr	r4, [pc, #52]	@ (8003f5c <__libc_init_array+0x3c>)
 8003f26:	1b64      	subs	r4, r4, r5
 8003f28:	10a4      	asrs	r4, r4, #2
 8003f2a:	2600      	movs	r6, #0
 8003f2c:	42a6      	cmp	r6, r4
 8003f2e:	d109      	bne.n	8003f44 <__libc_init_array+0x24>
 8003f30:	4d0b      	ldr	r5, [pc, #44]	@ (8003f60 <__libc_init_array+0x40>)
 8003f32:	4c0c      	ldr	r4, [pc, #48]	@ (8003f64 <__libc_init_array+0x44>)
 8003f34:	f000 f818 	bl	8003f68 <_init>
 8003f38:	1b64      	subs	r4, r4, r5
 8003f3a:	10a4      	asrs	r4, r4, #2
 8003f3c:	2600      	movs	r6, #0
 8003f3e:	42a6      	cmp	r6, r4
 8003f40:	d105      	bne.n	8003f4e <__libc_init_array+0x2e>
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f48:	4798      	blx	r3
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7ee      	b.n	8003f2c <__libc_init_array+0xc>
 8003f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f52:	4798      	blx	r3
 8003f54:	3601      	adds	r6, #1
 8003f56:	e7f2      	b.n	8003f3e <__libc_init_array+0x1e>
 8003f58:	08003fd0 	.word	0x08003fd0
 8003f5c:	08003fd0 	.word	0x08003fd0
 8003f60:	08003fd0 	.word	0x08003fd0
 8003f64:	08003fd4 	.word	0x08003fd4

08003f68 <_init>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	bf00      	nop
 8003f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	469e      	mov	lr, r3
 8003f72:	4770      	bx	lr

08003f74 <_fini>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	bf00      	nop
 8003f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	469e      	mov	lr, r3
 8003f7e:	4770      	bx	lr
