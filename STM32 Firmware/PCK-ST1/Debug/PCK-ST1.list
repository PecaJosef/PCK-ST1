
PCK-ST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010178  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08010308  08010308  00011308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010870  08010870  000123c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010870  08010870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010878  08010878  000123c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010878  08010878  00011878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801087c  0801087c  0001187c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c4  20000000  08010880  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002464  200003c8  08010c44  000123c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000282c  08010c44  0001282c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000123c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002141e  00000000  00000000  000123f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004acc  00000000  00000000  00033812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  000382e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001526  00000000  00000000  00039e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8f2  00000000  00000000  0003b36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002472c  00000000  00000000  00067c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc5a9  00000000  00000000  0008c38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188935  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008714  00000000  00000000  00188978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0019108c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003c8 	.word	0x200003c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080102f0 	.word	0x080102f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	080102f0 	.word	0x080102f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <HAL_GPIO_EXTI_Callback>:
 *      Author: pecka
 */

#include "exti.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == EL_STOP_Pin) {
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d105      	bne.n	800105c <HAL_GPIO_EXTI_Callback+0x1c>

    	//Disable interrupts
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8001050:	2008      	movs	r0, #8
 8001052:	f001 fe6a 	bl	8002d2a <HAL_NVIC_DisableIRQ>
        Stepper_Stop(&EL_Axis_motor);
 8001056:	4803      	ldr	r0, [pc, #12]	@ (8001064 <HAL_GPIO_EXTI_Callback+0x24>)
 8001058:	f000 ff72 	bl	8001f40 <Stepper_Stop>
    }
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000

08001068 <nmea_to_decimal>:
static uint8_t dma_rx_buf[GPS_DMA_RX_BUF_SIZE];
static GPS_Data_t gps_data;

// Utility: convert NMEA lat/lon to decimal degrees
static double nmea_to_decimal(char *nmea_coord)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    if (!nmea_coord || strlen(nmea_coord) < 6) return 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <nmea_to_decimal+0x1a>
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff f90a 	bl	8000290 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	2b05      	cmp	r3, #5
 8001080:	d804      	bhi.n	800108c <nmea_to_decimal+0x24>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e038      	b.n	80010fe <nmea_to_decimal+0x96>
    double raw = atof(nmea_coord);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f00b f8ef 	bl	800c270 <atof>
 8001092:	ed87 0b06 	vstr	d0, [r7, #24]
    int deg = (int)(raw / 100);
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <nmea_to_decimal+0xa8>)
 800109c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010a0:	f7ff fbe4 	bl	800086c <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd64 	bl	8000b78 <__aeabi_d2iz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	617b      	str	r3, [r7, #20]
    double min = raw - deg * 100;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2264      	movs	r2, #100	@ 0x64
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa41 	bl	8000544 <__aeabi_i2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ca:	f7ff f8ed 	bl	80002a8 <__aeabi_dsub>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return deg + (min / 60.0);
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff fa34 	bl	8000544 <__aeabi_i2d>
 80010dc:	4604      	mov	r4, r0
 80010de:	460d      	mov	r5, r1
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <nmea_to_decimal+0xac>)
 80010e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010ea:	f7ff fbbf 	bl	800086c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f8d9 	bl	80002ac <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
}
 80010fe:	ec43 2b17 	vmov	d7, r2, r3
 8001102:	eeb0 0a47 	vmov.f32	s0, s14
 8001106:	eef0 0a67 	vmov.f32	s1, s15
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bdb0      	pop	{r4, r5, r7, pc}
 8001110:	40590000 	.word	0x40590000
 8001114:	404e0000 	.word	0x404e0000

08001118 <GPS_ParseLine>:

// Parse a GGA sentence into gps_data
static void GPS_ParseLine(char *line)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    if (line[0] != '$') return;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b24      	cmp	r3, #36	@ 0x24
 8001126:	f040 80e5 	bne.w	80012f4 <GPS_ParseLine+0x1dc>

    char *type = strtok(line, ",");
 800112a:	4976      	ldr	r1, [pc, #472]	@ (8001304 <GPS_ParseLine+0x1ec>)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f00c fda7 	bl	800dc80 <strtok>
 8001132:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (!type) return;
 8001134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80de 	beq.w	80012f8 <GPS_ParseLine+0x1e0>

    if (strcasecmp(type, "$GNGGA") != 0 && strcasecmp(type, "$GPGGA") != 0) return;
 800113c:	4972      	ldr	r1, [pc, #456]	@ (8001308 <GPS_ParseLine+0x1f0>)
 800113e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001140:	f00c fd5c 	bl	800dbfc <strcasecmp>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <GPS_ParseLine+0x42>
 800114a:	4970      	ldr	r1, [pc, #448]	@ (800130c <GPS_ParseLine+0x1f4>)
 800114c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800114e:	f00c fd55 	bl	800dbfc <strcasecmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	f040 80d1 	bne.w	80012fc <GPS_ParseLine+0x1e4>

    char *time     = strtok(NULL, ",");
 800115a:	496a      	ldr	r1, [pc, #424]	@ (8001304 <GPS_ParseLine+0x1ec>)
 800115c:	2000      	movs	r0, #0
 800115e:	f00c fd8f 	bl	800dc80 <strtok>
 8001162:	62b8      	str	r0, [r7, #40]	@ 0x28
    char *lat      = strtok(NULL, ",");
 8001164:	4967      	ldr	r1, [pc, #412]	@ (8001304 <GPS_ParseLine+0x1ec>)
 8001166:	2000      	movs	r0, #0
 8001168:	f00c fd8a 	bl	800dc80 <strtok>
 800116c:	6278      	str	r0, [r7, #36]	@ 0x24
    char *lat_dir  = strtok(NULL, ",");
 800116e:	4965      	ldr	r1, [pc, #404]	@ (8001304 <GPS_ParseLine+0x1ec>)
 8001170:	2000      	movs	r0, #0
 8001172:	f00c fd85 	bl	800dc80 <strtok>
 8001176:	6238      	str	r0, [r7, #32]
    char *lon      = strtok(NULL, ",");
 8001178:	4962      	ldr	r1, [pc, #392]	@ (8001304 <GPS_ParseLine+0x1ec>)
 800117a:	2000      	movs	r0, #0
 800117c:	f00c fd80 	bl	800dc80 <strtok>
 8001180:	61f8      	str	r0, [r7, #28]
    char *lon_dir  = strtok(NULL, ",");
 8001182:	4960      	ldr	r1, [pc, #384]	@ (8001304 <GPS_ParseLine+0x1ec>)
 8001184:	2000      	movs	r0, #0
 8001186:	f00c fd7b 	bl	800dc80 <strtok>
 800118a:	61b8      	str	r0, [r7, #24]
    char *fix      = strtok(NULL, ",");
 800118c:	495d      	ldr	r1, [pc, #372]	@ (8001304 <GPS_ParseLine+0x1ec>)
 800118e:	2000      	movs	r0, #0
 8001190:	f00c fd76 	bl	800dc80 <strtok>
 8001194:	6178      	str	r0, [r7, #20]
    char *sats     = strtok(NULL, ",");
 8001196:	495b      	ldr	r1, [pc, #364]	@ (8001304 <GPS_ParseLine+0x1ec>)
 8001198:	2000      	movs	r0, #0
 800119a:	f00c fd71 	bl	800dc80 <strtok>
 800119e:	6138      	str	r0, [r7, #16]
    char *hdop     = strtok(NULL, ",");
 80011a0:	4958      	ldr	r1, [pc, #352]	@ (8001304 <GPS_ParseLine+0x1ec>)
 80011a2:	2000      	movs	r0, #0
 80011a4:	f00c fd6c 	bl	800dc80 <strtok>
 80011a8:	60f8      	str	r0, [r7, #12]
    char *alt      = strtok(NULL, ",");
 80011aa:	4956      	ldr	r1, [pc, #344]	@ (8001304 <GPS_ParseLine+0x1ec>)
 80011ac:	2000      	movs	r0, #0
 80011ae:	f00c fd67 	bl	800dc80 <strtok>
 80011b2:	60b8      	str	r0, [r7, #8]


   //Always get number of satellites and HDOP
    gps_data.satellites = sats ? (uint8_t)atoi(sats) : 0;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <GPS_ParseLine+0xae>
 80011ba:	6938      	ldr	r0, [r7, #16]
 80011bc:	f00b f85b 	bl	800c276 <atoi>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	e000      	b.n	80011c8 <GPS_ParseLine+0xb0>
 80011c6:	2300      	movs	r3, #0
 80011c8:	4a51      	ldr	r2, [pc, #324]	@ (8001310 <GPS_ParseLine+0x1f8>)
 80011ca:	7513      	strb	r3, [r2, #20]
	gps_data.hdop       = hdop ? atof(hdop) : 0;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00a      	beq.n	80011e8 <GPS_ParseLine+0xd0>
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f00b f84c 	bl	800c270 <atof>
 80011d8:	ec53 2b10 	vmov	r2, r3, d0
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fd12 	bl	8000c08 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	e001      	b.n	80011ec <GPS_ParseLine+0xd4>
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	4a48      	ldr	r2, [pc, #288]	@ (8001310 <GPS_ParseLine+0x1f8>)
 80011ee:	6193      	str	r3, [r2, #24]

	//Get UTC time if available
	if (time)
 80011f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <GPS_ParseLine+0xf2>
	{
		strncpy(gps_data.time, time, sizeof(gps_data.time) - 1);
 80011f6:	220f      	movs	r2, #15
 80011f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011fa:	4846      	ldr	r0, [pc, #280]	@ (8001314 <GPS_ParseLine+0x1fc>)
 80011fc:	f00c fd2c 	bl	800dc58 <strncpy>
		gps_data.time[sizeof(gps_data.time)-1] = '\0';
 8001200:	4b43      	ldr	r3, [pc, #268]	@ (8001310 <GPS_ParseLine+0x1f8>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001208:	e002      	b.n	8001210 <GPS_ParseLine+0xf8>
	}
	else
	{
		gps_data.time[0] = '\0';
 800120a:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <GPS_ParseLine+0x1f8>)
 800120c:	2200      	movs	r2, #0
 800120e:	775a      	strb	r2, [r3, #29]
	}

	if (!fix || strcmp(fix, "0") == 0) {
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <GPS_ParseLine+0x10c>
 8001216:	4940      	ldr	r1, [pc, #256]	@ (8001318 <GPS_ParseLine+0x200>)
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f7fe ffd9 	bl	80001d0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d115      	bne.n	8001250 <GPS_ParseLine+0x138>
		gps_data.fix = 0;
 8001224:	4b3a      	ldr	r3, [pc, #232]	@ (8001310 <GPS_ParseLine+0x1f8>)
 8001226:	2200      	movs	r2, #0
 8001228:	771a      	strb	r2, [r3, #28]
		gps_data.latitude  = 0;
 800122a:	4939      	ldr	r1, [pc, #228]	@ (8001310 <GPS_ParseLine+0x1f8>)
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c1 2300 	strd	r2, r3, [r1]
		gps_data.longitude = 0;
 8001238:	4935      	ldr	r1, [pc, #212]	@ (8001310 <GPS_ParseLine+0x1f8>)
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	e9c1 2302 	strd	r2, r3, [r1, #8]
		gps_data.altitude  = 0;
 8001246:	4b32      	ldr	r3, [pc, #200]	@ (8001310 <GPS_ParseLine+0x1f8>)
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
		return;
 800124e:	e056      	b.n	80012fe <GPS_ParseLine+0x1e6>
	}

	gps_data.fix = atoi(fix);
 8001250:	6978      	ldr	r0, [r7, #20]
 8001252:	f00b f810 	bl	800c276 <atoi>
 8001256:	4603      	mov	r3, r0
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b2d      	ldr	r3, [pc, #180]	@ (8001310 <GPS_ParseLine+0x1f8>)
 800125c:	771a      	strb	r2, [r3, #28]
	gps_data.latitude  = nmea_to_decimal(lat)  * ((lat_dir && lat_dir[0]=='S') ? -1 : 1);
 800125e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001260:	f7ff ff02 	bl	8001068 <nmea_to_decimal>
 8001264:	ec55 4b10 	vmov	r4, r5, d0
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <GPS_ParseLine+0x166>
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b53      	cmp	r3, #83	@ 0x53
 8001274:	d103      	bne.n	800127e <GPS_ParseLine+0x166>
 8001276:	f04f 0000 	mov.w	r0, #0
 800127a:	4928      	ldr	r1, [pc, #160]	@ (800131c <GPS_ParseLine+0x204>)
 800127c:	e002      	b.n	8001284 <GPS_ParseLine+0x16c>
 800127e:	f04f 0000 	mov.w	r0, #0
 8001282:	4927      	ldr	r1, [pc, #156]	@ (8001320 <GPS_ParseLine+0x208>)
 8001284:	4622      	mov	r2, r4
 8001286:	462b      	mov	r3, r5
 8001288:	f7ff f9c6 	bl	8000618 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	491f      	ldr	r1, [pc, #124]	@ (8001310 <GPS_ParseLine+0x1f8>)
 8001292:	e9c1 2300 	strd	r2, r3, [r1]
	gps_data.longitude = nmea_to_decimal(lon)  * ((lon_dir && lon_dir[0]=='W') ? -1 : 1);
 8001296:	69f8      	ldr	r0, [r7, #28]
 8001298:	f7ff fee6 	bl	8001068 <nmea_to_decimal>
 800129c:	ec55 4b10 	vmov	r4, r5, d0
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <GPS_ParseLine+0x19e>
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b57      	cmp	r3, #87	@ 0x57
 80012ac:	d103      	bne.n	80012b6 <GPS_ParseLine+0x19e>
 80012ae:	f04f 0000 	mov.w	r0, #0
 80012b2:	491a      	ldr	r1, [pc, #104]	@ (800131c <GPS_ParseLine+0x204>)
 80012b4:	e002      	b.n	80012bc <GPS_ParseLine+0x1a4>
 80012b6:	f04f 0000 	mov.w	r0, #0
 80012ba:	4919      	ldr	r1, [pc, #100]	@ (8001320 <GPS_ParseLine+0x208>)
 80012bc:	4622      	mov	r2, r4
 80012be:	462b      	mov	r3, r5
 80012c0:	f7ff f9aa 	bl	8000618 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4911      	ldr	r1, [pc, #68]	@ (8001310 <GPS_ParseLine+0x1f8>)
 80012ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gps_data.altitude  = alt ? atof(alt) : 0;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00a      	beq.n	80012ea <GPS_ParseLine+0x1d2>
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f00a ffcb 	bl	800c270 <atof>
 80012da:	ec53 2b10 	vmov	r2, r3, d0
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fc91 	bl	8000c08 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	e001      	b.n	80012ee <GPS_ParseLine+0x1d6>
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <GPS_ParseLine+0x1f8>)
 80012f0:	6113      	str	r3, [r2, #16]
 80012f2:	e004      	b.n	80012fe <GPS_ParseLine+0x1e6>
    if (line[0] != '$') return;
 80012f4:	bf00      	nop
 80012f6:	e002      	b.n	80012fe <GPS_ParseLine+0x1e6>
    if (!type) return;
 80012f8:	bf00      	nop
 80012fa:	e000      	b.n	80012fe <GPS_ParseLine+0x1e6>
    if (strcasecmp(type, "$GNGGA") != 0 && strcasecmp(type, "$GPGGA") != 0) return;
 80012fc:	bf00      	nop
}
 80012fe:	3730      	adds	r7, #48	@ 0x30
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	08010308 	.word	0x08010308
 8001308:	0801030c 	.word	0x0801030c
 800130c:	08010314 	.word	0x08010314
 8001310:	200005e8 	.word	0x200005e8
 8001314:	20000605 	.word	0x20000605
 8001318:	0801031c 	.word	0x0801031c
 800131c:	bff00000 	.word	0xbff00000
 8001320:	3ff00000 	.word	0x3ff00000

08001324 <Get_GPS_Data>:
    HAL_UART_Receive_DMA(GPS_UART, dma_rx_buf, GPS_DMA_RX_BUF_SIZE);
}

// Read latest complete NMEA sentence from DMA buffer safely
GPS_Data_t Get_GPS_Data(void)
{
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b0a8      	sub	sp, #160	@ 0xa0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    static uint16_t last_read_ptr = 0;
    uint16_t dma_write_ptr = GPS_DMA_RX_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 800132c:	4b5c      	ldr	r3, [pc, #368]	@ (80014a0 <Get_GPS_Data+0x17c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001338:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

    int start_idx = -1, end_idx = -1;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    uint16_t i = last_read_ptr;
 800134c:	4b55      	ldr	r3, [pc, #340]	@ (80014a4 <Get_GPS_Data+0x180>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    uint16_t count = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    // Safety: limit max iterations to buffer size
    while (i != dma_write_ptr && count < GPS_DMA_RX_BUF_SIZE)
 800135a:	e028      	b.n	80013ae <Get_GPS_Data+0x8a>
    {
        if (dma_rx_buf[i] == '$') start_idx = i;
 800135c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001360:	4a51      	ldr	r2, [pc, #324]	@ (80014a8 <Get_GPS_Data+0x184>)
 8001362:	5cd3      	ldrb	r3, [r2, r3]
 8001364:	2b24      	cmp	r3, #36	@ 0x24
 8001366:	d103      	bne.n	8001370 <Get_GPS_Data+0x4c>
 8001368:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800136c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        if (dma_rx_buf[i] == '\n' && start_idx >= 0)
 8001370:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001374:	4a4c      	ldr	r2, [pc, #304]	@ (80014a8 <Get_GPS_Data+0x184>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	2b0a      	cmp	r3, #10
 800137a:	d107      	bne.n	800138c <Get_GPS_Data+0x68>
 800137c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001380:	2b00      	cmp	r3, #0
 8001382:	db03      	blt.n	800138c <Get_GPS_Data+0x68>
        {
            end_idx = i;
 8001384:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        }
        i = (i + 1) % GPS_DMA_RX_BUF_SIZE;
 800138c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001390:	3301      	adds	r3, #1
 8001392:	425a      	negs	r2, r3
 8001394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800139c:	bf58      	it	pl
 800139e:	4253      	negpl	r3, r2
 80013a0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
        count++;
 80013a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80013a8:	3301      	adds	r3, #1
 80013aa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    while (i != dma_write_ptr && count < GPS_DMA_RX_BUF_SIZE)
 80013ae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80013b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d004      	beq.n	80013c4 <Get_GPS_Data+0xa0>
 80013ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80013be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013c2:	d3cb      	bcc.n	800135c <Get_GPS_Data+0x38>
    }

    if (start_idx >= 0 && end_idx >= 0)
 80013c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db59      	blt.n	8001480 <Get_GPS_Data+0x15c>
 80013cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db55      	blt.n	8001480 <Get_GPS_Data+0x15c>
    {
        char sentence[128];
        int len;

        if (end_idx >= start_idx)
 80013d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80013d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013dc:	429a      	cmp	r2, r3
 80013de:	db08      	blt.n	80013f2 <Get_GPS_Data+0xce>
            len = end_idx - start_idx + 1;
 80013e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80013e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013f0:	e009      	b.n	8001406 <Get_GPS_Data+0xe2>
        else
            len = GPS_DMA_RX_BUF_SIZE - start_idx + end_idx + 1;
 80013f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013f6:	f5c3 7200 	rsb	r2, r3, #512	@ 0x200
 80013fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013fe:	4413      	add	r3, r2
 8001400:	3301      	adds	r3, #1
 8001402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        // Copy safely from circular buffer
        for (int j = 0; j < len; j++)
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800140c:	e019      	b.n	8001442 <Get_GPS_Data+0x11e>
            sentence[j] = dma_rx_buf[(start_idx + j) % GPS_DMA_RX_BUF_SIZE];
 800140e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001416:	4413      	add	r3, r2
 8001418:	425a      	negs	r2, r3
 800141a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800141e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001422:	bf58      	it	pl
 8001424:	4253      	negpl	r3, r2
 8001426:	4a20      	ldr	r2, [pc, #128]	@ (80014a8 <Get_GPS_Data+0x184>)
 8001428:	5cd1      	ldrb	r1, [r2, r3]
 800142a:	f107 0208 	add.w	r2, r7, #8
 800142e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001432:	4413      	add	r3, r2
 8001434:	460a      	mov	r2, r1
 8001436:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < len; j++)
 8001438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800143c:	3301      	adds	r3, #1
 800143e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001442:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001446:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800144a:	429a      	cmp	r2, r3
 800144c:	dbdf      	blt.n	800140e <Get_GPS_Data+0xea>
        sentence[len] = '\0';
 800144e:	f107 0208 	add.w	r2, r7, #8
 8001452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001456:	4413      	add	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]

        last_read_ptr = (end_idx + 1) % GPS_DMA_RX_BUF_SIZE;
 800145c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001460:	3301      	adds	r3, #1
 8001462:	425a      	negs	r2, r3
 8001464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800146c:	bf58      	it	pl
 800146e:	4253      	negpl	r3, r2
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <Get_GPS_Data+0x180>)
 8001474:	801a      	strh	r2, [r3, #0]

        GPS_ParseLine(sentence);
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fe4c 	bl	8001118 <GPS_ParseLine>
    }

    return gps_data;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <Get_GPS_Data+0x188>)
 8001484:	461c      	mov	r4, r3
 8001486:	4615      	mov	r5, r2
 8001488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001490:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	37a0      	adds	r7, #160	@ 0xa0
 800149c:	46bd      	mov	sp, r7
 800149e:	bdb0      	pop	{r4, r5, r7, pc}
 80014a0:	20000a1c 	.word	0x20000a1c
 80014a4:	20000618 	.word	0x20000618
 80014a8:	200003e4 	.word	0x200003e4
 80014ac:	200005e8 	.word	0x200005e8

080014b0 <LED_IT_Handeler>:
#include "stm32l4xx_hal.h"
#include "main.h"


void LED_IT_Handeler()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80014b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <LED_IT_Handeler+0x14>)
 80014ba:	f001 ff7b 	bl	80033b4 <HAL_GPIO_TogglePin>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	48000800 	.word	0x48000800

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014cc:	b097      	sub	sp, #92	@ 0x5c
 80014ce:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d0:	f001 fa69 	bl	80029a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d4:	f000 f84c 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d8:	f000 fc62 	bl	8001da0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014dc:	f000 fc26 	bl	8001d2c <MX_DMA_Init>
  MX_I2C3_Init();
 80014e0:	f000 f896 	bl	8001610 <MX_I2C3_Init>
  MX_UART4_Init();
 80014e4:	f000 fb92 	bl	8001c0c <MX_UART4_Init>
  MX_UART5_Init();
 80014e8:	f000 fbc0 	bl	8001c6c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80014ec:	f000 fbee 	bl	8001ccc <MX_USART1_UART_Init>
  MX_TIM17_Init();
 80014f0:	f000 fb66 	bl	8001bc0 <MX_TIM17_Init>
  MX_USB_DEVICE_Init();
 80014f4:	f00a f850 	bl	800b598 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80014f8:	f000 f9c6 	bl	8001888 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014fc:	f000 fa12 	bl	8001924 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001500:	f000 fa60 	bl	80019c4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001504:	f000 faae 	bl	8001a64 <MX_TIM8_Init>
  MX_TIM1_Init();
 8001508:	f000 f8c2 	bl	8001690 <MX_TIM1_Init>
  MX_TIM2_Init();
 800150c:	f000 f96c 	bl	80017e8 <MX_TIM2_Init>


  //LED_Tim_Enable();
  //Stepper_IT_Enable();

  Stepper_nSleep(GPIO_PIN_SET);
 8001510:	2001      	movs	r0, #1
 8001512:	f000 fd7d 	bl	8002010 <Stepper_nSleep>
	//Stepper_Move(&RA_Axis_motor, 5, 1.0f, GPIO_PIN_SET);
	//HAL_Delay(2000);
	//Stepper_Move(&EL_Axis_motor, 5, 5.0f, 0);
	//Stepper_Move(&RA_Axis_motor, 5, 1.0f, GPIO_PIN_SET);

	  GPS_Data = Get_GPS_Data();
 8001516:	463b      	mov	r3, r7
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff03 	bl	8001324 <Get_GPS_Data>
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 800151e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
	         GPS_Data.latitude,
	         GPS_Data.longitude,
	         GPS_Data.altitude,
 8001526:	693b      	ldr	r3, [r7, #16]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f81d 	bl	8000568 <__aeabi_f2d>
 800152e:	4682      	mov	sl, r0
 8001530:	468b      	mov	fp, r1
	         GPS_Data.satellites,
 8001532:	7d3b      	ldrb	r3, [r7, #20]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001534:	461e      	mov	r6, r3
	         GPS_Data.hdop,
 8001536:	69bb      	ldr	r3, [r7, #24]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f815 	bl	8000568 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
	         GPS_Data.fix);
 8001542:	7f39      	ldrb	r1, [r7, #28]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001544:	9108      	str	r1, [sp, #32]
 8001546:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800154a:	9604      	str	r6, [sp, #16]
 800154c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001550:	e9cd 4500 	strd	r4, r5, [sp]
 8001554:	4642      	mov	r2, r8
 8001556:	464b      	mov	r3, r9
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <main+0xa4>)
 800155a:	f00c faf1 	bl	800db40 <iprintf>
	  HAL_Delay(1000);
 800155e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001562:	f001 fa95 	bl	8002a90 <HAL_Delay>
	  GPS_Data = Get_GPS_Data();
 8001566:	bf00      	nop
 8001568:	e7d5      	b.n	8001516 <main+0x4e>
 800156a:	bf00      	nop
 800156c:	08010320 	.word	0x08010320

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b096      	sub	sp, #88	@ 0x58
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2244      	movs	r2, #68	@ 0x44
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f00c fb33 	bl	800dbea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001592:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001596:	f003 fa15 	bl	80049c4 <HAL_PWREx_ControlVoltageScaling>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015a0:	f000 fcb2 	bl	8001f08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ae:	2302      	movs	r3, #2
 80015b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b2:	2303      	movs	r3, #3
 80015b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80015ba:	2308      	movs	r3, #8
 80015bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015be:	2307      	movs	r3, #7
 80015c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fa5e 	bl	8004a90 <HAL_RCC_OscConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015da:	f000 fc95 	bl	8001f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015de:	230f      	movs	r3, #15
 80015e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e2:	2303      	movs	r3, #3
 80015e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	2103      	movs	r1, #3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fe26 	bl	8005248 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001602:	f000 fc81 	bl	8001f08 <Error_Handler>
  }
}
 8001606:	bf00      	nop
 8001608:	3758      	adds	r7, #88	@ 0x58
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <MX_I2C3_Init+0x74>)
 8001616:	4a1c      	ldr	r2, [pc, #112]	@ (8001688 <MX_I2C3_Init+0x78>)
 8001618:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_I2C3_Init+0x74>)
 800161c:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <MX_I2C3_Init+0x7c>)
 800161e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <MX_I2C3_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <MX_I2C3_Init+0x74>)
 8001628:	2201      	movs	r2, #1
 800162a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <MX_I2C3_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_I2C3_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_I2C3_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_I2C3_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_I2C3_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800164a:	480e      	ldr	r0, [pc, #56]	@ (8001684 <MX_I2C3_Init+0x74>)
 800164c:	f001 fee4 	bl	8003418 <HAL_I2C_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001656:	f000 fc57 	bl	8001f08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4809      	ldr	r0, [pc, #36]	@ (8001684 <MX_I2C3_Init+0x74>)
 800165e:	f001 ff76 	bl	800354e <HAL_I2CEx_ConfigAnalogFilter>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001668:	f000 fc4e 	bl	8001f08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800166c:	2100      	movs	r1, #0
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_I2C3_Init+0x74>)
 8001670:	f001 ffb8 	bl	80035e4 <HAL_I2CEx_ConfigDigitalFilter>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800167a:	f000 fc45 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000061c 	.word	0x2000061c
 8001688:	40005c00 	.word	0x40005c00
 800168c:	10b17db5 	.word	0x10b17db5

08001690 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b09a      	sub	sp, #104	@ 0x68
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	222c      	movs	r2, #44	@ 0x2c
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00c fa8d 	bl	800dbea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016d0:	4b43      	ldr	r3, [pc, #268]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80016d2:	4a44      	ldr	r2, [pc, #272]	@ (80017e4 <MX_TIM1_Init+0x154>)
 80016d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80016d6:	4b42      	ldr	r3, [pc, #264]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80016d8:	221f      	movs	r2, #31
 80016da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b40      	ldr	r3, [pc, #256]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 80016e2:	4b3f      	ldr	r3, [pc, #252]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80016e4:	2213      	movs	r2, #19
 80016e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b3d      	ldr	r3, [pc, #244]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ee:	4b3c      	ldr	r3, [pc, #240]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b3a      	ldr	r3, [pc, #232]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016fa:	4839      	ldr	r0, [pc, #228]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80016fc:	f004 fc82 	bl	8006004 <HAL_TIM_Base_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001706:	f000 fbff 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001710:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001714:	4619      	mov	r1, r3
 8001716:	4832      	ldr	r0, [pc, #200]	@ (80017e0 <MX_TIM1_Init+0x150>)
 8001718:	f005 f80e 	bl	8006738 <HAL_TIM_ConfigClockSource>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001722:	f000 fbf1 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001726:	482e      	ldr	r0, [pc, #184]	@ (80017e0 <MX_TIM1_Init+0x150>)
 8001728:	f004 fcf2 	bl	8006110 <HAL_TIM_PWM_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001732:	f000 fbe9 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001736:	2320      	movs	r3, #32
 8001738:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001742:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001746:	4619      	mov	r1, r3
 8001748:	4825      	ldr	r0, [pc, #148]	@ (80017e0 <MX_TIM1_Init+0x150>)
 800174a:	f005 fe55 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001754:	f000 fbd8 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001758:	2360      	movs	r3, #96	@ 0x60
 800175a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 10;
 800175c:	230a      	movs	r3, #10
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001760:	2300      	movs	r3, #0
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001764:	2308      	movs	r3, #8
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001774:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001778:	2204      	movs	r2, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4818      	ldr	r0, [pc, #96]	@ (80017e0 <MX_TIM1_Init+0x150>)
 800177e:	f004 fec7 	bl	8006510 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001788:	f000 fbbe 	bl	8001f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	4807      	ldr	r0, [pc, #28]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80017c2:	f005 fea1 	bl	8007508 <HAL_TIMEx_ConfigBreakDeadTime>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80017cc:	f000 fb9c 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017d0:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <MX_TIM1_Init+0x150>)
 80017d2:	f000 fd5d 	bl	8002290 <HAL_TIM_MspPostInit>

}
 80017d6:	bf00      	nop
 80017d8:	3768      	adds	r7, #104	@ 0x68
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000670 	.word	0x20000670
 80017e4:	40012c00 	.word	0x40012c00

080017e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fe:	463b      	mov	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001808:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <MX_TIM2_Init+0x9c>)
 800180a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800180e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001810:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <MX_TIM2_Init+0x9c>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <MX_TIM2_Init+0x9c>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800181c:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <MX_TIM2_Init+0x9c>)
 800181e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001822:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <MX_TIM2_Init+0x9c>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <MX_TIM2_Init+0x9c>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001830:	4814      	ldr	r0, [pc, #80]	@ (8001884 <MX_TIM2_Init+0x9c>)
 8001832:	f004 fbe7 	bl	8006004 <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800183c:	f000 fb64 	bl	8001f08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001840:	2307      	movs	r3, #7
 8001842:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	@ (8001884 <MX_TIM2_Init+0x9c>)
 8001850:	f005 f83b 	bl	80068ca <HAL_TIM_SlaveConfigSynchro>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800185a:	f000 fb55 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001866:	463b      	mov	r3, r7
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	@ (8001884 <MX_TIM2_Init+0x9c>)
 800186c:	f005 fdc4 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001876:	f000 fb47 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3720      	adds	r7, #32
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200006bc 	.word	0x200006bc

08001888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <MX_TIM3_Init+0x94>)
 80018a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001920 <MX_TIM3_Init+0x98>)
 80018aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <MX_TIM3_Init+0x94>)
 80018ae:	223f      	movs	r2, #63	@ 0x3f
 80018b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_TIM3_Init+0x94>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80018b8:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MX_TIM3_Init+0x94>)
 80018ba:	2263      	movs	r2, #99	@ 0x63
 80018bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <MX_TIM3_Init+0x94>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_TIM3_Init+0x94>)
 80018c6:	2280      	movs	r2, #128	@ 0x80
 80018c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ca:	4814      	ldr	r0, [pc, #80]	@ (800191c <MX_TIM3_Init+0x94>)
 80018cc:	f004 fb9a 	bl	8006004 <HAL_TIM_Base_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80018d6:	f000 fb17 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	480d      	ldr	r0, [pc, #52]	@ (800191c <MX_TIM3_Init+0x94>)
 80018e8:	f004 ff26 	bl	8006738 <HAL_TIM_ConfigClockSource>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018f2:	f000 fb09 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4806      	ldr	r0, [pc, #24]	@ (800191c <MX_TIM3_Init+0x94>)
 8001904:	f005 fd78 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800190e:	f000 fafb 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000708 	.word	0x20000708
 8001920:	40000400 	.word	0x40000400

08001924 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001944:	4a1e      	ldr	r2, [pc, #120]	@ (80019c0 <MX_TIM4_Init+0x9c>)
 8001946:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_TIM4_Init+0x98>)
 800194a:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800194e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001966:	2280      	movs	r2, #128	@ 0x80
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800196a:	4814      	ldr	r0, [pc, #80]	@ (80019bc <MX_TIM4_Init+0x98>)
 800196c:	f004 fb4a 	bl	8006004 <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001976:	f000 fac7 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	480d      	ldr	r0, [pc, #52]	@ (80019bc <MX_TIM4_Init+0x98>)
 8001988:	f004 fed6 	bl	8006738 <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001992:	f000 fab9 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	@ (80019bc <MX_TIM4_Init+0x98>)
 80019a4:	f005 fd28 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80019ae:	f000 faab 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000754 	.word	0x20000754
 80019c0:	40000800 	.word	0x40000800

080019c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019da:	463b      	mov	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <MX_TIM5_Init+0x98>)
 80019e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a60 <MX_TIM5_Init+0x9c>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <MX_TIM5_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <MX_TIM5_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <MX_TIM5_Init+0x98>)
 80019f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <MX_TIM5_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <MX_TIM5_Init+0x98>)
 8001a06:	2280      	movs	r2, #128	@ 0x80
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a0a:	4814      	ldr	r0, [pc, #80]	@ (8001a5c <MX_TIM5_Init+0x98>)
 8001a0c:	f004 fafa 	bl	8006004 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001a16:	f000 fa77 	bl	8001f08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001a1e:	2330      	movs	r3, #48	@ 0x30
 8001a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <MX_TIM5_Init+0x98>)
 8001a2a:	f004 ff4e 	bl	80068ca <HAL_TIM_SlaveConfigSynchro>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001a34:	f000 fa68 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_TIM5_Init+0x98>)
 8001a46:	f005 fcd7 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001a50:	f000 fa5a 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200007a0 	.word	0x200007a0
 8001a60:	40000c00 	.word	0x40000c00

08001a64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b09a      	sub	sp, #104	@ 0x68
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	615a      	str	r2, [r3, #20]
 8001a96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	222c      	movs	r2, #44	@ 0x2c
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f00c f8a3 	bl	800dbea <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001aa4:	4b44      	ldr	r3, [pc, #272]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001aa6:	4a45      	ldr	r2, [pc, #276]	@ (8001bbc <MX_TIM8_Init+0x158>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8001aaa:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001aac:	221f      	movs	r2, #31
 8001aae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b41      	ldr	r3, [pc, #260]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001ab6:	4b40      	ldr	r3, [pc, #256]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001ab8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001abc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ad0:	4839      	ldr	r0, [pc, #228]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001ad2:	f004 fa97 	bl	8006004 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001adc:	f000 fa14 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001aea:	4619      	mov	r1, r3
 8001aec:	4832      	ldr	r0, [pc, #200]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001aee:	f004 fe23 	bl	8006738 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001af8:	f000 fa06 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001afc:	482e      	ldr	r0, [pc, #184]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001afe:	f004 fb07 	bl	8006110 <HAL_TIM_PWM_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001b08:	f000 f9fe 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4826      	ldr	r0, [pc, #152]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001b20:	f005 fc6a 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001b2a:	f000 f9ed 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2e:	2360      	movs	r3, #96	@ 0x60
 8001b30:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 8001b32:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b36:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b50:	2208      	movs	r2, #8
 8001b52:	4619      	mov	r1, r3
 8001b54:	4818      	ldr	r0, [pc, #96]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001b56:	f004 fcdb 	bl	8006510 <HAL_TIM_PWM_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001b60:	f000 f9d2 	bl	8001f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4807      	ldr	r0, [pc, #28]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001b9a:	f005 fcb5 	bl	8007508 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001ba4:	f000 f9b0 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ba8:	4803      	ldr	r0, [pc, #12]	@ (8001bb8 <MX_TIM8_Init+0x154>)
 8001baa:	f000 fb71 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001bae:	bf00      	nop
 8001bb0:	3768      	adds	r7, #104	@ 0x68
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200007ec 	.word	0x200007ec
 8001bbc:	40013400 	.word	0x40013400

08001bc0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_TIM17_Init+0x44>)
 8001bc6:	4a10      	ldr	r2, [pc, #64]	@ (8001c08 <MX_TIM17_Init+0x48>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <MX_TIM17_Init+0x44>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <MX_TIM17_Init+0x44>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <MX_TIM17_Init+0x44>)
 8001bd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bdc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <MX_TIM17_Init+0x44>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <MX_TIM17_Init+0x44>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <MX_TIM17_Init+0x44>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_TIM17_Init+0x44>)
 8001bf2:	f004 fa07 	bl	8006004 <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001bfc:	f000 f984 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000838 	.word	0x20000838
 8001c08:	40014800 	.word	0x40014800

08001c0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c10:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c12:	4a15      	ldr	r2, [pc, #84]	@ (8001c68 <MX_UART4_Init+0x5c>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c32:	2204      	movs	r2, #4
 8001c34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <MX_UART4_Init+0x58>)
 8001c50:	f005 fd1b 	bl	800768a <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c5a:	f000 f955 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000884 	.word	0x20000884
 8001c68:	40004c00 	.word	0x40004c00

08001c6c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001c72:	4a15      	ldr	r2, [pc, #84]	@ (8001cc8 <MX_UART5_Init+0x5c>)
 8001c74:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001c76:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001c78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c7c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001c92:	220c      	movs	r2, #12
 8001c94:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_UART5_Init+0x58>)
 8001cb0:	f005 fceb 	bl	800768a <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001cba:	f000 f925 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000090c 	.word	0x2000090c
 8001cc8:	40005000 	.word	0x40005000

08001ccc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001cd2:	4a15      	ldr	r2, [pc, #84]	@ (8001d28 <MX_USART1_UART_Init+0x5c>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MX_USART1_UART_Init+0x58>)
 8001d10:	f005 fcbb 	bl	800768a <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d1a:	f000 f8f5 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000994 	.word	0x20000994
 8001d28:	40013800 	.word	0x40013800

08001d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <MX_DMA_Init+0x70>)
 8001d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d36:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <MX_DMA_Init+0x70>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d3e:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <MX_DMA_Init+0x70>)
 8001d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d4a:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <MX_DMA_Init+0x70>)
 8001d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d4e:	4a13      	ldr	r2, [pc, #76]	@ (8001d9c <MX_DMA_Init+0x70>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d56:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <MX_DMA_Init+0x70>)
 8001d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	200e      	movs	r0, #14
 8001d68:	f000 ffb5 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001d6c:	200e      	movs	r0, #14
 8001d6e:	f000 ffce 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	200f      	movs	r0, #15
 8001d78:	f000 ffad 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d7c:	200f      	movs	r0, #15
 8001d7e:	f000 ffc6 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	203c      	movs	r0, #60	@ 0x3c
 8001d88:	f000 ffa5 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001d8c:	203c      	movs	r0, #60	@ 0x3c
 8001d8e:	f000 ffbe 	bl	8002d0e <HAL_NVIC_EnableIRQ>

}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	@ 0x28
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	4b51      	ldr	r3, [pc, #324]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	4a50      	ldr	r2, [pc, #320]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dce:	4b4b      	ldr	r3, [pc, #300]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dda:	4b48      	ldr	r3, [pc, #288]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	4b45      	ldr	r3, [pc, #276]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	4a44      	ldr	r2, [pc, #272]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df2:	4b42      	ldr	r3, [pc, #264]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	4a3e      	ldr	r2, [pc, #248]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e16:	4b39      	ldr	r3, [pc, #228]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	4a38      	ldr	r2, [pc, #224]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001e1c:	f043 0308 	orr.w	r3, r3, #8
 8001e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e22:	4b36      	ldr	r3, [pc, #216]	@ (8001efc <MX_GPIO_Init+0x15c>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWR_BTN_LED_Pin|DEC_EN_Pin|DEC_DIR_Pin|LED2_Pin
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 5133 	mov.w	r1, #11456	@ 0x2cc0
 8001e34:	4832      	ldr	r0, [pc, #200]	@ (8001f00 <MX_GPIO_Init+0x160>)
 8001e36:	f001 faa5 	bl	8003384 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f24c 01e0 	movw	r1, #49376	@ 0xc0e0
 8001e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e44:	f001 fa9e 	bl	8003384 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f243 4137 	movw	r1, #13367	@ 0x3437
 8001e4e:	482d      	ldr	r0, [pc, #180]	@ (8001f04 <MX_GPIO_Init+0x164>)
 8001e50:	f001 fa98 	bl	8003384 <HAL_GPIO_WritePin>
                          |RA_EN_Pin|RA_DIR_Pin|LED_USB_Pin|LED_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PWR_BTN_LED_Pin DEC_EN_Pin DEC_DIR_Pin LED2_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = PWR_BTN_LED_Pin|DEC_EN_Pin|DEC_DIR_Pin|LED2_Pin
 8001e54:	f44f 5333 	mov.w	r3, #11456	@ 0x2cc0
 8001e58:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4824      	ldr	r0, [pc, #144]	@ (8001f00 <MX_GPIO_Init+0x160>)
 8001e6e:	f001 f8df 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : EL_STOP_Pin */
  GPIO_InitStruct.Pin = EL_STOP_Pin;
 8001e72:	2304      	movs	r3, #4
 8001e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EL_STOP_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8a:	f001 f8d1 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : AZ_EN_Pin AZ_DIR_Pin AZ_STEP_Pin LED4_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8001e8e:	f24c 03e0 	movw	r3, #49376	@ 0xc0e0
 8001e92:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eaa:	f001 f8c1 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_SLEEP_n_Pin EL_EN_Pin EL_DIR_Pin EL_STEP_Pin
                           RA_EN_Pin RA_DIR_Pin LED_USB_Pin LED_DC_Pin */
  GPIO_InitStruct.Pin = STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8001eae:	f243 4337 	movw	r3, #13367	@ 0x3437
 8001eb2:	617b      	str	r3, [r7, #20]
                          |RA_EN_Pin|RA_DIR_Pin|LED_USB_Pin|LED_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480f      	ldr	r0, [pc, #60]	@ (8001f04 <MX_GPIO_Init+0x164>)
 8001ec8:	f001 f8b2 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_STATE_Pin */
  GPIO_InitStruct.Pin = PWR_STATE_Pin;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_STATE_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	4809      	ldr	r0, [pc, #36]	@ (8001f04 <MX_GPIO_Init+0x164>)
 8001ee0:	f001 f8a6 	bl	8003030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2008      	movs	r0, #8
 8001eea:	f000 fef4 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001eee:	2008      	movs	r0, #8
 8001ef0:	f000 ff0d 	bl	8002d0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	@ 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	48000800 	.word	0x48000800
 8001f04:	48000400 	.word	0x48000400

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <Error_Handler+0x8>

08001f14 <Stepper_IT_Handeler>:
	.PWM_Type = PWM_OUT_P,
};


void Stepper_IT_Handeler()
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
    if (EL_Axis_motor.enabled)
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <Stepper_IT_Handeler+0x24>)
 8001f1a:	7f1b      	ldrb	r3, [r3, #28]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <Stepper_IT_Handeler+0x12>
    {
    	STEP_Generating(&EL_Axis_motor);
 8001f20:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <Stepper_IT_Handeler+0x24>)
 8001f22:	f000 f84a 	bl	8001fba <STEP_Generating>
    }

    if (AZ_Axis_motor.enabled)
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <Stepper_IT_Handeler+0x28>)
 8001f28:	7f1b      	ldrb	r3, [r3, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <Stepper_IT_Handeler+0x20>
    {
        STEP_Generating(&AZ_Axis_motor);
 8001f2e:	4803      	ldr	r0, [pc, #12]	@ (8001f3c <Stepper_IT_Handeler+0x28>)
 8001f30:	f000 f843 	bl	8001fba <STEP_Generating>
    }
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	2000003c 	.word	0x2000003c

08001f40 <Stepper_Stop>:
		}

}

void Stepper_Stop(Stepper_motor *Axis)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

	if (Axis->High_precision)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7f9b      	ldrb	r3, [r3, #30]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <Stepper_Stop+0x52>
	{
		//Stop PWM timer
			if (Axis->PWM_Type == PWM_OUT_P)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <Stepper_Stop+0x2c>
			{
				HAL_TIM_PWM_Stop(Axis->PWM_Timer, Axis->PWM_Channel);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f004 f935 	bl	80061d4 <HAL_TIM_PWM_Stop>
 8001f6a:	e00c      	b.n	8001f86 <Stepper_Stop+0x46>
			}
			else if (Axis->PWM_Type == PWM_OUT_N)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <Stepper_Stop+0x46>
			{
				HAL_TIMEx_PWMN_Stop(Axis->PWM_Timer, Axis->PWM_Channel);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4610      	mov	r0, r2
 8001f82:	f005 f9db 	bl	800733c <HAL_TIMEx_PWMN_Stop>
			}
			//Stop STEP counting timer
			HAL_TIM_Base_Stop_IT(Axis->Step_Counter_Timer);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 f891 	bl	80060b2 <HAL_TIM_Base_Stop_IT>
 8001f90:	e009      	b.n	8001fa6 <Stepper_Stop+0x66>
	}
	else if (!Axis->High_precision)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7f9b      	ldrb	r3, [r3, #30]
 8001f96:	f083 0301 	eor.w	r3, r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <Stepper_Stop+0x66>
	{
		Axis->Steps_remaining = 0;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
	}

	Axis->enabled = false;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
	Axis->busy = false;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	775a      	strb	r2, [r3, #29]

}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <STEP_Generating>:

void STEP_Generating(Stepper_motor *Axis)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	if (Axis->Steps_remaining == 0)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <STEP_Generating+0x18>
	        {
				Axis->enabled= false;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
	            return;
 8001fd0:	e01a      	b.n	8002008 <STEP_Generating+0x4e>
	        }
	        if (Axis->Tick_counter == 0)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d111      	bne.n	8001ffe <STEP_Generating+0x44>
	        {
	            // Generate one step pulse
	            HAL_GPIO_TogglePin(Axis->STEP_Port, Axis->STEP_Pin);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	889b      	ldrh	r3, [r3, #4]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f001 f9e5 	bl	80033b4 <HAL_GPIO_TogglePin>

	            Axis->Steps_remaining--;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	621a      	str	r2, [r3, #32]
	            Axis->Tick_counter = Axis->Step_interval_ticks;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ffc:	e004      	b.n	8002008 <STEP_Generating+0x4e>
	        }
	        else
	        {
	        	Axis->Tick_counter--;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	1e5a      	subs	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
	        }
}
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <Stepper_nSleep>:


void Stepper_nSleep(bool n_sleep)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(STEP_SLEEP_n_GPIO_Port,STEP_SLEEP_n_Pin, n_sleep); //1 = enabled
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	461a      	mov	r2, r3
 800201e:	2101      	movs	r1, #1
 8002020:	4803      	ldr	r0, [pc, #12]	@ (8002030 <Stepper_nSleep+0x20>)
 8002022:	f001 f9af 	bl	8003384 <HAL_GPIO_WritePin>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	48000400 	.word	0x48000400

08002034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <HAL_MspInit+0x44>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203e:	4a0e      	ldr	r2, [pc, #56]	@ (8002078 <HAL_MspInit+0x44>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6613      	str	r3, [r2, #96]	@ 0x60
 8002046:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <HAL_MspInit+0x44>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_MspInit+0x44>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <HAL_MspInit+0x44>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800205c:	6593      	str	r3, [r2, #88]	@ 0x58
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_MspInit+0x44>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0ac      	sub	sp, #176	@ 0xb0
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2288      	movs	r2, #136	@ 0x88
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f00b fda4 	bl	800dbea <memset>
  if(hi2c->Instance==I2C3)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a21      	ldr	r2, [pc, #132]	@ (800212c <HAL_I2C_MspInit+0xb0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d13b      	bne.n	8002124 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 fae6 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020c6:	f7ff ff1f 	bl	8001f08 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_I2C_MspInit+0xb4>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a18      	ldr	r2, [pc, #96]	@ (8002130 <HAL_I2C_MspInit+0xb4>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <HAL_I2C_MspInit+0xb4>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020e2:	2303      	movs	r3, #3
 80020e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e8:	2312      	movs	r3, #18
 80020ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020fa:	2304      	movs	r3, #4
 80020fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002104:	4619      	mov	r1, r3
 8002106:	480b      	ldr	r0, [pc, #44]	@ (8002134 <HAL_I2C_MspInit+0xb8>)
 8002108:	f000 ff92 	bl	8003030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <HAL_I2C_MspInit+0xb4>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002110:	4a07      	ldr	r2, [pc, #28]	@ (8002130 <HAL_I2C_MspInit+0xb4>)
 8002112:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002116:	6593      	str	r3, [r2, #88]	@ 0x58
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <HAL_I2C_MspInit+0xb4>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002124:	bf00      	nop
 8002126:	37b0      	adds	r7, #176	@ 0xb0
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40005c00 	.word	0x40005c00
 8002130:	40021000 	.word	0x40021000
 8002134:	48000800 	.word	0x48000800

08002138 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	@ 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a4b      	ldr	r2, [pc, #300]	@ (8002274 <HAL_TIM_Base_MspInit+0x13c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10c      	bne.n	8002164 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800214a:	4b4b      	ldr	r3, [pc, #300]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 800214c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214e:	4a4a      	ldr	r2, [pc, #296]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002150:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002154:	6613      	str	r3, [r2, #96]	@ 0x60
 8002156:	4b48      	ldr	r3, [pc, #288]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002162:	e082      	b.n	800226a <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216c:	d114      	bne.n	8002198 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216e:	4b42      	ldr	r3, [pc, #264]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002172:	4a41      	ldr	r2, [pc, #260]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6593      	str	r3, [r2, #88]	@ 0x58
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	623b      	str	r3, [r7, #32]
 8002184:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	201c      	movs	r0, #28
 800218c:	f000 fda3 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002190:	201c      	movs	r0, #28
 8002192:	f000 fdbc 	bl	8002d0e <HAL_NVIC_EnableIRQ>
}
 8002196:	e068      	b.n	800226a <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM3)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a37      	ldr	r2, [pc, #220]	@ (800227c <HAL_TIM_Base_MspInit+0x144>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d114      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021a2:	4b35      	ldr	r3, [pc, #212]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a34      	ldr	r2, [pc, #208]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ae:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	201d      	movs	r0, #29
 80021c0:	f000 fd89 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021c4:	201d      	movs	r0, #29
 80021c6:	f000 fda2 	bl	8002d0e <HAL_NVIC_EnableIRQ>
}
 80021ca:	e04e      	b.n	800226a <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM4)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002280 <HAL_TIM_Base_MspInit+0x148>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10c      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021d6:	4b28      	ldr	r3, [pc, #160]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	4a27      	ldr	r2, [pc, #156]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e2:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	69bb      	ldr	r3, [r7, #24]
}
 80021ee:	e03c      	b.n	800226a <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM5)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a23      	ldr	r2, [pc, #140]	@ (8002284 <HAL_TIM_Base_MspInit+0x14c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d114      	bne.n	8002224 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002200:	f043 0308 	orr.w	r3, r3, #8
 8002204:	6593      	str	r3, [r2, #88]	@ 0x58
 8002206:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2032      	movs	r0, #50	@ 0x32
 8002218:	f000 fd5d 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800221c:	2032      	movs	r0, #50	@ 0x32
 800221e:	f000 fd76 	bl	8002d0e <HAL_NVIC_EnableIRQ>
}
 8002222:	e022      	b.n	800226a <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM8)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_TIM_Base_MspInit+0x150>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10c      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800222e:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	4a11      	ldr	r2, [pc, #68]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002234:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002238:	6613      	str	r3, [r2, #96]	@ 0x60
 800223a:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 800223c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
}
 8002246:	e010      	b.n	800226a <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM17)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <HAL_TIM_Base_MspInit+0x154>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10b      	bne.n	800226a <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002256:	4a08      	ldr	r2, [pc, #32]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800225c:	6613      	str	r3, [r2, #96]	@ 0x60
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_TIM_Base_MspInit+0x140>)
 8002260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002262:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	@ 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40021000 	.word	0x40021000
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	40000c00 	.word	0x40000c00
 8002288:	40013400 	.word	0x40013400
 800228c:	40014800 	.word	0x40014800

08002290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a23      	ldr	r2, [pc, #140]	@ (800233c <HAL_TIM_MspPostInit+0xac>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11d      	bne.n	80022ee <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_TIM_MspPostInit+0xb0>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <HAL_TIM_MspPostInit+0xb0>)
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022be:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_TIM_MspPostInit+0xb0>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = RA_STEP_Pin;
 80022ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022dc:	2301      	movs	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RA_STEP_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4817      	ldr	r0, [pc, #92]	@ (8002344 <HAL_TIM_MspPostInit+0xb4>)
 80022e8:	f000 fea2 	bl	8003030 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80022ec:	e021      	b.n	8002332 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a15      	ldr	r2, [pc, #84]	@ (8002348 <HAL_TIM_MspPostInit+0xb8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d11c      	bne.n	8002332 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <HAL_TIM_MspPostInit+0xb0>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fc:	4a10      	ldr	r2, [pc, #64]	@ (8002340 <HAL_TIM_MspPostInit+0xb0>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <HAL_TIM_MspPostInit+0xb0>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEC_STEP_Pin;
 8002310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231e:	2302      	movs	r3, #2
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002322:	2303      	movs	r3, #3
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEC_STEP_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	4807      	ldr	r0, [pc, #28]	@ (800234c <HAL_TIM_MspPostInit+0xbc>)
 800232e:	f000 fe7f 	bl	8003030 <HAL_GPIO_Init>
}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40021000 	.word	0x40021000
 8002344:	48000400 	.word	0x48000400
 8002348:	40013400 	.word	0x40013400
 800234c:	48000800 	.word	0x48000800

08002350 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0b0      	sub	sp, #192	@ 0xc0
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800236c:	2288      	movs	r2, #136	@ 0x88
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f00b fc3a 	bl	800dbea <memset>
  if(huart->Instance==UART4)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a66      	ldr	r2, [pc, #408]	@ (8002514 <HAL_UART_MspInit+0x1c4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d165      	bne.n	800244c <HAL_UART_MspInit+0xfc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002380:	2308      	movs	r3, #8
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002384:	2300      	movs	r3, #0
 8002386:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800238c:	4618      	mov	r0, r3
 800238e:	f003 f97d 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002398:	f7ff fdb6 	bl	8001f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800239c:	4b5e      	ldr	r3, [pc, #376]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 80023a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80023a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023b0:	623b      	str	r3, [r7, #32]
 80023b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b4:	4b58      	ldr	r3, [pc, #352]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b8:	4a57      	ldr	r2, [pc, #348]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c0:	4b55      	ldr	r3, [pc, #340]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 80023c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023cc:	2303      	movs	r3, #3
 80023ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023e4:	2308      	movs	r3, #8
 80023e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ea:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80023ee:	4619      	mov	r1, r3
 80023f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f4:	f000 fe1c 	bl	8003030 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80023f8:	4b48      	ldr	r3, [pc, #288]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 80023fa:	4a49      	ldr	r2, [pc, #292]	@ (8002520 <HAL_UART_MspInit+0x1d0>)
 80023fc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 80023fe:	4b47      	ldr	r3, [pc, #284]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 8002400:	2202      	movs	r2, #2
 8002402:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002404:	4b45      	ldr	r3, [pc, #276]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800240a:	4b44      	ldr	r3, [pc, #272]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 800240c:	2200      	movs	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002410:	4b42      	ldr	r3, [pc, #264]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 8002412:	2280      	movs	r2, #128	@ 0x80
 8002414:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002416:	4b41      	ldr	r3, [pc, #260]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 8002418:	2200      	movs	r2, #0
 800241a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800241c:	4b3f      	ldr	r3, [pc, #252]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002422:	4b3e      	ldr	r3, [pc, #248]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 8002424:	2220      	movs	r2, #32
 8002426:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002428:	4b3c      	ldr	r3, [pc, #240]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 800242a:	2200      	movs	r2, #0
 800242c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800242e:	483b      	ldr	r0, [pc, #236]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 8002430:	f000 fc96 	bl	8002d60 <HAL_DMA_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800243a:	f7ff fd65 	bl	8001f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a36      	ldr	r2, [pc, #216]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 8002442:	675a      	str	r2, [r3, #116]	@ 0x74
 8002444:	4a35      	ldr	r2, [pc, #212]	@ (800251c <HAL_UART_MspInit+0x1cc>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6293      	str	r3, [r2, #40]	@ 0x28
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800244a:	e106      	b.n	800265a <HAL_UART_MspInit+0x30a>
  else if(huart->Instance==UART5)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a34      	ldr	r2, [pc, #208]	@ (8002524 <HAL_UART_MspInit+0x1d4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d16c      	bne.n	8002530 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002456:	2310      	movs	r3, #16
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800245a:	2300      	movs	r3, #0
 800245c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002462:	4618      	mov	r0, r3
 8002464:	f003 f912 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_UART_MspInit+0x122>
      Error_Handler();
 800246e:	f7ff fd4b 	bl	8001f08 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002472:	4b29      	ldr	r3, [pc, #164]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002476:	4a28      	ldr	r2, [pc, #160]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 8002478:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800247c:	6593      	str	r3, [r2, #88]	@ 0x58
 800247e:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800248a:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002496:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <HAL_UART_MspInit+0x1c8>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024d4:	2308      	movs	r3, #8
 80024d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024da:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024de:	4619      	mov	r1, r3
 80024e0:	4811      	ldr	r0, [pc, #68]	@ (8002528 <HAL_UART_MspInit+0x1d8>)
 80024e2:	f000 fda5 	bl	8003030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024e6:	2304      	movs	r3, #4
 80024e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024fe:	2308      	movs	r3, #8
 8002500:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002504:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002508:	4619      	mov	r1, r3
 800250a:	4808      	ldr	r0, [pc, #32]	@ (800252c <HAL_UART_MspInit+0x1dc>)
 800250c:	f000 fd90 	bl	8003030 <HAL_GPIO_Init>
}
 8002510:	e0a3      	b.n	800265a <HAL_UART_MspInit+0x30a>
 8002512:	bf00      	nop
 8002514:	40004c00 	.word	0x40004c00
 8002518:	40021000 	.word	0x40021000
 800251c:	20000a1c 	.word	0x20000a1c
 8002520:	40020458 	.word	0x40020458
 8002524:	40005000 	.word	0x40005000
 8002528:	48000800 	.word	0x48000800
 800252c:	48000c00 	.word	0x48000c00
  else if(huart->Instance==USART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a4b      	ldr	r2, [pc, #300]	@ (8002664 <HAL_UART_MspInit+0x314>)
 8002536:	4293      	cmp	r3, r2
 8002538:	f040 808f 	bne.w	800265a <HAL_UART_MspInit+0x30a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800253c:	2301      	movs	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002540:	2300      	movs	r3, #0
 8002542:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f89f 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8002554:	f7ff fcd8 	bl	8001f08 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002558:	4b43      	ldr	r3, [pc, #268]	@ (8002668 <HAL_UART_MspInit+0x318>)
 800255a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255c:	4a42      	ldr	r2, [pc, #264]	@ (8002668 <HAL_UART_MspInit+0x318>)
 800255e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002562:	6613      	str	r3, [r2, #96]	@ 0x60
 8002564:	4b40      	ldr	r3, [pc, #256]	@ (8002668 <HAL_UART_MspInit+0x318>)
 8002566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b3d      	ldr	r3, [pc, #244]	@ (8002668 <HAL_UART_MspInit+0x318>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	4a3c      	ldr	r2, [pc, #240]	@ (8002668 <HAL_UART_MspInit+0x318>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257c:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <HAL_UART_MspInit+0x318>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002588:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800258c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025a2:	2307      	movs	r3, #7
 80025a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80025ac:	4619      	mov	r1, r3
 80025ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025b2:	f000 fd3d 	bl	8003030 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80025b6:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002670 <HAL_UART_MspInit+0x320>)
 80025ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80025bc:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025be:	2202      	movs	r2, #2
 80025c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025c2:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c8:	4b28      	ldr	r3, [pc, #160]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ce:	4b27      	ldr	r3, [pc, #156]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025d0:	2280      	movs	r2, #128	@ 0x80
 80025d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025da:	4b24      	ldr	r3, [pc, #144]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80025e0:	4b22      	ldr	r3, [pc, #136]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025e2:	2220      	movs	r2, #32
 80025e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025e6:	4b21      	ldr	r3, [pc, #132]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025ec:	481f      	ldr	r0, [pc, #124]	@ (800266c <HAL_UART_MspInit+0x31c>)
 80025ee:	f000 fbb7 	bl	8002d60 <HAL_DMA_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 80025f8:	f7ff fc86 	bl	8001f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a1b      	ldr	r2, [pc, #108]	@ (800266c <HAL_UART_MspInit+0x31c>)
 8002600:	675a      	str	r2, [r3, #116]	@ 0x74
 8002602:	4a1a      	ldr	r2, [pc, #104]	@ (800266c <HAL_UART_MspInit+0x31c>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002608:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <HAL_UART_MspInit+0x324>)
 800260a:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <HAL_UART_MspInit+0x328>)
 800260c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800260e:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_UART_MspInit+0x324>)
 8002610:	2202      	movs	r2, #2
 8002612:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002614:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <HAL_UART_MspInit+0x324>)
 8002616:	2210      	movs	r2, #16
 8002618:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800261a:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <HAL_UART_MspInit+0x324>)
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002620:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_UART_MspInit+0x324>)
 8002622:	2280      	movs	r2, #128	@ 0x80
 8002624:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002626:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <HAL_UART_MspInit+0x324>)
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800262c:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_UART_MspInit+0x324>)
 800262e:	2200      	movs	r2, #0
 8002630:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002632:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <HAL_UART_MspInit+0x324>)
 8002634:	2200      	movs	r2, #0
 8002636:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_UART_MspInit+0x324>)
 800263a:	2200      	movs	r2, #0
 800263c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800263e:	480d      	ldr	r0, [pc, #52]	@ (8002674 <HAL_UART_MspInit+0x324>)
 8002640:	f000 fb8e 	bl	8002d60 <HAL_DMA_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 800264a:	f7ff fc5d 	bl	8001f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <HAL_UART_MspInit+0x324>)
 8002652:	671a      	str	r2, [r3, #112]	@ 0x70
 8002654:	4a07      	ldr	r2, [pc, #28]	@ (8002674 <HAL_UART_MspInit+0x324>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800265a:	bf00      	nop
 800265c:	37c0      	adds	r7, #192	@ 0xc0
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40013800 	.word	0x40013800
 8002668:	40021000 	.word	0x40021000
 800266c:	20000a64 	.word	0x20000a64
 8002670:	40020058 	.word	0x40020058
 8002674:	20000aac 	.word	0x20000aac
 8002678:	40020044 	.word	0x40020044

0800267c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <NMI_Handler+0x4>

08002684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <HardFault_Handler+0x4>

0800268c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <MemManage_Handler+0x4>

08002694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <BusFault_Handler+0x4>

0800269c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <UsageFault_Handler+0x4>

080026a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d2:	f000 f9bd 	bl	8002a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}

080026da <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EL_STOP_Pin);
 80026de:	2004      	movs	r0, #4
 80026e0:	f000 fe82 	bl	80033e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <DMA1_Channel4_IRQHandler+0x10>)
 80026ee:	f000 fbef 	bl	8002ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000aac 	.word	0x20000aac

080026fc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <DMA1_Channel5_IRQHandler+0x10>)
 8002702:	f000 fbe5 	bl	8002ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000a64 	.word	0x20000a64

08002710 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <TIM2_IRQHandler+0x10>)
 8002716:	f003 fdf3 	bl	8006300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200006bc 	.word	0x200006bc

08002724 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <TIM3_IRQHandler+0x10>)
 800272a:	f003 fde9 	bl	8006300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000708 	.word	0x20000708

08002738 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <TIM5_IRQHandler+0x10>)
 800273e:	f003 fddf 	bl	8006300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200007a0 	.word	0x200007a0

0800274c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <DMA2_Channel5_IRQHandler+0x10>)
 8002752:	f000 fbbd 	bl	8002ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000a1c 	.word	0x20000a1c

08002760 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <OTG_FS_IRQHandler+0x10>)
 8002766:	f001 f8c7 	bl	80038f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20001fdc 	.word	0x20001fdc

08002774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return 1;
 8002778:	2301      	movs	r3, #1
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <_kill>:

int _kill(int pid, int sig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800278e:	f00b fb2d 	bl	800ddec <__errno>
 8002792:	4603      	mov	r3, r0
 8002794:	2216      	movs	r2, #22
 8002796:	601a      	str	r2, [r3, #0]
  return -1;
 8002798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_exit>:

void _exit (int status)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ffe7 	bl	8002784 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027b6:	bf00      	nop
 80027b8:	e7fd      	b.n	80027b6 <_exit+0x12>

080027ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e00a      	b.n	80027e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027cc:	f3af 8000 	nop.w
 80027d0:	4601      	mov	r1, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	60ba      	str	r2, [r7, #8]
 80027d8:	b2ca      	uxtb	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3301      	adds	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	dbf0      	blt.n	80027cc <_read+0x12>
  }

  return len;
 80027ea:	687b      	ldr	r3, [r7, #4]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800281c:	605a      	str	r2, [r3, #4]
  return 0;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_isatty>:

int _isatty(int file)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002834:	2301      	movs	r3, #1
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002864:	4a14      	ldr	r2, [pc, #80]	@ (80028b8 <_sbrk+0x5c>)
 8002866:	4b15      	ldr	r3, [pc, #84]	@ (80028bc <_sbrk+0x60>)
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002870:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <_sbrk+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <_sbrk+0x64>)
 800287a:	4a12      	ldr	r2, [pc, #72]	@ (80028c4 <_sbrk+0x68>)
 800287c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <_sbrk+0x64>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	429a      	cmp	r2, r3
 800288a:	d207      	bcs.n	800289c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800288c:	f00b faae 	bl	800ddec <__errno>
 8002890:	4603      	mov	r3, r0
 8002892:	220c      	movs	r2, #12
 8002894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e009      	b.n	80028b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	4a05      	ldr	r2, [pc, #20]	@ (80028c0 <_sbrk+0x64>)
 80028ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ae:	68fb      	ldr	r3, [r7, #12]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20018000 	.word	0x20018000
 80028bc:	00000400 	.word	0x00000400
 80028c0:	20000af4 	.word	0x20000af4
 80028c4:	20002830 	.word	0x20002830

080028c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <SystemInit+0x20>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	4a05      	ldr	r2, [pc, #20]	@ (80028e8 <SystemInit+0x20>)
 80028d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <HAL_TIM_PeriodElapsedCallback>:
 *      Author: pecka
 */
#include "timers.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == LED_TIMER)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a11      	ldr	r2, [pc, #68]	@ (8002940 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d102      	bne.n	8002904 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  //LEDs timer
	  LED_IT_Handeler();
 80028fe:	f7fe fdd7 	bl	80014b0 <LED_IT_Handeler>
  {
	  //Stepper timer RA
	  Stepper_Stop(&RA_Axis_motor);
  }

}
 8002902:	e018      	b.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x4a>
  else if(htim->Instance == STEPPER_TIMER)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0e      	ldr	r2, [pc, #56]	@ (8002944 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d102      	bne.n	8002914 <HAL_TIM_PeriodElapsedCallback+0x28>
	  Stepper_IT_Handeler();
 800290e:	f7ff fb01 	bl	8001f14 <Stepper_IT_Handeler>
}
 8002912:	e010      	b.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x4a>
  else if (htim->Instance == DEC_TIM)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0b      	ldr	r2, [pc, #44]	@ (8002948 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d103      	bne.n	8002926 <HAL_TIM_PeriodElapsedCallback+0x3a>
	  Stepper_Stop(&DEC_Axis_motor);
 800291e:	480b      	ldr	r0, [pc, #44]	@ (800294c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002920:	f7ff fb0e 	bl	8001f40 <Stepper_Stop>
}
 8002924:	e007      	b.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x4a>
  else if(htim->Instance == RA_TIM)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800292e:	d102      	bne.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x4a>
	  Stepper_Stop(&RA_Axis_motor);
 8002930:	4807      	ldr	r0, [pc, #28]	@ (8002950 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002932:	f7ff fb05 	bl	8001f40 <Stepper_Stop>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40000800 	.word	0x40000800
 8002944:	40000400 	.word	0x40000400
 8002948:	40000c00 	.word	0x40000c00
 800294c:	200000b4 	.word	0x200000b4
 8002950:	20000078 	.word	0x20000078

08002954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800298c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002958:	f7ff ffb6 	bl	80028c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800295c:	480c      	ldr	r0, [pc, #48]	@ (8002990 <LoopForever+0x6>)
  ldr r1, =_edata
 800295e:	490d      	ldr	r1, [pc, #52]	@ (8002994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002960:	4a0d      	ldr	r2, [pc, #52]	@ (8002998 <LoopForever+0xe>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002964:	e002      	b.n	800296c <LoopCopyDataInit>

08002966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296a:	3304      	adds	r3, #4

0800296c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800296c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800296e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002970:	d3f9      	bcc.n	8002966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002974:	4c0a      	ldr	r4, [pc, #40]	@ (80029a0 <LoopForever+0x16>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002978:	e001      	b.n	800297e <LoopFillZerobss>

0800297a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800297c:	3204      	adds	r2, #4

0800297e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800297e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002980:	d3fb      	bcc.n	800297a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002982:	f00b fa39 	bl	800ddf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002986:	f7fe fd9f 	bl	80014c8 <main>

0800298a <LoopForever>:

LoopForever:
    b LoopForever
 800298a:	e7fe      	b.n	800298a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800298c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002994:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8002998:	08010880 	.word	0x08010880
  ldr r2, =_sbss
 800299c:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 80029a0:	2000282c 	.word	0x2000282c

080029a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029a4:	e7fe      	b.n	80029a4 <ADC1_2_IRQHandler>

080029a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b0:	2003      	movs	r0, #3
 80029b2:	f000 f985 	bl	8002cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029b6:	200f      	movs	r0, #15
 80029b8:	f000 f80e 	bl	80029d8 <HAL_InitTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	71fb      	strb	r3, [r7, #7]
 80029c6:	e001      	b.n	80029cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029c8:	f7ff fb34 	bl	8002034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029cc:	79fb      	ldrb	r3, [r7, #7]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029e4:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <HAL_InitTick+0x6c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d023      	beq.n	8002a34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029ec:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <HAL_InitTick+0x70>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <HAL_InitTick+0x6c>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f99f 	bl	8002d46 <HAL_SYSTICK_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	d809      	bhi.n	8002a28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a14:	2200      	movs	r2, #0
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f000 f95b 	bl	8002cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a20:	4a0a      	ldr	r2, [pc, #40]	@ (8002a4c <HAL_InitTick+0x74>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e007      	b.n	8002a38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
 8002a2c:	e004      	b.n	8002a38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
 8002a32:	e001      	b.n	8002a38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200000f8 	.word	0x200000f8
 8002a48:	200000f0 	.word	0x200000f0
 8002a4c:	200000f4 	.word	0x200000f4

08002a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_IncTick+0x20>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_IncTick+0x24>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <HAL_IncTick+0x24>)
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	200000f8 	.word	0x200000f8
 8002a74:	20000af8 	.word	0x20000af8

08002a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <HAL_GetTick+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000af8 	.word	0x20000af8

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff ffee 	bl	8002a78 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <HAL_Delay+0x44>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffde 	bl	8002a78 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200000f8 	.word	0x200000f8

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	@ (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	db12      	blt.n	8002bb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	490a      	ldr	r1, [pc, #40]	@ (8002bbc <__NVIC_DisableIRQ+0x44>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2001      	movs	r0, #1
 8002b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9e:	3320      	adds	r3, #32
 8002ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ba4:	f3bf 8f4f 	dsb	sy
}
 8002ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002baa:	f3bf 8f6f 	isb	sy
}
 8002bae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	@ (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	@ (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	@ 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	@ 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c8c:	d301      	bcc.n	8002c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00f      	b.n	8002cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c92:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <SysTick_Config+0x40>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9a:	210f      	movs	r1, #15
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f7ff ff8e 	bl	8002bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca4:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <SysTick_Config+0x40>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002caa:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <SysTick_Config+0x40>)
 8002cac:	2207      	movs	r2, #7
 8002cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	e000e010 	.word	0xe000e010

08002cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff05 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce8:	f7ff ff1a 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff ff8e 	bl	8002c14 <NVIC_EncodePriority>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff5d 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff0d 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff1d 	bl	8002b78 <__NVIC_DisableIRQ>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ff94 	bl	8002c7c <SysTick_Config>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e098      	b.n	8002ea4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb0 <HAL_DMA_Init+0x150>)
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d80f      	bhi.n	8002d9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb4 <HAL_DMA_Init+0x154>)
 8002d86:	4413      	add	r3, r2
 8002d88:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb8 <HAL_DMA_Init+0x158>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	009a      	lsls	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a48      	ldr	r2, [pc, #288]	@ (8002ebc <HAL_DMA_Init+0x15c>)
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d9c:	e00e      	b.n	8002dbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b46      	ldr	r3, [pc, #280]	@ (8002ec0 <HAL_DMA_Init+0x160>)
 8002da6:	4413      	add	r3, r2
 8002da8:	4a43      	ldr	r2, [pc, #268]	@ (8002eb8 <HAL_DMA_Init+0x158>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	009a      	lsls	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a42      	ldr	r2, [pc, #264]	@ (8002ec4 <HAL_DMA_Init+0x164>)
 8002dba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e16:	d039      	beq.n	8002e8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	4a27      	ldr	r2, [pc, #156]	@ (8002ebc <HAL_DMA_Init+0x15c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d11a      	bne.n	8002e58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e22:	4b29      	ldr	r3, [pc, #164]	@ (8002ec8 <HAL_DMA_Init+0x168>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	f003 031c 	and.w	r3, r3, #28
 8002e2e:	210f      	movs	r1, #15
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	4924      	ldr	r1, [pc, #144]	@ (8002ec8 <HAL_DMA_Init+0x168>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ec8 <HAL_DMA_Init+0x168>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e48:	f003 031c 	and.w	r3, r3, #28
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	491d      	ldr	r1, [pc, #116]	@ (8002ec8 <HAL_DMA_Init+0x168>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
 8002e56:	e019      	b.n	8002e8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e58:	4b1c      	ldr	r3, [pc, #112]	@ (8002ecc <HAL_DMA_Init+0x16c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e60:	f003 031c 	and.w	r3, r3, #28
 8002e64:	210f      	movs	r1, #15
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	4917      	ldr	r1, [pc, #92]	@ (8002ecc <HAL_DMA_Init+0x16c>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e72:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <HAL_DMA_Init+0x16c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f003 031c 	and.w	r3, r3, #28
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	4911      	ldr	r1, [pc, #68]	@ (8002ecc <HAL_DMA_Init+0x16c>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40020407 	.word	0x40020407
 8002eb4:	bffdfff8 	.word	0xbffdfff8
 8002eb8:	cccccccd 	.word	0xcccccccd
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	bffdfbf8 	.word	0xbffdfbf8
 8002ec4:	40020400 	.word	0x40020400
 8002ec8:	400200a8 	.word	0x400200a8
 8002ecc:	400204a8 	.word	0x400204a8

08002ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	f003 031c 	and.w	r3, r3, #28
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d026      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x7a>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d021      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f28:	f003 021c 	and.w	r2, r3, #28
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	2104      	movs	r1, #4
 8002f32:	fa01 f202 	lsl.w	r2, r1, r2
 8002f36:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d071      	beq.n	8003024 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f48:	e06c      	b.n	8003024 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	f003 031c 	and.w	r3, r3, #28
 8002f52:	2202      	movs	r2, #2
 8002f54:	409a      	lsls	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d02e      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xec>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d029      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10b      	bne.n	8002f8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 020a 	bic.w	r2, r2, #10
 8002f84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	f003 021c 	and.w	r2, r3, #28
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d038      	beq.n	8003024 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002fba:	e033      	b.n	8003024 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc0:	f003 031c 	and.w	r3, r3, #28
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02a      	beq.n	8003026 <HAL_DMA_IRQHandler+0x156>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d025      	beq.n	8003026 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 020e 	bic.w	r2, r2, #14
 8002fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	f003 021c 	and.w	r2, r3, #28
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003024:	bf00      	nop
 8003026:	bf00      	nop
}
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303e:	e17f      	b.n	8003340 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8171 	beq.w	800333a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d005      	beq.n	8003070 <HAL_GPIO_Init+0x40>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d130      	bne.n	80030d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a6:	2201      	movs	r2, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 0201 	and.w	r2, r3, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d118      	bne.n	8003110 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030e4:	2201      	movs	r2, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	08db      	lsrs	r3, r3, #3
 80030fa:	f003 0201 	and.w	r2, r3, #1
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b03      	cmp	r3, #3
 800311a:	d017      	beq.n	800314c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d123      	bne.n	80031a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	08da      	lsrs	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3208      	adds	r2, #8
 8003160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	220f      	movs	r2, #15
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	08da      	lsrs	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3208      	adds	r2, #8
 800319a:	6939      	ldr	r1, [r7, #16]
 800319c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0203 	and.w	r2, r3, #3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80ac 	beq.w	800333a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003360 <HAL_GPIO_Init+0x330>)
 80031e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003360 <HAL_GPIO_Init+0x330>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80031ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003360 <HAL_GPIO_Init+0x330>)
 80031f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003364 <HAL_GPIO_Init+0x334>)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	3302      	adds	r3, #2
 8003202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	220f      	movs	r2, #15
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003224:	d025      	beq.n	8003272 <HAL_GPIO_Init+0x242>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4f      	ldr	r2, [pc, #316]	@ (8003368 <HAL_GPIO_Init+0x338>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01f      	beq.n	800326e <HAL_GPIO_Init+0x23e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4e      	ldr	r2, [pc, #312]	@ (800336c <HAL_GPIO_Init+0x33c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d019      	beq.n	800326a <HAL_GPIO_Init+0x23a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4d      	ldr	r2, [pc, #308]	@ (8003370 <HAL_GPIO_Init+0x340>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_GPIO_Init+0x236>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4c      	ldr	r2, [pc, #304]	@ (8003374 <HAL_GPIO_Init+0x344>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00d      	beq.n	8003262 <HAL_GPIO_Init+0x232>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4b      	ldr	r2, [pc, #300]	@ (8003378 <HAL_GPIO_Init+0x348>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <HAL_GPIO_Init+0x22e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4a      	ldr	r2, [pc, #296]	@ (800337c <HAL_GPIO_Init+0x34c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_GPIO_Init+0x22a>
 8003256:	2306      	movs	r3, #6
 8003258:	e00c      	b.n	8003274 <HAL_GPIO_Init+0x244>
 800325a:	2307      	movs	r3, #7
 800325c:	e00a      	b.n	8003274 <HAL_GPIO_Init+0x244>
 800325e:	2305      	movs	r3, #5
 8003260:	e008      	b.n	8003274 <HAL_GPIO_Init+0x244>
 8003262:	2304      	movs	r3, #4
 8003264:	e006      	b.n	8003274 <HAL_GPIO_Init+0x244>
 8003266:	2303      	movs	r3, #3
 8003268:	e004      	b.n	8003274 <HAL_GPIO_Init+0x244>
 800326a:	2302      	movs	r3, #2
 800326c:	e002      	b.n	8003274 <HAL_GPIO_Init+0x244>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_GPIO_Init+0x244>
 8003272:	2300      	movs	r3, #0
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	f002 0203 	and.w	r2, r2, #3
 800327a:	0092      	lsls	r2, r2, #2
 800327c:	4093      	lsls	r3, r2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003284:	4937      	ldr	r1, [pc, #220]	@ (8003364 <HAL_GPIO_Init+0x334>)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003292:	4b3b      	ldr	r3, [pc, #236]	@ (8003380 <HAL_GPIO_Init+0x350>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	43db      	mvns	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032b6:	4a32      	ldr	r2, [pc, #200]	@ (8003380 <HAL_GPIO_Init+0x350>)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032bc:	4b30      	ldr	r3, [pc, #192]	@ (8003380 <HAL_GPIO_Init+0x350>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032e0:	4a27      	ldr	r2, [pc, #156]	@ (8003380 <HAL_GPIO_Init+0x350>)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032e6:	4b26      	ldr	r3, [pc, #152]	@ (8003380 <HAL_GPIO_Init+0x350>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800330a:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <HAL_GPIO_Init+0x350>)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003310:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <HAL_GPIO_Init+0x350>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003334:	4a12      	ldr	r2, [pc, #72]	@ (8003380 <HAL_GPIO_Init+0x350>)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3301      	adds	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	f47f ae78 	bne.w	8003040 <HAL_GPIO_Init+0x10>
  }
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40010000 	.word	0x40010000
 8003368:	48000400 	.word	0x48000400
 800336c:	48000800 	.word	0x48000800
 8003370:	48000c00 	.word	0x48000c00
 8003374:	48001000 	.word	0x48001000
 8003378:	48001400 	.word	0x48001400
 800337c:	48001800 	.word	0x48001800
 8003380:	40010400 	.word	0x40010400

08003384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
 8003390:	4613      	mov	r3, r2
 8003392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4013      	ands	r3, r2
 80033cc:	041a      	lsls	r2, r3, #16
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43d9      	mvns	r1, r3
 80033d2:	887b      	ldrh	r3, [r7, #2]
 80033d4:	400b      	ands	r3, r1
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	619a      	str	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033f2:	4b08      	ldr	r3, [pc, #32]	@ (8003414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033fe:	4a05      	ldr	r2, [pc, #20]	@ (8003414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd fe1a 	bl	8001040 <HAL_GPIO_EXTI_Callback>
  }
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40010400 	.word	0x40010400

08003418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e08d      	b.n	8003546 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe fe1c 	bl	800207c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	@ 0x24
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003468:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003478:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d107      	bne.n	8003492 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	e006      	b.n	80034a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800349e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d108      	bne.n	80034ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	e007      	b.n	80034ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69d9      	ldr	r1, [r3, #28]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	d138      	bne.n	80035d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800356e:	2302      	movs	r3, #2
 8003570:	e032      	b.n	80035d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2224      	movs	r2, #36	@ 0x24
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d139      	bne.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003604:	2302      	movs	r3, #2
 8003606:	e033      	b.n	8003670 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	@ 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003636:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af02      	add	r7, sp, #8
 8003682:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e101      	b.n	8003892 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f008 f9a0 	bl	800b9e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2203      	movs	r2, #3
 80036ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 fde1 	bl	8008282 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7c1a      	ldrb	r2, [r3, #16]
 80036c8:	f88d 2000 	strb.w	r2, [sp]
 80036cc:	3304      	adds	r3, #4
 80036ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d0:	f004 fcfd 	bl	80080ce <USB_CoreInit>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0d5      	b.n	8003892 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f004 fdd9 	bl	80082a4 <USB_SetCurrentMode>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0c6      	b.n	8003892 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	e04a      	b.n	80037a0 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3315      	adds	r3, #21
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3314      	adds	r3, #20
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	b298      	uxth	r0, r3
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	332e      	adds	r3, #46	@ 0x2e
 8003746:	4602      	mov	r2, r0
 8003748:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3318      	adds	r3, #24
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	331c      	adds	r3, #28
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3320      	adds	r3, #32
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3324      	adds	r3, #36	@ 0x24
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	3301      	adds	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	791b      	ldrb	r3, [r3, #4]
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3af      	bcc.n	800370a <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	e044      	b.n	800383a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	3301      	adds	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	791b      	ldrb	r3, [r3, #4]
 800383e:	7bfa      	ldrb	r2, [r7, #15]
 8003840:	429a      	cmp	r2, r3
 8003842:	d3b5      	bcc.n	80037b0 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7c1a      	ldrb	r2, [r3, #16]
 800384c:	f88d 2000 	strb.w	r2, [sp]
 8003850:	3304      	adds	r3, #4
 8003852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003854:	f004 fd72 	bl	800833c <USB_DevInit>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e013      	b.n	8003892 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7b1b      	ldrb	r3, [r3, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d102      	bne.n	8003886 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f001 f86d 	bl	8004960 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f005 fd29 	bl	80092e2 <USB_DevDisconnect>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_PCD_Start+0x1c>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e01c      	b.n	80038f0 <HAL_PCD_Start+0x56>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7b5b      	ldrb	r3, [r3, #13]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f004 fcc2 	bl	8008260 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f005 fcdd 	bl	80092a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b08d      	sub	sp, #52	@ 0x34
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f005 fd9b 	bl	800944a <USB_GetMode>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 8481 	bne.w	800421e <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f005 fcff 	bl	8009324 <USB_ReadInterrupts>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8477 	beq.w	800421c <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f005 fcec 	bl	8009324 <USB_ReadInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d107      	bne.n	8003966 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f002 0202 	and.w	r2, r2, #2
 8003964:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f005 fcda 	bl	8009324 <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b10      	cmp	r3, #16
 8003978:	d161      	bne.n	8003a3e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0210 	bic.w	r2, r2, #16
 8003988:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80039b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039b4:	d124      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d035      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	6a38      	ldr	r0, [r7, #32]
 80039d6:	f005 fb11 	bl	8008ffc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e6:	441a      	add	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039f8:	441a      	add	r2, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	615a      	str	r2, [r3, #20]
 80039fe:	e016      	b.n	8003a2e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003a06:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a0a:	d110      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a12:	2208      	movs	r2, #8
 8003a14:	4619      	mov	r1, r3
 8003a16:	6a38      	ldr	r0, [r7, #32]
 8003a18:	f005 faf0 	bl	8008ffc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a28:	441a      	add	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0210 	orr.w	r2, r2, #16
 8003a3c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f005 fc6e 	bl	8009324 <USB_ReadInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a52:	f040 80a7 	bne.w	8003ba4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f005 fc73 	bl	800934a <USB_ReadDevAllOutEpInterrupt>
 8003a64:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003a66:	e099      	b.n	8003b9c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 808e 	beq.w	8003b90 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f005 fc97 	bl	80093b2 <USB_ReadDevOutEPInterrupt>
 8003a84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00c      	beq.n	8003aaa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fe81 	bl	80047ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ac6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 febd 	bl	8004848 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2310      	movs	r3, #16
 8003ae8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d030      	beq.n	8003b56 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afc:	2b80      	cmp	r3, #128	@ 0x80
 8003afe:	d109      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b12:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	3304      	adds	r3, #4
 8003b28:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	78db      	ldrb	r3, [r3, #3]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d108      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f008 f8a6 	bl	800bc90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	2302      	movs	r3, #2
 8003b54:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2320      	movs	r3, #32
 8003b70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b8e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	3301      	adds	r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f47f af62 	bne.w	8003a68 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f005 fbbb 	bl	8009324 <USB_ReadInterrupts>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bb8:	f040 80a4 	bne.w	8003d04 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f005 fbdc 	bl	800937e <USB_ReadDevAllInEpInterrupt>
 8003bc6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003bcc:	e096      	b.n	8003cfc <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 808b 	beq.w	8003cf0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f005 fc02 	bl	80093ee <USB_ReadDevInEPInterrupt>
 8003bea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d020      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69f9      	ldr	r1, [r7, #28]
 8003c12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c16:	4013      	ands	r3, r2
 8003c18:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c26:	461a      	mov	r2, r3
 8003c28:	2301      	movs	r3, #1
 8003c2a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f007 ff97 	bl	800bb66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2308      	movs	r3, #8
 8003c52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c86:	461a      	mov	r2, r3
 8003c88:	2340      	movs	r3, #64	@ 0x40
 8003c8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d023      	beq.n	8003cde <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c98:	6a38      	ldr	r0, [r7, #32]
 8003c9a:	f004 fc97 	bl	80085cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	3310      	adds	r3, #16
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	3304      	adds	r3, #4
 8003cb0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	78db      	ldrb	r3, [r3, #3]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d108      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f007 fff4 	bl	800bcb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2302      	movs	r3, #2
 8003cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ce8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fcd6 	bl	800469c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f47f af65 	bne.w	8003bce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f005 fb0b 	bl	8009324 <USB_ReadInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d18:	d122      	bne.n	8003d60 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d108      	bne.n	8003d4a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d40:	2100      	movs	r1, #0
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f008 fa28 	bl	800c198 <HAL_PCDEx_LPM_Callback>
 8003d48:	e002      	b.n	8003d50 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f007 ff78 	bl	800bc40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f005 fadd 	bl	8009324 <USB_ReadInterrupts>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d74:	d112      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f007 ff34 	bl	800bbf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f005 fabf 	bl	8009324 <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003db0:	d121      	bne.n	8003df6 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003dc0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d111      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	f003 020f 	and.w	r2, r3, #15
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003de6:	2101      	movs	r1, #1
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f008 f9d5 	bl	800c198 <HAL_PCDEx_LPM_Callback>
 8003dee:	e002      	b.n	8003df6 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f007 feff 	bl	800bbf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f005 fa92 	bl	8009324 <USB_ReadInterrupts>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e0a:	f040 80b6 	bne.w	8003f7a <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2110      	movs	r1, #16
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f004 fbcf 	bl	80085cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e32:	e046      	b.n	8003ec2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e40:	461a      	mov	r2, r3
 8003e42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e74:	461a      	mov	r2, r3
 8003e76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003eb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003eba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	791b      	ldrb	r3, [r3, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d3b2      	bcc.n	8003e34 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003edc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ee0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7bdb      	ldrb	r3, [r3, #15]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003efa:	f043 030b 	orr.w	r3, r3, #11
 8003efe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f10:	f043 030b 	orr.w	r3, r3, #11
 8003f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f16:	e015      	b.n	8003f44 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f2a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003f2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f3e:	f043 030b 	orr.w	r3, r3, #11
 8003f42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f005 faa1 	bl	80094ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f005 f9d0 	bl	8009324 <USB_ReadInterrupts>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f8e:	d123      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f005 fa66 	bl	8009466 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 fb8d 	bl	80086be <USB_GetDevSpeed>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681c      	ldr	r4, [r3, #0]
 8003fb0:	f001 fad4 	bl	800555c <HAL_RCC_GetHCLKFreq>
 8003fb4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f004 f8b3 	bl	8008128 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f007 fdf7 	bl	800bbb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f005 f9a1 	bl	8009324 <USB_ReadInterrupts>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d10a      	bne.n	8004002 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f007 fdd4 	bl	800bb9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f002 0208 	and.w	r2, r2, #8
 8004000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f005 f98c 	bl	8009324 <USB_ReadInterrupts>
 800400c:	4603      	mov	r3, r0
 800400e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004012:	2b80      	cmp	r3, #128	@ 0x80
 8004014:	d123      	bne.n	800405e <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004022:	2301      	movs	r3, #1
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
 8004026:	e014      	b.n	8004052 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d105      	bne.n	800404c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	b2db      	uxtb	r3, r3
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 faf7 	bl	800463a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	3301      	adds	r3, #1
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	791b      	ldrb	r3, [r3, #4]
 8004056:	461a      	mov	r2, r3
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	4293      	cmp	r3, r2
 800405c:	d3e4      	bcc.n	8004028 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f005 f95e 	bl	8009324 <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800406e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004072:	d13c      	bne.n	80040ee <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004074:	2301      	movs	r3, #1
 8004076:	627b      	str	r3, [r7, #36]	@ 0x24
 8004078:	e02b      	b.n	80040d2 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3318      	adds	r3, #24
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d115      	bne.n	80040cc <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	da12      	bge.n	80040cc <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	3317      	adds	r3, #23
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fab7 	bl	800463a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	3301      	adds	r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	791b      	ldrb	r3, [r3, #4]
 80040d6:	461a      	mov	r2, r3
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	4293      	cmp	r3, r2
 80040dc:	d3cd      	bcc.n	800407a <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80040ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f005 f916 	bl	8009324 <USB_ReadInterrupts>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004102:	d156      	bne.n	80041b2 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004104:	2301      	movs	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
 8004108:	e045      	b.n	8004196 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d12e      	bne.n	8004190 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004132:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004134:	2b00      	cmp	r3, #0
 8004136:	da2b      	bge.n	8004190 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004144:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004148:	429a      	cmp	r2, r3
 800414a:	d121      	bne.n	8004190 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004188:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800418c:	6053      	str	r3, [r2, #4]
            break;
 800418e:	e008      	b.n	80041a2 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	3301      	adds	r3, #1
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	791b      	ldrb	r3, [r3, #4]
 800419a:	461a      	mov	r2, r3
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	4293      	cmp	r3, r2
 80041a0:	d3b3      	bcc.n	800410a <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80041b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f005 f8b4 	bl	8009324 <USB_ReadInterrupts>
 80041bc:	4603      	mov	r3, r0
 80041be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c6:	d10a      	bne.n	80041de <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f007 fd85 	bl	800bcd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80041dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f005 f89e 	bl	8009324 <USB_ReadInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d115      	bne.n	800421e <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f007 fd75 	bl	800bcf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	e000      	b.n	800421e <HAL_PCD_IRQHandler+0x926>
      return;
 800421c:	bf00      	nop
    }
  }
}
 800421e:	3734      	adds	r7, #52	@ 0x34
 8004220:	46bd      	mov	sp, r7
 8004222:	bd90      	pop	{r4, r7, pc}

08004224 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_PCD_SetAddress+0x1a>
 800423a:	2302      	movs	r3, #2
 800423c:	e012      	b.n	8004264 <HAL_PCD_SetAddress+0x40>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f004 fffd 	bl	8009254 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	70fb      	strb	r3, [r7, #3]
 800427e:	460b      	mov	r3, r1
 8004280:	803b      	strh	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800428a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800428e:	2b00      	cmp	r3, #0
 8004290:	da0f      	bge.n	80042b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	3310      	adds	r3, #16
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	3304      	adds	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	705a      	strb	r2, [r3, #1]
 80042b0:	e00f      	b.n	80042d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 020f 	and.w	r2, r3, #15
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	3304      	adds	r3, #4
 80042ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80042de:	883b      	ldrh	r3, [r7, #0]
 80042e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	78ba      	ldrb	r2, [r7, #2]
 80042ec:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	785b      	ldrb	r3, [r3, #1]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004300:	78bb      	ldrb	r3, [r7, #2]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d102      	bne.n	800430c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_PCD_EP_Open+0xae>
 8004316:	2302      	movs	r3, #2
 8004318:	e00e      	b.n	8004338 <HAL_PCD_EP_Open+0xcc>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	4618      	mov	r0, r3
 800432a:	f004 f9e7 	bl	80086fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004336:	7afb      	ldrb	r3, [r7, #11]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800434c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004350:	2b00      	cmp	r3, #0
 8004352:	da0f      	bge.n	8004374 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 020f 	and.w	r2, r3, #15
 800435a:	4613      	mov	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	3310      	adds	r3, #16
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	705a      	strb	r2, [r3, #1]
 8004372:	e00f      	b.n	8004394 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 020f 	and.w	r2, r3, #15
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	3304      	adds	r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	b2da      	uxtb	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_PCD_EP_Close+0x6e>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e00e      	b.n	80043cc <HAL_PCD_EP_Close+0x8c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	4618      	mov	r0, r3
 80043be:	f004 fa25 	bl	800880c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	460b      	mov	r3, r1
 80043e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e4:	7afb      	ldrb	r3, [r7, #11]
 80043e6:	f003 020f 	and.w	r2, r3, #15
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	3304      	adds	r3, #4
 80043fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2200      	movs	r2, #0
 8004414:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	b2da      	uxtb	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6979      	ldr	r1, [r7, #20]
 8004428:	4618      	mov	r0, r3
 800442a:	f004 facb 	bl	80089c4 <USB_EPStartXfer>

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	f003 020f 	and.w	r2, r3, #15
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	460b      	mov	r3, r1
 8004476:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004478:	7afb      	ldrb	r3, [r7, #11]
 800447a:	f003 020f 	and.w	r2, r3, #15
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	3310      	adds	r3, #16
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	3304      	adds	r3, #4
 800448e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2200      	movs	r2, #0
 80044a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2201      	movs	r2, #1
 80044a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a8:	7afb      	ldrb	r3, [r7, #11]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6979      	ldr	r1, [r7, #20]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f004 fa82 	bl	80089c4 <USB_EPStartXfer>

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	7912      	ldrb	r2, [r2, #4]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e04e      	b.n	8004586 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	da0f      	bge.n	8004510 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 020f 	and.w	r2, r3, #15
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	3310      	adds	r3, #16
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	705a      	strb	r2, [r3, #1]
 800450e:	e00d      	b.n	800452c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	4613      	mov	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	3304      	adds	r3, #4
 8004524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_PCD_EP_SetStall+0x82>
 8004548:	2302      	movs	r3, #2
 800454a:	e01c      	b.n	8004586 <HAL_PCD_EP_SetStall+0xbc>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68f9      	ldr	r1, [r7, #12]
 800455a:	4618      	mov	r0, r3
 800455c:	f004 fda6 	bl	80090ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f004 ff98 	bl	80094ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	7912      	ldrb	r2, [r2, #4]
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e042      	b.n	8004632 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	da0f      	bge.n	80045d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	f003 020f 	and.w	r2, r3, #15
 80045ba:	4613      	mov	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	3310      	adds	r3, #16
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	3304      	adds	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	705a      	strb	r2, [r3, #1]
 80045d2:	e00f      	b.n	80045f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	f003 020f 	and.w	r2, r3, #15
 80045da:	4613      	mov	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	3304      	adds	r3, #4
 80045ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_PCD_EP_ClrStall+0x86>
 8004610:	2302      	movs	r3, #2
 8004612:	e00e      	b.n	8004632 <HAL_PCD_EP_ClrStall+0xa4>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68f9      	ldr	r1, [r7, #12]
 8004622:	4618      	mov	r0, r3
 8004624:	f004 fdb0 	bl	8009188 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800464a:	2b00      	cmp	r3, #0
 800464c:	da0c      	bge.n	8004668 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	3310      	adds	r3, #16
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	3304      	adds	r3, #4
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e00c      	b.n	8004682 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	f003 020f 	and.w	r2, r3, #15
 800466e:	4613      	mov	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	3304      	adds	r3, #4
 8004680:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	4618      	mov	r0, r3
 800468a:	f004 fbd3 	bl	8008e34 <USB_EPStopXfer>
 800468e:	4603      	mov	r3, r0
 8004690:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004692:	7afb      	ldrb	r3, [r7, #11]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	3310      	adds	r3, #16
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	3304      	adds	r3, #4
 80046c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d901      	bls.n	80046d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e067      	b.n	80047a4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d902      	bls.n	80046f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3303      	adds	r3, #3
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046f8:	e026      	b.n	8004748 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	429a      	cmp	r2, r3
 800470e:	d902      	bls.n	8004716 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3303      	adds	r3, #3
 800471a:	089b      	lsrs	r3, r3, #2
 800471c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	68d9      	ldr	r1, [r3, #12]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	b29b      	uxth	r3, r3
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	f004 fc2c 	bl	8008f88 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	441a      	add	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	441a      	add	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	429a      	cmp	r2, r3
 800475c:	d809      	bhi.n	8004772 <PCD_WriteEmptyTxFifo+0xd6>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004766:	429a      	cmp	r2, r3
 8004768:	d203      	bcs.n	8004772 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1c3      	bne.n	80046fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	429a      	cmp	r2, r3
 800477c:	d811      	bhi.n	80047a2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	2201      	movs	r2, #1
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	43db      	mvns	r3, r3
 8004798:	6939      	ldr	r1, [r7, #16]
 800479a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800479e:	4013      	ands	r3, r2
 80047a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	333c      	adds	r3, #60	@ 0x3c
 80047c4:	3304      	adds	r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a19      	ldr	r2, [pc, #100]	@ (8004844 <PCD_EP_OutXfrComplete_int+0x98>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d124      	bne.n	800482c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f8:	461a      	mov	r2, r3
 80047fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047fe:	6093      	str	r3, [r2, #8]
 8004800:	e01a      	b.n	8004838 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004818:	461a      	mov	r2, r3
 800481a:	2320      	movs	r3, #32
 800481c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f007 f983 	bl	800bb30 <HAL_PCD_DataOutStageCallback>
 800482a:	e005      	b.n	8004838 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f007 f97c 	bl	800bb30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	4f54310a 	.word	0x4f54310a

08004848 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	333c      	adds	r3, #60	@ 0x3c
 8004860:	3304      	adds	r3, #4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a0c      	ldr	r2, [pc, #48]	@ (80048ac <PCD_EP_OutSetupPacket_int+0x64>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d90e      	bls.n	800489c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004894:	461a      	mov	r2, r3
 8004896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f007 f935 	bl	800bb0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	4f54300a 	.word	0x4f54300a

080048b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
 80048bc:	4613      	mov	r3, r2
 80048be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048ce:	883b      	ldrh	r3, [r7, #0]
 80048d0:	0419      	lsls	r1, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	430a      	orrs	r2, r1
 80048da:	629a      	str	r2, [r3, #40]	@ 0x28
 80048dc:	e028      	b.n	8004930 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4413      	add	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	e00d      	b.n	800490e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	3340      	adds	r3, #64	@ 0x40
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4413      	add	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	3301      	adds	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	3b01      	subs	r3, #1
 8004914:	429a      	cmp	r2, r3
 8004916:	d3ec      	bcc.n	80048f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004918:	883b      	ldrh	r3, [r7, #0]
 800491a:	0418      	lsls	r0, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	3b01      	subs	r3, #1
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	4302      	orrs	r2, r0
 8004928:	3340      	adds	r3, #64	@ 0x40
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	887a      	ldrh	r2, [r7, #2]
 8004950:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004992:	f043 0303 	orr.w	r3, r3, #3
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049ac:	4b04      	ldr	r3, [pc, #16]	@ (80049c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40007000 	.word	0x40007000

080049c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d2:	d130      	bne.n	8004a36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049d4:	4b23      	ldr	r3, [pc, #140]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e0:	d038      	beq.n	8004a54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049e2:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2232      	movs	r2, #50	@ 0x32
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	0c9b      	lsrs	r3, r3, #18
 8004a04:	3301      	adds	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a08:	e002      	b.n	8004a10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a10:	4b14      	ldr	r3, [pc, #80]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a1c:	d102      	bne.n	8004a24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f2      	bne.n	8004a0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a24:	4b0f      	ldr	r3, [pc, #60]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a30:	d110      	bne.n	8004a54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e00f      	b.n	8004a56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a36:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a42:	d007      	beq.n	8004a54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a44:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a4c:	4a05      	ldr	r2, [pc, #20]	@ (8004a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40007000 	.word	0x40007000
 8004a68:	200000f0 	.word	0x200000f0
 8004a6c:	431bde83 	.word	0x431bde83

08004a70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4a04      	ldr	r2, [pc, #16]	@ (8004a8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a7e:	6053      	str	r3, [r2, #4]
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40007000 	.word	0x40007000

08004a90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e3ca      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aa2:	4b97      	ldr	r3, [pc, #604]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aac:	4b94      	ldr	r3, [pc, #592]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80e4 	beq.w	8004c8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_RCC_OscConfig+0x4a>
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	f040 808b 	bne.w	8004be8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	f040 8087 	bne.w	8004be8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ada:	4b89      	ldr	r3, [pc, #548]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_RCC_OscConfig+0x62>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e3a2      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	4b82      	ldr	r3, [pc, #520]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <HAL_RCC_OscConfig+0x7c>
 8004b02:	4b7f      	ldr	r3, [pc, #508]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b0a:	e005      	b.n	8004b18 <HAL_RCC_OscConfig+0x88>
 8004b0c:	4b7c      	ldr	r3, [pc, #496]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d223      	bcs.n	8004b64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fd53 	bl	80055cc <RCC_SetFlashLatencyFromMSIRange>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e383      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b30:	4b73      	ldr	r3, [pc, #460]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a72      	ldr	r2, [pc, #456]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b36:	f043 0308 	orr.w	r3, r3, #8
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b70      	ldr	r3, [pc, #448]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	496d      	ldr	r1, [pc, #436]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	4968      	ldr	r1, [pc, #416]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]
 8004b62:	e025      	b.n	8004bb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b64:	4b66      	ldr	r3, [pc, #408]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a65      	ldr	r2, [pc, #404]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b6a:	f043 0308 	orr.w	r3, r3, #8
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b63      	ldr	r3, [pc, #396]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4960      	ldr	r1, [pc, #384]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b82:	4b5f      	ldr	r3, [pc, #380]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	495b      	ldr	r1, [pc, #364]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fd13 	bl	80055cc <RCC_SetFlashLatencyFromMSIRange>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e343      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bb0:	f000 fc4a 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b52      	ldr	r3, [pc, #328]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	4950      	ldr	r1, [pc, #320]	@ (8004d04 <HAL_RCC_OscConfig+0x274>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8004d08 <HAL_RCC_OscConfig+0x278>)
 8004bce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8004d0c <HAL_RCC_OscConfig+0x27c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fd feff 	bl	80029d8 <HAL_InitTick>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d052      	beq.n	8004c8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	e327      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d032      	beq.n	8004c56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bf0:	4b43      	ldr	r3, [pc, #268]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a42      	ldr	r2, [pc, #264]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bfc:	f7fd ff3c 	bl	8002a78 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c04:	f7fd ff38 	bl	8002a78 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e310      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c16:	4b3a      	ldr	r3, [pc, #232]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c22:	4b37      	ldr	r3, [pc, #220]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a36      	ldr	r2, [pc, #216]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c28:	f043 0308 	orr.w	r3, r3, #8
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4b34      	ldr	r3, [pc, #208]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	4931      	ldr	r1, [pc, #196]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c40:	4b2f      	ldr	r3, [pc, #188]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	492c      	ldr	r1, [pc, #176]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]
 8004c54:	e01a      	b.n	8004c8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c56:	4b2a      	ldr	r3, [pc, #168]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a29      	ldr	r2, [pc, #164]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c62:	f7fd ff09 	bl	8002a78 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c6a:	f7fd ff05 	bl	8002a78 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e2dd      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c7c:	4b20      	ldr	r3, [pc, #128]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <HAL_RCC_OscConfig+0x1da>
 8004c88:	e000      	b.n	8004c8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d074      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d005      	beq.n	8004caa <HAL_RCC_OscConfig+0x21a>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d10e      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004caa:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d064      	beq.n	8004d80 <HAL_RCC_OscConfig+0x2f0>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d160      	bne.n	8004d80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e2ba      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x24a>
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e026      	b.n	8004d28 <HAL_RCC_OscConfig+0x298>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce2:	d115      	bne.n	8004d10 <HAL_RCC_OscConfig+0x280>
 8004ce4:	4b06      	ldr	r3, [pc, #24]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a05      	ldr	r2, [pc, #20]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004cea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	4b03      	ldr	r3, [pc, #12]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a02      	ldr	r2, [pc, #8]	@ (8004d00 <HAL_RCC_OscConfig+0x270>)
 8004cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e014      	b.n	8004d28 <HAL_RCC_OscConfig+0x298>
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000
 8004d04:	080103ac 	.word	0x080103ac
 8004d08:	200000f0 	.word	0x200000f0
 8004d0c:	200000f4 	.word	0x200000f4
 8004d10:	4ba0      	ldr	r3, [pc, #640]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a9f      	ldr	r2, [pc, #636]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	4b9d      	ldr	r3, [pc, #628]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a9c      	ldr	r2, [pc, #624]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d013      	beq.n	8004d58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fd fea2 	bl	8002a78 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d38:	f7fd fe9e 	bl	8002a78 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	@ 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e276      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d4a:	4b92      	ldr	r3, [pc, #584]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x2a8>
 8004d56:	e014      	b.n	8004d82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd fe8e 	bl	8002a78 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d60:	f7fd fe8a 	bl	8002a78 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b64      	cmp	r3, #100	@ 0x64
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e262      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d72:	4b88      	ldr	r3, [pc, #544]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x2d0>
 8004d7e:	e000      	b.n	8004d82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d060      	beq.n	8004e50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_OscConfig+0x310>
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d119      	bne.n	8004dce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d116      	bne.n	8004dce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da0:	4b7c      	ldr	r3, [pc, #496]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_OscConfig+0x328>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e23f      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db8:	4b76      	ldr	r3, [pc, #472]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	4973      	ldr	r1, [pc, #460]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dcc:	e040      	b.n	8004e50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d023      	beq.n	8004e1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd6:	4b6f      	ldr	r3, [pc, #444]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6e      	ldr	r2, [pc, #440]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7fd fe49 	bl	8002a78 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dea:	f7fd fe45 	bl	8002a78 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e21d      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dfc:	4b65      	ldr	r3, [pc, #404]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e08:	4b62      	ldr	r3, [pc, #392]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	495f      	ldr	r1, [pc, #380]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]
 8004e1c:	e018      	b.n	8004e50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a5c      	ldr	r2, [pc, #368]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2a:	f7fd fe25 	bl	8002a78 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e32:	f7fd fe21 	bl	8002a78 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e1f9      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e44:	4b53      	ldr	r3, [pc, #332]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f0      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d03c      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01c      	beq.n	8004e9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e64:	4b4b      	ldr	r3, [pc, #300]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7fd fe00 	bl	8002a78 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7c:	f7fd fdfc 	bl	8002a78 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e1d4      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e8e:	4b41      	ldr	r3, [pc, #260]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0ef      	beq.n	8004e7c <HAL_RCC_OscConfig+0x3ec>
 8004e9c:	e01b      	b.n	8004ed6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fd fde3 	bl	8002a78 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7fd fddf 	bl	8002a78 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e1b7      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ec8:	4b32      	ldr	r3, [pc, #200]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1ef      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80a6 	beq.w	8005030 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10d      	bne.n	8004f10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef4:	4b27      	ldr	r3, [pc, #156]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef8:	4a26      	ldr	r2, [pc, #152]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f00:	4b24      	ldr	r3, [pc, #144]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f10:	4b21      	ldr	r3, [pc, #132]	@ (8004f98 <HAL_RCC_OscConfig+0x508>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d118      	bne.n	8004f4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <HAL_RCC_OscConfig+0x508>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1d      	ldr	r2, [pc, #116]	@ (8004f98 <HAL_RCC_OscConfig+0x508>)
 8004f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f28:	f7fd fda6 	bl	8002a78 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f30:	f7fd fda2 	bl	8002a78 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e17a      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f42:	4b15      	ldr	r3, [pc, #84]	@ (8004f98 <HAL_RCC_OscConfig+0x508>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d108      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4d8>
 8004f56:	4b0f      	ldr	r3, [pc, #60]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f66:	e029      	b.n	8004fbc <HAL_RCC_OscConfig+0x52c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b05      	cmp	r3, #5
 8004f6e:	d115      	bne.n	8004f9c <HAL_RCC_OscConfig+0x50c>
 8004f70:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f76:	4a07      	ldr	r2, [pc, #28]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004f78:	f043 0304 	orr.w	r3, r3, #4
 8004f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f80:	4b04      	ldr	r3, [pc, #16]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f86:	4a03      	ldr	r2, [pc, #12]	@ (8004f94 <HAL_RCC_OscConfig+0x504>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f90:	e014      	b.n	8004fbc <HAL_RCC_OscConfig+0x52c>
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40007000 	.word	0x40007000
 8004f9c:	4b9c      	ldr	r3, [pc, #624]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	4a9b      	ldr	r2, [pc, #620]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fac:	4b98      	ldr	r3, [pc, #608]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb2:	4a97      	ldr	r2, [pc, #604]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8004fb4:	f023 0304 	bic.w	r3, r3, #4
 8004fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d016      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7fd fd58 	bl	8002a78 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fd fd54 	bl	8002a78 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e12a      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe2:	4b8b      	ldr	r3, [pc, #556]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ed      	beq.n	8004fcc <HAL_RCC_OscConfig+0x53c>
 8004ff0:	e015      	b.n	800501e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff2:	f7fd fd41 	bl	8002a78 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ff8:	e00a      	b.n	8005010 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffa:	f7fd fd3d 	bl	8002a78 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005008:	4293      	cmp	r3, r2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e113      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005010:	4b7f      	ldr	r3, [pc, #508]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1ed      	bne.n	8004ffa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005024:	4b7a      	ldr	r3, [pc, #488]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005028:	4a79      	ldr	r2, [pc, #484]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800502e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80fe 	beq.w	8005236 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	2b02      	cmp	r3, #2
 8005040:	f040 80d0 	bne.w	80051e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005044:	4b72      	ldr	r3, [pc, #456]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 0203 	and.w	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	429a      	cmp	r2, r3
 8005056:	d130      	bne.n	80050ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	3b01      	subs	r3, #1
 8005064:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d127      	bne.n	80050ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005074:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d11f      	bne.n	80050ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005084:	2a07      	cmp	r2, #7
 8005086:	bf14      	ite	ne
 8005088:	2201      	movne	r2, #1
 800508a:	2200      	moveq	r2, #0
 800508c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800508e:	4293      	cmp	r3, r2
 8005090:	d113      	bne.n	80050ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	3b01      	subs	r3, #1
 80050a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d109      	bne.n	80050ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	3b01      	subs	r3, #1
 80050b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d06e      	beq.n	8005198 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d069      	beq.n	8005194 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050c0:	4b53      	ldr	r3, [pc, #332]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050cc:	4b50      	ldr	r3, [pc, #320]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0ad      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80050e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050e8:	f7fd fcc6 	bl	8002a78 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f0:	f7fd fcc2 	bl	8002a78 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e09a      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005102:	4b43      	ldr	r3, [pc, #268]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800510e:	4b40      	ldr	r3, [pc, #256]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	4b40      	ldr	r3, [pc, #256]	@ (8005214 <HAL_RCC_OscConfig+0x784>)
 8005114:	4013      	ands	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800511e:	3a01      	subs	r2, #1
 8005120:	0112      	lsls	r2, r2, #4
 8005122:	4311      	orrs	r1, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005128:	0212      	lsls	r2, r2, #8
 800512a:	4311      	orrs	r1, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005130:	0852      	lsrs	r2, r2, #1
 8005132:	3a01      	subs	r2, #1
 8005134:	0552      	lsls	r2, r2, #21
 8005136:	4311      	orrs	r1, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800513c:	0852      	lsrs	r2, r2, #1
 800513e:	3a01      	subs	r2, #1
 8005140:	0652      	lsls	r2, r2, #25
 8005142:	4311      	orrs	r1, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005148:	0912      	lsrs	r2, r2, #4
 800514a:	0452      	lsls	r2, r2, #17
 800514c:	430a      	orrs	r2, r1
 800514e:	4930      	ldr	r1, [pc, #192]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005150:	4313      	orrs	r3, r2
 8005152:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005154:	4b2e      	ldr	r3, [pc, #184]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2d      	ldr	r2, [pc, #180]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 800515a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800515e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005160:	4b2b      	ldr	r3, [pc, #172]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a2a      	ldr	r2, [pc, #168]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800516a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800516c:	f7fd fc84 	bl	8002a78 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005174:	f7fd fc80 	bl	8002a78 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e058      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005186:	4b22      	ldr	r3, [pc, #136]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005192:	e050      	b.n	8005236 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e04f      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005198:	4b1d      	ldr	r3, [pc, #116]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d148      	bne.n	8005236 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a19      	ldr	r2, [pc, #100]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80051aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051b0:	4b17      	ldr	r3, [pc, #92]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4a16      	ldr	r2, [pc, #88]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80051b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051bc:	f7fd fc5c 	bl	8002a78 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c4:	f7fd fc58 	bl	8002a78 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e030      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0x734>
 80051e2:	e028      	b.n	8005236 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b0c      	cmp	r3, #12
 80051e8:	d023      	beq.n	8005232 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ea:	4b09      	ldr	r3, [pc, #36]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a08      	ldr	r2, [pc, #32]	@ (8005210 <HAL_RCC_OscConfig+0x780>)
 80051f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f6:	f7fd fc3f 	bl	8002a78 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051fc:	e00c      	b.n	8005218 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fe:	f7fd fc3b 	bl	8002a78 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d905      	bls.n	8005218 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e013      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
 8005210:	40021000 	.word	0x40021000
 8005214:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005218:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <HAL_RCC_OscConfig+0x7b0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1ec      	bne.n	80051fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005224:	4b06      	ldr	r3, [pc, #24]	@ (8005240 <HAL_RCC_OscConfig+0x7b0>)
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	4905      	ldr	r1, [pc, #20]	@ (8005240 <HAL_RCC_OscConfig+0x7b0>)
 800522a:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <HAL_RCC_OscConfig+0x7b4>)
 800522c:	4013      	ands	r3, r2
 800522e:	60cb      	str	r3, [r1, #12]
 8005230:	e001      	b.n	8005236 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40021000 	.word	0x40021000
 8005244:	feeefffc 	.word	0xfeeefffc

08005248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0e7      	b.n	800542c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800525c:	4b75      	ldr	r3, [pc, #468]	@ (8005434 <HAL_RCC_ClockConfig+0x1ec>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d910      	bls.n	800528c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526a:	4b72      	ldr	r3, [pc, #456]	@ (8005434 <HAL_RCC_ClockConfig+0x1ec>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f023 0207 	bic.w	r2, r3, #7
 8005272:	4970      	ldr	r1, [pc, #448]	@ (8005434 <HAL_RCC_ClockConfig+0x1ec>)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	4313      	orrs	r3, r2
 8005278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	4b6e      	ldr	r3, [pc, #440]	@ (8005434 <HAL_RCC_ClockConfig+0x1ec>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0cf      	b.n	800542c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	4b66      	ldr	r3, [pc, #408]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d908      	bls.n	80052ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a8:	4b63      	ldr	r3, [pc, #396]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	4960      	ldr	r1, [pc, #384]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d04c      	beq.n	8005360 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d121      	bne.n	800531e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e0a6      	b.n	800542c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e6:	4b54      	ldr	r3, [pc, #336]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d115      	bne.n	800531e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e09a      	b.n	800542c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e08e      	b.n	800542c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800530e:	4b4a      	ldr	r3, [pc, #296]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e086      	b.n	800542c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800531e:	4b46      	ldr	r3, [pc, #280]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f023 0203 	bic.w	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4943      	ldr	r1, [pc, #268]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 800532c:	4313      	orrs	r3, r2
 800532e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fd fba2 	bl	8002a78 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	e00a      	b.n	800534e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005338:	f7fd fb9e 	bl	8002a78 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e06e      	b.n	800542c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	4b3a      	ldr	r3, [pc, #232]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 020c 	and.w	r2, r3, #12
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	429a      	cmp	r2, r3
 800535e:	d1eb      	bne.n	8005338 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	4b31      	ldr	r3, [pc, #196]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005378:	429a      	cmp	r2, r3
 800537a:	d208      	bcs.n	800538e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537c:	4b2e      	ldr	r3, [pc, #184]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	492b      	ldr	r1, [pc, #172]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800538e:	4b29      	ldr	r3, [pc, #164]	@ (8005434 <HAL_RCC_ClockConfig+0x1ec>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d210      	bcs.n	80053be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539c:	4b25      	ldr	r3, [pc, #148]	@ (8005434 <HAL_RCC_ClockConfig+0x1ec>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f023 0207 	bic.w	r2, r3, #7
 80053a4:	4923      	ldr	r1, [pc, #140]	@ (8005434 <HAL_RCC_ClockConfig+0x1ec>)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ac:	4b21      	ldr	r3, [pc, #132]	@ (8005434 <HAL_RCC_ClockConfig+0x1ec>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d001      	beq.n	80053be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e036      	b.n	800542c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4918      	ldr	r1, [pc, #96]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053e8:	4b13      	ldr	r3, [pc, #76]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4910      	ldr	r1, [pc, #64]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053fc:	f000 f824 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b0d      	ldr	r3, [pc, #52]	@ (8005438 <HAL_RCC_ClockConfig+0x1f0>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	490b      	ldr	r1, [pc, #44]	@ (800543c <HAL_RCC_ClockConfig+0x1f4>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	4a09      	ldr	r2, [pc, #36]	@ (8005440 <HAL_RCC_ClockConfig+0x1f8>)
 800541a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800541c:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <HAL_RCC_ClockConfig+0x1fc>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7fd fad9 	bl	80029d8 <HAL_InitTick>
 8005426:	4603      	mov	r3, r0
 8005428:	72fb      	strb	r3, [r7, #11]

  return status;
 800542a:	7afb      	ldrb	r3, [r7, #11]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40022000 	.word	0x40022000
 8005438:	40021000 	.word	0x40021000
 800543c:	080103ac 	.word	0x080103ac
 8005440:	200000f0 	.word	0x200000f0
 8005444:	200000f4 	.word	0x200000f4

08005448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005448:	b480      	push	{r7}
 800544a:	b089      	sub	sp, #36	@ 0x24
 800544c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	2300      	movs	r3, #0
 8005454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005456:	4b3e      	ldr	r3, [pc, #248]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x108>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005460:	4b3b      	ldr	r3, [pc, #236]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x108>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_RCC_GetSysClockFreq+0x34>
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d121      	bne.n	80054ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d11e      	bne.n	80054ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800547c:	4b34      	ldr	r3, [pc, #208]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x108>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d107      	bne.n	8005498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005488:	4b31      	ldr	r3, [pc, #196]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x108>)
 800548a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	e005      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005498:	4b2d      	ldr	r3, [pc, #180]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x108>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10d      	bne.n	80054d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054b8:	e00a      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d102      	bne.n	80054c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054c0:	4b25      	ldr	r3, [pc, #148]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x110>)
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	e004      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054cc:	4b22      	ldr	r3, [pc, #136]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x110>)
 80054ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b0c      	cmp	r3, #12
 80054d4:	d134      	bne.n	8005540 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d003      	beq.n	80054ee <HAL_RCC_GetSysClockFreq+0xa6>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d003      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0xac>
 80054ec:	e005      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x110>)
 80054f0:	617b      	str	r3, [r7, #20]
      break;
 80054f2:	e005      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054f4:	4b18      	ldr	r3, [pc, #96]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x110>)
 80054f6:	617b      	str	r3, [r7, #20]
      break;
 80054f8:	e002      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	617b      	str	r3, [r7, #20]
      break;
 80054fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005500:	4b13      	ldr	r3, [pc, #76]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x108>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	091b      	lsrs	r3, r3, #4
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	3301      	adds	r3, #1
 800550c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800550e:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x108>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	fb03 f202 	mul.w	r2, r3, r2
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005526:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x108>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	0e5b      	lsrs	r3, r3, #25
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	3301      	adds	r3, #1
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005540:	69bb      	ldr	r3, [r7, #24]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3724      	adds	r7, #36	@ 0x24
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40021000 	.word	0x40021000
 8005554:	080103c4 	.word	0x080103c4
 8005558:	00f42400 	.word	0x00f42400

0800555c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005560:	4b03      	ldr	r3, [pc, #12]	@ (8005570 <HAL_RCC_GetHCLKFreq+0x14>)
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	200000f0 	.word	0x200000f0

08005574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005578:	f7ff fff0 	bl	800555c <HAL_RCC_GetHCLKFreq>
 800557c:	4602      	mov	r2, r0
 800557e:	4b06      	ldr	r3, [pc, #24]	@ (8005598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4904      	ldr	r1, [pc, #16]	@ (800559c <HAL_RCC_GetPCLK1Freq+0x28>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005594:	4618      	mov	r0, r3
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40021000 	.word	0x40021000
 800559c:	080103bc 	.word	0x080103bc

080055a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055a4:	f7ff ffda 	bl	800555c <HAL_RCC_GetHCLKFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	0adb      	lsrs	r3, r3, #11
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4904      	ldr	r1, [pc, #16]	@ (80055c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	080103bc 	.word	0x080103bc

080055cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055d4:	2300      	movs	r3, #0
 80055d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055e4:	f7ff f9e0 	bl	80049a8 <HAL_PWREx_GetVoltageRange>
 80055e8:	6178      	str	r0, [r7, #20]
 80055ea:	e014      	b.n	8005616 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055ec:	4b25      	ldr	r3, [pc, #148]	@ (8005684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f0:	4a24      	ldr	r2, [pc, #144]	@ (8005684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80055f8:	4b22      	ldr	r3, [pc, #136]	@ (8005684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005604:	f7ff f9d0 	bl	80049a8 <HAL_PWREx_GetVoltageRange>
 8005608:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800560a:	4b1e      	ldr	r3, [pc, #120]	@ (8005684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800560c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560e:	4a1d      	ldr	r2, [pc, #116]	@ (8005684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005614:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800561c:	d10b      	bne.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b80      	cmp	r3, #128	@ 0x80
 8005622:	d919      	bls.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2ba0      	cmp	r3, #160	@ 0xa0
 8005628:	d902      	bls.n	8005630 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800562a:	2302      	movs	r3, #2
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	e013      	b.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005630:	2301      	movs	r3, #1
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	e010      	b.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b80      	cmp	r3, #128	@ 0x80
 800563a:	d902      	bls.n	8005642 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800563c:	2303      	movs	r3, #3
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e00a      	b.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b80      	cmp	r3, #128	@ 0x80
 8005646:	d102      	bne.n	800564e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005648:	2302      	movs	r3, #2
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	e004      	b.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b70      	cmp	r3, #112	@ 0x70
 8005652:	d101      	bne.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005654:	2301      	movs	r3, #1
 8005656:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005658:	4b0b      	ldr	r3, [pc, #44]	@ (8005688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 0207 	bic.w	r2, r3, #7
 8005660:	4909      	ldr	r1, [pc, #36]	@ (8005688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005668:	4b07      	ldr	r3, [pc, #28]	@ (8005688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	429a      	cmp	r2, r3
 8005674:	d001      	beq.n	800567a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40021000 	.word	0x40021000
 8005688:	40022000 	.word	0x40022000

0800568c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005694:	2300      	movs	r3, #0
 8005696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005698:	2300      	movs	r3, #0
 800569a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d041      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056b0:	d02a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056b6:	d824      	bhi.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056bc:	d008      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056c2:	d81e      	bhi.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056cc:	d010      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056ce:	e018      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056d0:	4b86      	ldr	r3, [pc, #536]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4a85      	ldr	r2, [pc, #532]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056dc:	e015      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fabb 	bl	8005c60 <RCCEx_PLLSAI1_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056ee:	e00c      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3320      	adds	r3, #32
 80056f4:	2100      	movs	r1, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fba6 	bl	8005e48 <RCCEx_PLLSAI2_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005700:	e003      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	74fb      	strb	r3, [r7, #19]
      break;
 8005706:	e000      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800570a:	7cfb      	ldrb	r3, [r7, #19]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005710:	4b76      	ldr	r3, [pc, #472]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005716:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800571e:	4973      	ldr	r1, [pc, #460]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005726:	e001      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005728:	7cfb      	ldrb	r3, [r7, #19]
 800572a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d041      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800573c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005740:	d02a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005742:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005746:	d824      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005748:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800574c:	d008      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800574e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005752:	d81e      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800575c:	d010      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800575e:	e018      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005760:	4b62      	ldr	r3, [pc, #392]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a61      	ldr	r2, [pc, #388]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800576c:	e015      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3304      	adds	r3, #4
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fa73 	bl	8005c60 <RCCEx_PLLSAI1_Config>
 800577a:	4603      	mov	r3, r0
 800577c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800577e:	e00c      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3320      	adds	r3, #32
 8005784:	2100      	movs	r1, #0
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fb5e 	bl	8005e48 <RCCEx_PLLSAI2_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005790:	e003      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	74fb      	strb	r3, [r7, #19]
      break;
 8005796:	e000      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10b      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057a0:	4b52      	ldr	r3, [pc, #328]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ae:	494f      	ldr	r1, [pc, #316]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80057b6:	e001      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80a0 	beq.w	800590a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ca:	2300      	movs	r3, #0
 80057cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057ce:	4b47      	ldr	r3, [pc, #284]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00d      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e4:	4b41      	ldr	r3, [pc, #260]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e8:	4a40      	ldr	r2, [pc, #256]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80057f0:	4b3e      	ldr	r3, [pc, #248]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057fc:	2301      	movs	r3, #1
 80057fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005800:	4b3b      	ldr	r3, [pc, #236]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a3a      	ldr	r2, [pc, #232]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800580a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800580c:	f7fd f934 	bl	8002a78 <HAL_GetTick>
 8005810:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005812:	e009      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005814:	f7fd f930 	bl	8002a78 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d902      	bls.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	74fb      	strb	r3, [r7, #19]
        break;
 8005826:	e005      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005828:	4b31      	ldr	r3, [pc, #196]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0ef      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d15c      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800583a:	4b2c      	ldr	r3, [pc, #176]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005844:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01f      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	429a      	cmp	r2, r3
 8005856:	d019      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005858:	4b24      	ldr	r3, [pc, #144]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005862:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005864:	4b21      	ldr	r3, [pc, #132]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586a:	4a20      	ldr	r2, [pc, #128]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005874:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587a:	4a1c      	ldr	r2, [pc, #112]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800587c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005884:	4a19      	ldr	r2, [pc, #100]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d016      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fd f8ef 	bl	8002a78 <HAL_GetTick>
 800589a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800589c:	e00b      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589e:	f7fd f8eb 	bl	8002a78 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d902      	bls.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	74fb      	strb	r3, [r7, #19]
            break;
 80058b4:	e006      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ec      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ca:	4b08      	ldr	r3, [pc, #32]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058da:	4904      	ldr	r1, [pc, #16]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80058e2:	e009      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	74bb      	strb	r3, [r7, #18]
 80058e8:	e006      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	7cfb      	ldrb	r3, [r7, #19]
 80058f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058f8:	7c7b      	ldrb	r3, [r7, #17]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d105      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058fe:	4b9e      	ldr	r3, [pc, #632]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005902:	4a9d      	ldr	r2, [pc, #628]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005908:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005916:	4b98      	ldr	r3, [pc, #608]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591c:	f023 0203 	bic.w	r2, r3, #3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005924:	4994      	ldr	r1, [pc, #592]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005938:	4b8f      	ldr	r3, [pc, #572]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593e:	f023 020c 	bic.w	r2, r3, #12
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	498c      	ldr	r1, [pc, #560]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800595a:	4b87      	ldr	r3, [pc, #540]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005960:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	4983      	ldr	r1, [pc, #524]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800597c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005982:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598a:	497b      	ldr	r1, [pc, #492]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800599e:	4b76      	ldr	r3, [pc, #472]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ac:	4972      	ldr	r1, [pc, #456]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059c0:	4b6d      	ldr	r3, [pc, #436]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ce:	496a      	ldr	r1, [pc, #424]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059e2:	4b65      	ldr	r3, [pc, #404]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f0:	4961      	ldr	r1, [pc, #388]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a04:	4b5c      	ldr	r3, [pc, #368]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a12:	4959      	ldr	r1, [pc, #356]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a26:	4b54      	ldr	r3, [pc, #336]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a34:	4950      	ldr	r1, [pc, #320]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a48:	4b4b      	ldr	r3, [pc, #300]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a56:	4948      	ldr	r1, [pc, #288]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a6a:	4b43      	ldr	r3, [pc, #268]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a78:	493f      	ldr	r1, [pc, #252]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d028      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a9a:	4937      	ldr	r1, [pc, #220]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aaa:	d106      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aac:	4b32      	ldr	r3, [pc, #200]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a31      	ldr	r2, [pc, #196]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ab6:	60d3      	str	r3, [r2, #12]
 8005ab8:	e011      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005abe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ac2:	d10c      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	2101      	movs	r1, #1
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f8c8 	bl	8005c60 <RCCEx_PLLSAI1_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ad4:	7cfb      	ldrb	r3, [r7, #19]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d028      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005aea:	4b23      	ldr	r3, [pc, #140]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af8:	491f      	ldr	r1, [pc, #124]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b08:	d106      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b14:	60d3      	str	r3, [r2, #12]
 8005b16:	e011      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b20:	d10c      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	2101      	movs	r1, #1
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f899 	bl	8005c60 <RCCEx_PLLSAI1_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b38:	7cfb      	ldrb	r3, [r7, #19]
 8005b3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d02b      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b48:	4b0b      	ldr	r3, [pc, #44]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b56:	4908      	ldr	r1, [pc, #32]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b66:	d109      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b68:	4b03      	ldr	r3, [pc, #12]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a02      	ldr	r2, [pc, #8]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b72:	60d3      	str	r3, [r2, #12]
 8005b74:	e014      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005b76:	bf00      	nop
 8005b78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 f867 	bl	8005c60 <RCCEx_PLLSAI1_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b96:	7cfb      	ldrb	r3, [r7, #19]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005b9c:	7cfb      	ldrb	r3, [r7, #19]
 8005b9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d02f      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bac:	4b2b      	ldr	r3, [pc, #172]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bba:	4928      	ldr	r1, [pc, #160]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bca:	d10d      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f844 	bl	8005c60 <RCCEx_PLLSAI1_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bdc:	7cfb      	ldrb	r3, [r7, #19]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d014      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005be2:	7cfb      	ldrb	r3, [r7, #19]
 8005be4:	74bb      	strb	r3, [r7, #18]
 8005be6:	e011      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3320      	adds	r3, #32
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 f925 	bl	8005e48 <RCCEx_PLLSAI2_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c08:	7cfb      	ldrb	r3, [r7, #19]
 8005c0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c18:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c26:	490d      	ldr	r1, [pc, #52]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c3a:	4b08      	ldr	r3, [pc, #32]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4a:	4904      	ldr	r1, [pc, #16]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c52:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40021000 	.word	0x40021000

08005c60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c6e:	4b75      	ldr	r3, [pc, #468]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d018      	beq.n	8005cac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c7a:	4b72      	ldr	r3, [pc, #456]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0203 	and.w	r2, r3, #3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d10d      	bne.n	8005ca6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
       ||
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c92:	4b6c      	ldr	r3, [pc, #432]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
       ||
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d047      	beq.n	8005d36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
 8005caa:	e044      	b.n	8005d36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d018      	beq.n	8005ce6 <RCCEx_PLLSAI1_Config+0x86>
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d825      	bhi.n	8005d04 <RCCEx_PLLSAI1_Config+0xa4>
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d002      	beq.n	8005cc2 <RCCEx_PLLSAI1_Config+0x62>
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d009      	beq.n	8005cd4 <RCCEx_PLLSAI1_Config+0x74>
 8005cc0:	e020      	b.n	8005d04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cc2:	4b60      	ldr	r3, [pc, #384]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d11d      	bne.n	8005d0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd2:	e01a      	b.n	8005d0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d116      	bne.n	8005d0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce4:	e013      	b.n	8005d0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ce6:	4b57      	ldr	r3, [pc, #348]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10f      	bne.n	8005d12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cf2:	4b54      	ldr	r3, [pc, #336]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d02:	e006      	b.n	8005d12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
      break;
 8005d08:	e004      	b.n	8005d14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e002      	b.n	8005d14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e000      	b.n	8005d14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d12:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	4944      	ldr	r1, [pc, #272]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d17d      	bne.n	8005e38 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d3c:	4b41      	ldr	r3, [pc, #260]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a40      	ldr	r2, [pc, #256]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d48:	f7fc fe96 	bl	8002a78 <HAL_GetTick>
 8005d4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d4e:	e009      	b.n	8005d64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d50:	f7fc fe92 	bl	8002a78 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d902      	bls.n	8005d64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	73fb      	strb	r3, [r7, #15]
        break;
 8005d62:	e005      	b.n	8005d70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d64:	4b37      	ldr	r3, [pc, #220]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ef      	bne.n	8005d50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d160      	bne.n	8005e38 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d111      	bne.n	8005da0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d7c:	4b31      	ldr	r3, [pc, #196]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6892      	ldr	r2, [r2, #8]
 8005d8c:	0211      	lsls	r1, r2, #8
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68d2      	ldr	r2, [r2, #12]
 8005d92:	0912      	lsrs	r2, r2, #4
 8005d94:	0452      	lsls	r2, r2, #17
 8005d96:	430a      	orrs	r2, r1
 8005d98:	492a      	ldr	r1, [pc, #168]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	610b      	str	r3, [r1, #16]
 8005d9e:	e027      	b.n	8005df0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d112      	bne.n	8005dcc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005da6:	4b27      	ldr	r3, [pc, #156]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005dae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6892      	ldr	r2, [r2, #8]
 8005db6:	0211      	lsls	r1, r2, #8
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6912      	ldr	r2, [r2, #16]
 8005dbc:	0852      	lsrs	r2, r2, #1
 8005dbe:	3a01      	subs	r2, #1
 8005dc0:	0552      	lsls	r2, r2, #21
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	491f      	ldr	r1, [pc, #124]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	610b      	str	r3, [r1, #16]
 8005dca:	e011      	b.n	8005df0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005dd4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6892      	ldr	r2, [r2, #8]
 8005ddc:	0211      	lsls	r1, r2, #8
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6952      	ldr	r2, [r2, #20]
 8005de2:	0852      	lsrs	r2, r2, #1
 8005de4:	3a01      	subs	r2, #1
 8005de6:	0652      	lsls	r2, r2, #25
 8005de8:	430a      	orrs	r2, r1
 8005dea:	4916      	ldr	r1, [pc, #88]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005df0:	4b14      	ldr	r3, [pc, #80]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a13      	ldr	r2, [pc, #76]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfc:	f7fc fe3c 	bl	8002a78 <HAL_GetTick>
 8005e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e02:	e009      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e04:	f7fc fe38 	bl	8002a78 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d902      	bls.n	8005e18 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	73fb      	strb	r3, [r7, #15]
          break;
 8005e16:	e005      	b.n	8005e24 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e18:	4b0a      	ldr	r3, [pc, #40]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0ef      	beq.n	8005e04 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e2a:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2c:	691a      	ldr	r2, [r3, #16]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	4904      	ldr	r1, [pc, #16]	@ (8005e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40021000 	.word	0x40021000

08005e48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e56:	4b6a      	ldr	r3, [pc, #424]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d018      	beq.n	8005e94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e62:	4b67      	ldr	r3, [pc, #412]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0203 	and.w	r2, r3, #3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d10d      	bne.n	8005e8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
       ||
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e7a:	4b61      	ldr	r3, [pc, #388]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
       ||
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d047      	beq.n	8005f1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
 8005e92:	e044      	b.n	8005f1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d018      	beq.n	8005ece <RCCEx_PLLSAI2_Config+0x86>
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d825      	bhi.n	8005eec <RCCEx_PLLSAI2_Config+0xa4>
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d002      	beq.n	8005eaa <RCCEx_PLLSAI2_Config+0x62>
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d009      	beq.n	8005ebc <RCCEx_PLLSAI2_Config+0x74>
 8005ea8:	e020      	b.n	8005eec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eaa:	4b55      	ldr	r3, [pc, #340]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d11d      	bne.n	8005ef2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eba:	e01a      	b.n	8005ef2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ebc:	4b50      	ldr	r3, [pc, #320]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d116      	bne.n	8005ef6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ecc:	e013      	b.n	8005ef6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ece:	4b4c      	ldr	r3, [pc, #304]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10f      	bne.n	8005efa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005eda:	4b49      	ldr	r3, [pc, #292]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eea:	e006      	b.n	8005efa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef0:	e004      	b.n	8005efc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ef2:	bf00      	nop
 8005ef4:	e002      	b.n	8005efc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ef6:	bf00      	nop
 8005ef8:	e000      	b.n	8005efc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005efa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10d      	bne.n	8005f1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f02:	4b3f      	ldr	r3, [pc, #252]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6819      	ldr	r1, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	430b      	orrs	r3, r1
 8005f18:	4939      	ldr	r1, [pc, #228]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d167      	bne.n	8005ff4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f24:	4b36      	ldr	r3, [pc, #216]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a35      	ldr	r2, [pc, #212]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f30:	f7fc fda2 	bl	8002a78 <HAL_GetTick>
 8005f34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f36:	e009      	b.n	8005f4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f38:	f7fc fd9e 	bl	8002a78 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d902      	bls.n	8005f4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	73fb      	strb	r3, [r7, #15]
        break;
 8005f4a:	e005      	b.n	8005f58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1ef      	bne.n	8005f38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d14a      	bne.n	8005ff4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d111      	bne.n	8005f88 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f64:	4b26      	ldr	r3, [pc, #152]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6892      	ldr	r2, [r2, #8]
 8005f74:	0211      	lsls	r1, r2, #8
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	68d2      	ldr	r2, [r2, #12]
 8005f7a:	0912      	lsrs	r2, r2, #4
 8005f7c:	0452      	lsls	r2, r2, #17
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	491f      	ldr	r1, [pc, #124]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	614b      	str	r3, [r1, #20]
 8005f86:	e011      	b.n	8005fac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f88:	4b1d      	ldr	r3, [pc, #116]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005f90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6892      	ldr	r2, [r2, #8]
 8005f98:	0211      	lsls	r1, r2, #8
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6912      	ldr	r2, [r2, #16]
 8005f9e:	0852      	lsrs	r2, r2, #1
 8005fa0:	3a01      	subs	r2, #1
 8005fa2:	0652      	lsls	r2, r2, #25
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	4916      	ldr	r1, [pc, #88]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fac:	4b14      	ldr	r3, [pc, #80]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb8:	f7fc fd5e 	bl	8002a78 <HAL_GetTick>
 8005fbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fbe:	e009      	b.n	8005fd4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fc0:	f7fc fd5a 	bl	8002a78 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d902      	bls.n	8005fd4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	73fb      	strb	r3, [r7, #15]
          break;
 8005fd2:	e005      	b.n	8005fe0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0ef      	beq.n	8005fc0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fe6:	4b06      	ldr	r3, [pc, #24]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe8:	695a      	ldr	r2, [r3, #20]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	4904      	ldr	r1, [pc, #16]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40021000 	.word	0x40021000

08006004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e049      	b.n	80060aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fc f884 	bl	8002138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f000 fcac 	bl	80069a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6a1a      	ldr	r2, [r3, #32]
 80060d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10f      	bne.n	80060fa <HAL_TIM_Base_Stop_IT+0x48>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6a1a      	ldr	r2, [r3, #32]
 80060e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d107      	bne.n	80060fa <HAL_TIM_Base_Stop_IT+0x48>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e049      	b.n	80061b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f841 	bl	80061be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3304      	adds	r3, #4
 800614c:	4619      	mov	r1, r3
 800614e:	4610      	mov	r0, r2
 8006150:	f000 fc26 	bl	80069a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 f883 	bl	80072f2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a3e      	ldr	r2, [pc, #248]	@ (80062ec <HAL_TIM_PWM_Stop+0x118>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_TIM_PWM_Stop+0x4a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a3d      	ldr	r2, [pc, #244]	@ (80062f0 <HAL_TIM_PWM_Stop+0x11c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00e      	beq.n	800621e <HAL_TIM_PWM_Stop+0x4a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a3b      	ldr	r2, [pc, #236]	@ (80062f4 <HAL_TIM_PWM_Stop+0x120>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_TIM_PWM_Stop+0x4a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a3a      	ldr	r2, [pc, #232]	@ (80062f8 <HAL_TIM_PWM_Stop+0x124>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_TIM_PWM_Stop+0x4a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a38      	ldr	r2, [pc, #224]	@ (80062fc <HAL_TIM_PWM_Stop+0x128>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d101      	bne.n	8006222 <HAL_TIM_PWM_Stop+0x4e>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <HAL_TIM_PWM_Stop+0x50>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d017      	beq.n	8006258 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006232:	4013      	ands	r3, r2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10f      	bne.n	8006258 <HAL_TIM_PWM_Stop+0x84>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006242:	4013      	ands	r3, r2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d107      	bne.n	8006258 <HAL_TIM_PWM_Stop+0x84>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006256:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6a1a      	ldr	r2, [r3, #32]
 800625e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006262:	4013      	ands	r3, r2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10f      	bne.n	8006288 <HAL_TIM_PWM_Stop+0xb4>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6a1a      	ldr	r2, [r3, #32]
 800626e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d107      	bne.n	8006288 <HAL_TIM_PWM_Stop+0xb4>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0201 	bic.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <HAL_TIM_PWM_Stop+0xc4>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006296:	e023      	b.n	80062e0 <HAL_TIM_PWM_Stop+0x10c>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b04      	cmp	r3, #4
 800629c:	d104      	bne.n	80062a8 <HAL_TIM_PWM_Stop+0xd4>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062a6:	e01b      	b.n	80062e0 <HAL_TIM_PWM_Stop+0x10c>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d104      	bne.n	80062b8 <HAL_TIM_PWM_Stop+0xe4>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062b6:	e013      	b.n	80062e0 <HAL_TIM_PWM_Stop+0x10c>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b0c      	cmp	r3, #12
 80062bc:	d104      	bne.n	80062c8 <HAL_TIM_PWM_Stop+0xf4>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062c6:	e00b      	b.n	80062e0 <HAL_TIM_PWM_Stop+0x10c>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b10      	cmp	r3, #16
 80062cc:	d104      	bne.n	80062d8 <HAL_TIM_PWM_Stop+0x104>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062d6:	e003      	b.n	80062e0 <HAL_TIM_PWM_Stop+0x10c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40013400 	.word	0x40013400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800

08006300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d020      	beq.n	8006364 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01b      	beq.n	8006364 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0202 	mvn.w	r2, #2
 8006334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fb09 	bl	8006962 <HAL_TIM_IC_CaptureCallback>
 8006350:	e005      	b.n	800635e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fafb 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fb0c 	bl	8006976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d020      	beq.n	80063b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01b      	beq.n	80063b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0204 	mvn.w	r2, #4
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2202      	movs	r2, #2
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fae3 	bl	8006962 <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fad5 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fae6 	bl	8006976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d020      	beq.n	80063fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01b      	beq.n	80063fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0208 	mvn.w	r2, #8
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fabd 	bl	8006962 <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 faaf 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fac0 	bl	8006976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d020      	beq.n	8006448 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01b      	beq.n	8006448 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0210 	mvn.w	r2, #16
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2208      	movs	r2, #8
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa97 	bl	8006962 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa89 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fa9a 	bl	8006976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0201 	mvn.w	r2, #1
 8006464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fc fa40 	bl	80028ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00c      	beq.n	800649a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 f8bf 	bl	8007618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00c      	beq.n	80064be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 f8b7 	bl	800762c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00c      	beq.n	80064e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa54 	bl	800698a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00c      	beq.n	8006506 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d007      	beq.n	8006506 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f06f 0220 	mvn.w	r2, #32
 80064fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 f87f 	bl	8007604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800652a:	2302      	movs	r3, #2
 800652c:	e0ff      	b.n	800672e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b14      	cmp	r3, #20
 800653a:	f200 80f0 	bhi.w	800671e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800653e:	a201      	add	r2, pc, #4	@ (adr r2, 8006544 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006599 	.word	0x08006599
 8006548:	0800671f 	.word	0x0800671f
 800654c:	0800671f 	.word	0x0800671f
 8006550:	0800671f 	.word	0x0800671f
 8006554:	080065d9 	.word	0x080065d9
 8006558:	0800671f 	.word	0x0800671f
 800655c:	0800671f 	.word	0x0800671f
 8006560:	0800671f 	.word	0x0800671f
 8006564:	0800661b 	.word	0x0800661b
 8006568:	0800671f 	.word	0x0800671f
 800656c:	0800671f 	.word	0x0800671f
 8006570:	0800671f 	.word	0x0800671f
 8006574:	0800665b 	.word	0x0800665b
 8006578:	0800671f 	.word	0x0800671f
 800657c:	0800671f 	.word	0x0800671f
 8006580:	0800671f 	.word	0x0800671f
 8006584:	0800669d 	.word	0x0800669d
 8006588:	0800671f 	.word	0x0800671f
 800658c:	0800671f 	.word	0x0800671f
 8006590:	0800671f 	.word	0x0800671f
 8006594:	080066dd 	.word	0x080066dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 faa4 	bl	8006aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0208 	orr.w	r2, r2, #8
 80065b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0204 	bic.w	r2, r2, #4
 80065c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6999      	ldr	r1, [r3, #24]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	619a      	str	r2, [r3, #24]
      break;
 80065d6:	e0a5      	b.n	8006724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fb14 	bl	8006c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6999      	ldr	r1, [r3, #24]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	021a      	lsls	r2, r3, #8
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	619a      	str	r2, [r3, #24]
      break;
 8006618:	e084      	b.n	8006724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fb7d 	bl	8006d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 0208 	orr.w	r2, r2, #8
 8006634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69da      	ldr	r2, [r3, #28]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0204 	bic.w	r2, r2, #4
 8006644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69d9      	ldr	r1, [r3, #28]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	61da      	str	r2, [r3, #28]
      break;
 8006658:	e064      	b.n	8006724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fbe5 	bl	8006e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69d9      	ldr	r1, [r3, #28]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	021a      	lsls	r2, r3, #8
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	61da      	str	r2, [r3, #28]
      break;
 800669a:	e043      	b.n	8006724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fc2e 	bl	8006f04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0208 	orr.w	r2, r2, #8
 80066b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0204 	bic.w	r2, r2, #4
 80066c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80066da:	e023      	b.n	8006724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fc72 	bl	8006fcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006706:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	021a      	lsls	r2, r3, #8
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800671c:	e002      	b.n	8006724 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	75fb      	strb	r3, [r7, #23]
      break;
 8006722:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800672c:	7dfb      	ldrb	r3, [r7, #23]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop

08006738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_TIM_ConfigClockSource+0x1c>
 8006750:	2302      	movs	r3, #2
 8006752:	e0b6      	b.n	80068c2 <HAL_TIM_ConfigClockSource+0x18a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006772:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800677e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006790:	d03e      	beq.n	8006810 <HAL_TIM_ConfigClockSource+0xd8>
 8006792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006796:	f200 8087 	bhi.w	80068a8 <HAL_TIM_ConfigClockSource+0x170>
 800679a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679e:	f000 8086 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x176>
 80067a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a6:	d87f      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x170>
 80067a8:	2b70      	cmp	r3, #112	@ 0x70
 80067aa:	d01a      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0xaa>
 80067ac:	2b70      	cmp	r3, #112	@ 0x70
 80067ae:	d87b      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x170>
 80067b0:	2b60      	cmp	r3, #96	@ 0x60
 80067b2:	d050      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x11e>
 80067b4:	2b60      	cmp	r3, #96	@ 0x60
 80067b6:	d877      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x170>
 80067b8:	2b50      	cmp	r3, #80	@ 0x50
 80067ba:	d03c      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0xfe>
 80067bc:	2b50      	cmp	r3, #80	@ 0x50
 80067be:	d873      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x170>
 80067c0:	2b40      	cmp	r3, #64	@ 0x40
 80067c2:	d058      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x13e>
 80067c4:	2b40      	cmp	r3, #64	@ 0x40
 80067c6:	d86f      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x170>
 80067c8:	2b30      	cmp	r3, #48	@ 0x30
 80067ca:	d064      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x15e>
 80067cc:	2b30      	cmp	r3, #48	@ 0x30
 80067ce:	d86b      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x170>
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d060      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x15e>
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d867      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x170>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d05c      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x15e>
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d05a      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x15e>
 80067e0:	e062      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067f2:	f000 fd5e 	bl	80072b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006804:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	609a      	str	r2, [r3, #8]
      break;
 800680e:	e04f      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006820:	f000 fd47 	bl	80072b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006832:	609a      	str	r2, [r3, #8]
      break;
 8006834:	e03c      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006842:	461a      	mov	r2, r3
 8006844:	f000 fcbb 	bl	80071be <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2150      	movs	r1, #80	@ 0x50
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fd14 	bl	800727c <TIM_ITRx_SetConfig>
      break;
 8006854:	e02c      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006862:	461a      	mov	r2, r3
 8006864:	f000 fcda 	bl	800721c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2160      	movs	r1, #96	@ 0x60
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fd04 	bl	800727c <TIM_ITRx_SetConfig>
      break;
 8006874:	e01c      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006882:	461a      	mov	r2, r3
 8006884:	f000 fc9b 	bl	80071be <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2140      	movs	r1, #64	@ 0x40
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fcf4 	bl	800727c <TIM_ITRx_SetConfig>
      break;
 8006894:	e00c      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f000 fceb 	bl	800727c <TIM_ITRx_SetConfig>
      break;
 80068a6:	e003      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
      break;
 80068ac:	e000      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80068de:	2302      	movs	r3, #2
 80068e0:	e031      	b.n	8006946 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fbcf 	bl	8007098 <TIM_SlaveTimer_SetConfig>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e018      	b.n	8006946 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006922:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006932:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a46      	ldr	r2, [pc, #280]	@ (8006acc <TIM_Base_SetConfig+0x12c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069be:	d00f      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a43      	ldr	r2, [pc, #268]	@ (8006ad0 <TIM_Base_SetConfig+0x130>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a42      	ldr	r2, [pc, #264]	@ (8006ad4 <TIM_Base_SetConfig+0x134>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d007      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a41      	ldr	r2, [pc, #260]	@ (8006ad8 <TIM_Base_SetConfig+0x138>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a40      	ldr	r2, [pc, #256]	@ (8006adc <TIM_Base_SetConfig+0x13c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d108      	bne.n	80069f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a35      	ldr	r2, [pc, #212]	@ (8006acc <TIM_Base_SetConfig+0x12c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d01f      	beq.n	8006a3a <TIM_Base_SetConfig+0x9a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a00:	d01b      	beq.n	8006a3a <TIM_Base_SetConfig+0x9a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a32      	ldr	r2, [pc, #200]	@ (8006ad0 <TIM_Base_SetConfig+0x130>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d017      	beq.n	8006a3a <TIM_Base_SetConfig+0x9a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a31      	ldr	r2, [pc, #196]	@ (8006ad4 <TIM_Base_SetConfig+0x134>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d013      	beq.n	8006a3a <TIM_Base_SetConfig+0x9a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a30      	ldr	r2, [pc, #192]	@ (8006ad8 <TIM_Base_SetConfig+0x138>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00f      	beq.n	8006a3a <TIM_Base_SetConfig+0x9a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8006adc <TIM_Base_SetConfig+0x13c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <TIM_Base_SetConfig+0x9a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a2e      	ldr	r2, [pc, #184]	@ (8006ae0 <TIM_Base_SetConfig+0x140>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <TIM_Base_SetConfig+0x9a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ae4 <TIM_Base_SetConfig+0x144>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_Base_SetConfig+0x9a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae8 <TIM_Base_SetConfig+0x148>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d108      	bne.n	8006a4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a16      	ldr	r2, [pc, #88]	@ (8006acc <TIM_Base_SetConfig+0x12c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00f      	beq.n	8006a98 <TIM_Base_SetConfig+0xf8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a18      	ldr	r2, [pc, #96]	@ (8006adc <TIM_Base_SetConfig+0x13c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00b      	beq.n	8006a98 <TIM_Base_SetConfig+0xf8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a17      	ldr	r2, [pc, #92]	@ (8006ae0 <TIM_Base_SetConfig+0x140>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d007      	beq.n	8006a98 <TIM_Base_SetConfig+0xf8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ae4 <TIM_Base_SetConfig+0x144>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_Base_SetConfig+0xf8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a15      	ldr	r2, [pc, #84]	@ (8006ae8 <TIM_Base_SetConfig+0x148>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d103      	bne.n	8006aa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d105      	bne.n	8006abe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f023 0201 	bic.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	611a      	str	r2, [r3, #16]
  }
}
 8006abe:	bf00      	nop
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40012c00 	.word	0x40012c00
 8006ad0:	40000400 	.word	0x40000400
 8006ad4:	40000800 	.word	0x40000800
 8006ad8:	40000c00 	.word	0x40000c00
 8006adc:	40013400 	.word	0x40013400
 8006ae0:	40014000 	.word	0x40014000
 8006ae4:	40014400 	.word	0x40014400
 8006ae8:	40014800 	.word	0x40014800

08006aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	f023 0201 	bic.w	r2, r3, #1
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0303 	bic.w	r3, r3, #3
 8006b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f023 0302 	bic.w	r3, r3, #2
 8006b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a2c      	ldr	r2, [pc, #176]	@ (8006bf8 <TIM_OC1_SetConfig+0x10c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00f      	beq.n	8006b6c <TIM_OC1_SetConfig+0x80>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8006bfc <TIM_OC1_SetConfig+0x110>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00b      	beq.n	8006b6c <TIM_OC1_SetConfig+0x80>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a2a      	ldr	r2, [pc, #168]	@ (8006c00 <TIM_OC1_SetConfig+0x114>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d007      	beq.n	8006b6c <TIM_OC1_SetConfig+0x80>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a29      	ldr	r2, [pc, #164]	@ (8006c04 <TIM_OC1_SetConfig+0x118>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d003      	beq.n	8006b6c <TIM_OC1_SetConfig+0x80>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a28      	ldr	r2, [pc, #160]	@ (8006c08 <TIM_OC1_SetConfig+0x11c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d10c      	bne.n	8006b86 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f023 0308 	bic.w	r3, r3, #8
 8006b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f023 0304 	bic.w	r3, r3, #4
 8006b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf8 <TIM_OC1_SetConfig+0x10c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00f      	beq.n	8006bae <TIM_OC1_SetConfig+0xc2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1a      	ldr	r2, [pc, #104]	@ (8006bfc <TIM_OC1_SetConfig+0x110>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00b      	beq.n	8006bae <TIM_OC1_SetConfig+0xc2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a19      	ldr	r2, [pc, #100]	@ (8006c00 <TIM_OC1_SetConfig+0x114>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d007      	beq.n	8006bae <TIM_OC1_SetConfig+0xc2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	@ (8006c04 <TIM_OC1_SetConfig+0x118>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d003      	beq.n	8006bae <TIM_OC1_SetConfig+0xc2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	@ (8006c08 <TIM_OC1_SetConfig+0x11c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d111      	bne.n	8006bd2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40013400 	.word	0x40013400
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40014400 	.word	0x40014400
 8006c08:	40014800 	.word	0x40014800

08006c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	f023 0210 	bic.w	r2, r3, #16
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0320 	bic.w	r3, r3, #32
 8006c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a28      	ldr	r2, [pc, #160]	@ (8006d0c <TIM_OC2_SetConfig+0x100>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d003      	beq.n	8006c78 <TIM_OC2_SetConfig+0x6c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a27      	ldr	r2, [pc, #156]	@ (8006d10 <TIM_OC2_SetConfig+0x104>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d10d      	bne.n	8006c94 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a1d      	ldr	r2, [pc, #116]	@ (8006d0c <TIM_OC2_SetConfig+0x100>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00f      	beq.n	8006cbc <TIM_OC2_SetConfig+0xb0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006d10 <TIM_OC2_SetConfig+0x104>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <TIM_OC2_SetConfig+0xb0>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <TIM_OC2_SetConfig+0x108>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d007      	beq.n	8006cbc <TIM_OC2_SetConfig+0xb0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a1a      	ldr	r2, [pc, #104]	@ (8006d18 <TIM_OC2_SetConfig+0x10c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_OC2_SetConfig+0xb0>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a19      	ldr	r2, [pc, #100]	@ (8006d1c <TIM_OC2_SetConfig+0x110>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d113      	bne.n	8006ce4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	621a      	str	r2, [r3, #32]
}
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40013400 	.word	0x40013400
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800

08006d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0303 	bic.w	r3, r3, #3
 8006d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a27      	ldr	r2, [pc, #156]	@ (8006e1c <TIM_OC3_SetConfig+0xfc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d003      	beq.n	8006d8a <TIM_OC3_SetConfig+0x6a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a26      	ldr	r2, [pc, #152]	@ (8006e20 <TIM_OC3_SetConfig+0x100>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d10d      	bne.n	8006da6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1c      	ldr	r2, [pc, #112]	@ (8006e1c <TIM_OC3_SetConfig+0xfc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00f      	beq.n	8006dce <TIM_OC3_SetConfig+0xae>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e20 <TIM_OC3_SetConfig+0x100>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_OC3_SetConfig+0xae>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1a      	ldr	r2, [pc, #104]	@ (8006e24 <TIM_OC3_SetConfig+0x104>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d007      	beq.n	8006dce <TIM_OC3_SetConfig+0xae>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a19      	ldr	r2, [pc, #100]	@ (8006e28 <TIM_OC3_SetConfig+0x108>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC3_SetConfig+0xae>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a18      	ldr	r2, [pc, #96]	@ (8006e2c <TIM_OC3_SetConfig+0x10c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d113      	bne.n	8006df6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	031b      	lsls	r3, r3, #12
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a18      	ldr	r2, [pc, #96]	@ (8006ef0 <TIM_OC4_SetConfig+0xc0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00f      	beq.n	8006eb4 <TIM_OC4_SetConfig+0x84>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a17      	ldr	r2, [pc, #92]	@ (8006ef4 <TIM_OC4_SetConfig+0xc4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00b      	beq.n	8006eb4 <TIM_OC4_SetConfig+0x84>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a16      	ldr	r2, [pc, #88]	@ (8006ef8 <TIM_OC4_SetConfig+0xc8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d007      	beq.n	8006eb4 <TIM_OC4_SetConfig+0x84>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a15      	ldr	r2, [pc, #84]	@ (8006efc <TIM_OC4_SetConfig+0xcc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_OC4_SetConfig+0x84>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a14      	ldr	r2, [pc, #80]	@ (8006f00 <TIM_OC4_SetConfig+0xd0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d109      	bne.n	8006ec8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	019b      	lsls	r3, r3, #6
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	621a      	str	r2, [r3, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	40013400 	.word	0x40013400
 8006ef8:	40014000 	.word	0x40014000
 8006efc:	40014400 	.word	0x40014400
 8006f00:	40014800 	.word	0x40014800

08006f04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	041b      	lsls	r3, r3, #16
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a17      	ldr	r2, [pc, #92]	@ (8006fb8 <TIM_OC5_SetConfig+0xb4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00f      	beq.n	8006f7e <TIM_OC5_SetConfig+0x7a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a16      	ldr	r2, [pc, #88]	@ (8006fbc <TIM_OC5_SetConfig+0xb8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <TIM_OC5_SetConfig+0x7a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a15      	ldr	r2, [pc, #84]	@ (8006fc0 <TIM_OC5_SetConfig+0xbc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d007      	beq.n	8006f7e <TIM_OC5_SetConfig+0x7a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a14      	ldr	r2, [pc, #80]	@ (8006fc4 <TIM_OC5_SetConfig+0xc0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_OC5_SetConfig+0x7a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a13      	ldr	r2, [pc, #76]	@ (8006fc8 <TIM_OC5_SetConfig+0xc4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d109      	bne.n	8006f92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	621a      	str	r2, [r3, #32]
}
 8006fac:	bf00      	nop
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	40012c00 	.word	0x40012c00
 8006fbc:	40013400 	.word	0x40013400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800

08006fcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	051b      	lsls	r3, r3, #20
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a18      	ldr	r2, [pc, #96]	@ (8007084 <TIM_OC6_SetConfig+0xb8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00f      	beq.n	8007048 <TIM_OC6_SetConfig+0x7c>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a17      	ldr	r2, [pc, #92]	@ (8007088 <TIM_OC6_SetConfig+0xbc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00b      	beq.n	8007048 <TIM_OC6_SetConfig+0x7c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a16      	ldr	r2, [pc, #88]	@ (800708c <TIM_OC6_SetConfig+0xc0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d007      	beq.n	8007048 <TIM_OC6_SetConfig+0x7c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a15      	ldr	r2, [pc, #84]	@ (8007090 <TIM_OC6_SetConfig+0xc4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d003      	beq.n	8007048 <TIM_OC6_SetConfig+0x7c>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a14      	ldr	r2, [pc, #80]	@ (8007094 <TIM_OC6_SetConfig+0xc8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d109      	bne.n	800705c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800704e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	029b      	lsls	r3, r3, #10
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	621a      	str	r2, [r3, #32]
}
 8007076:	bf00      	nop
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40012c00 	.word	0x40012c00
 8007088:	40013400 	.word	0x40013400
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800

08007098 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070c6:	f023 0307 	bic.w	r3, r3, #7
 80070ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b70      	cmp	r3, #112	@ 0x70
 80070e4:	d01a      	beq.n	800711c <TIM_SlaveTimer_SetConfig+0x84>
 80070e6:	2b70      	cmp	r3, #112	@ 0x70
 80070e8:	d860      	bhi.n	80071ac <TIM_SlaveTimer_SetConfig+0x114>
 80070ea:	2b60      	cmp	r3, #96	@ 0x60
 80070ec:	d054      	beq.n	8007198 <TIM_SlaveTimer_SetConfig+0x100>
 80070ee:	2b60      	cmp	r3, #96	@ 0x60
 80070f0:	d85c      	bhi.n	80071ac <TIM_SlaveTimer_SetConfig+0x114>
 80070f2:	2b50      	cmp	r3, #80	@ 0x50
 80070f4:	d046      	beq.n	8007184 <TIM_SlaveTimer_SetConfig+0xec>
 80070f6:	2b50      	cmp	r3, #80	@ 0x50
 80070f8:	d858      	bhi.n	80071ac <TIM_SlaveTimer_SetConfig+0x114>
 80070fa:	2b40      	cmp	r3, #64	@ 0x40
 80070fc:	d019      	beq.n	8007132 <TIM_SlaveTimer_SetConfig+0x9a>
 80070fe:	2b40      	cmp	r3, #64	@ 0x40
 8007100:	d854      	bhi.n	80071ac <TIM_SlaveTimer_SetConfig+0x114>
 8007102:	2b30      	cmp	r3, #48	@ 0x30
 8007104:	d055      	beq.n	80071b2 <TIM_SlaveTimer_SetConfig+0x11a>
 8007106:	2b30      	cmp	r3, #48	@ 0x30
 8007108:	d850      	bhi.n	80071ac <TIM_SlaveTimer_SetConfig+0x114>
 800710a:	2b20      	cmp	r3, #32
 800710c:	d051      	beq.n	80071b2 <TIM_SlaveTimer_SetConfig+0x11a>
 800710e:	2b20      	cmp	r3, #32
 8007110:	d84c      	bhi.n	80071ac <TIM_SlaveTimer_SetConfig+0x114>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d04d      	beq.n	80071b2 <TIM_SlaveTimer_SetConfig+0x11a>
 8007116:	2b10      	cmp	r3, #16
 8007118:	d04b      	beq.n	80071b2 <TIM_SlaveTimer_SetConfig+0x11a>
 800711a:	e047      	b.n	80071ac <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800712c:	f000 f8c1 	bl	80072b2 <TIM_ETR_SetConfig>
      break;
 8007130:	e040      	b.n	80071b4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b05      	cmp	r3, #5
 8007138:	d101      	bne.n	800713e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e03b      	b.n	80071b6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007164:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	4313      	orrs	r3, r2
 8007170:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	621a      	str	r2, [r3, #32]
      break;
 8007182:	e017      	b.n	80071b4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007190:	461a      	mov	r2, r3
 8007192:	f000 f814 	bl	80071be <TIM_TI1_ConfigInputStage>
      break;
 8007196:	e00d      	b.n	80071b4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a4:	461a      	mov	r2, r3
 80071a6:	f000 f839 	bl	800721c <TIM_TI2_ConfigInputStage>
      break;
 80071aa:	e003      	b.n	80071b4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	75fb      	strb	r3, [r7, #23]
      break;
 80071b0:	e000      	b.n	80071b4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80071b2:	bf00      	nop
  }

  return status;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071be:	b480      	push	{r7}
 80071c0:	b087      	sub	sp, #28
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	f023 0201 	bic.w	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f023 030a 	bic.w	r3, r3, #10
 80071fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	621a      	str	r2, [r3, #32]
}
 8007210:	bf00      	nop
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f023 0210 	bic.w	r2, r3, #16
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	031b      	lsls	r3, r3, #12
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007258:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	011b      	lsls	r3, r3, #4
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	4313      	orrs	r3, r2
 8007262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	621a      	str	r2, [r3, #32]
}
 8007270:	bf00      	nop
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007292:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	f043 0307 	orr.w	r3, r3, #7
 800729e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	609a      	str	r2, [r3, #8]
}
 80072a6:	bf00      	nop
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	021a      	lsls	r2, r3, #8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	431a      	orrs	r2, r3
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4313      	orrs	r3, r2
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	609a      	str	r2, [r3, #8]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b087      	sub	sp, #28
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2201      	movs	r2, #1
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1a      	ldr	r2, [r3, #32]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	43db      	mvns	r3, r3
 8007314:	401a      	ands	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1a      	ldr	r2, [r3, #32]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	fa01 f303 	lsl.w	r3, r1, r3
 800732a:	431a      	orrs	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	621a      	str	r2, [r3, #32]
}
 8007330:	bf00      	nop
 8007332:	371c      	adds	r7, #28
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2200      	movs	r2, #0
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 f976 	bl	8007640 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6a1a      	ldr	r2, [r3, #32]
 800735a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800735e:	4013      	ands	r3, r2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10f      	bne.n	8007384 <HAL_TIMEx_PWMN_Stop+0x48>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6a1a      	ldr	r2, [r3, #32]
 800736a:	f240 4344 	movw	r3, #1092	@ 0x444
 800736e:	4013      	ands	r3, r2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d107      	bne.n	8007384 <HAL_TIMEx_PWMN_Stop+0x48>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007382:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6a1a      	ldr	r2, [r3, #32]
 800738a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10f      	bne.n	80073b4 <HAL_TIMEx_PWMN_Stop+0x78>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	f240 4344 	movw	r3, #1092	@ 0x444
 800739e:	4013      	ands	r3, r2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d107      	bne.n	80073b4 <HAL_TIMEx_PWMN_Stop+0x78>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0201 	bic.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <HAL_TIMEx_PWMN_Stop+0x88>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073c2:	e013      	b.n	80073ec <HAL_TIMEx_PWMN_Stop+0xb0>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d104      	bne.n	80073d4 <HAL_TIMEx_PWMN_Stop+0x98>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073d2:	e00b      	b.n	80073ec <HAL_TIMEx_PWMN_Stop+0xb0>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d104      	bne.n	80073e4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073e2:	e003      	b.n	80073ec <HAL_TIMEx_PWMN_Stop+0xb0>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800740c:	2302      	movs	r3, #2
 800740e:	e068      	b.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a2e      	ldr	r2, [pc, #184]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2d      	ldr	r2, [pc, #180]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d108      	bne.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800744a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1e      	ldr	r2, [pc, #120]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01d      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007482:	d018      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1b      	ldr	r2, [pc, #108]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a13      	ldr	r2, [pc, #76]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a14      	ldr	r2, [pc, #80]	@ (8007504 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10c      	bne.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40013400 	.word	0x40013400
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	40014000 	.word	0x40014000

08007508 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007520:	2302      	movs	r3, #2
 8007522:	e065      	b.n	80075f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a16      	ldr	r2, [pc, #88]	@ (80075fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a14      	ldr	r2, [pc, #80]	@ (8007600 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d115      	bne.n	80075de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	051b      	lsls	r3, r3, #20
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	40012c00 	.word	0x40012c00
 8007600:	40013400 	.word	0x40013400

08007604 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	2204      	movs	r2, #4
 8007654:	fa02 f303 	lsl.w	r3, r2, r3
 8007658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a1a      	ldr	r2, [r3, #32]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	43db      	mvns	r3, r3
 8007662:	401a      	ands	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a1a      	ldr	r2, [r3, #32]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	fa01 f303 	lsl.w	r3, r1, r3
 8007678:	431a      	orrs	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	621a      	str	r2, [r3, #32]
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e040      	b.n	800771e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7fa fe4f 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2224      	movs	r2, #36	@ 0x24
 80076b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0201 	bic.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fae1 	bl	8007c98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f826 	bl	8007728 <UART_SetConfig>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e01b      	b.n	800771e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007704:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0201 	orr.w	r2, r2, #1
 8007714:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fb60 	bl	8007ddc <UART_CheckIdleState>
 800771c:	4603      	mov	r3, r0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800772c:	b08a      	sub	sp, #40	@ 0x28
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	431a      	orrs	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	431a      	orrs	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	4313      	orrs	r3, r2
 800774e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4ba4      	ldr	r3, [pc, #656]	@ (80079e8 <UART_SetConfig+0x2c0>)
 8007758:	4013      	ands	r3, r2
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007760:	430b      	orrs	r3, r1
 8007762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a99      	ldr	r2, [pc, #612]	@ (80079ec <UART_SetConfig+0x2c4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d004      	beq.n	8007794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007790:	4313      	orrs	r3, r2
 8007792:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a4:	430a      	orrs	r2, r1
 80077a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a90      	ldr	r2, [pc, #576]	@ (80079f0 <UART_SetConfig+0x2c8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d126      	bne.n	8007800 <UART_SetConfig+0xd8>
 80077b2:	4b90      	ldr	r3, [pc, #576]	@ (80079f4 <UART_SetConfig+0x2cc>)
 80077b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d81b      	bhi.n	80077f8 <UART_SetConfig+0xd0>
 80077c0:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <UART_SetConfig+0xa0>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077e9 	.word	0x080077e9
 80077d0:	080077e1 	.word	0x080077e1
 80077d4:	080077f1 	.word	0x080077f1
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077de:	e116      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80077e0:	2302      	movs	r3, #2
 80077e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077e6:	e112      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80077e8:	2304      	movs	r3, #4
 80077ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ee:	e10e      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80077f0:	2308      	movs	r3, #8
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f6:	e10a      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80077f8:	2310      	movs	r3, #16
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fe:	e106      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a7c      	ldr	r2, [pc, #496]	@ (80079f8 <UART_SetConfig+0x2d0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d138      	bne.n	800787c <UART_SetConfig+0x154>
 800780a:	4b7a      	ldr	r3, [pc, #488]	@ (80079f4 <UART_SetConfig+0x2cc>)
 800780c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007810:	f003 030c 	and.w	r3, r3, #12
 8007814:	2b0c      	cmp	r3, #12
 8007816:	d82d      	bhi.n	8007874 <UART_SetConfig+0x14c>
 8007818:	a201      	add	r2, pc, #4	@ (adr r2, 8007820 <UART_SetConfig+0xf8>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	08007855 	.word	0x08007855
 8007824:	08007875 	.word	0x08007875
 8007828:	08007875 	.word	0x08007875
 800782c:	08007875 	.word	0x08007875
 8007830:	08007865 	.word	0x08007865
 8007834:	08007875 	.word	0x08007875
 8007838:	08007875 	.word	0x08007875
 800783c:	08007875 	.word	0x08007875
 8007840:	0800785d 	.word	0x0800785d
 8007844:	08007875 	.word	0x08007875
 8007848:	08007875 	.word	0x08007875
 800784c:	08007875 	.word	0x08007875
 8007850:	0800786d 	.word	0x0800786d
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800785a:	e0d8      	b.n	8007a0e <UART_SetConfig+0x2e6>
 800785c:	2302      	movs	r3, #2
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007862:	e0d4      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007864:	2304      	movs	r3, #4
 8007866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800786a:	e0d0      	b.n	8007a0e <UART_SetConfig+0x2e6>
 800786c:	2308      	movs	r3, #8
 800786e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007872:	e0cc      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007874:	2310      	movs	r3, #16
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800787a:	e0c8      	b.n	8007a0e <UART_SetConfig+0x2e6>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a5e      	ldr	r2, [pc, #376]	@ (80079fc <UART_SetConfig+0x2d4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d125      	bne.n	80078d2 <UART_SetConfig+0x1aa>
 8007886:	4b5b      	ldr	r3, [pc, #364]	@ (80079f4 <UART_SetConfig+0x2cc>)
 8007888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007890:	2b30      	cmp	r3, #48	@ 0x30
 8007892:	d016      	beq.n	80078c2 <UART_SetConfig+0x19a>
 8007894:	2b30      	cmp	r3, #48	@ 0x30
 8007896:	d818      	bhi.n	80078ca <UART_SetConfig+0x1a2>
 8007898:	2b20      	cmp	r3, #32
 800789a:	d00a      	beq.n	80078b2 <UART_SetConfig+0x18a>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d814      	bhi.n	80078ca <UART_SetConfig+0x1a2>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <UART_SetConfig+0x182>
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d008      	beq.n	80078ba <UART_SetConfig+0x192>
 80078a8:	e00f      	b.n	80078ca <UART_SetConfig+0x1a2>
 80078aa:	2300      	movs	r3, #0
 80078ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078b0:	e0ad      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078b2:	2302      	movs	r3, #2
 80078b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078b8:	e0a9      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078ba:	2304      	movs	r3, #4
 80078bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c0:	e0a5      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078c2:	2308      	movs	r3, #8
 80078c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c8:	e0a1      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078ca:	2310      	movs	r3, #16
 80078cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078d0:	e09d      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a4a      	ldr	r2, [pc, #296]	@ (8007a00 <UART_SetConfig+0x2d8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d125      	bne.n	8007928 <UART_SetConfig+0x200>
 80078dc:	4b45      	ldr	r3, [pc, #276]	@ (80079f4 <UART_SetConfig+0x2cc>)
 80078de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80078e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80078e8:	d016      	beq.n	8007918 <UART_SetConfig+0x1f0>
 80078ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80078ec:	d818      	bhi.n	8007920 <UART_SetConfig+0x1f8>
 80078ee:	2b80      	cmp	r3, #128	@ 0x80
 80078f0:	d00a      	beq.n	8007908 <UART_SetConfig+0x1e0>
 80078f2:	2b80      	cmp	r3, #128	@ 0x80
 80078f4:	d814      	bhi.n	8007920 <UART_SetConfig+0x1f8>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <UART_SetConfig+0x1d8>
 80078fa:	2b40      	cmp	r3, #64	@ 0x40
 80078fc:	d008      	beq.n	8007910 <UART_SetConfig+0x1e8>
 80078fe:	e00f      	b.n	8007920 <UART_SetConfig+0x1f8>
 8007900:	2300      	movs	r3, #0
 8007902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007906:	e082      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007908:	2302      	movs	r3, #2
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800790e:	e07e      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007910:	2304      	movs	r3, #4
 8007912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007916:	e07a      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007918:	2308      	movs	r3, #8
 800791a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791e:	e076      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007920:	2310      	movs	r3, #16
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007926:	e072      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a35      	ldr	r2, [pc, #212]	@ (8007a04 <UART_SetConfig+0x2dc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d12a      	bne.n	8007988 <UART_SetConfig+0x260>
 8007932:	4b30      	ldr	r3, [pc, #192]	@ (80079f4 <UART_SetConfig+0x2cc>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800793c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007940:	d01a      	beq.n	8007978 <UART_SetConfig+0x250>
 8007942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007946:	d81b      	bhi.n	8007980 <UART_SetConfig+0x258>
 8007948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800794c:	d00c      	beq.n	8007968 <UART_SetConfig+0x240>
 800794e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007952:	d815      	bhi.n	8007980 <UART_SetConfig+0x258>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <UART_SetConfig+0x238>
 8007958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800795c:	d008      	beq.n	8007970 <UART_SetConfig+0x248>
 800795e:	e00f      	b.n	8007980 <UART_SetConfig+0x258>
 8007960:	2300      	movs	r3, #0
 8007962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007966:	e052      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007968:	2302      	movs	r3, #2
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800796e:	e04e      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007970:	2304      	movs	r3, #4
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007976:	e04a      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007978:	2308      	movs	r3, #8
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800797e:	e046      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007980:	2310      	movs	r3, #16
 8007982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007986:	e042      	b.n	8007a0e <UART_SetConfig+0x2e6>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a17      	ldr	r2, [pc, #92]	@ (80079ec <UART_SetConfig+0x2c4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d13a      	bne.n	8007a08 <UART_SetConfig+0x2e0>
 8007992:	4b18      	ldr	r3, [pc, #96]	@ (80079f4 <UART_SetConfig+0x2cc>)
 8007994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007998:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800799c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079a0:	d01a      	beq.n	80079d8 <UART_SetConfig+0x2b0>
 80079a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079a6:	d81b      	bhi.n	80079e0 <UART_SetConfig+0x2b8>
 80079a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079ac:	d00c      	beq.n	80079c8 <UART_SetConfig+0x2a0>
 80079ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079b2:	d815      	bhi.n	80079e0 <UART_SetConfig+0x2b8>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <UART_SetConfig+0x298>
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079bc:	d008      	beq.n	80079d0 <UART_SetConfig+0x2a8>
 80079be:	e00f      	b.n	80079e0 <UART_SetConfig+0x2b8>
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079c6:	e022      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079c8:	2302      	movs	r3, #2
 80079ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ce:	e01e      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079d0:	2304      	movs	r3, #4
 80079d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079d6:	e01a      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079d8:	2308      	movs	r3, #8
 80079da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079de:	e016      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079e0:	2310      	movs	r3, #16
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e6:	e012      	b.n	8007a0e <UART_SetConfig+0x2e6>
 80079e8:	efff69f3 	.word	0xefff69f3
 80079ec:	40008000 	.word	0x40008000
 80079f0:	40013800 	.word	0x40013800
 80079f4:	40021000 	.word	0x40021000
 80079f8:	40004400 	.word	0x40004400
 80079fc:	40004800 	.word	0x40004800
 8007a00:	40004c00 	.word	0x40004c00
 8007a04:	40005000 	.word	0x40005000
 8007a08:	2310      	movs	r3, #16
 8007a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a9f      	ldr	r2, [pc, #636]	@ (8007c90 <UART_SetConfig+0x568>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d17a      	bne.n	8007b0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d824      	bhi.n	8007a6a <UART_SetConfig+0x342>
 8007a20:	a201      	add	r2, pc, #4	@ (adr r2, 8007a28 <UART_SetConfig+0x300>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a6b 	.word	0x08007a6b
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007a6b 	.word	0x08007a6b
 8007a38:	08007a5b 	.word	0x08007a5b
 8007a3c:	08007a6b 	.word	0x08007a6b
 8007a40:	08007a6b 	.word	0x08007a6b
 8007a44:	08007a6b 	.word	0x08007a6b
 8007a48:	08007a63 	.word	0x08007a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a4c:	f7fd fd92 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8007a50:	61f8      	str	r0, [r7, #28]
        break;
 8007a52:	e010      	b.n	8007a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a54:	4b8f      	ldr	r3, [pc, #572]	@ (8007c94 <UART_SetConfig+0x56c>)
 8007a56:	61fb      	str	r3, [r7, #28]
        break;
 8007a58:	e00d      	b.n	8007a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5a:	f7fd fcf5 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007a5e:	61f8      	str	r0, [r7, #28]
        break;
 8007a60:	e009      	b.n	8007a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a66:	61fb      	str	r3, [r7, #28]
        break;
 8007a68:	e005      	b.n	8007a76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80fb 	beq.w	8007c74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	4613      	mov	r3, r2
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	4413      	add	r3, r2
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d305      	bcc.n	8007a9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d903      	bls.n	8007aa2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007aa0:	e0e8      	b.n	8007c74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	4615      	mov	r5, r2
 8007aaa:	f04f 0200 	mov.w	r2, #0
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	022b      	lsls	r3, r5, #8
 8007ab4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ab8:	0222      	lsls	r2, r4, #8
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	6849      	ldr	r1, [r1, #4]
 8007abe:	0849      	lsrs	r1, r1, #1
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	4688      	mov	r8, r1
 8007ac4:	4681      	mov	r9, r0
 8007ac6:	eb12 0a08 	adds.w	sl, r2, r8
 8007aca:	eb43 0b09 	adc.w	fp, r3, r9
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007adc:	4650      	mov	r0, sl
 8007ade:	4659      	mov	r1, fp
 8007ae0:	f7f9 f8e2 	bl	8000ca8 <__aeabi_uldivmod>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4613      	mov	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007af2:	d308      	bcc.n	8007b06 <UART_SetConfig+0x3de>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007afa:	d204      	bcs.n	8007b06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	60da      	str	r2, [r3, #12]
 8007b04:	e0b6      	b.n	8007c74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b0c:	e0b2      	b.n	8007c74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b16:	d15e      	bne.n	8007bd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007b18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	d828      	bhi.n	8007b72 <UART_SetConfig+0x44a>
 8007b20:	a201      	add	r2, pc, #4	@ (adr r2, 8007b28 <UART_SetConfig+0x400>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007b4d 	.word	0x08007b4d
 8007b2c:	08007b55 	.word	0x08007b55
 8007b30:	08007b5d 	.word	0x08007b5d
 8007b34:	08007b73 	.word	0x08007b73
 8007b38:	08007b63 	.word	0x08007b63
 8007b3c:	08007b73 	.word	0x08007b73
 8007b40:	08007b73 	.word	0x08007b73
 8007b44:	08007b73 	.word	0x08007b73
 8007b48:	08007b6b 	.word	0x08007b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b4c:	f7fd fd12 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8007b50:	61f8      	str	r0, [r7, #28]
        break;
 8007b52:	e014      	b.n	8007b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b54:	f7fd fd24 	bl	80055a0 <HAL_RCC_GetPCLK2Freq>
 8007b58:	61f8      	str	r0, [r7, #28]
        break;
 8007b5a:	e010      	b.n	8007b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8007c94 <UART_SetConfig+0x56c>)
 8007b5e:	61fb      	str	r3, [r7, #28]
        break;
 8007b60:	e00d      	b.n	8007b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b62:	f7fd fc71 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007b66:	61f8      	str	r0, [r7, #28]
        break;
 8007b68:	e009      	b.n	8007b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b6e:	61fb      	str	r3, [r7, #28]
        break;
 8007b70:	e005      	b.n	8007b7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d077      	beq.n	8007c74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	005a      	lsls	r2, r3, #1
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	085b      	lsrs	r3, r3, #1
 8007b8e:	441a      	add	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2b0f      	cmp	r3, #15
 8007b9e:	d916      	bls.n	8007bce <UART_SetConfig+0x4a6>
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ba6:	d212      	bcs.n	8007bce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f023 030f 	bic.w	r3, r3, #15
 8007bb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	085b      	lsrs	r3, r3, #1
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	8afb      	ldrh	r3, [r7, #22]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	8afa      	ldrh	r2, [r7, #22]
 8007bca:	60da      	str	r2, [r3, #12]
 8007bcc:	e052      	b.n	8007c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bd4:	e04e      	b.n	8007c74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d827      	bhi.n	8007c2e <UART_SetConfig+0x506>
 8007bde:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <UART_SetConfig+0x4bc>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c19 	.word	0x08007c19
 8007bf0:	08007c2f 	.word	0x08007c2f
 8007bf4:	08007c1f 	.word	0x08007c1f
 8007bf8:	08007c2f 	.word	0x08007c2f
 8007bfc:	08007c2f 	.word	0x08007c2f
 8007c00:	08007c2f 	.word	0x08007c2f
 8007c04:	08007c27 	.word	0x08007c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c08:	f7fd fcb4 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8007c0c:	61f8      	str	r0, [r7, #28]
        break;
 8007c0e:	e014      	b.n	8007c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c10:	f7fd fcc6 	bl	80055a0 <HAL_RCC_GetPCLK2Freq>
 8007c14:	61f8      	str	r0, [r7, #28]
        break;
 8007c16:	e010      	b.n	8007c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c18:	4b1e      	ldr	r3, [pc, #120]	@ (8007c94 <UART_SetConfig+0x56c>)
 8007c1a:	61fb      	str	r3, [r7, #28]
        break;
 8007c1c:	e00d      	b.n	8007c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1e:	f7fd fc13 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007c22:	61f8      	str	r0, [r7, #28]
        break;
 8007c24:	e009      	b.n	8007c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c2a:	61fb      	str	r3, [r7, #28]
        break;
 8007c2c:	e005      	b.n	8007c3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c38:	bf00      	nop
    }

    if (pclk != 0U)
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d019      	beq.n	8007c74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	085a      	lsrs	r2, r3, #1
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	441a      	add	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d909      	bls.n	8007c6e <UART_SetConfig+0x546>
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c60:	d205      	bcs.n	8007c6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60da      	str	r2, [r3, #12]
 8007c6c:	e002      	b.n	8007c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007c80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3728      	adds	r7, #40	@ 0x28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c8e:	bf00      	nop
 8007c90:	40008000 	.word	0x40008000
 8007c94:	00f42400 	.word	0x00f42400

08007c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	f003 0308 	and.w	r3, r3, #8
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01a      	beq.n	8007dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d96:	d10a      	bne.n	8007dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	605a      	str	r2, [r3, #4]
  }
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b098      	sub	sp, #96	@ 0x60
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dec:	f7fa fe44 	bl	8002a78 <HAL_GetTick>
 8007df0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d12e      	bne.n	8007e5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f88c 	bl	8007f2c <UART_WaitOnFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d021      	beq.n	8007e5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e6      	bne.n	8007e1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e062      	b.n	8007f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d149      	bne.n	8007f00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e74:	2200      	movs	r2, #0
 8007e76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f856 	bl	8007f2c <UART_WaitOnFlagUntilTimeout>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d03c      	beq.n	8007f00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	623b      	str	r3, [r7, #32]
   return(result);
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ed8:	61fa      	str	r2, [r7, #28]
 8007eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	69b9      	ldr	r1, [r7, #24]
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e5      	bne.n	8007eb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e011      	b.n	8007f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3758      	adds	r7, #88	@ 0x58
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f3c:	e04f      	b.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f44:	d04b      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f46:	f7fa fd97 	bl	8002a78 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d302      	bcc.n	8007f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e04e      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d037      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b80      	cmp	r3, #128	@ 0x80
 8007f72:	d034      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b40      	cmp	r3, #64	@ 0x40
 8007f78:	d031      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d110      	bne.n	8007faa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f838 	bl	8008006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e029      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fb8:	d111      	bne.n	8007fde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f81e 	bl	8008006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e00f      	b.n	8007ffe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	bf0c      	ite	eq
 8007fee:	2301      	moveq	r3, #1
 8007ff0:	2300      	movne	r3, #0
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d0a0      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008006:	b480      	push	{r7}
 8008008:	b095      	sub	sp, #84	@ 0x54
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800802c:	643b      	str	r3, [r7, #64]	@ 0x40
 800802e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3308      	adds	r3, #8
 8008046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3308      	adds	r3, #8
 800805e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e5      	bne.n	8008040 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008078:	2b01      	cmp	r3, #1
 800807a:	d118      	bne.n	80080ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	60bb      	str	r3, [r7, #8]
   return(result);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f023 0310 	bic.w	r3, r3, #16
 8008090:	647b      	str	r3, [r7, #68]	@ 0x44
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6979      	ldr	r1, [r7, #20]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	613b      	str	r3, [r7, #16]
   return(result);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e6      	bne.n	800807c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80080c2:	bf00      	nop
 80080c4:	3754      	adds	r7, #84	@ 0x54
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080ce:	b084      	sub	sp, #16
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	f107 001c 	add.w	r0, r7, #28
 80080dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 fa25 	bl	800953c <USB_CoreReset>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80080f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d106      	bne.n	800810c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008102:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	639a      	str	r2, [r3, #56]	@ 0x38
 800810a:	e005      	b.n	8008118 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008124:	b004      	add	sp, #16
 8008126:	4770      	bx	lr

08008128 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008128:	b480      	push	{r7}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4613      	mov	r3, r2
 8008134:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d165      	bne.n	8008208 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4a3e      	ldr	r2, [pc, #248]	@ (8008238 <USB_SetTurnaroundTime+0x110>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d906      	bls.n	8008152 <USB_SetTurnaroundTime+0x2a>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4a3d      	ldr	r2, [pc, #244]	@ (800823c <USB_SetTurnaroundTime+0x114>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d202      	bcs.n	8008152 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800814c:	230f      	movs	r3, #15
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e05c      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4a39      	ldr	r2, [pc, #228]	@ (800823c <USB_SetTurnaroundTime+0x114>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d306      	bcc.n	8008168 <USB_SetTurnaroundTime+0x40>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	4a38      	ldr	r2, [pc, #224]	@ (8008240 <USB_SetTurnaroundTime+0x118>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d202      	bcs.n	8008168 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008162:	230e      	movs	r3, #14
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e051      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4a35      	ldr	r2, [pc, #212]	@ (8008240 <USB_SetTurnaroundTime+0x118>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d306      	bcc.n	800817e <USB_SetTurnaroundTime+0x56>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4a34      	ldr	r2, [pc, #208]	@ (8008244 <USB_SetTurnaroundTime+0x11c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d202      	bcs.n	800817e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008178:	230d      	movs	r3, #13
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e046      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	4a30      	ldr	r2, [pc, #192]	@ (8008244 <USB_SetTurnaroundTime+0x11c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d306      	bcc.n	8008194 <USB_SetTurnaroundTime+0x6c>
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	4a2f      	ldr	r2, [pc, #188]	@ (8008248 <USB_SetTurnaroundTime+0x120>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d802      	bhi.n	8008194 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800818e:	230c      	movs	r3, #12
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	e03b      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4a2c      	ldr	r2, [pc, #176]	@ (8008248 <USB_SetTurnaroundTime+0x120>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d906      	bls.n	80081aa <USB_SetTurnaroundTime+0x82>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4a2b      	ldr	r2, [pc, #172]	@ (800824c <USB_SetTurnaroundTime+0x124>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d802      	bhi.n	80081aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081a4:	230b      	movs	r3, #11
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e030      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4a27      	ldr	r2, [pc, #156]	@ (800824c <USB_SetTurnaroundTime+0x124>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d906      	bls.n	80081c0 <USB_SetTurnaroundTime+0x98>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4a26      	ldr	r2, [pc, #152]	@ (8008250 <USB_SetTurnaroundTime+0x128>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d802      	bhi.n	80081c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081ba:	230a      	movs	r3, #10
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	e025      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4a23      	ldr	r2, [pc, #140]	@ (8008250 <USB_SetTurnaroundTime+0x128>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d906      	bls.n	80081d6 <USB_SetTurnaroundTime+0xae>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4a22      	ldr	r2, [pc, #136]	@ (8008254 <USB_SetTurnaroundTime+0x12c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d202      	bcs.n	80081d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081d0:	2309      	movs	r3, #9
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e01a      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008254 <USB_SetTurnaroundTime+0x12c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d306      	bcc.n	80081ec <USB_SetTurnaroundTime+0xc4>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008258 <USB_SetTurnaroundTime+0x130>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d802      	bhi.n	80081ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081e6:	2308      	movs	r3, #8
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e00f      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008258 <USB_SetTurnaroundTime+0x130>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d906      	bls.n	8008202 <USB_SetTurnaroundTime+0xda>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4a19      	ldr	r2, [pc, #100]	@ (800825c <USB_SetTurnaroundTime+0x134>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d202      	bcs.n	8008202 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80081fc:	2307      	movs	r3, #7
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e004      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008202:	2306      	movs	r3, #6
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	e001      	b.n	800820c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008208:	2309      	movs	r3, #9
 800820a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	029b      	lsls	r3, r3, #10
 8008220:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008224:	431a      	orrs	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	00d8acbf 	.word	0x00d8acbf
 800823c:	00e4e1c0 	.word	0x00e4e1c0
 8008240:	00f42400 	.word	0x00f42400
 8008244:	01067380 	.word	0x01067380
 8008248:	011a499f 	.word	0x011a499f
 800824c:	01312cff 	.word	0x01312cff
 8008250:	014ca43f 	.word	0x014ca43f
 8008254:	016e3600 	.word	0x016e3600
 8008258:	01a6ab1f 	.word	0x01a6ab1f
 800825c:	01e84800 	.word	0x01e84800

08008260 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f043 0201 	orr.w	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f023 0201 	bic.w	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d115      	bne.n	80082f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082d2:	200a      	movs	r0, #10
 80082d4:	f7fa fbdc 	bl	8002a90 <HAL_Delay>
      ms += 10U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	330a      	adds	r3, #10
 80082dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 f8b3 	bl	800944a <USB_GetMode>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d01e      	beq.n	8008328 <USB_SetCurrentMode+0x84>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80082ee:	d9f0      	bls.n	80082d2 <USB_SetCurrentMode+0x2e>
 80082f0:	e01a      	b.n	8008328 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d115      	bne.n	8008324 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008304:	200a      	movs	r0, #10
 8008306:	f7fa fbc3 	bl	8002a90 <HAL_Delay>
      ms += 10U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	330a      	adds	r3, #10
 800830e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 f89a 	bl	800944a <USB_GetMode>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <USB_SetCurrentMode+0x84>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008320:	d9f0      	bls.n	8008304 <USB_SetCurrentMode+0x60>
 8008322:	e001      	b.n	8008328 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e005      	b.n	8008334 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2bc8      	cmp	r3, #200	@ 0xc8
 800832c:	d101      	bne.n	8008332 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800833c:	b084      	sub	sp, #16
 800833e:	b580      	push	{r7, lr}
 8008340:	b086      	sub	sp, #24
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800834a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008356:	2300      	movs	r3, #0
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	e009      	b.n	8008370 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	3340      	adds	r3, #64	@ 0x40
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	2200      	movs	r2, #0
 8008368:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	3301      	adds	r3, #1
 800836e:	613b      	str	r3, [r7, #16]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	2b0e      	cmp	r3, #14
 8008374:	d9f2      	bls.n	800835c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008376:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800837a:	2b00      	cmp	r3, #0
 800837c:	d11c      	bne.n	80083b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800838c:	f043 0302 	orr.w	r3, r3, #2
 8008390:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008396:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	e005      	b.n	80083c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083ca:	461a      	mov	r2, r3
 80083cc:	2300      	movs	r3, #0
 80083ce:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083d0:	2103      	movs	r1, #3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f95a 	bl	800868c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083d8:	2110      	movs	r1, #16
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f8f6 	bl	80085cc <USB_FlushTxFifo>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f920 	bl	8008630 <USB_FlushRxFifo>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008400:	461a      	mov	r2, r3
 8008402:	2300      	movs	r3, #0
 8008404:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800840c:	461a      	mov	r2, r3
 800840e:	2300      	movs	r3, #0
 8008410:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008418:	461a      	mov	r2, r3
 800841a:	2300      	movs	r3, #0
 800841c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800841e:	2300      	movs	r3, #0
 8008420:	613b      	str	r3, [r7, #16]
 8008422:	e043      	b.n	80084ac <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800843a:	d118      	bne.n	800846e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10a      	bne.n	8008458 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844e:	461a      	mov	r2, r3
 8008450:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	e013      	b.n	8008480 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008464:	461a      	mov	r2, r3
 8008466:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	e008      	b.n	8008480 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800847a:	461a      	mov	r2, r3
 800847c:	2300      	movs	r3, #0
 800847e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800848c:	461a      	mov	r2, r3
 800848e:	2300      	movs	r3, #0
 8008490:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800849e:	461a      	mov	r2, r3
 80084a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	3301      	adds	r3, #1
 80084aa:	613b      	str	r3, [r7, #16]
 80084ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084b0:	461a      	mov	r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d3b5      	bcc.n	8008424 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084b8:	2300      	movs	r3, #0
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	e043      	b.n	8008546 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084d4:	d118      	bne.n	8008508 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e8:	461a      	mov	r2, r3
 80084ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	e013      	b.n	800851a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fe:	461a      	mov	r2, r3
 8008500:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	e008      	b.n	800851a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008514:	461a      	mov	r2, r3
 8008516:	2300      	movs	r3, #0
 8008518:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008526:	461a      	mov	r2, r3
 8008528:	2300      	movs	r3, #0
 800852a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008538:	461a      	mov	r2, r3
 800853a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800853e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	3301      	adds	r3, #1
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800854a:	461a      	mov	r2, r3
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	4293      	cmp	r3, r2
 8008550:	d3b5      	bcc.n	80084be <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008564:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008572:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	f043 0210 	orr.w	r2, r3, #16
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699a      	ldr	r2, [r3, #24]
 8008584:	4b10      	ldr	r3, [pc, #64]	@ (80085c8 <USB_DevInit+0x28c>)
 8008586:	4313      	orrs	r3, r2
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800858c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f043 0208 	orr.w	r2, r3, #8
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d107      	bne.n	80085b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085b0:	f043 0304 	orr.w	r3, r3, #4
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085c4:	b004      	add	sp, #16
 80085c6:	4770      	bx	lr
 80085c8:	803c3800 	.word	0x803c3800

080085cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3301      	adds	r3, #1
 80085de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085e6:	d901      	bls.n	80085ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e01b      	b.n	8008624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	daf2      	bge.n	80085da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	019b      	lsls	r3, r3, #6
 80085fc:	f043 0220 	orr.w	r2, r3, #32
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3301      	adds	r3, #1
 8008608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008610:	d901      	bls.n	8008616 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e006      	b.n	8008624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b20      	cmp	r3, #32
 8008620:	d0f0      	beq.n	8008604 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3301      	adds	r3, #1
 8008640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008648:	d901      	bls.n	800864e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e018      	b.n	8008680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	daf2      	bge.n	800863c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2210      	movs	r2, #16
 800865e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800866c:	d901      	bls.n	8008672 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e006      	b.n	8008680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	f003 0310 	and.w	r3, r3, #16
 800867a:	2b10      	cmp	r3, #16
 800867c:	d0f0      	beq.n	8008660 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086ac:	4313      	orrs	r3, r2
 80086ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80086be:	b480      	push	{r7}
 80086c0:	b087      	sub	sp, #28
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 0306 	and.w	r3, r3, #6
 80086d6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d002      	beq.n	80086e4 <USB_GetDevSpeed+0x26>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b06      	cmp	r3, #6
 80086e2:	d102      	bne.n	80086ea <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80086e4:	2302      	movs	r3, #2
 80086e6:	75fb      	strb	r3, [r7, #23]
 80086e8:	e001      	b.n	80086ee <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80086ea:	230f      	movs	r3, #15
 80086ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	785b      	ldrb	r3, [r3, #1]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d13a      	bne.n	800878e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800871e:	69da      	ldr	r2, [r3, #28]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	2101      	movs	r1, #1
 800872a:	fa01 f303 	lsl.w	r3, r1, r3
 800872e:	b29b      	uxth	r3, r3
 8008730:	68f9      	ldr	r1, [r7, #12]
 8008732:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008736:	4313      	orrs	r3, r2
 8008738:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d155      	bne.n	80087fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	791b      	ldrb	r3, [r3, #4]
 800876a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800876c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	059b      	lsls	r3, r3, #22
 8008772:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008774:	4313      	orrs	r3, r2
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	0151      	lsls	r1, r2, #5
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	440a      	add	r2, r1
 800877e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	e036      	b.n	80087fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008794:	69da      	ldr	r2, [r3, #28]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	2101      	movs	r1, #1
 80087a0:	fa01 f303 	lsl.w	r3, r1, r3
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087ac:	4313      	orrs	r3, r2
 80087ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d11a      	bne.n	80087fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	791b      	ldrb	r3, [r3, #4]
 80087e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087e2:	430b      	orrs	r3, r1
 80087e4:	4313      	orrs	r3, r2
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	0151      	lsls	r1, r2, #5
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	440a      	add	r2, r1
 80087ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
	...

0800880c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	785b      	ldrb	r3, [r3, #1]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d161      	bne.n	80088ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800883a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800883e:	d11f      	bne.n	8008880 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	440a      	add	r2, r1
 8008856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800885a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800885e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	440a      	add	r2, r1
 8008876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800887a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800887e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	f003 030f 	and.w	r3, r3, #15
 8008890:	2101      	movs	r1, #1
 8008892:	fa01 f303 	lsl.w	r3, r1, r3
 8008896:	b29b      	uxth	r3, r3
 8008898:	43db      	mvns	r3, r3
 800889a:	68f9      	ldr	r1, [r7, #12]
 800889c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088a0:	4013      	ands	r3, r2
 80088a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088aa:	69da      	ldr	r2, [r3, #28]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	f003 030f 	and.w	r3, r3, #15
 80088b4:	2101      	movs	r1, #1
 80088b6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	43db      	mvns	r3, r3
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088c4:	4013      	ands	r3, r2
 80088c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	0159      	lsls	r1, r3, #5
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	440b      	add	r3, r1
 80088de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e2:	4619      	mov	r1, r3
 80088e4:	4b35      	ldr	r3, [pc, #212]	@ (80089bc <USB_DeactivateEndpoint+0x1b0>)
 80088e6:	4013      	ands	r3, r2
 80088e8:	600b      	str	r3, [r1, #0]
 80088ea:	e060      	b.n	80089ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008902:	d11f      	bne.n	8008944 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	0151      	lsls	r1, r2, #5
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	440a      	add	r2, r1
 800891a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800891e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008922:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	440a      	add	r2, r1
 800893a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800893e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008942:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800894a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	f003 030f 	and.w	r3, r3, #15
 8008954:	2101      	movs	r1, #1
 8008956:	fa01 f303 	lsl.w	r3, r1, r3
 800895a:	041b      	lsls	r3, r3, #16
 800895c:	43db      	mvns	r3, r3
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008964:	4013      	ands	r3, r2
 8008966:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800896e:	69da      	ldr	r2, [r3, #28]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	f003 030f 	and.w	r3, r3, #15
 8008978:	2101      	movs	r1, #1
 800897a:	fa01 f303 	lsl.w	r3, r1, r3
 800897e:	041b      	lsls	r3, r3, #16
 8008980:	43db      	mvns	r3, r3
 8008982:	68f9      	ldr	r1, [r7, #12]
 8008984:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008988:	4013      	ands	r3, r2
 800898a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	0159      	lsls	r1, r3, #5
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	440b      	add	r3, r1
 80089a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a6:	4619      	mov	r1, r3
 80089a8:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <USB_DeactivateEndpoint+0x1b4>)
 80089aa:	4013      	ands	r3, r2
 80089ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	ec337800 	.word	0xec337800
 80089c0:	eff37800 	.word	0xeff37800

080089c4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	f040 812d 	bne.w	8008c3c <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d132      	bne.n	8008a50 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	0151      	lsls	r1, r2, #5
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	440a      	add	r2, r1
 8008a00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a04:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a08:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	0151      	lsls	r1, r2, #5
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	440a      	add	r2, r1
 8008a24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a48:	0cdb      	lsrs	r3, r3, #19
 8008a4a:	04db      	lsls	r3, r3, #19
 8008a4c:	6113      	str	r3, [r2, #16]
 8008a4e:	e097      	b.n	8008b80 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	0151      	lsls	r1, r2, #5
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	440a      	add	r2, r1
 8008a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a6a:	0cdb      	lsrs	r3, r3, #19
 8008a6c:	04db      	lsls	r3, r3, #19
 8008a6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	0151      	lsls	r1, r2, #5
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	440a      	add	r2, r1
 8008a86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a8a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a8e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a92:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d11a      	bne.n	8008ad0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d903      	bls.n	8008aae <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	0151      	lsls	r1, r2, #5
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	440a      	add	r2, r1
 8008ac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ac8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008acc:	6113      	str	r3, [r2, #16]
 8008ace:	e044      	b.n	8008b5a <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	691a      	ldr	r2, [r3, #16]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	4413      	add	r3, r2
 8008ada:	1e5a      	subs	r2, r3, #1
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae4:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af2:	691a      	ldr	r2, [r3, #16]
 8008af4:	89fb      	ldrh	r3, [r7, #14]
 8008af6:	04d9      	lsls	r1, r3, #19
 8008af8:	4b8f      	ldr	r3, [pc, #572]	@ (8008d38 <USB_EPStartXfer+0x374>)
 8008afa:	400b      	ands	r3, r1
 8008afc:	6939      	ldr	r1, [r7, #16]
 8008afe:	0148      	lsls	r0, r1, #5
 8008b00:	6979      	ldr	r1, [r7, #20]
 8008b02:	4401      	add	r1, r0
 8008b04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	791b      	ldrb	r3, [r3, #4]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d122      	bne.n	8008b5a <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	0151      	lsls	r1, r2, #5
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	440a      	add	r2, r1
 8008b2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b2e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008b32:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b40:	691a      	ldr	r2, [r3, #16]
 8008b42:	89fb      	ldrh	r3, [r7, #14]
 8008b44:	075b      	lsls	r3, r3, #29
 8008b46:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008b4a:	6939      	ldr	r1, [r7, #16]
 8008b4c:	0148      	lsls	r0, r1, #5
 8008b4e:	6979      	ldr	r1, [r7, #20]
 8008b50:	4401      	add	r1, r0
 8008b52:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b56:	4313      	orrs	r3, r2
 8008b58:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b66:	691a      	ldr	r2, [r3, #16]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b70:	6939      	ldr	r1, [r7, #16]
 8008b72:	0148      	lsls	r0, r1, #5
 8008b74:	6979      	ldr	r1, [r7, #20]
 8008b76:	4401      	add	r1, r0
 8008b78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b9e:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	791b      	ldrb	r3, [r3, #4]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d015      	beq.n	8008bd4 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 813a 	beq.w	8008e26 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	f003 030f 	and.w	r3, r3, #15
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc8:	6979      	ldr	r1, [r7, #20]
 8008bca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	634b      	str	r3, [r1, #52]	@ 0x34
 8008bd2:	e128      	b.n	8008e26 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d110      	bne.n	8008c06 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	0151      	lsls	r1, r2, #5
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	440a      	add	r2, r1
 8008bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	e00f      	b.n	8008c26 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	0151      	lsls	r1, r2, #5
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	440a      	add	r2, r1
 8008c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c24:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68d9      	ldr	r1, [r3, #12]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781a      	ldrb	r2, [r3, #0]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f9a7 	bl	8008f88 <USB_WritePacket>
 8008c3a:	e0f4      	b.n	8008e26 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	0151      	lsls	r1, r2, #5
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	440a      	add	r2, r1
 8008c52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c56:	0cdb      	lsrs	r3, r3, #19
 8008c58:	04db      	lsls	r3, r3, #19
 8008c5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	0151      	lsls	r1, r2, #5
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	440a      	add	r2, r1
 8008c72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c76:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c7a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c7e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d12f      	bne.n	8008ce6 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	689a      	ldr	r2, [r3, #8]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb4:	6939      	ldr	r1, [r7, #16]
 8008cb6:	0148      	lsls	r0, r1, #5
 8008cb8:	6979      	ldr	r1, [r7, #20]
 8008cba:	4401      	add	r1, r0
 8008cbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	0151      	lsls	r1, r2, #5
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	440a      	add	r2, r1
 8008cda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ce2:	6113      	str	r3, [r2, #16]
 8008ce4:	e062      	b.n	8008dac <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d126      	bne.n	8008d3c <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cfa:	691a      	ldr	r2, [r3, #16]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d04:	6939      	ldr	r1, [r7, #16]
 8008d06:	0148      	lsls	r0, r1, #5
 8008d08:	6979      	ldr	r1, [r7, #20]
 8008d0a:	4401      	add	r1, r0
 8008d0c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d10:	4313      	orrs	r3, r2
 8008d12:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	0151      	lsls	r1, r2, #5
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	440a      	add	r2, r1
 8008d2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d32:	6113      	str	r3, [r2, #16]
 8008d34:	e03a      	b.n	8008dac <USB_EPStartXfer+0x3e8>
 8008d36:	bf00      	nop
 8008d38:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	4413      	add	r3, r2
 8008d46:	1e5a      	subs	r2, r3, #1
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d50:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	89fa      	ldrh	r2, [r7, #14]
 8008d58:	fb03 f202 	mul.w	r2, r3, r2
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d6c:	691a      	ldr	r2, [r3, #16]
 8008d6e:	89fb      	ldrh	r3, [r7, #14]
 8008d70:	04d9      	lsls	r1, r3, #19
 8008d72:	4b2f      	ldr	r3, [pc, #188]	@ (8008e30 <USB_EPStartXfer+0x46c>)
 8008d74:	400b      	ands	r3, r1
 8008d76:	6939      	ldr	r1, [r7, #16]
 8008d78:	0148      	lsls	r0, r1, #5
 8008d7a:	6979      	ldr	r1, [r7, #20]
 8008d7c:	4401      	add	r1, r0
 8008d7e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d82:	4313      	orrs	r3, r2
 8008d84:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d92:	691a      	ldr	r2, [r3, #16]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d9c:	6939      	ldr	r1, [r7, #16]
 8008d9e:	0148      	lsls	r0, r1, #5
 8008da0:	6979      	ldr	r1, [r7, #20]
 8008da2:	4401      	add	r1, r0
 8008da4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008da8:	4313      	orrs	r3, r2
 8008daa:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	791b      	ldrb	r3, [r3, #4]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d128      	bne.n	8008e06 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d110      	bne.n	8008de6 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	0151      	lsls	r1, r2, #5
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	440a      	add	r2, r1
 8008dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	e00f      	b.n	8008e06 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e04:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	0151      	lsls	r1, r2, #5
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	440a      	add	r2, r1
 8008e1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	1ff80000 	.word	0x1ff80000

08008e34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	785b      	ldrb	r3, [r3, #1]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d14a      	bne.n	8008ee8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e6a:	f040 8086 	bne.w	8008f7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	7812      	ldrb	r2, [r2, #0]
 8008e82:	0151      	lsls	r1, r2, #5
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	440a      	add	r2, r1
 8008e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	7812      	ldrb	r2, [r2, #0]
 8008ea6:	0151      	lsls	r1, r2, #5
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	440a      	add	r2, r1
 8008eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008eb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d902      	bls.n	8008ecc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8008eca:	e056      	b.n	8008f7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ee4:	d0e7      	beq.n	8008eb6 <USB_EPStopXfer+0x82>
 8008ee6:	e048      	b.n	8008f7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f00:	d13b      	bne.n	8008f7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	7812      	ldrb	r2, [r2, #0]
 8008f16:	0151      	lsls	r1, r2, #5
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	440a      	add	r2, r1
 8008f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	0151      	lsls	r1, r2, #5
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	440a      	add	r2, r1
 8008f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d902      	bls.n	8008f60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f5e:	e00c      	b.n	8008f7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f78:	d0e7      	beq.n	8008f4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b089      	sub	sp, #36	@ 0x24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4611      	mov	r1, r2
 8008f94:	461a      	mov	r2, r3
 8008f96:	460b      	mov	r3, r1
 8008f98:	71fb      	strb	r3, [r7, #7]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008fa6:	88bb      	ldrh	r3, [r7, #4]
 8008fa8:	3303      	adds	r3, #3
 8008faa:	089b      	lsrs	r3, r3, #2
 8008fac:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61bb      	str	r3, [r7, #24]
 8008fb2:	e018      	b.n	8008fe6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	031a      	lsls	r2, r3, #12
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d3e2      	bcc.n	8008fb4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3724      	adds	r7, #36	@ 0x24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b08b      	sub	sp, #44	@ 0x2c
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	4613      	mov	r3, r2
 8009008:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	089b      	lsrs	r3, r3, #2
 8009016:	b29b      	uxth	r3, r3
 8009018:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009022:	2300      	movs	r3, #0
 8009024:	623b      	str	r3, [r7, #32]
 8009026:	e014      	b.n	8009052 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009032:	601a      	str	r2, [r3, #0]
    pDest++;
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	3301      	adds	r3, #1
 8009038:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	3301      	adds	r3, #1
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009042:	3301      	adds	r3, #1
 8009044:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	3301      	adds	r3, #1
 800904a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	3301      	adds	r3, #1
 8009050:	623b      	str	r3, [r7, #32]
 8009052:	6a3a      	ldr	r2, [r7, #32]
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	429a      	cmp	r2, r3
 8009058:	d3e6      	bcc.n	8009028 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800905a:	8bfb      	ldrh	r3, [r7, #30]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01e      	beq.n	800909e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800906a:	461a      	mov	r2, r3
 800906c:	f107 0310 	add.w	r3, r7, #16
 8009070:	6812      	ldr	r2, [r2, #0]
 8009072:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	fa22 f303 	lsr.w	r3, r2, r3
 8009080:	b2da      	uxtb	r2, r3
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	701a      	strb	r2, [r3, #0]
      i++;
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	3301      	adds	r3, #1
 800908a:	623b      	str	r3, [r7, #32]
      pDest++;
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	3301      	adds	r3, #1
 8009090:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009092:	8bfb      	ldrh	r3, [r7, #30]
 8009094:	3b01      	subs	r3, #1
 8009096:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009098:	8bfb      	ldrh	r3, [r7, #30]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1ea      	bne.n	8009074 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800909e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	372c      	adds	r7, #44	@ 0x2c
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	785b      	ldrb	r3, [r3, #1]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d12c      	bne.n	8009122 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	db12      	blt.n	8009100 <USB_EPSetStall+0x54>
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00f      	beq.n	8009100 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4413      	add	r3, r2
 8009108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	0151      	lsls	r1, r2, #5
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	440a      	add	r2, r1
 8009116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800911a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	e02b      	b.n	800917a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	db12      	blt.n	800915a <USB_EPSetStall+0xae>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00f      	beq.n	800915a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	0151      	lsls	r1, r2, #5
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	440a      	add	r2, r1
 8009150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009154:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009158:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	440a      	add	r2, r1
 8009170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009174:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009178:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	785b      	ldrb	r3, [r3, #1]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d128      	bne.n	80091f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	0151      	lsls	r1, r2, #5
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	440a      	add	r2, r1
 80091ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	791b      	ldrb	r3, [r3, #4]
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d003      	beq.n	80091d4 <USB_EPClearStall+0x4c>
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	791b      	ldrb	r3, [r3, #4]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d138      	bne.n	8009246 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	e027      	b.n	8009246 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	440a      	add	r2, r1
 800920c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009210:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009214:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	791b      	ldrb	r3, [r3, #4]
 800921a:	2b03      	cmp	r3, #3
 800921c:	d003      	beq.n	8009226 <USB_EPClearStall+0x9e>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	791b      	ldrb	r3, [r3, #4]
 8009222:	2b02      	cmp	r3, #2
 8009224:	d10f      	bne.n	8009246 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	440a      	add	r2, r1
 800923c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009244:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009272:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009276:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009288:	68f9      	ldr	r1, [r7, #12]
 800928a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800928e:	4313      	orrs	r3, r2
 8009290:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092ba:	f023 0303 	bic.w	r3, r3, #3
 80092be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092ce:	f023 0302 	bic.w	r3, r3, #2
 80092d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009310:	f043 0302 	orr.w	r3, r3, #2
 8009314:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4013      	ands	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800933c:	68fb      	ldr	r3, [r7, #12]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	4013      	ands	r3, r2
 800936c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	0c1b      	lsrs	r3, r3, #16
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	4013      	ands	r3, r2
 80093a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	b29b      	uxth	r3, r3
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4013      	ands	r3, r2
 80093de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093e0:	68bb      	ldr	r3, [r7, #8]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b087      	sub	sp, #28
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	460b      	mov	r3, r1
 80093f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800940e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009410:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	f003 030f 	and.w	r3, r3, #15
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	fa22 f303 	lsr.w	r3, r2, r3
 800941e:	01db      	lsls	r3, r3, #7
 8009420:	b2db      	uxtb	r3, r3
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	4313      	orrs	r3, r2
 8009426:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	4013      	ands	r3, r2
 800943a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800943c:	68bb      	ldr	r3, [r7, #8]
}
 800943e:	4618      	mov	r0, r3
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	f003 0301 	and.w	r3, r3, #1
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009466:	b480      	push	{r7}
 8009468:	b085      	sub	sp, #20
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009480:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009484:	f023 0307 	bic.w	r3, r3, #7
 8009488:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800949c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	333c      	adds	r3, #60	@ 0x3c
 80094be:	3304      	adds	r3, #4
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009538 <USB_EP0_OutStart+0x8c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d90a      	bls.n	80094e2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094dc:	d101      	bne.n	80094e2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	e024      	b.n	800952c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094e8:	461a      	mov	r2, r3
 80094ea:	2300      	movs	r3, #0
 80094ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009500:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009510:	f043 0318 	orr.w	r3, r3, #24
 8009514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009524:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009528:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	4f54300a 	.word	0x4f54300a

0800953c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	3301      	adds	r3, #1
 800954c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009554:	d901      	bls.n	800955a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e01b      	b.n	8009592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	2b00      	cmp	r3, #0
 8009560:	daf2      	bge.n	8009548 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f043 0201 	orr.w	r2, r3, #1
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800957e:	d901      	bls.n	8009584 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e006      	b.n	8009592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b01      	cmp	r3, #1
 800958e:	d0f0      	beq.n	8009572 <USB_CoreReset+0x36>

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
	...

080095a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80095ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80095b0:	f002 fe40 	bl	800c234 <USBD_static_malloc>
 80095b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d109      	bne.n	80095d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	32b0      	adds	r2, #176	@ 0xb0
 80095c6:	2100      	movs	r1, #0
 80095c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80095cc:	2302      	movs	r3, #2
 80095ce:	e0d4      	b.n	800977a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80095d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80095d4:	2100      	movs	r1, #0
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f004 fb07 	bl	800dbea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	32b0      	adds	r2, #176	@ 0xb0
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	32b0      	adds	r2, #176	@ 0xb0
 80095f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	7c1b      	ldrb	r3, [r3, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d138      	bne.n	800967a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009608:	4b5e      	ldr	r3, [pc, #376]	@ (8009784 <USBD_CDC_Init+0x1e4>)
 800960a:	7819      	ldrb	r1, [r3, #0]
 800960c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009610:	2202      	movs	r2, #2
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f002 fbfa 	bl	800be0c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009618:	4b5a      	ldr	r3, [pc, #360]	@ (8009784 <USBD_CDC_Init+0x1e4>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	f003 020f 	and.w	r2, r3, #15
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	440b      	add	r3, r1
 800962c:	3324      	adds	r3, #36	@ 0x24
 800962e:	2201      	movs	r2, #1
 8009630:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009632:	4b55      	ldr	r3, [pc, #340]	@ (8009788 <USBD_CDC_Init+0x1e8>)
 8009634:	7819      	ldrb	r1, [r3, #0]
 8009636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800963a:	2202      	movs	r2, #2
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f002 fbe5 	bl	800be0c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009642:	4b51      	ldr	r3, [pc, #324]	@ (8009788 <USBD_CDC_Init+0x1e8>)
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	f003 020f 	and.w	r2, r3, #15
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	4613      	mov	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	440b      	add	r3, r1
 8009656:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800965a:	2201      	movs	r2, #1
 800965c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800965e:	4b4b      	ldr	r3, [pc, #300]	@ (800978c <USBD_CDC_Init+0x1ec>)
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	f003 020f 	and.w	r2, r3, #15
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	3326      	adds	r3, #38	@ 0x26
 8009674:	2210      	movs	r2, #16
 8009676:	801a      	strh	r2, [r3, #0]
 8009678:	e035      	b.n	80096e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800967a:	4b42      	ldr	r3, [pc, #264]	@ (8009784 <USBD_CDC_Init+0x1e4>)
 800967c:	7819      	ldrb	r1, [r3, #0]
 800967e:	2340      	movs	r3, #64	@ 0x40
 8009680:	2202      	movs	r2, #2
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f002 fbc2 	bl	800be0c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009688:	4b3e      	ldr	r3, [pc, #248]	@ (8009784 <USBD_CDC_Init+0x1e4>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	f003 020f 	and.w	r2, r3, #15
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	3324      	adds	r3, #36	@ 0x24
 800969e:	2201      	movs	r2, #1
 80096a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096a2:	4b39      	ldr	r3, [pc, #228]	@ (8009788 <USBD_CDC_Init+0x1e8>)
 80096a4:	7819      	ldrb	r1, [r3, #0]
 80096a6:	2340      	movs	r3, #64	@ 0x40
 80096a8:	2202      	movs	r2, #2
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f002 fbae 	bl	800be0c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096b0:	4b35      	ldr	r3, [pc, #212]	@ (8009788 <USBD_CDC_Init+0x1e8>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	f003 020f 	and.w	r2, r3, #15
 80096b8:	6879      	ldr	r1, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096c8:	2201      	movs	r2, #1
 80096ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096cc:	4b2f      	ldr	r3, [pc, #188]	@ (800978c <USBD_CDC_Init+0x1ec>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 020f 	and.w	r2, r3, #15
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	3326      	adds	r3, #38	@ 0x26
 80096e2:	2210      	movs	r2, #16
 80096e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096e6:	4b29      	ldr	r3, [pc, #164]	@ (800978c <USBD_CDC_Init+0x1ec>)
 80096e8:	7819      	ldrb	r1, [r3, #0]
 80096ea:	2308      	movs	r3, #8
 80096ec:	2203      	movs	r2, #3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f002 fb8c 	bl	800be0c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80096f4:	4b25      	ldr	r3, [pc, #148]	@ (800978c <USBD_CDC_Init+0x1ec>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f003 020f 	and.w	r2, r3, #15
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	440b      	add	r3, r1
 8009708:	3324      	adds	r3, #36	@ 0x24
 800970a:	2201      	movs	r2, #1
 800970c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	33b0      	adds	r3, #176	@ 0xb0
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009744:	2302      	movs	r3, #2
 8009746:	e018      	b.n	800977a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7c1b      	ldrb	r3, [r3, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10a      	bne.n	8009766 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009750:	4b0d      	ldr	r3, [pc, #52]	@ (8009788 <USBD_CDC_Init+0x1e8>)
 8009752:	7819      	ldrb	r1, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800975a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f002 fcce 	bl	800c100 <USBD_LL_PrepareReceive>
 8009764:	e008      	b.n	8009778 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009766:	4b08      	ldr	r3, [pc, #32]	@ (8009788 <USBD_CDC_Init+0x1e8>)
 8009768:	7819      	ldrb	r1, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009770:	2340      	movs	r3, #64	@ 0x40
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f002 fcc4 	bl	800c100 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000183 	.word	0x20000183
 8009788:	20000184 	.word	0x20000184
 800978c:	20000185 	.word	0x20000185

08009790 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800979c:	4b3a      	ldr	r3, [pc, #232]	@ (8009888 <USBD_CDC_DeInit+0xf8>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f002 fb70 	bl	800be88 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80097a8:	4b37      	ldr	r3, [pc, #220]	@ (8009888 <USBD_CDC_DeInit+0xf8>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f003 020f 	and.w	r2, r3, #15
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	3324      	adds	r3, #36	@ 0x24
 80097be:	2200      	movs	r2, #0
 80097c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80097c2:	4b32      	ldr	r3, [pc, #200]	@ (800988c <USBD_CDC_DeInit+0xfc>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f002 fb5d 	bl	800be88 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80097ce:	4b2f      	ldr	r3, [pc, #188]	@ (800988c <USBD_CDC_DeInit+0xfc>)
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	f003 020f 	and.w	r2, r3, #15
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	440b      	add	r3, r1
 80097e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097e6:	2200      	movs	r2, #0
 80097e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80097ea:	4b29      	ldr	r3, [pc, #164]	@ (8009890 <USBD_CDC_DeInit+0x100>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f002 fb49 	bl	800be88 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80097f6:	4b26      	ldr	r3, [pc, #152]	@ (8009890 <USBD_CDC_DeInit+0x100>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	f003 020f 	and.w	r2, r3, #15
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	440b      	add	r3, r1
 800980a:	3324      	adds	r3, #36	@ 0x24
 800980c:	2200      	movs	r2, #0
 800980e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009810:	4b1f      	ldr	r3, [pc, #124]	@ (8009890 <USBD_CDC_DeInit+0x100>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 020f 	and.w	r2, r3, #15
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	3326      	adds	r3, #38	@ 0x26
 8009826:	2200      	movs	r2, #0
 8009828:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	32b0      	adds	r2, #176	@ 0xb0
 8009834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01f      	beq.n	800987c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	33b0      	adds	r3, #176	@ 0xb0
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	32b0      	adds	r2, #176	@ 0xb0
 800985a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985e:	4618      	mov	r0, r3
 8009860:	f002 fcf6 	bl	800c250 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	32b0      	adds	r2, #176	@ 0xb0
 800986e:	2100      	movs	r1, #0
 8009870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000183 	.word	0x20000183
 800988c:	20000184 	.word	0x20000184
 8009890:	20000185 	.word	0x20000185

08009894 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	32b0      	adds	r2, #176	@ 0xb0
 80098a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80098ae:	2300      	movs	r3, #0
 80098b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80098b2:	2300      	movs	r3, #0
 80098b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e0bf      	b.n	8009a44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d050      	beq.n	8009972 <USBD_CDC_Setup+0xde>
 80098d0:	2b20      	cmp	r3, #32
 80098d2:	f040 80af 	bne.w	8009a34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	88db      	ldrh	r3, [r3, #6]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d03a      	beq.n	8009954 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	b25b      	sxtb	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da1b      	bge.n	8009920 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	33b0      	adds	r3, #176	@ 0xb0
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80098fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	88d2      	ldrh	r2, [r2, #6]
 8009904:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	88db      	ldrh	r3, [r3, #6]
 800990a:	2b07      	cmp	r3, #7
 800990c:	bf28      	it	cs
 800990e:	2307      	movcs	r3, #7
 8009910:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	89fa      	ldrh	r2, [r7, #14]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 fdbd 	bl	800b498 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800991e:	e090      	b.n	8009a42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	785a      	ldrb	r2, [r3, #1]
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	88db      	ldrh	r3, [r3, #6]
 800992e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009930:	d803      	bhi.n	800993a <USBD_CDC_Setup+0xa6>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	88db      	ldrh	r3, [r3, #6]
 8009936:	b2da      	uxtb	r2, r3
 8009938:	e000      	b.n	800993c <USBD_CDC_Setup+0xa8>
 800993a:	2240      	movs	r2, #64	@ 0x40
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009942:	6939      	ldr	r1, [r7, #16]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800994a:	461a      	mov	r2, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 fdcf 	bl	800b4f0 <USBD_CtlPrepareRx>
      break;
 8009952:	e076      	b.n	8009a42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	33b0      	adds	r3, #176	@ 0xb0
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	7850      	ldrb	r0, [r2, #1]
 800996a:	2200      	movs	r2, #0
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	4798      	blx	r3
      break;
 8009970:	e067      	b.n	8009a42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	2b0b      	cmp	r3, #11
 8009978:	d851      	bhi.n	8009a1e <USBD_CDC_Setup+0x18a>
 800997a:	a201      	add	r2, pc, #4	@ (adr r2, 8009980 <USBD_CDC_Setup+0xec>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	080099b1 	.word	0x080099b1
 8009984:	08009a2d 	.word	0x08009a2d
 8009988:	08009a1f 	.word	0x08009a1f
 800998c:	08009a1f 	.word	0x08009a1f
 8009990:	08009a1f 	.word	0x08009a1f
 8009994:	08009a1f 	.word	0x08009a1f
 8009998:	08009a1f 	.word	0x08009a1f
 800999c:	08009a1f 	.word	0x08009a1f
 80099a0:	08009a1f 	.word	0x08009a1f
 80099a4:	08009a1f 	.word	0x08009a1f
 80099a8:	080099db 	.word	0x080099db
 80099ac:	08009a05 	.word	0x08009a05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d107      	bne.n	80099cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099bc:	f107 030a 	add.w	r3, r7, #10
 80099c0:	2202      	movs	r2, #2
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fd67 	bl	800b498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ca:	e032      	b.n	8009a32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 fce5 	bl	800b39e <USBD_CtlError>
            ret = USBD_FAIL;
 80099d4:	2303      	movs	r3, #3
 80099d6:	75fb      	strb	r3, [r7, #23]
          break;
 80099d8:	e02b      	b.n	8009a32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d107      	bne.n	80099f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80099e6:	f107 030d 	add.w	r3, r7, #13
 80099ea:	2201      	movs	r2, #1
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 fd52 	bl	800b498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099f4:	e01d      	b.n	8009a32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f001 fcd0 	bl	800b39e <USBD_CtlError>
            ret = USBD_FAIL;
 80099fe:	2303      	movs	r3, #3
 8009a00:	75fb      	strb	r3, [r7, #23]
          break;
 8009a02:	e016      	b.n	8009a32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d00f      	beq.n	8009a30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f001 fcc3 	bl	800b39e <USBD_CtlError>
            ret = USBD_FAIL;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a1c:	e008      	b.n	8009a30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 fcbc 	bl	800b39e <USBD_CtlError>
          ret = USBD_FAIL;
 8009a26:	2303      	movs	r3, #3
 8009a28:	75fb      	strb	r3, [r7, #23]
          break;
 8009a2a:	e002      	b.n	8009a32 <USBD_CDC_Setup+0x19e>
          break;
 8009a2c:	bf00      	nop
 8009a2e:	e008      	b.n	8009a42 <USBD_CDC_Setup+0x1ae>
          break;
 8009a30:	bf00      	nop
      }
      break;
 8009a32:	e006      	b.n	8009a42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 fcb1 	bl	800b39e <USBD_CtlError>
      ret = USBD_FAIL;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a40:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3718      	adds	r7, #24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	32b0      	adds	r2, #176	@ 0xb0
 8009a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e065      	b.n	8009b42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	32b0      	adds	r2, #176	@ 0xb0
 8009a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	f003 020f 	and.w	r2, r3, #15
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	3318      	adds	r3, #24
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d02f      	beq.n	8009b00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	f003 020f 	and.w	r2, r3, #15
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	3318      	adds	r3, #24
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	f003 010f 	and.w	r1, r3, #15
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	00db      	lsls	r3, r3, #3
 8009ac2:	440b      	add	r3, r1
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4403      	add	r3, r0
 8009ac8:	331c      	adds	r3, #28
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	fbb2 f1f3 	udiv	r1, r2, r3
 8009ad0:	fb01 f303 	mul.w	r3, r1, r3
 8009ad4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d112      	bne.n	8009b00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	f003 020f 	and.w	r2, r3, #15
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	440b      	add	r3, r1
 8009aec:	3318      	adds	r3, #24
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009af2:	78f9      	ldrb	r1, [r7, #3]
 8009af4:	2300      	movs	r3, #0
 8009af6:	2200      	movs	r2, #0
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f002 fac9 	bl	800c090 <USBD_LL_Transmit>
 8009afe:	e01f      	b.n	8009b40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	33b0      	adds	r3, #176	@ 0xb0
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d010      	beq.n	8009b40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	33b0      	adds	r3, #176	@ 0xb0
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009b3c:	78fa      	ldrb	r2, [r7, #3]
 8009b3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	460b      	mov	r3, r1
 8009b54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	32b0      	adds	r2, #176	@ 0xb0
 8009b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	32b0      	adds	r2, #176	@ 0xb0
 8009b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e01a      	b.n	8009bb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b7c:	78fb      	ldrb	r3, [r7, #3]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f002 faf5 	bl	800c170 <USBD_LL_GetRxDataSize>
 8009b86:	4602      	mov	r2, r0
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	33b0      	adds	r3, #176	@ 0xb0
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009bac:	4611      	mov	r1, r2
 8009bae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	32b0      	adds	r2, #176	@ 0xb0
 8009bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e024      	b.n	8009c26 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	33b0      	adds	r3, #176	@ 0xb0
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d019      	beq.n	8009c24 <USBD_CDC_EP0_RxReady+0x6a>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009bf6:	2bff      	cmp	r3, #255	@ 0xff
 8009bf8:	d014      	beq.n	8009c24 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	33b0      	adds	r3, #176	@ 0xb0
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	22ff      	movs	r2, #255	@ 0xff
 8009c20:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c38:	2182      	movs	r1, #130	@ 0x82
 8009c3a:	4818      	ldr	r0, [pc, #96]	@ (8009c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c3c:	f000 fd4f 	bl	800a6de <USBD_GetEpDesc>
 8009c40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c42:	2101      	movs	r1, #1
 8009c44:	4815      	ldr	r0, [pc, #84]	@ (8009c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c46:	f000 fd4a 	bl	800a6de <USBD_GetEpDesc>
 8009c4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c4c:	2181      	movs	r1, #129	@ 0x81
 8009c4e:	4813      	ldr	r0, [pc, #76]	@ (8009c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c50:	f000 fd45 	bl	800a6de <USBD_GetEpDesc>
 8009c54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2210      	movs	r2, #16
 8009c60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d006      	beq.n	8009c76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c70:	711a      	strb	r2, [r3, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d006      	beq.n	8009c8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c84:	711a      	strb	r2, [r3, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2243      	movs	r2, #67	@ 0x43
 8009c8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c90:	4b02      	ldr	r3, [pc, #8]	@ (8009c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000140 	.word	0x20000140

08009ca0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ca8:	2182      	movs	r1, #130	@ 0x82
 8009caa:	4818      	ldr	r0, [pc, #96]	@ (8009d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cac:	f000 fd17 	bl	800a6de <USBD_GetEpDesc>
 8009cb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	4815      	ldr	r0, [pc, #84]	@ (8009d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cb6:	f000 fd12 	bl	800a6de <USBD_GetEpDesc>
 8009cba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009cbc:	2181      	movs	r1, #129	@ 0x81
 8009cbe:	4813      	ldr	r0, [pc, #76]	@ (8009d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cc0:	f000 fd0d 	bl	800a6de <USBD_GetEpDesc>
 8009cc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	2210      	movs	r2, #16
 8009cd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d006      	beq.n	8009ce6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	711a      	strb	r2, [r3, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f042 0202 	orr.w	r2, r2, #2
 8009ce4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d006      	beq.n	8009cfa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	711a      	strb	r2, [r3, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f042 0202 	orr.w	r2, r2, #2
 8009cf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2243      	movs	r2, #67	@ 0x43
 8009cfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d00:	4b02      	ldr	r3, [pc, #8]	@ (8009d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000140 	.word	0x20000140

08009d10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d18:	2182      	movs	r1, #130	@ 0x82
 8009d1a:	4818      	ldr	r0, [pc, #96]	@ (8009d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d1c:	f000 fcdf 	bl	800a6de <USBD_GetEpDesc>
 8009d20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d22:	2101      	movs	r1, #1
 8009d24:	4815      	ldr	r0, [pc, #84]	@ (8009d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d26:	f000 fcda 	bl	800a6de <USBD_GetEpDesc>
 8009d2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d2c:	2181      	movs	r1, #129	@ 0x81
 8009d2e:	4813      	ldr	r0, [pc, #76]	@ (8009d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d30:	f000 fcd5 	bl	800a6de <USBD_GetEpDesc>
 8009d34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2210      	movs	r2, #16
 8009d40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d006      	beq.n	8009d56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d50:	711a      	strb	r2, [r3, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d006      	beq.n	8009d6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d64:	711a      	strb	r2, [r3, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2243      	movs	r2, #67	@ 0x43
 8009d6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d70:	4b02      	ldr	r3, [pc, #8]	@ (8009d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000140 	.word	0x20000140

08009d80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	220a      	movs	r2, #10
 8009d8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009d8e:	4b03      	ldr	r3, [pc, #12]	@ (8009d9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	200000fc 	.word	0x200000fc

08009da0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e009      	b.n	8009dc8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	33b0      	adds	r3, #176	@ 0xb0
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	32b0      	adds	r2, #176	@ 0xb0
 8009dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e008      	b.n	8009e0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	371c      	adds	r7, #28
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	32b0      	adds	r2, #176	@ 0xb0
 8009e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e004      	b.n	8009e46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
	...

08009e54 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	32b0      	adds	r2, #176	@ 0xb0
 8009e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e025      	b.n	8009ec6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d11f      	bne.n	8009ec4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009e8c:	4b10      	ldr	r3, [pc, #64]	@ (8009ed0 <USBD_CDC_TransmitPacket+0x7c>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	f003 020f 	and.w	r2, r3, #15
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4403      	add	r3, r0
 8009ea6:	3318      	adds	r3, #24
 8009ea8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009eaa:	4b09      	ldr	r3, [pc, #36]	@ (8009ed0 <USBD_CDC_TransmitPacket+0x7c>)
 8009eac:	7819      	ldrb	r1, [r3, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f002 f8e8 	bl	800c090 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000183 	.word	0x20000183

08009ed4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	32b0      	adds	r2, #176	@ 0xb0
 8009ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	32b0      	adds	r2, #176	@ 0xb0
 8009ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d101      	bne.n	8009f02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009efe:	2303      	movs	r3, #3
 8009f00:	e018      	b.n	8009f34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7c1b      	ldrb	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f3c <USBD_CDC_ReceivePacket+0x68>)
 8009f0c:	7819      	ldrb	r1, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f002 f8f1 	bl	800c100 <USBD_LL_PrepareReceive>
 8009f1e:	e008      	b.n	8009f32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f20:	4b06      	ldr	r3, [pc, #24]	@ (8009f3c <USBD_CDC_ReceivePacket+0x68>)
 8009f22:	7819      	ldrb	r1, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f2a:	2340      	movs	r3, #64	@ 0x40
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f002 f8e7 	bl	800c100 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	20000184 	.word	0x20000184

08009f40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e01f      	b.n	8009f98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	79fa      	ldrb	r2, [r7, #7]
 8009f8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f001 febf 	bl	800bd10 <USBD_LL_Init>
 8009f92:	4603      	mov	r3, r0
 8009f94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e025      	b.n	800a004 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	32ae      	adds	r2, #174	@ 0xae
 8009fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00f      	beq.n	8009ff4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	32ae      	adds	r2, #174	@ 0xae
 8009fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe4:	f107 020e 	add.w	r2, r7, #14
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4798      	blx	r3
 8009fec:	4602      	mov	r2, r0
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 fec7 	bl	800bda8 <USBD_LL_Start>
 800a01a:	4603      	mov	r3, r0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a02c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a02e:	4618      	mov	r0, r3
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a050:	2b00      	cmp	r3, #0
 800a052:	d009      	beq.n	800a068 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	78fa      	ldrb	r2, [r7, #3]
 800a05e:	4611      	mov	r1, r2
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	4798      	blx	r3
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	78fa      	ldrb	r2, [r7, #3]
 800a08c:	4611      	mov	r1, r2
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	4798      	blx	r3
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a098:	2303      	movs	r3, #3
 800a09a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f001 f936 	bl	800b32a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0da:	f003 031f 	and.w	r3, r3, #31
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d01a      	beq.n	800a118 <USBD_LL_SetupStage+0x72>
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d822      	bhi.n	800a12c <USBD_LL_SetupStage+0x86>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <USBD_LL_SetupStage+0x4a>
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d00a      	beq.n	800a104 <USBD_LL_SetupStage+0x5e>
 800a0ee:	e01d      	b.n	800a12c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fb63 	bl	800a7c4 <USBD_StdDevReq>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73fb      	strb	r3, [r7, #15]
      break;
 800a102:	e020      	b.n	800a146 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fbcb 	bl	800a8a8 <USBD_StdItfReq>
 800a112:	4603      	mov	r3, r0
 800a114:	73fb      	strb	r3, [r7, #15]
      break;
 800a116:	e016      	b.n	800a146 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fc2d 	bl	800a980 <USBD_StdEPReq>
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]
      break;
 800a12a:	e00c      	b.n	800a146 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a132:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a136:	b2db      	uxtb	r3, r3
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f001 feda 	bl	800bef4 <USBD_LL_StallEP>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]
      break;
 800a144:	bf00      	nop
  }

  return ret;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	460b      	mov	r3, r1
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d16e      	bne.n	800a246 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a16e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a176:	2b03      	cmp	r3, #3
 800a178:	f040 8098 	bne.w	800a2ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	429a      	cmp	r2, r3
 800a186:	d913      	bls.n	800a1b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	689a      	ldr	r2, [r3, #8]
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	1ad2      	subs	r2, r2, r3
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	68da      	ldr	r2, [r3, #12]
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	bf28      	it	cs
 800a1a2:	4613      	movcs	r3, r2
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	6879      	ldr	r1, [r7, #4]
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f001 f9be 	bl	800b52a <USBD_CtlContinueRx>
 800a1ae:	e07d      	b.n	800a2ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a1b6:	f003 031f 	and.w	r3, r3, #31
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d014      	beq.n	800a1e8 <USBD_LL_DataOutStage+0x98>
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d81d      	bhi.n	800a1fe <USBD_LL_DataOutStage+0xae>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <USBD_LL_DataOutStage+0x7c>
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d003      	beq.n	800a1d2 <USBD_LL_DataOutStage+0x82>
 800a1ca:	e018      	b.n	800a1fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	75bb      	strb	r3, [r7, #22]
            break;
 800a1d0:	e018      	b.n	800a204 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	4619      	mov	r1, r3
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 fa64 	bl	800a6aa <USBD_CoreFindIF>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	75bb      	strb	r3, [r7, #22]
            break;
 800a1e6:	e00d      	b.n	800a204 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 fa66 	bl	800a6c4 <USBD_CoreFindEP>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75bb      	strb	r3, [r7, #22]
            break;
 800a1fc:	e002      	b.n	800a204 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	75bb      	strb	r3, [r7, #22]
            break;
 800a202:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a204:	7dbb      	ldrb	r3, [r7, #22]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d119      	bne.n	800a23e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b03      	cmp	r3, #3
 800a214:	d113      	bne.n	800a23e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a216:	7dba      	ldrb	r2, [r7, #22]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	32ae      	adds	r2, #174	@ 0xae
 800a21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00b      	beq.n	800a23e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a226:	7dba      	ldrb	r2, [r7, #22]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a22e:	7dba      	ldrb	r2, [r7, #22]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	32ae      	adds	r2, #174	@ 0xae
 800a234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f001 f984 	bl	800b54c <USBD_CtlSendStatus>
 800a244:	e032      	b.n	800a2ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a246:	7afb      	ldrb	r3, [r7, #11]
 800a248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	4619      	mov	r1, r3
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 fa37 	bl	800a6c4 <USBD_CoreFindEP>
 800a256:	4603      	mov	r3, r0
 800a258:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a25a:	7dbb      	ldrb	r3, [r7, #22]
 800a25c:	2bff      	cmp	r3, #255	@ 0xff
 800a25e:	d025      	beq.n	800a2ac <USBD_LL_DataOutStage+0x15c>
 800a260:	7dbb      	ldrb	r3, [r7, #22]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d122      	bne.n	800a2ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d117      	bne.n	800a2a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a272:	7dba      	ldrb	r2, [r7, #22]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	32ae      	adds	r2, #174	@ 0xae
 800a278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00f      	beq.n	800a2a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a282:	7dba      	ldrb	r2, [r7, #22]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a28a:	7dba      	ldrb	r2, [r7, #22]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	32ae      	adds	r2, #174	@ 0xae
 800a290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	7afa      	ldrb	r2, [r7, #11]
 800a298:	4611      	mov	r1, r2
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	4798      	blx	r3
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a2a8:	7dfb      	ldrb	r3, [r7, #23]
 800a2aa:	e000      	b.n	800a2ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b086      	sub	sp, #24
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	607a      	str	r2, [r7, #4]
 800a2c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a2c4:	7afb      	ldrb	r3, [r7, #11]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d16f      	bne.n	800a3aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3314      	adds	r3, #20
 800a2ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d15a      	bne.n	800a390 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	689a      	ldr	r2, [r3, #8]
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d914      	bls.n	800a310 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	689a      	ldr	r2, [r3, #8]
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	1ad2      	subs	r2, r2, r3
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	6879      	ldr	r1, [r7, #4]
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f001 f8e6 	bl	800b4ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a302:	2300      	movs	r3, #0
 800a304:	2200      	movs	r2, #0
 800a306:	2100      	movs	r1, #0
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f001 fef9 	bl	800c100 <USBD_LL_PrepareReceive>
 800a30e:	e03f      	b.n	800a390 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d11c      	bne.n	800a356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a324:	429a      	cmp	r2, r3
 800a326:	d316      	bcc.n	800a356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a332:	429a      	cmp	r2, r3
 800a334:	d20f      	bcs.n	800a356 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a336:	2200      	movs	r2, #0
 800a338:	2100      	movs	r1, #0
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f001 f8c7 	bl	800b4ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a348:	2300      	movs	r3, #0
 800a34a:	2200      	movs	r2, #0
 800a34c:	2100      	movs	r1, #0
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f001 fed6 	bl	800c100 <USBD_LL_PrepareReceive>
 800a354:	e01c      	b.n	800a390 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d10f      	bne.n	800a382 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d009      	beq.n	800a382 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a382:	2180      	movs	r1, #128	@ 0x80
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f001 fdb5 	bl	800bef4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f001 f8f1 	bl	800b572 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d03a      	beq.n	800a410 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7ff fe42 	bl	800a024 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a3a8:	e032      	b.n	800a410 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 f985 	bl	800a6c4 <USBD_CoreFindEP>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	2bff      	cmp	r3, #255	@ 0xff
 800a3c2:	d025      	beq.n	800a410 <USBD_LL_DataInStage+0x15a>
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d122      	bne.n	800a410 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d11c      	bne.n	800a410 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a3d6:	7dfa      	ldrb	r2, [r7, #23]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	32ae      	adds	r2, #174	@ 0xae
 800a3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d014      	beq.n	800a410 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a3e6:	7dfa      	ldrb	r2, [r7, #23]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a3ee:	7dfa      	ldrb	r2, [r7, #23]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	32ae      	adds	r2, #174	@ 0xae
 800a3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	7afa      	ldrb	r2, [r7, #11]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	4798      	blx	r3
 800a402:	4603      	mov	r3, r0
 800a404:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a406:	7dbb      	ldrb	r3, [r7, #22]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a40c:	7dbb      	ldrb	r3, [r7, #22]
 800a40e:	e000      	b.n	800a412 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a452:	2b00      	cmp	r3, #0
 800a454:	d014      	beq.n	800a480 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00e      	beq.n	800a480 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	6852      	ldr	r2, [r2, #4]
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	4611      	mov	r1, r2
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	4798      	blx	r3
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a47c:	2303      	movs	r3, #3
 800a47e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a480:	2340      	movs	r3, #64	@ 0x40
 800a482:	2200      	movs	r2, #0
 800a484:	2100      	movs	r1, #0
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 fcc0 	bl	800be0c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2240      	movs	r2, #64	@ 0x40
 800a498:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a49c:	2340      	movs	r3, #64	@ 0x40
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2180      	movs	r1, #128	@ 0x80
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 fcb2 	bl	800be0c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2240      	movs	r2, #64	@ 0x40
 800a4b2:	621a      	str	r2, [r3, #32]

  return ret;
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	78fa      	ldrb	r2, [r7, #3]
 800a4ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d006      	beq.n	800a500 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2204      	movs	r2, #4
 800a504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b04      	cmp	r3, #4
 800a528:	d106      	bne.n	800a538 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a530:	b2da      	uxtb	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b03      	cmp	r3, #3
 800a558:	d110      	bne.n	800a57c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00b      	beq.n	800a57c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d005      	beq.n	800a57c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a576:	69db      	ldr	r3, [r3, #28]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	460b      	mov	r3, r1
 800a590:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	32ae      	adds	r2, #174	@ 0xae
 800a59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e01c      	b.n	800a5e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b03      	cmp	r3, #3
 800a5b2:	d115      	bne.n	800a5e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	32ae      	adds	r2, #174	@ 0xae
 800a5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00b      	beq.n	800a5e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	32ae      	adds	r2, #174	@ 0xae
 800a5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	78fa      	ldrb	r2, [r7, #3]
 800a5da:	4611      	mov	r1, r2
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	32ae      	adds	r2, #174	@ 0xae
 800a600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a608:	2303      	movs	r3, #3
 800a60a:	e01c      	b.n	800a646 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b03      	cmp	r3, #3
 800a616:	d115      	bne.n	800a644 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	32ae      	adds	r2, #174	@ 0xae
 800a622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00b      	beq.n	800a644 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	32ae      	adds	r2, #174	@ 0xae
 800a636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63c:	78fa      	ldrb	r2, [r7, #3]
 800a63e:	4611      	mov	r1, r2
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a64e:	b480      	push	{r7}
 800a650:	b083      	sub	sp, #12
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00e      	beq.n	800a6a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	6852      	ldr	r2, [r2, #4]
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	4611      	mov	r1, r2
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	4798      	blx	r3
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a69c:	2303      	movs	r3, #3
 800a69e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b086      	sub	sp, #24
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	885b      	ldrh	r3, [r3, #2]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	7812      	ldrb	r2, [r2, #0]
 800a700:	4293      	cmp	r3, r2
 800a702:	d91f      	bls.n	800a744 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a70a:	e013      	b.n	800a734 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a70c:	f107 030a 	add.w	r3, r7, #10
 800a710:	4619      	mov	r1, r3
 800a712:	6978      	ldr	r0, [r7, #20]
 800a714:	f000 f81b 	bl	800a74e <USBD_GetNextDesc>
 800a718:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	785b      	ldrb	r3, [r3, #1]
 800a71e:	2b05      	cmp	r3, #5
 800a720:	d108      	bne.n	800a734 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	789b      	ldrb	r3, [r3, #2]
 800a72a:	78fa      	ldrb	r2, [r7, #3]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d008      	beq.n	800a742 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a730:	2300      	movs	r3, #0
 800a732:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	885b      	ldrh	r3, [r3, #2]
 800a738:	b29a      	uxth	r2, r3
 800a73a:	897b      	ldrh	r3, [r7, #10]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d8e5      	bhi.n	800a70c <USBD_GetEpDesc+0x2e>
 800a740:	e000      	b.n	800a744 <USBD_GetEpDesc+0x66>
          break;
 800a742:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a744:	693b      	ldr	r3, [r7, #16]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a74e:	b480      	push	{r7}
 800a750:	b085      	sub	sp, #20
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	7812      	ldrb	r2, [r2, #0]
 800a764:	4413      	add	r3, r2
 800a766:	b29a      	uxth	r2, r3
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	461a      	mov	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4413      	add	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a778:	68fb      	ldr	r3, [r7, #12]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a786:	b480      	push	{r7}
 800a788:	b087      	sub	sp, #28
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	3301      	adds	r3, #1
 800a79c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a7a8:	021b      	lsls	r3, r3, #8
 800a7aa:	b21a      	sxth	r2, r3
 800a7ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	b21b      	sxth	r3, r3
 800a7b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7b6:	89fb      	ldrh	r3, [r7, #14]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	371c      	adds	r7, #28
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7da:	2b40      	cmp	r3, #64	@ 0x40
 800a7dc:	d005      	beq.n	800a7ea <USBD_StdDevReq+0x26>
 800a7de:	2b40      	cmp	r3, #64	@ 0x40
 800a7e0:	d857      	bhi.n	800a892 <USBD_StdDevReq+0xce>
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00f      	beq.n	800a806 <USBD_StdDevReq+0x42>
 800a7e6:	2b20      	cmp	r3, #32
 800a7e8:	d153      	bne.n	800a892 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	32ae      	adds	r2, #174	@ 0xae
 800a7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	4798      	blx	r3
 800a800:	4603      	mov	r3, r0
 800a802:	73fb      	strb	r3, [r7, #15]
      break;
 800a804:	e04a      	b.n	800a89c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	785b      	ldrb	r3, [r3, #1]
 800a80a:	2b09      	cmp	r3, #9
 800a80c:	d83b      	bhi.n	800a886 <USBD_StdDevReq+0xc2>
 800a80e:	a201      	add	r2, pc, #4	@ (adr r2, 800a814 <USBD_StdDevReq+0x50>)
 800a810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a814:	0800a869 	.word	0x0800a869
 800a818:	0800a87d 	.word	0x0800a87d
 800a81c:	0800a887 	.word	0x0800a887
 800a820:	0800a873 	.word	0x0800a873
 800a824:	0800a887 	.word	0x0800a887
 800a828:	0800a847 	.word	0x0800a847
 800a82c:	0800a83d 	.word	0x0800a83d
 800a830:	0800a887 	.word	0x0800a887
 800a834:	0800a85f 	.word	0x0800a85f
 800a838:	0800a851 	.word	0x0800a851
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fa3c 	bl	800acbc <USBD_GetDescriptor>
          break;
 800a844:	e024      	b.n	800a890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fbcb 	bl	800afe4 <USBD_SetAddress>
          break;
 800a84e:	e01f      	b.n	800a890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fc0a 	bl	800b06c <USBD_SetConfig>
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]
          break;
 800a85c:	e018      	b.n	800a890 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fcad 	bl	800b1c0 <USBD_GetConfig>
          break;
 800a866:	e013      	b.n	800a890 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fcde 	bl	800b22c <USBD_GetStatus>
          break;
 800a870:	e00e      	b.n	800a890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fd0d 	bl	800b294 <USBD_SetFeature>
          break;
 800a87a:	e009      	b.n	800a890 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fd31 	bl	800b2e6 <USBD_ClrFeature>
          break;
 800a884:	e004      	b.n	800a890 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fd88 	bl	800b39e <USBD_CtlError>
          break;
 800a88e:	bf00      	nop
      }
      break;
 800a890:	e004      	b.n	800a89c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fd82 	bl	800b39e <USBD_CtlError>
      break;
 800a89a:	bf00      	nop
  }

  return ret;
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop

0800a8a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8be:	2b40      	cmp	r3, #64	@ 0x40
 800a8c0:	d005      	beq.n	800a8ce <USBD_StdItfReq+0x26>
 800a8c2:	2b40      	cmp	r3, #64	@ 0x40
 800a8c4:	d852      	bhi.n	800a96c <USBD_StdItfReq+0xc4>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <USBD_StdItfReq+0x26>
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d14e      	bne.n	800a96c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d840      	bhi.n	800a95e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	889b      	ldrh	r3, [r3, #4]
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d836      	bhi.n	800a954 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	889b      	ldrh	r3, [r3, #4]
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff fedb 	bl	800a6aa <USBD_CoreFindIF>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	2bff      	cmp	r3, #255	@ 0xff
 800a8fc:	d01d      	beq.n	800a93a <USBD_StdItfReq+0x92>
 800a8fe:	7bbb      	ldrb	r3, [r7, #14]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d11a      	bne.n	800a93a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a904:	7bba      	ldrb	r2, [r7, #14]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	32ae      	adds	r2, #174	@ 0xae
 800a90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00f      	beq.n	800a934 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a914:	7bba      	ldrb	r2, [r7, #14]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a91c:	7bba      	ldrb	r2, [r7, #14]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	32ae      	adds	r2, #174	@ 0xae
 800a922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	4798      	blx	r3
 800a92e:	4603      	mov	r3, r0
 800a930:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a932:	e004      	b.n	800a93e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a934:	2303      	movs	r3, #3
 800a936:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a938:	e001      	b.n	800a93e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a93a:	2303      	movs	r3, #3
 800a93c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	88db      	ldrh	r3, [r3, #6]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d110      	bne.n	800a968 <USBD_StdItfReq+0xc0>
 800a946:	7bfb      	ldrb	r3, [r7, #15]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10d      	bne.n	800a968 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fdfd 	bl	800b54c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a952:	e009      	b.n	800a968 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fd21 	bl	800b39e <USBD_CtlError>
          break;
 800a95c:	e004      	b.n	800a968 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fd1c 	bl	800b39e <USBD_CtlError>
          break;
 800a966:	e000      	b.n	800a96a <USBD_StdItfReq+0xc2>
          break;
 800a968:	bf00      	nop
      }
      break;
 800a96a:	e004      	b.n	800a976 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fd15 	bl	800b39e <USBD_CtlError>
      break;
 800a974:	bf00      	nop
  }

  return ret;
 800a976:	7bfb      	ldrb	r3, [r7, #15]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	889b      	ldrh	r3, [r3, #4]
 800a992:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a99c:	2b40      	cmp	r3, #64	@ 0x40
 800a99e:	d007      	beq.n	800a9b0 <USBD_StdEPReq+0x30>
 800a9a0:	2b40      	cmp	r3, #64	@ 0x40
 800a9a2:	f200 817f 	bhi.w	800aca4 <USBD_StdEPReq+0x324>
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d02a      	beq.n	800aa00 <USBD_StdEPReq+0x80>
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	f040 817a 	bne.w	800aca4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff fe85 	bl	800a6c4 <USBD_CoreFindEP>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9be:	7b7b      	ldrb	r3, [r7, #13]
 800a9c0:	2bff      	cmp	r3, #255	@ 0xff
 800a9c2:	f000 8174 	beq.w	800acae <USBD_StdEPReq+0x32e>
 800a9c6:	7b7b      	ldrb	r3, [r7, #13]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f040 8170 	bne.w	800acae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a9ce:	7b7a      	ldrb	r2, [r7, #13]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a9d6:	7b7a      	ldrb	r2, [r7, #13]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	32ae      	adds	r2, #174	@ 0xae
 800a9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f000 8163 	beq.w	800acae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a9e8:	7b7a      	ldrb	r2, [r7, #13]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	32ae      	adds	r2, #174	@ 0xae
 800a9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	4798      	blx	r3
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a9fe:	e156      	b.n	800acae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	785b      	ldrb	r3, [r3, #1]
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d008      	beq.n	800aa1a <USBD_StdEPReq+0x9a>
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	f300 8145 	bgt.w	800ac98 <USBD_StdEPReq+0x318>
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 809b 	beq.w	800ab4a <USBD_StdEPReq+0x1ca>
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d03c      	beq.n	800aa92 <USBD_StdEPReq+0x112>
 800aa18:	e13e      	b.n	800ac98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d002      	beq.n	800aa2c <USBD_StdEPReq+0xac>
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d016      	beq.n	800aa58 <USBD_StdEPReq+0xd8>
 800aa2a:	e02c      	b.n	800aa86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00d      	beq.n	800aa4e <USBD_StdEPReq+0xce>
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	2b80      	cmp	r3, #128	@ 0x80
 800aa36:	d00a      	beq.n	800aa4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f001 fa59 	bl	800bef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa42:	2180      	movs	r1, #128	@ 0x80
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 fa55 	bl	800bef4 <USBD_LL_StallEP>
 800aa4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa4c:	e020      	b.n	800aa90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fca4 	bl	800b39e <USBD_CtlError>
              break;
 800aa56:	e01b      	b.n	800aa90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	885b      	ldrh	r3, [r3, #2]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10e      	bne.n	800aa7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00b      	beq.n	800aa7e <USBD_StdEPReq+0xfe>
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b80      	cmp	r3, #128	@ 0x80
 800aa6a:	d008      	beq.n	800aa7e <USBD_StdEPReq+0xfe>
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	88db      	ldrh	r3, [r3, #6]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d104      	bne.n	800aa7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 fa3b 	bl	800bef4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fd64 	bl	800b54c <USBD_CtlSendStatus>

              break;
 800aa84:	e004      	b.n	800aa90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fc88 	bl	800b39e <USBD_CtlError>
              break;
 800aa8e:	bf00      	nop
          }
          break;
 800aa90:	e107      	b.n	800aca2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d002      	beq.n	800aaa4 <USBD_StdEPReq+0x124>
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d016      	beq.n	800aad0 <USBD_StdEPReq+0x150>
 800aaa2:	e04b      	b.n	800ab3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00d      	beq.n	800aac6 <USBD_StdEPReq+0x146>
 800aaaa:	7bbb      	ldrb	r3, [r7, #14]
 800aaac:	2b80      	cmp	r3, #128	@ 0x80
 800aaae:	d00a      	beq.n	800aac6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 fa1d 	bl	800bef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaba:	2180      	movs	r1, #128	@ 0x80
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 fa19 	bl	800bef4 <USBD_LL_StallEP>
 800aac2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aac4:	e040      	b.n	800ab48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fc68 	bl	800b39e <USBD_CtlError>
              break;
 800aace:	e03b      	b.n	800ab48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	885b      	ldrh	r3, [r3, #2]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d136      	bne.n	800ab46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d004      	beq.n	800aaec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f001 fa3a 	bl	800bf60 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fd2d 	bl	800b54c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aaf2:	7bbb      	ldrb	r3, [r7, #14]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff fde4 	bl	800a6c4 <USBD_CoreFindEP>
 800aafc:	4603      	mov	r3, r0
 800aafe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab00:	7b7b      	ldrb	r3, [r7, #13]
 800ab02:	2bff      	cmp	r3, #255	@ 0xff
 800ab04:	d01f      	beq.n	800ab46 <USBD_StdEPReq+0x1c6>
 800ab06:	7b7b      	ldrb	r3, [r7, #13]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d11c      	bne.n	800ab46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab0c:	7b7a      	ldrb	r2, [r7, #13]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab14:	7b7a      	ldrb	r2, [r7, #13]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	32ae      	adds	r2, #174	@ 0xae
 800ab1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d010      	beq.n	800ab46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab24:	7b7a      	ldrb	r2, [r7, #13]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	32ae      	adds	r2, #174	@ 0xae
 800ab2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	4798      	blx	r3
 800ab36:	4603      	mov	r3, r0
 800ab38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab3a:	e004      	b.n	800ab46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fc2d 	bl	800b39e <USBD_CtlError>
              break;
 800ab44:	e000      	b.n	800ab48 <USBD_StdEPReq+0x1c8>
              break;
 800ab46:	bf00      	nop
          }
          break;
 800ab48:	e0ab      	b.n	800aca2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d002      	beq.n	800ab5c <USBD_StdEPReq+0x1dc>
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d032      	beq.n	800abc0 <USBD_StdEPReq+0x240>
 800ab5a:	e097      	b.n	800ac8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d007      	beq.n	800ab72 <USBD_StdEPReq+0x1f2>
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	2b80      	cmp	r3, #128	@ 0x80
 800ab66:	d004      	beq.n	800ab72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fc17 	bl	800b39e <USBD_CtlError>
                break;
 800ab70:	e091      	b.n	800ac96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	da0b      	bge.n	800ab92 <USBD_StdEPReq+0x212>
 800ab7a:	7bbb      	ldrb	r3, [r7, #14]
 800ab7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab80:	4613      	mov	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	3310      	adds	r3, #16
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	3304      	adds	r3, #4
 800ab90:	e00b      	b.n	800abaa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab98:	4613      	mov	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	4413      	add	r3, r2
 800aba8:	3304      	adds	r3, #4
 800abaa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2200      	movs	r2, #0
 800abb0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2202      	movs	r2, #2
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fc6d 	bl	800b498 <USBD_CtlSendData>
              break;
 800abbe:	e06a      	b.n	800ac96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	da11      	bge.n	800abec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abc8:	7bbb      	ldrb	r3, [r7, #14]
 800abca:	f003 020f 	and.w	r2, r3, #15
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	440b      	add	r3, r1
 800abda:	3324      	adds	r3, #36	@ 0x24
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d117      	bne.n	800ac12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fbda 	bl	800b39e <USBD_CtlError>
                  break;
 800abea:	e054      	b.n	800ac96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	f003 020f 	and.w	r2, r3, #15
 800abf2:	6879      	ldr	r1, [r7, #4]
 800abf4:	4613      	mov	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	440b      	add	r3, r1
 800abfe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d104      	bne.n	800ac12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fbc7 	bl	800b39e <USBD_CtlError>
                  break;
 800ac10:	e041      	b.n	800ac96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	da0b      	bge.n	800ac32 <USBD_StdEPReq+0x2b2>
 800ac1a:	7bbb      	ldrb	r3, [r7, #14]
 800ac1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac20:	4613      	mov	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	3310      	adds	r3, #16
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	3304      	adds	r3, #4
 800ac30:	e00b      	b.n	800ac4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac32:	7bbb      	ldrb	r3, [r7, #14]
 800ac34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	4413      	add	r3, r2
 800ac48:	3304      	adds	r3, #4
 800ac4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <USBD_StdEPReq+0x2d8>
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	2b80      	cmp	r3, #128	@ 0x80
 800ac56:	d103      	bne.n	800ac60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	e00e      	b.n	800ac7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 f9b1 	bl	800bfcc <USBD_LL_IsStallEP>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2201      	movs	r2, #1
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	e002      	b.n	800ac7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2202      	movs	r2, #2
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fc07 	bl	800b498 <USBD_CtlSendData>
              break;
 800ac8a:	e004      	b.n	800ac96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fb85 	bl	800b39e <USBD_CtlError>
              break;
 800ac94:	bf00      	nop
          }
          break;
 800ac96:	e004      	b.n	800aca2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fb7f 	bl	800b39e <USBD_CtlError>
          break;
 800aca0:	bf00      	nop
      }
      break;
 800aca2:	e005      	b.n	800acb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fb79 	bl	800b39e <USBD_CtlError>
      break;
 800acac:	e000      	b.n	800acb0 <USBD_StdEPReq+0x330>
      break;
 800acae:	bf00      	nop
  }

  return ret;
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
	...

0800acbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acca:	2300      	movs	r3, #0
 800accc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acce:	2300      	movs	r3, #0
 800acd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	885b      	ldrh	r3, [r3, #2]
 800acd6:	0a1b      	lsrs	r3, r3, #8
 800acd8:	b29b      	uxth	r3, r3
 800acda:	3b01      	subs	r3, #1
 800acdc:	2b0e      	cmp	r3, #14
 800acde:	f200 8152 	bhi.w	800af86 <USBD_GetDescriptor+0x2ca>
 800ace2:	a201      	add	r2, pc, #4	@ (adr r2, 800ace8 <USBD_GetDescriptor+0x2c>)
 800ace4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace8:	0800ad59 	.word	0x0800ad59
 800acec:	0800ad71 	.word	0x0800ad71
 800acf0:	0800adb1 	.word	0x0800adb1
 800acf4:	0800af87 	.word	0x0800af87
 800acf8:	0800af87 	.word	0x0800af87
 800acfc:	0800af27 	.word	0x0800af27
 800ad00:	0800af53 	.word	0x0800af53
 800ad04:	0800af87 	.word	0x0800af87
 800ad08:	0800af87 	.word	0x0800af87
 800ad0c:	0800af87 	.word	0x0800af87
 800ad10:	0800af87 	.word	0x0800af87
 800ad14:	0800af87 	.word	0x0800af87
 800ad18:	0800af87 	.word	0x0800af87
 800ad1c:	0800af87 	.word	0x0800af87
 800ad20:	0800ad25 	.word	0x0800ad25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00b      	beq.n	800ad48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad36:	69db      	ldr	r3, [r3, #28]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	7c12      	ldrb	r2, [r2, #16]
 800ad3c:	f107 0108 	add.w	r1, r7, #8
 800ad40:	4610      	mov	r0, r2
 800ad42:	4798      	blx	r3
 800ad44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad46:	e126      	b.n	800af96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fb27 	bl	800b39e <USBD_CtlError>
        err++;
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	3301      	adds	r3, #1
 800ad54:	72fb      	strb	r3, [r7, #11]
      break;
 800ad56:	e11e      	b.n	800af96 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	7c12      	ldrb	r2, [r2, #16]
 800ad64:	f107 0108 	add.w	r1, r7, #8
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4798      	blx	r3
 800ad6c:	60f8      	str	r0, [r7, #12]
      break;
 800ad6e:	e112      	b.n	800af96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	7c1b      	ldrb	r3, [r3, #16]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10d      	bne.n	800ad94 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad80:	f107 0208 	add.w	r2, r7, #8
 800ad84:	4610      	mov	r0, r2
 800ad86:	4798      	blx	r3
 800ad88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	2202      	movs	r2, #2
 800ad90:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad92:	e100      	b.n	800af96 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9c:	f107 0208 	add.w	r2, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3301      	adds	r3, #1
 800adaa:	2202      	movs	r2, #2
 800adac:	701a      	strb	r2, [r3, #0]
      break;
 800adae:	e0f2      	b.n	800af96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	885b      	ldrh	r3, [r3, #2]
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b05      	cmp	r3, #5
 800adb8:	f200 80ac 	bhi.w	800af14 <USBD_GetDescriptor+0x258>
 800adbc:	a201      	add	r2, pc, #4	@ (adr r2, 800adc4 <USBD_GetDescriptor+0x108>)
 800adbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc2:	bf00      	nop
 800adc4:	0800addd 	.word	0x0800addd
 800adc8:	0800ae11 	.word	0x0800ae11
 800adcc:	0800ae45 	.word	0x0800ae45
 800add0:	0800ae79 	.word	0x0800ae79
 800add4:	0800aead 	.word	0x0800aead
 800add8:	0800aee1 	.word	0x0800aee1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00b      	beq.n	800ae00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	7c12      	ldrb	r2, [r2, #16]
 800adf4:	f107 0108 	add.w	r1, r7, #8
 800adf8:	4610      	mov	r0, r2
 800adfa:	4798      	blx	r3
 800adfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adfe:	e091      	b.n	800af24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 facb 	bl	800b39e <USBD_CtlError>
            err++;
 800ae08:	7afb      	ldrb	r3, [r7, #11]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae0e:	e089      	b.n	800af24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00b      	beq.n	800ae34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	7c12      	ldrb	r2, [r2, #16]
 800ae28:	f107 0108 	add.w	r1, r7, #8
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	4798      	blx	r3
 800ae30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae32:	e077      	b.n	800af24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fab1 	bl	800b39e <USBD_CtlError>
            err++;
 800ae3c:	7afb      	ldrb	r3, [r7, #11]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	72fb      	strb	r3, [r7, #11]
          break;
 800ae42:	e06f      	b.n	800af24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	7c12      	ldrb	r2, [r2, #16]
 800ae5c:	f107 0108 	add.w	r1, r7, #8
 800ae60:	4610      	mov	r0, r2
 800ae62:	4798      	blx	r3
 800ae64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae66:	e05d      	b.n	800af24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fa97 	bl	800b39e <USBD_CtlError>
            err++;
 800ae70:	7afb      	ldrb	r3, [r7, #11]
 800ae72:	3301      	adds	r3, #1
 800ae74:	72fb      	strb	r3, [r7, #11]
          break;
 800ae76:	e055      	b.n	800af24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00b      	beq.n	800ae9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	7c12      	ldrb	r2, [r2, #16]
 800ae90:	f107 0108 	add.w	r1, r7, #8
 800ae94:	4610      	mov	r0, r2
 800ae96:	4798      	blx	r3
 800ae98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae9a:	e043      	b.n	800af24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fa7d 	bl	800b39e <USBD_CtlError>
            err++;
 800aea4:	7afb      	ldrb	r3, [r7, #11]
 800aea6:	3301      	adds	r3, #1
 800aea8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeaa:	e03b      	b.n	800af24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00b      	beq.n	800aed0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	7c12      	ldrb	r2, [r2, #16]
 800aec4:	f107 0108 	add.w	r1, r7, #8
 800aec8:	4610      	mov	r0, r2
 800aeca:	4798      	blx	r3
 800aecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aece:	e029      	b.n	800af24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fa63 	bl	800b39e <USBD_CtlError>
            err++;
 800aed8:	7afb      	ldrb	r3, [r7, #11]
 800aeda:	3301      	adds	r3, #1
 800aedc:	72fb      	strb	r3, [r7, #11]
          break;
 800aede:	e021      	b.n	800af24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00b      	beq.n	800af04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	7c12      	ldrb	r2, [r2, #16]
 800aef8:	f107 0108 	add.w	r1, r7, #8
 800aefc:	4610      	mov	r0, r2
 800aefe:	4798      	blx	r3
 800af00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af02:	e00f      	b.n	800af24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa49 	bl	800b39e <USBD_CtlError>
            err++;
 800af0c:	7afb      	ldrb	r3, [r7, #11]
 800af0e:	3301      	adds	r3, #1
 800af10:	72fb      	strb	r3, [r7, #11]
          break;
 800af12:	e007      	b.n	800af24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fa41 	bl	800b39e <USBD_CtlError>
          err++;
 800af1c:	7afb      	ldrb	r3, [r7, #11]
 800af1e:	3301      	adds	r3, #1
 800af20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af22:	bf00      	nop
      }
      break;
 800af24:	e037      	b.n	800af96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	7c1b      	ldrb	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d109      	bne.n	800af42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af36:	f107 0208 	add.w	r2, r7, #8
 800af3a:	4610      	mov	r0, r2
 800af3c:	4798      	blx	r3
 800af3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af40:	e029      	b.n	800af96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fa2a 	bl	800b39e <USBD_CtlError>
        err++;
 800af4a:	7afb      	ldrb	r3, [r7, #11]
 800af4c:	3301      	adds	r3, #1
 800af4e:	72fb      	strb	r3, [r7, #11]
      break;
 800af50:	e021      	b.n	800af96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	7c1b      	ldrb	r3, [r3, #16]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10d      	bne.n	800af76 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af62:	f107 0208 	add.w	r2, r7, #8
 800af66:	4610      	mov	r0, r2
 800af68:	4798      	blx	r3
 800af6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	3301      	adds	r3, #1
 800af70:	2207      	movs	r2, #7
 800af72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af74:	e00f      	b.n	800af96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fa10 	bl	800b39e <USBD_CtlError>
        err++;
 800af7e:	7afb      	ldrb	r3, [r7, #11]
 800af80:	3301      	adds	r3, #1
 800af82:	72fb      	strb	r3, [r7, #11]
      break;
 800af84:	e007      	b.n	800af96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fa08 	bl	800b39e <USBD_CtlError>
      err++;
 800af8e:	7afb      	ldrb	r3, [r7, #11]
 800af90:	3301      	adds	r3, #1
 800af92:	72fb      	strb	r3, [r7, #11]
      break;
 800af94:	bf00      	nop
  }

  if (err != 0U)
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d11e      	bne.n	800afda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	88db      	ldrh	r3, [r3, #6]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d016      	beq.n	800afd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800afa4:	893b      	ldrh	r3, [r7, #8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00e      	beq.n	800afc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	88da      	ldrh	r2, [r3, #6]
 800afae:	893b      	ldrh	r3, [r7, #8]
 800afb0:	4293      	cmp	r3, r2
 800afb2:	bf28      	it	cs
 800afb4:	4613      	movcs	r3, r2
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afba:	893b      	ldrh	r3, [r7, #8]
 800afbc:	461a      	mov	r2, r3
 800afbe:	68f9      	ldr	r1, [r7, #12]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fa69 	bl	800b498 <USBD_CtlSendData>
 800afc6:	e009      	b.n	800afdc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f9e7 	bl	800b39e <USBD_CtlError>
 800afd0:	e004      	b.n	800afdc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 faba 	bl	800b54c <USBD_CtlSendStatus>
 800afd8:	e000      	b.n	800afdc <USBD_GetDescriptor+0x320>
    return;
 800afda:	bf00      	nop
  }
}
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop

0800afe4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	889b      	ldrh	r3, [r3, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d131      	bne.n	800b05a <USBD_SetAddress+0x76>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	88db      	ldrh	r3, [r3, #6]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d12d      	bne.n	800b05a <USBD_SetAddress+0x76>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	885b      	ldrh	r3, [r3, #2]
 800b002:	2b7f      	cmp	r3, #127	@ 0x7f
 800b004:	d829      	bhi.n	800b05a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	885b      	ldrh	r3, [r3, #2]
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b010:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d104      	bne.n	800b028 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f9bc 	bl	800b39e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b026:	e01d      	b.n	800b064 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	7bfa      	ldrb	r2, [r7, #15]
 800b02c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fff5 	bl	800c024 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fa86 	bl	800b54c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d004      	beq.n	800b050 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2202      	movs	r2, #2
 800b04a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04e:	e009      	b.n	800b064 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b058:	e004      	b.n	800b064 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f99e 	bl	800b39e <USBD_CtlError>
  }
}
 800b062:	bf00      	nop
 800b064:	bf00      	nop
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	885b      	ldrh	r3, [r3, #2]
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	4b4e      	ldr	r3, [pc, #312]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b082:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b084:	4b4d      	ldr	r3, [pc, #308]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d905      	bls.n	800b098 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f985 	bl	800b39e <USBD_CtlError>
    return USBD_FAIL;
 800b094:	2303      	movs	r3, #3
 800b096:	e08c      	b.n	800b1b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d002      	beq.n	800b0aa <USBD_SetConfig+0x3e>
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d029      	beq.n	800b0fc <USBD_SetConfig+0x90>
 800b0a8:	e075      	b.n	800b196 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0aa:	4b44      	ldr	r3, [pc, #272]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d020      	beq.n	800b0f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b0b2:	4b42      	ldr	r3, [pc, #264]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0bc:	4b3f      	ldr	r3, [pc, #252]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7fe ffb9 	bl	800a03a <USBD_SetClassConfig>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d008      	beq.n	800b0e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f962 	bl	800b39e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2202      	movs	r2, #2
 800b0de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0e2:	e065      	b.n	800b1b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fa31 	bl	800b54c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2203      	movs	r2, #3
 800b0ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b0f2:	e05d      	b.n	800b1b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fa29 	bl	800b54c <USBD_CtlSendStatus>
      break;
 800b0fa:	e059      	b.n	800b1b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b0fc:	4b2f      	ldr	r3, [pc, #188]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d112      	bne.n	800b12a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b10c:	4b2b      	ldr	r3, [pc, #172]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	461a      	mov	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b116:	4b29      	ldr	r3, [pc, #164]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	4619      	mov	r1, r3
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7fe ffa8 	bl	800a072 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa12 	bl	800b54c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b128:	e042      	b.n	800b1b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b12a:	4b24      	ldr	r3, [pc, #144]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d02a      	beq.n	800b18e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fe ff96 	bl	800a072 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b146:	4b1d      	ldr	r3, [pc, #116]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b150:	4b1a      	ldr	r3, [pc, #104]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7fe ff6f 	bl	800a03a <USBD_SetClassConfig>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00f      	beq.n	800b186 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f918 	bl	800b39e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7fe ff7b 	bl	800a072 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b184:	e014      	b.n	800b1b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f9e0 	bl	800b54c <USBD_CtlSendStatus>
      break;
 800b18c:	e010      	b.n	800b1b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f9dc 	bl	800b54c <USBD_CtlSendStatus>
      break;
 800b194:	e00c      	b.n	800b1b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f900 	bl	800b39e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b19e:	4b07      	ldr	r3, [pc, #28]	@ (800b1bc <USBD_SetConfig+0x150>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7fe ff64 	bl	800a072 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ae:	bf00      	nop
  }

  return ret;
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20000afc 	.word	0x20000afc

0800b1c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	88db      	ldrh	r3, [r3, #6]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d004      	beq.n	800b1dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f8e2 	bl	800b39e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1da:	e023      	b.n	800b224 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	dc02      	bgt.n	800b1ee <USBD_GetConfig+0x2e>
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	dc03      	bgt.n	800b1f4 <USBD_GetConfig+0x34>
 800b1ec:	e015      	b.n	800b21a <USBD_GetConfig+0x5a>
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d00b      	beq.n	800b20a <USBD_GetConfig+0x4a>
 800b1f2:	e012      	b.n	800b21a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3308      	adds	r3, #8
 800b1fe:	2201      	movs	r2, #1
 800b200:	4619      	mov	r1, r3
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f948 	bl	800b498 <USBD_CtlSendData>
        break;
 800b208:	e00c      	b.n	800b224 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3304      	adds	r3, #4
 800b20e:	2201      	movs	r2, #1
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f940 	bl	800b498 <USBD_CtlSendData>
        break;
 800b218:	e004      	b.n	800b224 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f8be 	bl	800b39e <USBD_CtlError>
        break;
 800b222:	bf00      	nop
}
 800b224:	bf00      	nop
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	3b01      	subs	r3, #1
 800b240:	2b02      	cmp	r3, #2
 800b242:	d81e      	bhi.n	800b282 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	88db      	ldrh	r3, [r3, #6]
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d004      	beq.n	800b256 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f8a5 	bl	800b39e <USBD_CtlError>
        break;
 800b254:	e01a      	b.n	800b28c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b262:	2b00      	cmp	r3, #0
 800b264:	d005      	beq.n	800b272 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	f043 0202 	orr.w	r2, r3, #2
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	330c      	adds	r3, #12
 800b276:	2202      	movs	r2, #2
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f90c 	bl	800b498 <USBD_CtlSendData>
      break;
 800b280:	e004      	b.n	800b28c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f88a 	bl	800b39e <USBD_CtlError>
      break;
 800b28a:	bf00      	nop
  }
}
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	885b      	ldrh	r3, [r3, #2]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d107      	bne.n	800b2b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f94c 	bl	800b54c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b2b4:	e013      	b.n	800b2de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	885b      	ldrh	r3, [r3, #2]
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d10b      	bne.n	800b2d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	889b      	ldrh	r3, [r3, #4]
 800b2c2:	0a1b      	lsrs	r3, r3, #8
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f93c 	bl	800b54c <USBD_CtlSendStatus>
}
 800b2d4:	e003      	b.n	800b2de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f860 	bl	800b39e <USBD_CtlError>
}
 800b2de:	bf00      	nop
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b082      	sub	sp, #8
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d80b      	bhi.n	800b316 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	885b      	ldrh	r3, [r3, #2]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d10c      	bne.n	800b320 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f91c 	bl	800b54c <USBD_CtlSendStatus>
      }
      break;
 800b314:	e004      	b.n	800b320 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f840 	bl	800b39e <USBD_CtlError>
      break;
 800b31e:	e000      	b.n	800b322 <USBD_ClrFeature+0x3c>
      break;
 800b320:	bf00      	nop
  }
}
 800b322:	bf00      	nop
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b084      	sub	sp, #16
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	781a      	ldrb	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3301      	adds	r3, #1
 800b344:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	781a      	ldrb	r2, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3301      	adds	r3, #1
 800b352:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f7ff fa16 	bl	800a786 <SWAPBYTE>
 800b35a:	4603      	mov	r3, r0
 800b35c:	461a      	mov	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3301      	adds	r3, #1
 800b366:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3301      	adds	r3, #1
 800b36c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f7ff fa09 	bl	800a786 <SWAPBYTE>
 800b374:	4603      	mov	r3, r0
 800b376:	461a      	mov	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3301      	adds	r3, #1
 800b380:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3301      	adds	r3, #1
 800b386:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f7ff f9fc 	bl	800a786 <SWAPBYTE>
 800b38e:	4603      	mov	r3, r0
 800b390:	461a      	mov	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	80da      	strh	r2, [r3, #6]
}
 800b396:	bf00      	nop
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b082      	sub	sp, #8
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3a8:	2180      	movs	r1, #128	@ 0x80
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fda2 	bl	800bef4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fd9e 	bl	800bef4 <USBD_LL_StallEP>
}
 800b3b8:	bf00      	nop
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d042      	beq.n	800b45c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b3da:	6938      	ldr	r0, [r7, #16]
 800b3dc:	f000 f842 	bl	800b464 <USBD_GetLen>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	005b      	lsls	r3, r3, #1
 800b3e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3ea:	d808      	bhi.n	800b3fe <USBD_GetString+0x3e>
 800b3ec:	6938      	ldr	r0, [r7, #16]
 800b3ee:	f000 f839 	bl	800b464 <USBD_GetLen>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	e001      	b.n	800b402 <USBD_GetString+0x42>
 800b3fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	4413      	add	r3, r2
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	7812      	ldrb	r2, [r2, #0]
 800b410:	701a      	strb	r2, [r3, #0]
  idx++;
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	3301      	adds	r3, #1
 800b416:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	4413      	add	r3, r2
 800b41e:	2203      	movs	r2, #3
 800b420:	701a      	strb	r2, [r3, #0]
  idx++;
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	3301      	adds	r3, #1
 800b426:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b428:	e013      	b.n	800b452 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	4413      	add	r3, r2
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	7812      	ldrb	r2, [r2, #0]
 800b434:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	3301      	adds	r3, #1
 800b43a:	613b      	str	r3, [r7, #16]
    idx++;
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	3301      	adds	r3, #1
 800b440:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	4413      	add	r3, r2
 800b448:	2200      	movs	r2, #0
 800b44a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b44c:	7dfb      	ldrb	r3, [r7, #23]
 800b44e:	3301      	adds	r3, #1
 800b450:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1e7      	bne.n	800b42a <USBD_GetString+0x6a>
 800b45a:	e000      	b.n	800b45e <USBD_GetString+0x9e>
    return;
 800b45c:	bf00      	nop
  }
}
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b474:	e005      	b.n	800b482 <USBD_GetLen+0x1e>
  {
    len++;
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	3301      	adds	r3, #1
 800b47a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	3301      	adds	r3, #1
 800b480:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1f5      	bne.n	800b476 <USBD_GetLen+0x12>
  }

  return len;
 800b48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	2100      	movs	r1, #0
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f000 fde6 	bl	800c090 <USBD_LL_Transmit>

  return USBD_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b084      	sub	sp, #16
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	60f8      	str	r0, [r7, #12]
 800b4d6:	60b9      	str	r1, [r7, #8]
 800b4d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	2100      	movs	r1, #0
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 fdd5 	bl	800c090 <USBD_LL_Transmit>

  return USBD_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2203      	movs	r2, #3
 800b500:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	2100      	movs	r1, #0
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f000 fdf0 	bl	800c100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	60f8      	str	r0, [r7, #12]
 800b532:	60b9      	str	r1, [r7, #8]
 800b534:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	2100      	movs	r1, #0
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 fddf 	bl	800c100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2204      	movs	r2, #4
 800b558:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b55c:	2300      	movs	r3, #0
 800b55e:	2200      	movs	r2, #0
 800b560:	2100      	movs	r1, #0
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fd94 	bl	800c090 <USBD_LL_Transmit>

  return USBD_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b082      	sub	sp, #8
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2205      	movs	r2, #5
 800b57e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b582:	2300      	movs	r3, #0
 800b584:	2200      	movs	r2, #0
 800b586:	2100      	movs	r1, #0
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fdb9 	bl	800c100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b59c:	2200      	movs	r2, #0
 800b59e:	4912      	ldr	r1, [pc, #72]	@ (800b5e8 <MX_USB_DEVICE_Init+0x50>)
 800b5a0:	4812      	ldr	r0, [pc, #72]	@ (800b5ec <MX_USB_DEVICE_Init+0x54>)
 800b5a2:	f7fe fccd 	bl	8009f40 <USBD_Init>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b5ac:	f7f6 fcac 	bl	8001f08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b5b0:	490f      	ldr	r1, [pc, #60]	@ (800b5f0 <MX_USB_DEVICE_Init+0x58>)
 800b5b2:	480e      	ldr	r0, [pc, #56]	@ (800b5ec <MX_USB_DEVICE_Init+0x54>)
 800b5b4:	f7fe fcf4 	bl	8009fa0 <USBD_RegisterClass>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5be:	f7f6 fca3 	bl	8001f08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5c2:	490c      	ldr	r1, [pc, #48]	@ (800b5f4 <MX_USB_DEVICE_Init+0x5c>)
 800b5c4:	4809      	ldr	r0, [pc, #36]	@ (800b5ec <MX_USB_DEVICE_Init+0x54>)
 800b5c6:	f7fe fbeb 	bl	8009da0 <USBD_CDC_RegisterInterface>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b5d0:	f7f6 fc9a 	bl	8001f08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5d4:	4805      	ldr	r0, [pc, #20]	@ (800b5ec <MX_USB_DEVICE_Init+0x54>)
 800b5d6:	f7fe fd19 	bl	800a00c <USBD_Start>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5e0:	f7f6 fc92 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5e4:	bf00      	nop
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	2000019c 	.word	0x2000019c
 800b5ec:	20000b00 	.word	0x20000b00
 800b5f0:	20000108 	.word	0x20000108
 800b5f4:	20000188 	.word	0x20000188

0800b5f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4905      	ldr	r1, [pc, #20]	@ (800b614 <CDC_Init_FS+0x1c>)
 800b600:	4805      	ldr	r0, [pc, #20]	@ (800b618 <CDC_Init_FS+0x20>)
 800b602:	f7fe fbe7 	bl	8009dd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b606:	4905      	ldr	r1, [pc, #20]	@ (800b61c <CDC_Init_FS+0x24>)
 800b608:	4803      	ldr	r0, [pc, #12]	@ (800b618 <CDC_Init_FS+0x20>)
 800b60a:	f7fe fc05 	bl	8009e18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b60e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b610:	4618      	mov	r0, r3
 800b612:	bd80      	pop	{r7, pc}
 800b614:	200015dc 	.word	0x200015dc
 800b618:	20000b00 	.word	0x20000b00
 800b61c:	20000ddc 	.word	0x20000ddc

0800b620 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b624:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b626:	4618      	mov	r0, r3
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	71fb      	strb	r3, [r7, #7]
 800b63c:	4613      	mov	r3, r2
 800b63e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	2b23      	cmp	r3, #35	@ 0x23
 800b644:	d84a      	bhi.n	800b6dc <CDC_Control_FS+0xac>
 800b646:	a201      	add	r2, pc, #4	@ (adr r2, 800b64c <CDC_Control_FS+0x1c>)
 800b648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64c:	0800b6dd 	.word	0x0800b6dd
 800b650:	0800b6dd 	.word	0x0800b6dd
 800b654:	0800b6dd 	.word	0x0800b6dd
 800b658:	0800b6dd 	.word	0x0800b6dd
 800b65c:	0800b6dd 	.word	0x0800b6dd
 800b660:	0800b6dd 	.word	0x0800b6dd
 800b664:	0800b6dd 	.word	0x0800b6dd
 800b668:	0800b6dd 	.word	0x0800b6dd
 800b66c:	0800b6dd 	.word	0x0800b6dd
 800b670:	0800b6dd 	.word	0x0800b6dd
 800b674:	0800b6dd 	.word	0x0800b6dd
 800b678:	0800b6dd 	.word	0x0800b6dd
 800b67c:	0800b6dd 	.word	0x0800b6dd
 800b680:	0800b6dd 	.word	0x0800b6dd
 800b684:	0800b6dd 	.word	0x0800b6dd
 800b688:	0800b6dd 	.word	0x0800b6dd
 800b68c:	0800b6dd 	.word	0x0800b6dd
 800b690:	0800b6dd 	.word	0x0800b6dd
 800b694:	0800b6dd 	.word	0x0800b6dd
 800b698:	0800b6dd 	.word	0x0800b6dd
 800b69c:	0800b6dd 	.word	0x0800b6dd
 800b6a0:	0800b6dd 	.word	0x0800b6dd
 800b6a4:	0800b6dd 	.word	0x0800b6dd
 800b6a8:	0800b6dd 	.word	0x0800b6dd
 800b6ac:	0800b6dd 	.word	0x0800b6dd
 800b6b0:	0800b6dd 	.word	0x0800b6dd
 800b6b4:	0800b6dd 	.word	0x0800b6dd
 800b6b8:	0800b6dd 	.word	0x0800b6dd
 800b6bc:	0800b6dd 	.word	0x0800b6dd
 800b6c0:	0800b6dd 	.word	0x0800b6dd
 800b6c4:	0800b6dd 	.word	0x0800b6dd
 800b6c8:	0800b6dd 	.word	0x0800b6dd
 800b6cc:	0800b6dd 	.word	0x0800b6dd
 800b6d0:	0800b6dd 	.word	0x0800b6dd
 800b6d4:	0800b6dd 	.word	0x0800b6dd
 800b6d8:	0800b6dd 	.word	0x0800b6dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6dc:	bf00      	nop
  }

  return (USBD_OK);
 800b6de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	4805      	ldr	r0, [pc, #20]	@ (800b710 <CDC_Receive_FS+0x24>)
 800b6fa:	f7fe fb8d 	bl	8009e18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6fe:	4804      	ldr	r0, [pc, #16]	@ (800b710 <CDC_Receive_FS+0x24>)
 800b700:	f7fe fbe8 	bl	8009ed4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b704:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	20000b00 	.word	0x20000b00

0800b714 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b720:	2300      	movs	r3, #0
 800b722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b724:	4b0d      	ldr	r3, [pc, #52]	@ (800b75c <CDC_Transmit_FS+0x48>)
 800b726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b72a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b732:	2b00      	cmp	r3, #0
 800b734:	d001      	beq.n	800b73a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b736:	2301      	movs	r3, #1
 800b738:	e00b      	b.n	800b752 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b73a:	887b      	ldrh	r3, [r7, #2]
 800b73c:	461a      	mov	r2, r3
 800b73e:	6879      	ldr	r1, [r7, #4]
 800b740:	4806      	ldr	r0, [pc, #24]	@ (800b75c <CDC_Transmit_FS+0x48>)
 800b742:	f7fe fb47 	bl	8009dd4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b746:	4805      	ldr	r0, [pc, #20]	@ (800b75c <CDC_Transmit_FS+0x48>)
 800b748:	f7fe fb84 	bl	8009e54 <USBD_CDC_TransmitPacket>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b750:	7bfb      	ldrb	r3, [r7, #15]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20000b00 	.word	0x20000b00

0800b760 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b760:	b480      	push	{r7}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	4613      	mov	r3, r2
 800b76c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b776:	4618      	mov	r0, r3
 800b778:	371c      	adds	r7, #28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <_write>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int _write(int file, char *data, int len)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b084      	sub	sp, #16
 800b786:	af00      	add	r7, sp, #0
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	60b9      	str	r1, [r7, #8]
 800b78c:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*)data, len);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	b29b      	uxth	r3, r3
 800b792:	4619      	mov	r1, r3
 800b794:	68b8      	ldr	r0, [r7, #8]
 800b796:	f7ff ffbd 	bl	800b714 <CDC_Transmit_FS>
    return len;
 800b79a:	687b      	ldr	r3, [r7, #4]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	6039      	str	r1, [r7, #0]
 800b7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	2212      	movs	r2, #18
 800b7b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b7b6:	4b03      	ldr	r3, [pc, #12]	@ (800b7c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	200001bc 	.word	0x200001bc

0800b7c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	6039      	str	r1, [r7, #0]
 800b7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	2204      	movs	r2, #4
 800b7d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7da:	4b03      	ldr	r3, [pc, #12]	@ (800b7e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr
 800b7e8:	200001dc 	.word	0x200001dc

0800b7ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	6039      	str	r1, [r7, #0]
 800b7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d105      	bne.n	800b80a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	4907      	ldr	r1, [pc, #28]	@ (800b820 <USBD_FS_ProductStrDescriptor+0x34>)
 800b802:	4808      	ldr	r0, [pc, #32]	@ (800b824 <USBD_FS_ProductStrDescriptor+0x38>)
 800b804:	f7ff fddc 	bl	800b3c0 <USBD_GetString>
 800b808:	e004      	b.n	800b814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	4904      	ldr	r1, [pc, #16]	@ (800b820 <USBD_FS_ProductStrDescriptor+0x34>)
 800b80e:	4805      	ldr	r0, [pc, #20]	@ (800b824 <USBD_FS_ProductStrDescriptor+0x38>)
 800b810:	f7ff fdd6 	bl	800b3c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b814:	4b02      	ldr	r3, [pc, #8]	@ (800b820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20001ddc 	.word	0x20001ddc
 800b824:	08010364 	.word	0x08010364

0800b828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	4603      	mov	r3, r0
 800b830:	6039      	str	r1, [r7, #0]
 800b832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	4904      	ldr	r1, [pc, #16]	@ (800b848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b838:	4804      	ldr	r0, [pc, #16]	@ (800b84c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b83a:	f7ff fdc1 	bl	800b3c0 <USBD_GetString>
  return USBD_StrDesc;
 800b83e:	4b02      	ldr	r3, [pc, #8]	@ (800b848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	20001ddc 	.word	0x20001ddc
 800b84c:	0801037c 	.word	0x0801037c

0800b850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	6039      	str	r1, [r7, #0]
 800b85a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	221a      	movs	r2, #26
 800b860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b862:	f000 f855 	bl	800b910 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b866:	4b02      	ldr	r3, [pc, #8]	@ (800b870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	200001e0 	.word	0x200001e0

0800b874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4603      	mov	r3, r0
 800b87c:	6039      	str	r1, [r7, #0]
 800b87e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d105      	bne.n	800b892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	4907      	ldr	r1, [pc, #28]	@ (800b8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b88a:	4808      	ldr	r0, [pc, #32]	@ (800b8ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b88c:	f7ff fd98 	bl	800b3c0 <USBD_GetString>
 800b890:	e004      	b.n	800b89c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	4904      	ldr	r1, [pc, #16]	@ (800b8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b896:	4805      	ldr	r0, [pc, #20]	@ (800b8ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b898:	f7ff fd92 	bl	800b3c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b89c:	4b02      	ldr	r3, [pc, #8]	@ (800b8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20001ddc 	.word	0x20001ddc
 800b8ac:	08010390 	.word	0x08010390

0800b8b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	6039      	str	r1, [r7, #0]
 800b8ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8bc:	79fb      	ldrb	r3, [r7, #7]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d105      	bne.n	800b8ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	4907      	ldr	r1, [pc, #28]	@ (800b8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8c6:	4808      	ldr	r0, [pc, #32]	@ (800b8e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8c8:	f7ff fd7a 	bl	800b3c0 <USBD_GetString>
 800b8cc:	e004      	b.n	800b8d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	4904      	ldr	r1, [pc, #16]	@ (800b8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8d2:	4805      	ldr	r0, [pc, #20]	@ (800b8e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8d4:	f7ff fd74 	bl	800b3c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8d8:	4b02      	ldr	r3, [pc, #8]	@ (800b8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20001ddc 	.word	0x20001ddc
 800b8e8:	0801039c 	.word	0x0801039c

0800b8ec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	6039      	str	r1, [r7, #0]
 800b8f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	220c      	movs	r2, #12
 800b8fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b8fe:	4b03      	ldr	r3, [pc, #12]	@ (800b90c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b900:	4618      	mov	r0, r3
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	200001d0 	.word	0x200001d0

0800b910 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b916:	4b0f      	ldr	r3, [pc, #60]	@ (800b954 <Get_SerialNum+0x44>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b91c:	4b0e      	ldr	r3, [pc, #56]	@ (800b958 <Get_SerialNum+0x48>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b922:	4b0e      	ldr	r3, [pc, #56]	@ (800b95c <Get_SerialNum+0x4c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4413      	add	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d009      	beq.n	800b94a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b936:	2208      	movs	r2, #8
 800b938:	4909      	ldr	r1, [pc, #36]	@ (800b960 <Get_SerialNum+0x50>)
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 f814 	bl	800b968 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b940:	2204      	movs	r2, #4
 800b942:	4908      	ldr	r1, [pc, #32]	@ (800b964 <Get_SerialNum+0x54>)
 800b944:	68b8      	ldr	r0, [r7, #8]
 800b946:	f000 f80f 	bl	800b968 <IntToUnicode>
  }
}
 800b94a:	bf00      	nop
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	1fff7590 	.word	0x1fff7590
 800b958:	1fff7594 	.word	0x1fff7594
 800b95c:	1fff7598 	.word	0x1fff7598
 800b960:	200001e2 	.word	0x200001e2
 800b964:	200001f2 	.word	0x200001f2

0800b968 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b968:	b480      	push	{r7}
 800b96a:	b087      	sub	sp, #28
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	4613      	mov	r3, r2
 800b974:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b97a:	2300      	movs	r3, #0
 800b97c:	75fb      	strb	r3, [r7, #23]
 800b97e:	e027      	b.n	800b9d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	0f1b      	lsrs	r3, r3, #28
 800b984:	2b09      	cmp	r3, #9
 800b986:	d80b      	bhi.n	800b9a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	0f1b      	lsrs	r3, r3, #28
 800b98c:	b2da      	uxtb	r2, r3
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	4619      	mov	r1, r3
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	440b      	add	r3, r1
 800b998:	3230      	adds	r2, #48	@ 0x30
 800b99a:	b2d2      	uxtb	r2, r2
 800b99c:	701a      	strb	r2, [r3, #0]
 800b99e:	e00a      	b.n	800b9b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	0f1b      	lsrs	r3, r3, #28
 800b9a4:	b2da      	uxtb	r2, r3
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	440b      	add	r3, r1
 800b9b0:	3237      	adds	r2, #55	@ 0x37
 800b9b2:	b2d2      	uxtb	r2, r2
 800b9b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	011b      	lsls	r3, r3, #4
 800b9ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	75fb      	strb	r3, [r7, #23]
 800b9d0:	7dfa      	ldrb	r2, [r7, #23]
 800b9d2:	79fb      	ldrb	r3, [r7, #7]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d3d3      	bcc.n	800b980 <IntToUnicode+0x18>
  }
}
 800b9d8:	bf00      	nop
 800b9da:	bf00      	nop
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
	...

0800b9e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b0ac      	sub	sp, #176	@ 0xb0
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	605a      	str	r2, [r3, #4]
 800b9fa:	609a      	str	r2, [r3, #8]
 800b9fc:	60da      	str	r2, [r3, #12]
 800b9fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba00:	f107 0314 	add.w	r3, r7, #20
 800ba04:	2288      	movs	r2, #136	@ 0x88
 800ba06:	2100      	movs	r1, #0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f002 f8ee 	bl	800dbea <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ba16:	d173      	bne.n	800bb00 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ba18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba1c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ba1e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ba22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800ba26:	2303      	movs	r3, #3
 800ba28:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800ba2e:	230c      	movs	r3, #12
 800ba30:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800ba32:	2307      	movs	r3, #7
 800ba34:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800ba36:	2304      	movs	r3, #4
 800ba38:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ba3a:	2302      	movs	r3, #2
 800ba3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800ba3e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ba42:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba44:	f107 0314 	add.w	r3, r7, #20
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7f9 fe1f 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800ba54:	f7f6 fa58 	bl	8001f08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba58:	4b2b      	ldr	r3, [pc, #172]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800ba5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba5c:	4a2a      	ldr	r2, [pc, #168]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800ba5e:	f043 0301 	orr.w	r3, r3, #1
 800ba62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba64:	4b28      	ldr	r3, [pc, #160]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800ba66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	613b      	str	r3, [r7, #16]
 800ba6e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ba70:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ba74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba78:	2302      	movs	r3, #2
 800ba7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba84:	2303      	movs	r3, #3
 800ba86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba8a:	230a      	movs	r3, #10
 800ba8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800ba94:	4619      	mov	r1, r3
 800ba96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ba9a:	f7f7 fac9 	bl	8003030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba9e:	4b1a      	ldr	r3, [pc, #104]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800baa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baa2:	4a19      	ldr	r2, [pc, #100]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800baa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800baa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800baaa:	4b17      	ldr	r3, [pc, #92]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800baac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bab6:	4b14      	ldr	r3, [pc, #80]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800bab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d114      	bne.n	800baec <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bac2:	4b11      	ldr	r3, [pc, #68]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800bac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bac6:	4a10      	ldr	r2, [pc, #64]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800bac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bacc:	6593      	str	r3, [r2, #88]	@ 0x58
 800bace:	4b0e      	ldr	r3, [pc, #56]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800bad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bad6:	60bb      	str	r3, [r7, #8]
 800bad8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800bada:	f7f8 ffc9 	bl	8004a70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bade:	4b0a      	ldr	r3, [pc, #40]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800bae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bae2:	4a09      	ldr	r2, [pc, #36]	@ (800bb08 <HAL_PCD_MspInit+0x120>)
 800bae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bae8:	6593      	str	r3, [r2, #88]	@ 0x58
 800baea:	e001      	b.n	800baf0 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800baec:	f7f8 ffc0 	bl	8004a70 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	2043      	movs	r0, #67	@ 0x43
 800baf6:	f7f7 f8ee 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bafa:	2043      	movs	r0, #67	@ 0x43
 800bafc:	f7f7 f907 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb00:	bf00      	nop
 800bb02:	37b0      	adds	r7, #176	@ 0xb0
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	40021000 	.word	0x40021000

0800bb0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bb20:	4619      	mov	r1, r3
 800bb22:	4610      	mov	r0, r2
 800bb24:	f7fe fabf 	bl	800a0a6 <USBD_LL_SetupStage>
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb42:	78fa      	ldrb	r2, [r7, #3]
 800bb44:	6879      	ldr	r1, [r7, #4]
 800bb46:	4613      	mov	r3, r2
 800bb48:	00db      	lsls	r3, r3, #3
 800bb4a:	4413      	add	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	440b      	add	r3, r1
 800bb50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	78fb      	ldrb	r3, [r7, #3]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	f7fe faf9 	bl	800a150 <USBD_LL_DataOutStage>
}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb78:	78fa      	ldrb	r2, [r7, #3]
 800bb7a:	6879      	ldr	r1, [r7, #4]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	4413      	add	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	440b      	add	r3, r1
 800bb86:	3320      	adds	r3, #32
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	78fb      	ldrb	r3, [r7, #3]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	f7fe fb92 	bl	800a2b6 <USBD_LL_DataInStage>
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fe fccc 	bl	800a546 <USBD_LL_SOF>
}
 800bbae:	bf00      	nop
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b084      	sub	sp, #16
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	79db      	ldrb	r3, [r3, #7]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d001      	beq.n	800bbce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbca:	f7f6 f99d 	bl	8001f08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbd4:	7bfa      	ldrb	r2, [r7, #15]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe fc70 	bl	800a4be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe fc18 	bl	800a41a <USBD_LL_Reset>
}
 800bbea:	bf00      	nop
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
	...

0800bbf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	6812      	ldr	r2, [r2, #0]
 800bc0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc0e:	f043 0301 	orr.w	r3, r3, #1
 800bc12:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe fc5f 	bl	800a4de <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7adb      	ldrb	r3, [r3, #11]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d005      	beq.n	800bc34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc28:	4b04      	ldr	r3, [pc, #16]	@ (800bc3c <HAL_PCD_SuspendCallback+0x48>)
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	4a03      	ldr	r2, [pc, #12]	@ (800bc3c <HAL_PCD_SuspendCallback+0x48>)
 800bc2e:	f043 0306 	orr.w	r3, r3, #6
 800bc32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc34:	bf00      	nop
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	e000ed00 	.word	0xe000ed00

0800bc40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	6812      	ldr	r2, [r2, #0]
 800bc56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc5a:	f023 0301 	bic.w	r3, r3, #1
 800bc5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	7adb      	ldrb	r3, [r3, #11]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d007      	beq.n	800bc78 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc68:	4b08      	ldr	r3, [pc, #32]	@ (800bc8c <HAL_PCD_ResumeCallback+0x4c>)
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	4a07      	ldr	r2, [pc, #28]	@ (800bc8c <HAL_PCD_ResumeCallback+0x4c>)
 800bc6e:	f023 0306 	bic.w	r3, r3, #6
 800bc72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bc74:	f000 faf6 	bl	800c264 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe fc49 	bl	800a516 <USBD_LL_Resume>
}
 800bc84:	bf00      	nop
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	e000ed00 	.word	0xe000ed00

0800bc90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bca2:	78fa      	ldrb	r2, [r7, #3]
 800bca4:	4611      	mov	r1, r2
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fe fc9f 	bl	800a5ea <USBD_LL_IsoOUTIncomplete>
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcc6:	78fa      	ldrb	r2, [r7, #3]
 800bcc8:	4611      	mov	r1, r2
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fc5b 	bl	800a586 <USBD_LL_IsoINIncomplete>
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fe fcb1 	bl	800a64e <USBD_LL_DevConnected>
}
 800bcec:	bf00      	nop
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe fcae 	bl	800a664 <USBD_LL_DevDisconnected>
}
 800bd08:	bf00      	nop
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d13c      	bne.n	800bd9a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bd20:	4a20      	ldr	r2, [pc, #128]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a1e      	ldr	r2, [pc, #120]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd30:	4b1c      	ldr	r3, [pc, #112]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bd36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bd38:	4b1a      	ldr	r3, [pc, #104]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd3a:	2206      	movs	r2, #6
 800bd3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd3e:	4b19      	ldr	r3, [pc, #100]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd40:	2202      	movs	r2, #2
 800bd42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd44:	4b17      	ldr	r3, [pc, #92]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd46:	2202      	movs	r2, #2
 800bd48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd4a:	4b16      	ldr	r3, [pc, #88]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd50:	4b14      	ldr	r3, [pc, #80]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd56:	4b13      	ldr	r3, [pc, #76]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bd5c:	4b11      	ldr	r3, [pc, #68]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd62:	4b10      	ldr	r3, [pc, #64]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd68:	4b0e      	ldr	r3, [pc, #56]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd6e:	480d      	ldr	r0, [pc, #52]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd70:	f7f7 fc84 	bl	800367c <HAL_PCD_Init>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd7a:	f7f6 f8c5 	bl	8001f08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd7e:	2180      	movs	r1, #128	@ 0x80
 800bd80:	4808      	ldr	r0, [pc, #32]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd82:	f7f8 fddc 	bl	800493e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bd86:	2240      	movs	r2, #64	@ 0x40
 800bd88:	2100      	movs	r1, #0
 800bd8a:	4806      	ldr	r0, [pc, #24]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd8c:	f7f8 fd90 	bl	80048b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bd90:	2280      	movs	r2, #128	@ 0x80
 800bd92:	2101      	movs	r1, #1
 800bd94:	4803      	ldr	r0, [pc, #12]	@ (800bda4 <USBD_LL_Init+0x94>)
 800bd96:	f7f8 fd8b 	bl	80048b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	20001fdc 	.word	0x20001fdc

0800bda8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f7 fd6b 	bl	800389a <HAL_PCD_Start>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d816      	bhi.n	800bdfc <USBD_LL_Start+0x54>
 800bdce:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd4 <USBD_LL_Start+0x2c>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800bdeb 	.word	0x0800bdeb
 800bddc:	0800bdf1 	.word	0x0800bdf1
 800bde0:	0800bdf7 	.word	0x0800bdf7
    case HAL_OK :
      usb_status = USBD_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73fb      	strb	r3, [r7, #15]
    break;
 800bde8:	e00b      	b.n	800be02 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdea:	2303      	movs	r3, #3
 800bdec:	73fb      	strb	r3, [r7, #15]
    break;
 800bdee:	e008      	b.n	800be02 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdf4:	e005      	b.n	800be02 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdfa:	e002      	b.n	800be02 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	73fb      	strb	r3, [r7, #15]
    break;
 800be00:	bf00      	nop
  }
  return usb_status;
 800be02:	7bfb      	ldrb	r3, [r7, #15]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	4608      	mov	r0, r1
 800be16:	4611      	mov	r1, r2
 800be18:	461a      	mov	r2, r3
 800be1a:	4603      	mov	r3, r0
 800be1c:	70fb      	strb	r3, [r7, #3]
 800be1e:	460b      	mov	r3, r1
 800be20:	70bb      	strb	r3, [r7, #2]
 800be22:	4613      	mov	r3, r2
 800be24:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800be34:	78bb      	ldrb	r3, [r7, #2]
 800be36:	883a      	ldrh	r2, [r7, #0]
 800be38:	78f9      	ldrb	r1, [r7, #3]
 800be3a:	f7f8 fa17 	bl	800426c <HAL_PCD_EP_Open>
 800be3e:	4603      	mov	r3, r0
 800be40:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be42:	7bbb      	ldrb	r3, [r7, #14]
 800be44:	2b03      	cmp	r3, #3
 800be46:	d817      	bhi.n	800be78 <USBD_LL_OpenEP+0x6c>
 800be48:	a201      	add	r2, pc, #4	@ (adr r2, 800be50 <USBD_LL_OpenEP+0x44>)
 800be4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4e:	bf00      	nop
 800be50:	0800be61 	.word	0x0800be61
 800be54:	0800be67 	.word	0x0800be67
 800be58:	0800be6d 	.word	0x0800be6d
 800be5c:	0800be73 	.word	0x0800be73
    case HAL_OK :
      usb_status = USBD_OK;
 800be60:	2300      	movs	r3, #0
 800be62:	73fb      	strb	r3, [r7, #15]
    break;
 800be64:	e00b      	b.n	800be7e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be66:	2303      	movs	r3, #3
 800be68:	73fb      	strb	r3, [r7, #15]
    break;
 800be6a:	e008      	b.n	800be7e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be6c:	2301      	movs	r3, #1
 800be6e:	73fb      	strb	r3, [r7, #15]
    break;
 800be70:	e005      	b.n	800be7e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be72:	2303      	movs	r3, #3
 800be74:	73fb      	strb	r3, [r7, #15]
    break;
 800be76:	e002      	b.n	800be7e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800be78:	2303      	movs	r3, #3
 800be7a:	73fb      	strb	r3, [r7, #15]
    break;
 800be7c:	bf00      	nop
  }
  return usb_status;
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bea2:	78fa      	ldrb	r2, [r7, #3]
 800bea4:	4611      	mov	r1, r2
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7f8 fa4a 	bl	8004340 <HAL_PCD_EP_Close>
 800beac:	4603      	mov	r3, r0
 800beae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800beb0:	7bbb      	ldrb	r3, [r7, #14]
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	d816      	bhi.n	800bee4 <USBD_LL_CloseEP+0x5c>
 800beb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bebc <USBD_LL_CloseEP+0x34>)
 800beb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebc:	0800becd 	.word	0x0800becd
 800bec0:	0800bed3 	.word	0x0800bed3
 800bec4:	0800bed9 	.word	0x0800bed9
 800bec8:	0800bedf 	.word	0x0800bedf
    case HAL_OK :
      usb_status = USBD_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]
    break;
 800bed0:	e00b      	b.n	800beea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bed2:	2303      	movs	r3, #3
 800bed4:	73fb      	strb	r3, [r7, #15]
    break;
 800bed6:	e008      	b.n	800beea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bed8:	2301      	movs	r3, #1
 800beda:	73fb      	strb	r3, [r7, #15]
    break;
 800bedc:	e005      	b.n	800beea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bede:	2303      	movs	r3, #3
 800bee0:	73fb      	strb	r3, [r7, #15]
    break;
 800bee2:	e002      	b.n	800beea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bee4:	2303      	movs	r3, #3
 800bee6:	73fb      	strb	r3, [r7, #15]
    break;
 800bee8:	bf00      	nop
  }
  return usb_status;
 800beea:	7bfb      	ldrb	r3, [r7, #15]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf0e:	78fa      	ldrb	r2, [r7, #3]
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7f8 fad9 	bl	80044ca <HAL_PCD_EP_SetStall>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d816      	bhi.n	800bf50 <USBD_LL_StallEP+0x5c>
 800bf22:	a201      	add	r2, pc, #4	@ (adr r2, 800bf28 <USBD_LL_StallEP+0x34>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bf39 	.word	0x0800bf39
 800bf2c:	0800bf3f 	.word	0x0800bf3f
 800bf30:	0800bf45 	.word	0x0800bf45
 800bf34:	0800bf4b 	.word	0x0800bf4b
    case HAL_OK :
      usb_status = USBD_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf3c:	e00b      	b.n	800bf56 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	73fb      	strb	r3, [r7, #15]
    break;
 800bf42:	e008      	b.n	800bf56 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf44:	2301      	movs	r3, #1
 800bf46:	73fb      	strb	r3, [r7, #15]
    break;
 800bf48:	e005      	b.n	800bf56 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf4e:	e002      	b.n	800bf56 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bf50:	2303      	movs	r3, #3
 800bf52:	73fb      	strb	r3, [r7, #15]
    break;
 800bf54:	bf00      	nop
  }
  return usb_status;
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf7a:	78fa      	ldrb	r2, [r7, #3]
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7f8 fb05 	bl	800458e <HAL_PCD_EP_ClrStall>
 800bf84:	4603      	mov	r3, r0
 800bf86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	2b03      	cmp	r3, #3
 800bf8c:	d816      	bhi.n	800bfbc <USBD_LL_ClearStallEP+0x5c>
 800bf8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf94 <USBD_LL_ClearStallEP+0x34>)
 800bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf94:	0800bfa5 	.word	0x0800bfa5
 800bf98:	0800bfab 	.word	0x0800bfab
 800bf9c:	0800bfb1 	.word	0x0800bfb1
 800bfa0:	0800bfb7 	.word	0x0800bfb7
    case HAL_OK :
      usb_status = USBD_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfa8:	e00b      	b.n	800bfc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	73fb      	strb	r3, [r7, #15]
    break;
 800bfae:	e008      	b.n	800bfc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfb4:	e005      	b.n	800bfc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bfba:	e002      	b.n	800bfc2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc0:	bf00      	nop
  }
  return usb_status;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bfe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	da0b      	bge.n	800c000 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bfe8:	78fb      	ldrb	r3, [r7, #3]
 800bfea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bfee:	68f9      	ldr	r1, [r7, #12]
 800bff0:	4613      	mov	r3, r2
 800bff2:	00db      	lsls	r3, r3, #3
 800bff4:	4413      	add	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	440b      	add	r3, r1
 800bffa:	3316      	adds	r3, #22
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	e00b      	b.n	800c018 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c006:	68f9      	ldr	r1, [r7, #12]
 800c008:	4613      	mov	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	4413      	add	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	440b      	add	r3, r1
 800c012:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c016:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c03e:	78fa      	ldrb	r2, [r7, #3]
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7f8 f8ee 	bl	8004224 <HAL_PCD_SetAddress>
 800c048:	4603      	mov	r3, r0
 800c04a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	2b03      	cmp	r3, #3
 800c050:	d816      	bhi.n	800c080 <USBD_LL_SetUSBAddress+0x5c>
 800c052:	a201      	add	r2, pc, #4	@ (adr r2, 800c058 <USBD_LL_SetUSBAddress+0x34>)
 800c054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c058:	0800c069 	.word	0x0800c069
 800c05c:	0800c06f 	.word	0x0800c06f
 800c060:	0800c075 	.word	0x0800c075
 800c064:	0800c07b 	.word	0x0800c07b
    case HAL_OK :
      usb_status = USBD_OK;
 800c068:	2300      	movs	r3, #0
 800c06a:	73fb      	strb	r3, [r7, #15]
    break;
 800c06c:	e00b      	b.n	800c086 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c06e:	2303      	movs	r3, #3
 800c070:	73fb      	strb	r3, [r7, #15]
    break;
 800c072:	e008      	b.n	800c086 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c074:	2301      	movs	r3, #1
 800c076:	73fb      	strb	r3, [r7, #15]
    break;
 800c078:	e005      	b.n	800c086 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c07a:	2303      	movs	r3, #3
 800c07c:	73fb      	strb	r3, [r7, #15]
    break;
 800c07e:	e002      	b.n	800c086 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c080:	2303      	movs	r3, #3
 800c082:	73fb      	strb	r3, [r7, #15]
    break;
 800c084:	bf00      	nop
  }
  return usb_status;
 800c086:	7bfb      	ldrb	r3, [r7, #15]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	607a      	str	r2, [r7, #4]
 800c09a:	603b      	str	r3, [r7, #0]
 800c09c:	460b      	mov	r3, r1
 800c09e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c0ae:	7af9      	ldrb	r1, [r7, #11]
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	f7f8 f9d8 	bl	8004468 <HAL_PCD_EP_Transmit>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c0bc:	7dbb      	ldrb	r3, [r7, #22]
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d816      	bhi.n	800c0f0 <USBD_LL_Transmit+0x60>
 800c0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c8 <USBD_LL_Transmit+0x38>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c0d9 	.word	0x0800c0d9
 800c0cc:	0800c0df 	.word	0x0800c0df
 800c0d0:	0800c0e5 	.word	0x0800c0e5
 800c0d4:	0800c0eb 	.word	0x0800c0eb
    case HAL_OK :
      usb_status = USBD_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	75fb      	strb	r3, [r7, #23]
    break;
 800c0dc:	e00b      	b.n	800c0f6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	75fb      	strb	r3, [r7, #23]
    break;
 800c0e2:	e008      	b.n	800c0f6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	75fb      	strb	r3, [r7, #23]
    break;
 800c0e8:	e005      	b.n	800c0f6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	75fb      	strb	r3, [r7, #23]
    break;
 800c0ee:	e002      	b.n	800c0f6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	75fb      	strb	r3, [r7, #23]
    break;
 800c0f4:	bf00      	nop
  }
  return usb_status;
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	607a      	str	r2, [r7, #4]
 800c10a:	603b      	str	r3, [r7, #0]
 800c10c:	460b      	mov	r3, r1
 800c10e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c110:	2300      	movs	r3, #0
 800c112:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c11e:	7af9      	ldrb	r1, [r7, #11]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	f7f8 f956 	bl	80043d4 <HAL_PCD_EP_Receive>
 800c128:	4603      	mov	r3, r0
 800c12a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c12c:	7dbb      	ldrb	r3, [r7, #22]
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d816      	bhi.n	800c160 <USBD_LL_PrepareReceive+0x60>
 800c132:	a201      	add	r2, pc, #4	@ (adr r2, 800c138 <USBD_LL_PrepareReceive+0x38>)
 800c134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c138:	0800c149 	.word	0x0800c149
 800c13c:	0800c14f 	.word	0x0800c14f
 800c140:	0800c155 	.word	0x0800c155
 800c144:	0800c15b 	.word	0x0800c15b
    case HAL_OK :
      usb_status = USBD_OK;
 800c148:	2300      	movs	r3, #0
 800c14a:	75fb      	strb	r3, [r7, #23]
    break;
 800c14c:	e00b      	b.n	800c166 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c14e:	2303      	movs	r3, #3
 800c150:	75fb      	strb	r3, [r7, #23]
    break;
 800c152:	e008      	b.n	800c166 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c154:	2301      	movs	r3, #1
 800c156:	75fb      	strb	r3, [r7, #23]
    break;
 800c158:	e005      	b.n	800c166 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c15a:	2303      	movs	r3, #3
 800c15c:	75fb      	strb	r3, [r7, #23]
    break;
 800c15e:	e002      	b.n	800c166 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c160:	2303      	movs	r3, #3
 800c162:	75fb      	strb	r3, [r7, #23]
    break;
 800c164:	bf00      	nop
  }
  return usb_status;
 800c166:	7dfb      	ldrb	r3, [r7, #23]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3718      	adds	r7, #24
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c182:	78fa      	ldrb	r2, [r7, #3]
 800c184:	4611      	mov	r1, r2
 800c186:	4618      	mov	r0, r3
 800c188:	f7f8 f956 	bl	8004438 <HAL_PCD_EP_GetRxCount>
 800c18c:	4603      	mov	r3, r0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
	...

0800c198 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c1a4:	78fb      	ldrb	r3, [r7, #3]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <HAL_PCDEx_LPM_Callback+0x18>
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d01f      	beq.n	800c1ee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c1ae:	e03b      	b.n	800c228 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	7adb      	ldrb	r3, [r3, #11]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d007      	beq.n	800c1c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c1b8:	f000 f854 	bl	800c264 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1bc:	4b1c      	ldr	r3, [pc, #112]	@ (800c230 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	4a1b      	ldr	r2, [pc, #108]	@ (800c230 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1c2:	f023 0306 	bic.w	r3, r3, #6
 800c1c6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	6812      	ldr	r2, [r2, #0]
 800c1d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c1da:	f023 0301 	bic.w	r3, r3, #1
 800c1de:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe f995 	bl	800a516 <USBD_LL_Resume>
    break;
 800c1ec:	e01c      	b.n	800c228 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	6812      	ldr	r2, [r2, #0]
 800c1fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c200:	f043 0301 	orr.w	r3, r3, #1
 800c204:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe f966 	bl	800a4de <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	7adb      	ldrb	r3, [r3, #11]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d005      	beq.n	800c226 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c21a:	4b05      	ldr	r3, [pc, #20]	@ (800c230 <HAL_PCDEx_LPM_Callback+0x98>)
 800c21c:	691b      	ldr	r3, [r3, #16]
 800c21e:	4a04      	ldr	r2, [pc, #16]	@ (800c230 <HAL_PCDEx_LPM_Callback+0x98>)
 800c220:	f043 0306 	orr.w	r3, r3, #6
 800c224:	6113      	str	r3, [r2, #16]
    break;
 800c226:	bf00      	nop
}
 800c228:	bf00      	nop
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	e000ed00 	.word	0xe000ed00

0800c234 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c23c:	4b03      	ldr	r3, [pc, #12]	@ (800c24c <USBD_static_malloc+0x18>)
}
 800c23e:	4618      	mov	r0, r3
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	200024c0 	.word	0x200024c0

0800c250 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]

}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c268:	f7f5 f982 	bl	8001570 <SystemClock_Config>
}
 800c26c:	bf00      	nop
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <atof>:
 800c270:	2100      	movs	r1, #0
 800c272:	f000 bebd 	b.w	800cff0 <strtod>

0800c276 <atoi>:
 800c276:	220a      	movs	r2, #10
 800c278:	2100      	movs	r1, #0
 800c27a:	f000 bf3f 	b.w	800d0fc <strtol>
	...

0800c280 <malloc>:
 800c280:	4b02      	ldr	r3, [pc, #8]	@ (800c28c <malloc+0xc>)
 800c282:	4601      	mov	r1, r0
 800c284:	6818      	ldr	r0, [r3, #0]
 800c286:	f000 b825 	b.w	800c2d4 <_malloc_r>
 800c28a:	bf00      	nop
 800c28c:	20000374 	.word	0x20000374

0800c290 <sbrk_aligned>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	4e0f      	ldr	r6, [pc, #60]	@ (800c2d0 <sbrk_aligned+0x40>)
 800c294:	460c      	mov	r4, r1
 800c296:	6831      	ldr	r1, [r6, #0]
 800c298:	4605      	mov	r5, r0
 800c29a:	b911      	cbnz	r1, 800c2a2 <sbrk_aligned+0x12>
 800c29c:	f001 fd84 	bl	800dda8 <_sbrk_r>
 800c2a0:	6030      	str	r0, [r6, #0]
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f001 fd7f 	bl	800dda8 <_sbrk_r>
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d103      	bne.n	800c2b6 <sbrk_aligned+0x26>
 800c2ae:	f04f 34ff 	mov.w	r4, #4294967295
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	bd70      	pop	{r4, r5, r6, pc}
 800c2b6:	1cc4      	adds	r4, r0, #3
 800c2b8:	f024 0403 	bic.w	r4, r4, #3
 800c2bc:	42a0      	cmp	r0, r4
 800c2be:	d0f8      	beq.n	800c2b2 <sbrk_aligned+0x22>
 800c2c0:	1a21      	subs	r1, r4, r0
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f001 fd70 	bl	800dda8 <_sbrk_r>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d1f2      	bne.n	800c2b2 <sbrk_aligned+0x22>
 800c2cc:	e7ef      	b.n	800c2ae <sbrk_aligned+0x1e>
 800c2ce:	bf00      	nop
 800c2d0:	200026e0 	.word	0x200026e0

0800c2d4 <_malloc_r>:
 800c2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d8:	1ccd      	adds	r5, r1, #3
 800c2da:	f025 0503 	bic.w	r5, r5, #3
 800c2de:	3508      	adds	r5, #8
 800c2e0:	2d0c      	cmp	r5, #12
 800c2e2:	bf38      	it	cc
 800c2e4:	250c      	movcc	r5, #12
 800c2e6:	2d00      	cmp	r5, #0
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	db01      	blt.n	800c2f0 <_malloc_r+0x1c>
 800c2ec:	42a9      	cmp	r1, r5
 800c2ee:	d904      	bls.n	800c2fa <_malloc_r+0x26>
 800c2f0:	230c      	movs	r3, #12
 800c2f2:	6033      	str	r3, [r6, #0]
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3d0 <_malloc_r+0xfc>
 800c2fe:	f000 f869 	bl	800c3d4 <__malloc_lock>
 800c302:	f8d8 3000 	ldr.w	r3, [r8]
 800c306:	461c      	mov	r4, r3
 800c308:	bb44      	cbnz	r4, 800c35c <_malloc_r+0x88>
 800c30a:	4629      	mov	r1, r5
 800c30c:	4630      	mov	r0, r6
 800c30e:	f7ff ffbf 	bl	800c290 <sbrk_aligned>
 800c312:	1c43      	adds	r3, r0, #1
 800c314:	4604      	mov	r4, r0
 800c316:	d158      	bne.n	800c3ca <_malloc_r+0xf6>
 800c318:	f8d8 4000 	ldr.w	r4, [r8]
 800c31c:	4627      	mov	r7, r4
 800c31e:	2f00      	cmp	r7, #0
 800c320:	d143      	bne.n	800c3aa <_malloc_r+0xd6>
 800c322:	2c00      	cmp	r4, #0
 800c324:	d04b      	beq.n	800c3be <_malloc_r+0xea>
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	4639      	mov	r1, r7
 800c32a:	4630      	mov	r0, r6
 800c32c:	eb04 0903 	add.w	r9, r4, r3
 800c330:	f001 fd3a 	bl	800dda8 <_sbrk_r>
 800c334:	4581      	cmp	r9, r0
 800c336:	d142      	bne.n	800c3be <_malloc_r+0xea>
 800c338:	6821      	ldr	r1, [r4, #0]
 800c33a:	1a6d      	subs	r5, r5, r1
 800c33c:	4629      	mov	r1, r5
 800c33e:	4630      	mov	r0, r6
 800c340:	f7ff ffa6 	bl	800c290 <sbrk_aligned>
 800c344:	3001      	adds	r0, #1
 800c346:	d03a      	beq.n	800c3be <_malloc_r+0xea>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	442b      	add	r3, r5
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	f8d8 3000 	ldr.w	r3, [r8]
 800c352:	685a      	ldr	r2, [r3, #4]
 800c354:	bb62      	cbnz	r2, 800c3b0 <_malloc_r+0xdc>
 800c356:	f8c8 7000 	str.w	r7, [r8]
 800c35a:	e00f      	b.n	800c37c <_malloc_r+0xa8>
 800c35c:	6822      	ldr	r2, [r4, #0]
 800c35e:	1b52      	subs	r2, r2, r5
 800c360:	d420      	bmi.n	800c3a4 <_malloc_r+0xd0>
 800c362:	2a0b      	cmp	r2, #11
 800c364:	d917      	bls.n	800c396 <_malloc_r+0xc2>
 800c366:	1961      	adds	r1, r4, r5
 800c368:	42a3      	cmp	r3, r4
 800c36a:	6025      	str	r5, [r4, #0]
 800c36c:	bf18      	it	ne
 800c36e:	6059      	strne	r1, [r3, #4]
 800c370:	6863      	ldr	r3, [r4, #4]
 800c372:	bf08      	it	eq
 800c374:	f8c8 1000 	streq.w	r1, [r8]
 800c378:	5162      	str	r2, [r4, r5]
 800c37a:	604b      	str	r3, [r1, #4]
 800c37c:	4630      	mov	r0, r6
 800c37e:	f000 f82f 	bl	800c3e0 <__malloc_unlock>
 800c382:	f104 000b 	add.w	r0, r4, #11
 800c386:	1d23      	adds	r3, r4, #4
 800c388:	f020 0007 	bic.w	r0, r0, #7
 800c38c:	1ac2      	subs	r2, r0, r3
 800c38e:	bf1c      	itt	ne
 800c390:	1a1b      	subne	r3, r3, r0
 800c392:	50a3      	strne	r3, [r4, r2]
 800c394:	e7af      	b.n	800c2f6 <_malloc_r+0x22>
 800c396:	6862      	ldr	r2, [r4, #4]
 800c398:	42a3      	cmp	r3, r4
 800c39a:	bf0c      	ite	eq
 800c39c:	f8c8 2000 	streq.w	r2, [r8]
 800c3a0:	605a      	strne	r2, [r3, #4]
 800c3a2:	e7eb      	b.n	800c37c <_malloc_r+0xa8>
 800c3a4:	4623      	mov	r3, r4
 800c3a6:	6864      	ldr	r4, [r4, #4]
 800c3a8:	e7ae      	b.n	800c308 <_malloc_r+0x34>
 800c3aa:	463c      	mov	r4, r7
 800c3ac:	687f      	ldr	r7, [r7, #4]
 800c3ae:	e7b6      	b.n	800c31e <_malloc_r+0x4a>
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	d1fb      	bne.n	800c3b0 <_malloc_r+0xdc>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	6053      	str	r3, [r2, #4]
 800c3bc:	e7de      	b.n	800c37c <_malloc_r+0xa8>
 800c3be:	230c      	movs	r3, #12
 800c3c0:	6033      	str	r3, [r6, #0]
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f000 f80c 	bl	800c3e0 <__malloc_unlock>
 800c3c8:	e794      	b.n	800c2f4 <_malloc_r+0x20>
 800c3ca:	6005      	str	r5, [r0, #0]
 800c3cc:	e7d6      	b.n	800c37c <_malloc_r+0xa8>
 800c3ce:	bf00      	nop
 800c3d0:	200026e4 	.word	0x200026e4

0800c3d4 <__malloc_lock>:
 800c3d4:	4801      	ldr	r0, [pc, #4]	@ (800c3dc <__malloc_lock+0x8>)
 800c3d6:	f001 bd34 	b.w	800de42 <__retarget_lock_acquire_recursive>
 800c3da:	bf00      	nop
 800c3dc:	20002828 	.word	0x20002828

0800c3e0 <__malloc_unlock>:
 800c3e0:	4801      	ldr	r0, [pc, #4]	@ (800c3e8 <__malloc_unlock+0x8>)
 800c3e2:	f001 bd2f 	b.w	800de44 <__retarget_lock_release_recursive>
 800c3e6:	bf00      	nop
 800c3e8:	20002828 	.word	0x20002828

0800c3ec <sulp>:
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	ec45 4b10 	vmov	d0, r4, r5
 800c3f6:	4616      	mov	r6, r2
 800c3f8:	f003 fab8 	bl	800f96c <__ulp>
 800c3fc:	ec51 0b10 	vmov	r0, r1, d0
 800c400:	b17e      	cbz	r6, 800c422 <sulp+0x36>
 800c402:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c406:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	dd09      	ble.n	800c422 <sulp+0x36>
 800c40e:	051b      	lsls	r3, r3, #20
 800c410:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c414:	2400      	movs	r4, #0
 800c416:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c41a:	4622      	mov	r2, r4
 800c41c:	462b      	mov	r3, r5
 800c41e:	f7f4 f8fb 	bl	8000618 <__aeabi_dmul>
 800c422:	ec41 0b10 	vmov	d0, r0, r1
 800c426:	bd70      	pop	{r4, r5, r6, pc}

0800c428 <_strtod_l>:
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	b09f      	sub	sp, #124	@ 0x7c
 800c42e:	460c      	mov	r4, r1
 800c430:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c432:	2200      	movs	r2, #0
 800c434:	921a      	str	r2, [sp, #104]	@ 0x68
 800c436:	9005      	str	r0, [sp, #20]
 800c438:	f04f 0a00 	mov.w	sl, #0
 800c43c:	f04f 0b00 	mov.w	fp, #0
 800c440:	460a      	mov	r2, r1
 800c442:	9219      	str	r2, [sp, #100]	@ 0x64
 800c444:	7811      	ldrb	r1, [r2, #0]
 800c446:	292b      	cmp	r1, #43	@ 0x2b
 800c448:	d04a      	beq.n	800c4e0 <_strtod_l+0xb8>
 800c44a:	d838      	bhi.n	800c4be <_strtod_l+0x96>
 800c44c:	290d      	cmp	r1, #13
 800c44e:	d832      	bhi.n	800c4b6 <_strtod_l+0x8e>
 800c450:	2908      	cmp	r1, #8
 800c452:	d832      	bhi.n	800c4ba <_strtod_l+0x92>
 800c454:	2900      	cmp	r1, #0
 800c456:	d03b      	beq.n	800c4d0 <_strtod_l+0xa8>
 800c458:	2200      	movs	r2, #0
 800c45a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c45c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c45e:	782a      	ldrb	r2, [r5, #0]
 800c460:	2a30      	cmp	r2, #48	@ 0x30
 800c462:	f040 80b2 	bne.w	800c5ca <_strtod_l+0x1a2>
 800c466:	786a      	ldrb	r2, [r5, #1]
 800c468:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c46c:	2a58      	cmp	r2, #88	@ 0x58
 800c46e:	d16e      	bne.n	800c54e <_strtod_l+0x126>
 800c470:	9302      	str	r3, [sp, #8]
 800c472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c474:	9301      	str	r3, [sp, #4]
 800c476:	ab1a      	add	r3, sp, #104	@ 0x68
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	4a8f      	ldr	r2, [pc, #572]	@ (800c6b8 <_strtod_l+0x290>)
 800c47c:	9805      	ldr	r0, [sp, #20]
 800c47e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c480:	a919      	add	r1, sp, #100	@ 0x64
 800c482:	f002 fc23 	bl	800eccc <__gethex>
 800c486:	f010 060f 	ands.w	r6, r0, #15
 800c48a:	4604      	mov	r4, r0
 800c48c:	d005      	beq.n	800c49a <_strtod_l+0x72>
 800c48e:	2e06      	cmp	r6, #6
 800c490:	d128      	bne.n	800c4e4 <_strtod_l+0xbc>
 800c492:	3501      	adds	r5, #1
 800c494:	2300      	movs	r3, #0
 800c496:	9519      	str	r5, [sp, #100]	@ 0x64
 800c498:	930e      	str	r3, [sp, #56]	@ 0x38
 800c49a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f040 858e 	bne.w	800cfbe <_strtod_l+0xb96>
 800c4a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4a4:	b1cb      	cbz	r3, 800c4da <_strtod_l+0xb2>
 800c4a6:	4652      	mov	r2, sl
 800c4a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c4ac:	ec43 2b10 	vmov	d0, r2, r3
 800c4b0:	b01f      	add	sp, #124	@ 0x7c
 800c4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b6:	2920      	cmp	r1, #32
 800c4b8:	d1ce      	bne.n	800c458 <_strtod_l+0x30>
 800c4ba:	3201      	adds	r2, #1
 800c4bc:	e7c1      	b.n	800c442 <_strtod_l+0x1a>
 800c4be:	292d      	cmp	r1, #45	@ 0x2d
 800c4c0:	d1ca      	bne.n	800c458 <_strtod_l+0x30>
 800c4c2:	2101      	movs	r1, #1
 800c4c4:	910e      	str	r1, [sp, #56]	@ 0x38
 800c4c6:	1c51      	adds	r1, r2, #1
 800c4c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4ca:	7852      	ldrb	r2, [r2, #1]
 800c4cc:	2a00      	cmp	r2, #0
 800c4ce:	d1c5      	bne.n	800c45c <_strtod_l+0x34>
 800c4d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f040 8570 	bne.w	800cfba <_strtod_l+0xb92>
 800c4da:	4652      	mov	r2, sl
 800c4dc:	465b      	mov	r3, fp
 800c4de:	e7e5      	b.n	800c4ac <_strtod_l+0x84>
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	e7ef      	b.n	800c4c4 <_strtod_l+0x9c>
 800c4e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c4e6:	b13a      	cbz	r2, 800c4f8 <_strtod_l+0xd0>
 800c4e8:	2135      	movs	r1, #53	@ 0x35
 800c4ea:	a81c      	add	r0, sp, #112	@ 0x70
 800c4ec:	f003 fb38 	bl	800fb60 <__copybits>
 800c4f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4f2:	9805      	ldr	r0, [sp, #20]
 800c4f4:	f002 ff0e 	bl	800f314 <_Bfree>
 800c4f8:	3e01      	subs	r6, #1
 800c4fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c4fc:	2e04      	cmp	r6, #4
 800c4fe:	d806      	bhi.n	800c50e <_strtod_l+0xe6>
 800c500:	e8df f006 	tbb	[pc, r6]
 800c504:	201d0314 	.word	0x201d0314
 800c508:	14          	.byte	0x14
 800c509:	00          	.byte	0x00
 800c50a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c50e:	05e1      	lsls	r1, r4, #23
 800c510:	bf48      	it	mi
 800c512:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c516:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c51a:	0d1b      	lsrs	r3, r3, #20
 800c51c:	051b      	lsls	r3, r3, #20
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1bb      	bne.n	800c49a <_strtod_l+0x72>
 800c522:	f001 fc63 	bl	800ddec <__errno>
 800c526:	2322      	movs	r3, #34	@ 0x22
 800c528:	6003      	str	r3, [r0, #0]
 800c52a:	e7b6      	b.n	800c49a <_strtod_l+0x72>
 800c52c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c530:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c534:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c538:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c53c:	e7e7      	b.n	800c50e <_strtod_l+0xe6>
 800c53e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c6c0 <_strtod_l+0x298>
 800c542:	e7e4      	b.n	800c50e <_strtod_l+0xe6>
 800c544:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c548:	f04f 3aff 	mov.w	sl, #4294967295
 800c54c:	e7df      	b.n	800c50e <_strtod_l+0xe6>
 800c54e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c550:	1c5a      	adds	r2, r3, #1
 800c552:	9219      	str	r2, [sp, #100]	@ 0x64
 800c554:	785b      	ldrb	r3, [r3, #1]
 800c556:	2b30      	cmp	r3, #48	@ 0x30
 800c558:	d0f9      	beq.n	800c54e <_strtod_l+0x126>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d09d      	beq.n	800c49a <_strtod_l+0x72>
 800c55e:	2301      	movs	r3, #1
 800c560:	2700      	movs	r7, #0
 800c562:	9308      	str	r3, [sp, #32]
 800c564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c566:	930c      	str	r3, [sp, #48]	@ 0x30
 800c568:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c56a:	46b9      	mov	r9, r7
 800c56c:	220a      	movs	r2, #10
 800c56e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c570:	7805      	ldrb	r5, [r0, #0]
 800c572:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c576:	b2d9      	uxtb	r1, r3
 800c578:	2909      	cmp	r1, #9
 800c57a:	d928      	bls.n	800c5ce <_strtod_l+0x1a6>
 800c57c:	494f      	ldr	r1, [pc, #316]	@ (800c6bc <_strtod_l+0x294>)
 800c57e:	2201      	movs	r2, #1
 800c580:	f001 fb58 	bl	800dc34 <strncmp>
 800c584:	2800      	cmp	r0, #0
 800c586:	d032      	beq.n	800c5ee <_strtod_l+0x1c6>
 800c588:	2000      	movs	r0, #0
 800c58a:	462a      	mov	r2, r5
 800c58c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c58e:	464d      	mov	r5, r9
 800c590:	4603      	mov	r3, r0
 800c592:	2a65      	cmp	r2, #101	@ 0x65
 800c594:	d001      	beq.n	800c59a <_strtod_l+0x172>
 800c596:	2a45      	cmp	r2, #69	@ 0x45
 800c598:	d114      	bne.n	800c5c4 <_strtod_l+0x19c>
 800c59a:	b91d      	cbnz	r5, 800c5a4 <_strtod_l+0x17c>
 800c59c:	9a08      	ldr	r2, [sp, #32]
 800c59e:	4302      	orrs	r2, r0
 800c5a0:	d096      	beq.n	800c4d0 <_strtod_l+0xa8>
 800c5a2:	2500      	movs	r5, #0
 800c5a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c5a6:	1c62      	adds	r2, r4, #1
 800c5a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5aa:	7862      	ldrb	r2, [r4, #1]
 800c5ac:	2a2b      	cmp	r2, #43	@ 0x2b
 800c5ae:	d07a      	beq.n	800c6a6 <_strtod_l+0x27e>
 800c5b0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c5b2:	d07e      	beq.n	800c6b2 <_strtod_l+0x28a>
 800c5b4:	f04f 0c00 	mov.w	ip, #0
 800c5b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c5bc:	2909      	cmp	r1, #9
 800c5be:	f240 8085 	bls.w	800c6cc <_strtod_l+0x2a4>
 800c5c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c5c4:	f04f 0800 	mov.w	r8, #0
 800c5c8:	e0a5      	b.n	800c716 <_strtod_l+0x2ee>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	e7c8      	b.n	800c560 <_strtod_l+0x138>
 800c5ce:	f1b9 0f08 	cmp.w	r9, #8
 800c5d2:	bfd8      	it	le
 800c5d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c5d6:	f100 0001 	add.w	r0, r0, #1
 800c5da:	bfda      	itte	le
 800c5dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c5e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c5e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c5e6:	f109 0901 	add.w	r9, r9, #1
 800c5ea:	9019      	str	r0, [sp, #100]	@ 0x64
 800c5ec:	e7bf      	b.n	800c56e <_strtod_l+0x146>
 800c5ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5f4:	785a      	ldrb	r2, [r3, #1]
 800c5f6:	f1b9 0f00 	cmp.w	r9, #0
 800c5fa:	d03b      	beq.n	800c674 <_strtod_l+0x24c>
 800c5fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c5fe:	464d      	mov	r5, r9
 800c600:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c604:	2b09      	cmp	r3, #9
 800c606:	d912      	bls.n	800c62e <_strtod_l+0x206>
 800c608:	2301      	movs	r3, #1
 800c60a:	e7c2      	b.n	800c592 <_strtod_l+0x16a>
 800c60c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c60e:	1c5a      	adds	r2, r3, #1
 800c610:	9219      	str	r2, [sp, #100]	@ 0x64
 800c612:	785a      	ldrb	r2, [r3, #1]
 800c614:	3001      	adds	r0, #1
 800c616:	2a30      	cmp	r2, #48	@ 0x30
 800c618:	d0f8      	beq.n	800c60c <_strtod_l+0x1e4>
 800c61a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c61e:	2b08      	cmp	r3, #8
 800c620:	f200 84d2 	bhi.w	800cfc8 <_strtod_l+0xba0>
 800c624:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c626:	900a      	str	r0, [sp, #40]	@ 0x28
 800c628:	2000      	movs	r0, #0
 800c62a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c62c:	4605      	mov	r5, r0
 800c62e:	3a30      	subs	r2, #48	@ 0x30
 800c630:	f100 0301 	add.w	r3, r0, #1
 800c634:	d018      	beq.n	800c668 <_strtod_l+0x240>
 800c636:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c638:	4419      	add	r1, r3
 800c63a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c63c:	462e      	mov	r6, r5
 800c63e:	f04f 0e0a 	mov.w	lr, #10
 800c642:	1c71      	adds	r1, r6, #1
 800c644:	eba1 0c05 	sub.w	ip, r1, r5
 800c648:	4563      	cmp	r3, ip
 800c64a:	dc15      	bgt.n	800c678 <_strtod_l+0x250>
 800c64c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c650:	182b      	adds	r3, r5, r0
 800c652:	2b08      	cmp	r3, #8
 800c654:	f105 0501 	add.w	r5, r5, #1
 800c658:	4405      	add	r5, r0
 800c65a:	dc1a      	bgt.n	800c692 <_strtod_l+0x26a>
 800c65c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c65e:	230a      	movs	r3, #10
 800c660:	fb03 2301 	mla	r3, r3, r1, r2
 800c664:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c666:	2300      	movs	r3, #0
 800c668:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c66a:	1c51      	adds	r1, r2, #1
 800c66c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c66e:	7852      	ldrb	r2, [r2, #1]
 800c670:	4618      	mov	r0, r3
 800c672:	e7c5      	b.n	800c600 <_strtod_l+0x1d8>
 800c674:	4648      	mov	r0, r9
 800c676:	e7ce      	b.n	800c616 <_strtod_l+0x1ee>
 800c678:	2e08      	cmp	r6, #8
 800c67a:	dc05      	bgt.n	800c688 <_strtod_l+0x260>
 800c67c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c67e:	fb0e f606 	mul.w	r6, lr, r6
 800c682:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c684:	460e      	mov	r6, r1
 800c686:	e7dc      	b.n	800c642 <_strtod_l+0x21a>
 800c688:	2910      	cmp	r1, #16
 800c68a:	bfd8      	it	le
 800c68c:	fb0e f707 	mulle.w	r7, lr, r7
 800c690:	e7f8      	b.n	800c684 <_strtod_l+0x25c>
 800c692:	2b0f      	cmp	r3, #15
 800c694:	bfdc      	itt	le
 800c696:	230a      	movle	r3, #10
 800c698:	fb03 2707 	mlale	r7, r3, r7, r2
 800c69c:	e7e3      	b.n	800c666 <_strtod_l+0x23e>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e77a      	b.n	800c59c <_strtod_l+0x174>
 800c6a6:	f04f 0c00 	mov.w	ip, #0
 800c6aa:	1ca2      	adds	r2, r4, #2
 800c6ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6ae:	78a2      	ldrb	r2, [r4, #2]
 800c6b0:	e782      	b.n	800c5b8 <_strtod_l+0x190>
 800c6b2:	f04f 0c01 	mov.w	ip, #1
 800c6b6:	e7f8      	b.n	800c6aa <_strtod_l+0x282>
 800c6b8:	08010634 	.word	0x08010634
 800c6bc:	080103f4 	.word	0x080103f4
 800c6c0:	7ff00000 	.word	0x7ff00000
 800c6c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6c6:	1c51      	adds	r1, r2, #1
 800c6c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c6ca:	7852      	ldrb	r2, [r2, #1]
 800c6cc:	2a30      	cmp	r2, #48	@ 0x30
 800c6ce:	d0f9      	beq.n	800c6c4 <_strtod_l+0x29c>
 800c6d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c6d4:	2908      	cmp	r1, #8
 800c6d6:	f63f af75 	bhi.w	800c5c4 <_strtod_l+0x19c>
 800c6da:	3a30      	subs	r2, #48	@ 0x30
 800c6dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c6e2:	f04f 080a 	mov.w	r8, #10
 800c6e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6e8:	1c56      	adds	r6, r2, #1
 800c6ea:	9619      	str	r6, [sp, #100]	@ 0x64
 800c6ec:	7852      	ldrb	r2, [r2, #1]
 800c6ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c6f2:	f1be 0f09 	cmp.w	lr, #9
 800c6f6:	d939      	bls.n	800c76c <_strtod_l+0x344>
 800c6f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c6fa:	1a76      	subs	r6, r6, r1
 800c6fc:	2e08      	cmp	r6, #8
 800c6fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c702:	dc03      	bgt.n	800c70c <_strtod_l+0x2e4>
 800c704:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c706:	4588      	cmp	r8, r1
 800c708:	bfa8      	it	ge
 800c70a:	4688      	movge	r8, r1
 800c70c:	f1bc 0f00 	cmp.w	ip, #0
 800c710:	d001      	beq.n	800c716 <_strtod_l+0x2ee>
 800c712:	f1c8 0800 	rsb	r8, r8, #0
 800c716:	2d00      	cmp	r5, #0
 800c718:	d14e      	bne.n	800c7b8 <_strtod_l+0x390>
 800c71a:	9908      	ldr	r1, [sp, #32]
 800c71c:	4308      	orrs	r0, r1
 800c71e:	f47f aebc 	bne.w	800c49a <_strtod_l+0x72>
 800c722:	2b00      	cmp	r3, #0
 800c724:	f47f aed4 	bne.w	800c4d0 <_strtod_l+0xa8>
 800c728:	2a69      	cmp	r2, #105	@ 0x69
 800c72a:	d028      	beq.n	800c77e <_strtod_l+0x356>
 800c72c:	dc25      	bgt.n	800c77a <_strtod_l+0x352>
 800c72e:	2a49      	cmp	r2, #73	@ 0x49
 800c730:	d025      	beq.n	800c77e <_strtod_l+0x356>
 800c732:	2a4e      	cmp	r2, #78	@ 0x4e
 800c734:	f47f aecc 	bne.w	800c4d0 <_strtod_l+0xa8>
 800c738:	499a      	ldr	r1, [pc, #616]	@ (800c9a4 <_strtod_l+0x57c>)
 800c73a:	a819      	add	r0, sp, #100	@ 0x64
 800c73c:	f002 fce8 	bl	800f110 <__match>
 800c740:	2800      	cmp	r0, #0
 800c742:	f43f aec5 	beq.w	800c4d0 <_strtod_l+0xa8>
 800c746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	2b28      	cmp	r3, #40	@ 0x28
 800c74c:	d12e      	bne.n	800c7ac <_strtod_l+0x384>
 800c74e:	4996      	ldr	r1, [pc, #600]	@ (800c9a8 <_strtod_l+0x580>)
 800c750:	aa1c      	add	r2, sp, #112	@ 0x70
 800c752:	a819      	add	r0, sp, #100	@ 0x64
 800c754:	f002 fcf0 	bl	800f138 <__hexnan>
 800c758:	2805      	cmp	r0, #5
 800c75a:	d127      	bne.n	800c7ac <_strtod_l+0x384>
 800c75c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c75e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c762:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c766:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c76a:	e696      	b.n	800c49a <_strtod_l+0x72>
 800c76c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c76e:	fb08 2101 	mla	r1, r8, r1, r2
 800c772:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c776:	9209      	str	r2, [sp, #36]	@ 0x24
 800c778:	e7b5      	b.n	800c6e6 <_strtod_l+0x2be>
 800c77a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c77c:	e7da      	b.n	800c734 <_strtod_l+0x30c>
 800c77e:	498b      	ldr	r1, [pc, #556]	@ (800c9ac <_strtod_l+0x584>)
 800c780:	a819      	add	r0, sp, #100	@ 0x64
 800c782:	f002 fcc5 	bl	800f110 <__match>
 800c786:	2800      	cmp	r0, #0
 800c788:	f43f aea2 	beq.w	800c4d0 <_strtod_l+0xa8>
 800c78c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c78e:	4988      	ldr	r1, [pc, #544]	@ (800c9b0 <_strtod_l+0x588>)
 800c790:	3b01      	subs	r3, #1
 800c792:	a819      	add	r0, sp, #100	@ 0x64
 800c794:	9319      	str	r3, [sp, #100]	@ 0x64
 800c796:	f002 fcbb 	bl	800f110 <__match>
 800c79a:	b910      	cbnz	r0, 800c7a2 <_strtod_l+0x37a>
 800c79c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c79e:	3301      	adds	r3, #1
 800c7a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c7a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c9c0 <_strtod_l+0x598>
 800c7a6:	f04f 0a00 	mov.w	sl, #0
 800c7aa:	e676      	b.n	800c49a <_strtod_l+0x72>
 800c7ac:	4881      	ldr	r0, [pc, #516]	@ (800c9b4 <_strtod_l+0x58c>)
 800c7ae:	f001 fb5b 	bl	800de68 <nan>
 800c7b2:	ec5b ab10 	vmov	sl, fp, d0
 800c7b6:	e670      	b.n	800c49a <_strtod_l+0x72>
 800c7b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c7bc:	eba8 0303 	sub.w	r3, r8, r3
 800c7c0:	f1b9 0f00 	cmp.w	r9, #0
 800c7c4:	bf08      	it	eq
 800c7c6:	46a9      	moveq	r9, r5
 800c7c8:	2d10      	cmp	r5, #16
 800c7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7cc:	462c      	mov	r4, r5
 800c7ce:	bfa8      	it	ge
 800c7d0:	2410      	movge	r4, #16
 800c7d2:	f7f3 fea7 	bl	8000524 <__aeabi_ui2d>
 800c7d6:	2d09      	cmp	r5, #9
 800c7d8:	4682      	mov	sl, r0
 800c7da:	468b      	mov	fp, r1
 800c7dc:	dc13      	bgt.n	800c806 <_strtod_l+0x3de>
 800c7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f43f ae5a 	beq.w	800c49a <_strtod_l+0x72>
 800c7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e8:	dd78      	ble.n	800c8dc <_strtod_l+0x4b4>
 800c7ea:	2b16      	cmp	r3, #22
 800c7ec:	dc5f      	bgt.n	800c8ae <_strtod_l+0x486>
 800c7ee:	4972      	ldr	r1, [pc, #456]	@ (800c9b8 <_strtod_l+0x590>)
 800c7f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7f8:	4652      	mov	r2, sl
 800c7fa:	465b      	mov	r3, fp
 800c7fc:	f7f3 ff0c 	bl	8000618 <__aeabi_dmul>
 800c800:	4682      	mov	sl, r0
 800c802:	468b      	mov	fp, r1
 800c804:	e649      	b.n	800c49a <_strtod_l+0x72>
 800c806:	4b6c      	ldr	r3, [pc, #432]	@ (800c9b8 <_strtod_l+0x590>)
 800c808:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c80c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c810:	f7f3 ff02 	bl	8000618 <__aeabi_dmul>
 800c814:	4682      	mov	sl, r0
 800c816:	4638      	mov	r0, r7
 800c818:	468b      	mov	fp, r1
 800c81a:	f7f3 fe83 	bl	8000524 <__aeabi_ui2d>
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4650      	mov	r0, sl
 800c824:	4659      	mov	r1, fp
 800c826:	f7f3 fd41 	bl	80002ac <__adddf3>
 800c82a:	2d0f      	cmp	r5, #15
 800c82c:	4682      	mov	sl, r0
 800c82e:	468b      	mov	fp, r1
 800c830:	ddd5      	ble.n	800c7de <_strtod_l+0x3b6>
 800c832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c834:	1b2c      	subs	r4, r5, r4
 800c836:	441c      	add	r4, r3
 800c838:	2c00      	cmp	r4, #0
 800c83a:	f340 8093 	ble.w	800c964 <_strtod_l+0x53c>
 800c83e:	f014 030f 	ands.w	r3, r4, #15
 800c842:	d00a      	beq.n	800c85a <_strtod_l+0x432>
 800c844:	495c      	ldr	r1, [pc, #368]	@ (800c9b8 <_strtod_l+0x590>)
 800c846:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c84a:	4652      	mov	r2, sl
 800c84c:	465b      	mov	r3, fp
 800c84e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c852:	f7f3 fee1 	bl	8000618 <__aeabi_dmul>
 800c856:	4682      	mov	sl, r0
 800c858:	468b      	mov	fp, r1
 800c85a:	f034 040f 	bics.w	r4, r4, #15
 800c85e:	d073      	beq.n	800c948 <_strtod_l+0x520>
 800c860:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c864:	dd49      	ble.n	800c8fa <_strtod_l+0x4d2>
 800c866:	2400      	movs	r4, #0
 800c868:	46a0      	mov	r8, r4
 800c86a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c86c:	46a1      	mov	r9, r4
 800c86e:	9a05      	ldr	r2, [sp, #20]
 800c870:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c9c0 <_strtod_l+0x598>
 800c874:	2322      	movs	r3, #34	@ 0x22
 800c876:	6013      	str	r3, [r2, #0]
 800c878:	f04f 0a00 	mov.w	sl, #0
 800c87c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f43f ae0b 	beq.w	800c49a <_strtod_l+0x72>
 800c884:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c886:	9805      	ldr	r0, [sp, #20]
 800c888:	f002 fd44 	bl	800f314 <_Bfree>
 800c88c:	9805      	ldr	r0, [sp, #20]
 800c88e:	4649      	mov	r1, r9
 800c890:	f002 fd40 	bl	800f314 <_Bfree>
 800c894:	9805      	ldr	r0, [sp, #20]
 800c896:	4641      	mov	r1, r8
 800c898:	f002 fd3c 	bl	800f314 <_Bfree>
 800c89c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c89e:	9805      	ldr	r0, [sp, #20]
 800c8a0:	f002 fd38 	bl	800f314 <_Bfree>
 800c8a4:	9805      	ldr	r0, [sp, #20]
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	f002 fd34 	bl	800f314 <_Bfree>
 800c8ac:	e5f5      	b.n	800c49a <_strtod_l+0x72>
 800c8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	dbbc      	blt.n	800c832 <_strtod_l+0x40a>
 800c8b8:	4c3f      	ldr	r4, [pc, #252]	@ (800c9b8 <_strtod_l+0x590>)
 800c8ba:	f1c5 050f 	rsb	r5, r5, #15
 800c8be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c8c2:	4652      	mov	r2, sl
 800c8c4:	465b      	mov	r3, fp
 800c8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ca:	f7f3 fea5 	bl	8000618 <__aeabi_dmul>
 800c8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d0:	1b5d      	subs	r5, r3, r5
 800c8d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c8d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c8da:	e78f      	b.n	800c7fc <_strtod_l+0x3d4>
 800c8dc:	3316      	adds	r3, #22
 800c8de:	dba8      	blt.n	800c832 <_strtod_l+0x40a>
 800c8e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8e2:	eba3 0808 	sub.w	r8, r3, r8
 800c8e6:	4b34      	ldr	r3, [pc, #208]	@ (800c9b8 <_strtod_l+0x590>)
 800c8e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c8ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c8f0:	4650      	mov	r0, sl
 800c8f2:	4659      	mov	r1, fp
 800c8f4:	f7f3 ffba 	bl	800086c <__aeabi_ddiv>
 800c8f8:	e782      	b.n	800c800 <_strtod_l+0x3d8>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	4f2f      	ldr	r7, [pc, #188]	@ (800c9bc <_strtod_l+0x594>)
 800c8fe:	1124      	asrs	r4, r4, #4
 800c900:	4650      	mov	r0, sl
 800c902:	4659      	mov	r1, fp
 800c904:	461e      	mov	r6, r3
 800c906:	2c01      	cmp	r4, #1
 800c908:	dc21      	bgt.n	800c94e <_strtod_l+0x526>
 800c90a:	b10b      	cbz	r3, 800c910 <_strtod_l+0x4e8>
 800c90c:	4682      	mov	sl, r0
 800c90e:	468b      	mov	fp, r1
 800c910:	492a      	ldr	r1, [pc, #168]	@ (800c9bc <_strtod_l+0x594>)
 800c912:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c916:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c91a:	4652      	mov	r2, sl
 800c91c:	465b      	mov	r3, fp
 800c91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c922:	f7f3 fe79 	bl	8000618 <__aeabi_dmul>
 800c926:	4b26      	ldr	r3, [pc, #152]	@ (800c9c0 <_strtod_l+0x598>)
 800c928:	460a      	mov	r2, r1
 800c92a:	400b      	ands	r3, r1
 800c92c:	4925      	ldr	r1, [pc, #148]	@ (800c9c4 <_strtod_l+0x59c>)
 800c92e:	428b      	cmp	r3, r1
 800c930:	4682      	mov	sl, r0
 800c932:	d898      	bhi.n	800c866 <_strtod_l+0x43e>
 800c934:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c938:	428b      	cmp	r3, r1
 800c93a:	bf86      	itte	hi
 800c93c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c9c8 <_strtod_l+0x5a0>
 800c940:	f04f 3aff 	movhi.w	sl, #4294967295
 800c944:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c948:	2300      	movs	r3, #0
 800c94a:	9308      	str	r3, [sp, #32]
 800c94c:	e076      	b.n	800ca3c <_strtod_l+0x614>
 800c94e:	07e2      	lsls	r2, r4, #31
 800c950:	d504      	bpl.n	800c95c <_strtod_l+0x534>
 800c952:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c956:	f7f3 fe5f 	bl	8000618 <__aeabi_dmul>
 800c95a:	2301      	movs	r3, #1
 800c95c:	3601      	adds	r6, #1
 800c95e:	1064      	asrs	r4, r4, #1
 800c960:	3708      	adds	r7, #8
 800c962:	e7d0      	b.n	800c906 <_strtod_l+0x4de>
 800c964:	d0f0      	beq.n	800c948 <_strtod_l+0x520>
 800c966:	4264      	negs	r4, r4
 800c968:	f014 020f 	ands.w	r2, r4, #15
 800c96c:	d00a      	beq.n	800c984 <_strtod_l+0x55c>
 800c96e:	4b12      	ldr	r3, [pc, #72]	@ (800c9b8 <_strtod_l+0x590>)
 800c970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c974:	4650      	mov	r0, sl
 800c976:	4659      	mov	r1, fp
 800c978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97c:	f7f3 ff76 	bl	800086c <__aeabi_ddiv>
 800c980:	4682      	mov	sl, r0
 800c982:	468b      	mov	fp, r1
 800c984:	1124      	asrs	r4, r4, #4
 800c986:	d0df      	beq.n	800c948 <_strtod_l+0x520>
 800c988:	2c1f      	cmp	r4, #31
 800c98a:	dd1f      	ble.n	800c9cc <_strtod_l+0x5a4>
 800c98c:	2400      	movs	r4, #0
 800c98e:	46a0      	mov	r8, r4
 800c990:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c992:	46a1      	mov	r9, r4
 800c994:	9a05      	ldr	r2, [sp, #20]
 800c996:	2322      	movs	r3, #34	@ 0x22
 800c998:	f04f 0a00 	mov.w	sl, #0
 800c99c:	f04f 0b00 	mov.w	fp, #0
 800c9a0:	6013      	str	r3, [r2, #0]
 800c9a2:	e76b      	b.n	800c87c <_strtod_l+0x454>
 800c9a4:	08010403 	.word	0x08010403
 800c9a8:	08010620 	.word	0x08010620
 800c9ac:	080103fb 	.word	0x080103fb
 800c9b0:	080104e2 	.word	0x080104e2
 800c9b4:	080104de 	.word	0x080104de
 800c9b8:	080107a8 	.word	0x080107a8
 800c9bc:	08010780 	.word	0x08010780
 800c9c0:	7ff00000 	.word	0x7ff00000
 800c9c4:	7ca00000 	.word	0x7ca00000
 800c9c8:	7fefffff 	.word	0x7fefffff
 800c9cc:	f014 0310 	ands.w	r3, r4, #16
 800c9d0:	bf18      	it	ne
 800c9d2:	236a      	movne	r3, #106	@ 0x6a
 800c9d4:	4ea9      	ldr	r6, [pc, #676]	@ (800cc7c <_strtod_l+0x854>)
 800c9d6:	9308      	str	r3, [sp, #32]
 800c9d8:	4650      	mov	r0, sl
 800c9da:	4659      	mov	r1, fp
 800c9dc:	2300      	movs	r3, #0
 800c9de:	07e7      	lsls	r7, r4, #31
 800c9e0:	d504      	bpl.n	800c9ec <_strtod_l+0x5c4>
 800c9e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9e6:	f7f3 fe17 	bl	8000618 <__aeabi_dmul>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	1064      	asrs	r4, r4, #1
 800c9ee:	f106 0608 	add.w	r6, r6, #8
 800c9f2:	d1f4      	bne.n	800c9de <_strtod_l+0x5b6>
 800c9f4:	b10b      	cbz	r3, 800c9fa <_strtod_l+0x5d2>
 800c9f6:	4682      	mov	sl, r0
 800c9f8:	468b      	mov	fp, r1
 800c9fa:	9b08      	ldr	r3, [sp, #32]
 800c9fc:	b1b3      	cbz	r3, 800ca2c <_strtod_l+0x604>
 800c9fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ca02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	4659      	mov	r1, fp
 800ca0a:	dd0f      	ble.n	800ca2c <_strtod_l+0x604>
 800ca0c:	2b1f      	cmp	r3, #31
 800ca0e:	dd56      	ble.n	800cabe <_strtod_l+0x696>
 800ca10:	2b34      	cmp	r3, #52	@ 0x34
 800ca12:	bfde      	ittt	le
 800ca14:	f04f 33ff 	movle.w	r3, #4294967295
 800ca18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ca1c:	4093      	lslle	r3, r2
 800ca1e:	f04f 0a00 	mov.w	sl, #0
 800ca22:	bfcc      	ite	gt
 800ca24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ca28:	ea03 0b01 	andle.w	fp, r3, r1
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	2300      	movs	r3, #0
 800ca30:	4650      	mov	r0, sl
 800ca32:	4659      	mov	r1, fp
 800ca34:	f7f4 f858 	bl	8000ae8 <__aeabi_dcmpeq>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d1a7      	bne.n	800c98c <_strtod_l+0x564>
 800ca3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca3e:	9300      	str	r3, [sp, #0]
 800ca40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ca42:	9805      	ldr	r0, [sp, #20]
 800ca44:	462b      	mov	r3, r5
 800ca46:	464a      	mov	r2, r9
 800ca48:	f002 fccc 	bl	800f3e4 <__s2b>
 800ca4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	f43f af09 	beq.w	800c866 <_strtod_l+0x43e>
 800ca54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca58:	2a00      	cmp	r2, #0
 800ca5a:	eba3 0308 	sub.w	r3, r3, r8
 800ca5e:	bfa8      	it	ge
 800ca60:	2300      	movge	r3, #0
 800ca62:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca64:	2400      	movs	r4, #0
 800ca66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ca6a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ca6c:	46a0      	mov	r8, r4
 800ca6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca70:	9805      	ldr	r0, [sp, #20]
 800ca72:	6859      	ldr	r1, [r3, #4]
 800ca74:	f002 fc0e 	bl	800f294 <_Balloc>
 800ca78:	4681      	mov	r9, r0
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	f43f aef7 	beq.w	800c86e <_strtod_l+0x446>
 800ca80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca82:	691a      	ldr	r2, [r3, #16]
 800ca84:	3202      	adds	r2, #2
 800ca86:	f103 010c 	add.w	r1, r3, #12
 800ca8a:	0092      	lsls	r2, r2, #2
 800ca8c:	300c      	adds	r0, #12
 800ca8e:	f001 f9da 	bl	800de46 <memcpy>
 800ca92:	ec4b ab10 	vmov	d0, sl, fp
 800ca96:	9805      	ldr	r0, [sp, #20]
 800ca98:	aa1c      	add	r2, sp, #112	@ 0x70
 800ca9a:	a91b      	add	r1, sp, #108	@ 0x6c
 800ca9c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800caa0:	f002 ffd4 	bl	800fa4c <__d2b>
 800caa4:	901a      	str	r0, [sp, #104]	@ 0x68
 800caa6:	2800      	cmp	r0, #0
 800caa8:	f43f aee1 	beq.w	800c86e <_strtod_l+0x446>
 800caac:	9805      	ldr	r0, [sp, #20]
 800caae:	2101      	movs	r1, #1
 800cab0:	f002 fd2e 	bl	800f510 <__i2b>
 800cab4:	4680      	mov	r8, r0
 800cab6:	b948      	cbnz	r0, 800cacc <_strtod_l+0x6a4>
 800cab8:	f04f 0800 	mov.w	r8, #0
 800cabc:	e6d7      	b.n	800c86e <_strtod_l+0x446>
 800cabe:	f04f 32ff 	mov.w	r2, #4294967295
 800cac2:	fa02 f303 	lsl.w	r3, r2, r3
 800cac6:	ea03 0a0a 	and.w	sl, r3, sl
 800caca:	e7af      	b.n	800ca2c <_strtod_l+0x604>
 800cacc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cace:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cad0:	2d00      	cmp	r5, #0
 800cad2:	bfab      	itete	ge
 800cad4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cad6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cad8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cada:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cadc:	bfac      	ite	ge
 800cade:	18ef      	addge	r7, r5, r3
 800cae0:	1b5e      	sublt	r6, r3, r5
 800cae2:	9b08      	ldr	r3, [sp, #32]
 800cae4:	1aed      	subs	r5, r5, r3
 800cae6:	4415      	add	r5, r2
 800cae8:	4b65      	ldr	r3, [pc, #404]	@ (800cc80 <_strtod_l+0x858>)
 800caea:	3d01      	subs	r5, #1
 800caec:	429d      	cmp	r5, r3
 800caee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800caf2:	da50      	bge.n	800cb96 <_strtod_l+0x76e>
 800caf4:	1b5b      	subs	r3, r3, r5
 800caf6:	2b1f      	cmp	r3, #31
 800caf8:	eba2 0203 	sub.w	r2, r2, r3
 800cafc:	f04f 0101 	mov.w	r1, #1
 800cb00:	dc3d      	bgt.n	800cb7e <_strtod_l+0x756>
 800cb02:	fa01 f303 	lsl.w	r3, r1, r3
 800cb06:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb08:	2300      	movs	r3, #0
 800cb0a:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb0c:	18bd      	adds	r5, r7, r2
 800cb0e:	9b08      	ldr	r3, [sp, #32]
 800cb10:	42af      	cmp	r7, r5
 800cb12:	4416      	add	r6, r2
 800cb14:	441e      	add	r6, r3
 800cb16:	463b      	mov	r3, r7
 800cb18:	bfa8      	it	ge
 800cb1a:	462b      	movge	r3, r5
 800cb1c:	42b3      	cmp	r3, r6
 800cb1e:	bfa8      	it	ge
 800cb20:	4633      	movge	r3, r6
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	bfc2      	ittt	gt
 800cb26:	1aed      	subgt	r5, r5, r3
 800cb28:	1af6      	subgt	r6, r6, r3
 800cb2a:	1aff      	subgt	r7, r7, r3
 800cb2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	dd16      	ble.n	800cb60 <_strtod_l+0x738>
 800cb32:	4641      	mov	r1, r8
 800cb34:	9805      	ldr	r0, [sp, #20]
 800cb36:	461a      	mov	r2, r3
 800cb38:	f002 fda2 	bl	800f680 <__pow5mult>
 800cb3c:	4680      	mov	r8, r0
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d0ba      	beq.n	800cab8 <_strtod_l+0x690>
 800cb42:	4601      	mov	r1, r0
 800cb44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb46:	9805      	ldr	r0, [sp, #20]
 800cb48:	f002 fcf8 	bl	800f53c <__multiply>
 800cb4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f43f ae8d 	beq.w	800c86e <_strtod_l+0x446>
 800cb54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb56:	9805      	ldr	r0, [sp, #20]
 800cb58:	f002 fbdc 	bl	800f314 <_Bfree>
 800cb5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb60:	2d00      	cmp	r5, #0
 800cb62:	dc1d      	bgt.n	800cba0 <_strtod_l+0x778>
 800cb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	dd23      	ble.n	800cbb2 <_strtod_l+0x78a>
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cb6e:	9805      	ldr	r0, [sp, #20]
 800cb70:	f002 fd86 	bl	800f680 <__pow5mult>
 800cb74:	4681      	mov	r9, r0
 800cb76:	b9e0      	cbnz	r0, 800cbb2 <_strtod_l+0x78a>
 800cb78:	f04f 0900 	mov.w	r9, #0
 800cb7c:	e677      	b.n	800c86e <_strtod_l+0x446>
 800cb7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cb82:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cb86:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cb8a:	35e2      	adds	r5, #226	@ 0xe2
 800cb8c:	fa01 f305 	lsl.w	r3, r1, r5
 800cb90:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb92:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cb94:	e7ba      	b.n	800cb0c <_strtod_l+0x6e4>
 800cb96:	2300      	movs	r3, #0
 800cb98:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb9e:	e7b5      	b.n	800cb0c <_strtod_l+0x6e4>
 800cba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cba2:	9805      	ldr	r0, [sp, #20]
 800cba4:	462a      	mov	r2, r5
 800cba6:	f002 fdc5 	bl	800f734 <__lshift>
 800cbaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d1d9      	bne.n	800cb64 <_strtod_l+0x73c>
 800cbb0:	e65d      	b.n	800c86e <_strtod_l+0x446>
 800cbb2:	2e00      	cmp	r6, #0
 800cbb4:	dd07      	ble.n	800cbc6 <_strtod_l+0x79e>
 800cbb6:	4649      	mov	r1, r9
 800cbb8:	9805      	ldr	r0, [sp, #20]
 800cbba:	4632      	mov	r2, r6
 800cbbc:	f002 fdba 	bl	800f734 <__lshift>
 800cbc0:	4681      	mov	r9, r0
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d0d8      	beq.n	800cb78 <_strtod_l+0x750>
 800cbc6:	2f00      	cmp	r7, #0
 800cbc8:	dd08      	ble.n	800cbdc <_strtod_l+0x7b4>
 800cbca:	4641      	mov	r1, r8
 800cbcc:	9805      	ldr	r0, [sp, #20]
 800cbce:	463a      	mov	r2, r7
 800cbd0:	f002 fdb0 	bl	800f734 <__lshift>
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	f43f ae49 	beq.w	800c86e <_strtod_l+0x446>
 800cbdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbde:	9805      	ldr	r0, [sp, #20]
 800cbe0:	464a      	mov	r2, r9
 800cbe2:	f002 fe2f 	bl	800f844 <__mdiff>
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	f43f ae40 	beq.w	800c86e <_strtod_l+0x446>
 800cbee:	68c3      	ldr	r3, [r0, #12]
 800cbf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60c3      	str	r3, [r0, #12]
 800cbf6:	4641      	mov	r1, r8
 800cbf8:	f002 fe08 	bl	800f80c <__mcmp>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	da45      	bge.n	800cc8c <_strtod_l+0x864>
 800cc00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc02:	ea53 030a 	orrs.w	r3, r3, sl
 800cc06:	d16b      	bne.n	800cce0 <_strtod_l+0x8b8>
 800cc08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d167      	bne.n	800cce0 <_strtod_l+0x8b8>
 800cc10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc14:	0d1b      	lsrs	r3, r3, #20
 800cc16:	051b      	lsls	r3, r3, #20
 800cc18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cc1c:	d960      	bls.n	800cce0 <_strtod_l+0x8b8>
 800cc1e:	6963      	ldr	r3, [r4, #20]
 800cc20:	b913      	cbnz	r3, 800cc28 <_strtod_l+0x800>
 800cc22:	6923      	ldr	r3, [r4, #16]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	dd5b      	ble.n	800cce0 <_strtod_l+0x8b8>
 800cc28:	4621      	mov	r1, r4
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	9805      	ldr	r0, [sp, #20]
 800cc2e:	f002 fd81 	bl	800f734 <__lshift>
 800cc32:	4641      	mov	r1, r8
 800cc34:	4604      	mov	r4, r0
 800cc36:	f002 fde9 	bl	800f80c <__mcmp>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	dd50      	ble.n	800cce0 <_strtod_l+0x8b8>
 800cc3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc42:	9a08      	ldr	r2, [sp, #32]
 800cc44:	0d1b      	lsrs	r3, r3, #20
 800cc46:	051b      	lsls	r3, r3, #20
 800cc48:	2a00      	cmp	r2, #0
 800cc4a:	d06a      	beq.n	800cd22 <_strtod_l+0x8fa>
 800cc4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cc50:	d867      	bhi.n	800cd22 <_strtod_l+0x8fa>
 800cc52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cc56:	f67f ae9d 	bls.w	800c994 <_strtod_l+0x56c>
 800cc5a:	4b0a      	ldr	r3, [pc, #40]	@ (800cc84 <_strtod_l+0x85c>)
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	4659      	mov	r1, fp
 800cc60:	2200      	movs	r2, #0
 800cc62:	f7f3 fcd9 	bl	8000618 <__aeabi_dmul>
 800cc66:	4b08      	ldr	r3, [pc, #32]	@ (800cc88 <_strtod_l+0x860>)
 800cc68:	400b      	ands	r3, r1
 800cc6a:	4682      	mov	sl, r0
 800cc6c:	468b      	mov	fp, r1
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f47f ae08 	bne.w	800c884 <_strtod_l+0x45c>
 800cc74:	9a05      	ldr	r2, [sp, #20]
 800cc76:	2322      	movs	r3, #34	@ 0x22
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	e603      	b.n	800c884 <_strtod_l+0x45c>
 800cc7c:	08010648 	.word	0x08010648
 800cc80:	fffffc02 	.word	0xfffffc02
 800cc84:	39500000 	.word	0x39500000
 800cc88:	7ff00000 	.word	0x7ff00000
 800cc8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cc90:	d165      	bne.n	800cd5e <_strtod_l+0x936>
 800cc92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cc94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc98:	b35a      	cbz	r2, 800ccf2 <_strtod_l+0x8ca>
 800cc9a:	4a9f      	ldr	r2, [pc, #636]	@ (800cf18 <_strtod_l+0xaf0>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d12b      	bne.n	800ccf8 <_strtod_l+0x8d0>
 800cca0:	9b08      	ldr	r3, [sp, #32]
 800cca2:	4651      	mov	r1, sl
 800cca4:	b303      	cbz	r3, 800cce8 <_strtod_l+0x8c0>
 800cca6:	4b9d      	ldr	r3, [pc, #628]	@ (800cf1c <_strtod_l+0xaf4>)
 800cca8:	465a      	mov	r2, fp
 800ccaa:	4013      	ands	r3, r2
 800ccac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ccb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb4:	d81b      	bhi.n	800ccee <_strtod_l+0x8c6>
 800ccb6:	0d1b      	lsrs	r3, r3, #20
 800ccb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ccbc:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc0:	4299      	cmp	r1, r3
 800ccc2:	d119      	bne.n	800ccf8 <_strtod_l+0x8d0>
 800ccc4:	4b96      	ldr	r3, [pc, #600]	@ (800cf20 <_strtod_l+0xaf8>)
 800ccc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d102      	bne.n	800ccd2 <_strtod_l+0x8aa>
 800cccc:	3101      	adds	r1, #1
 800ccce:	f43f adce 	beq.w	800c86e <_strtod_l+0x446>
 800ccd2:	4b92      	ldr	r3, [pc, #584]	@ (800cf1c <_strtod_l+0xaf4>)
 800ccd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccd6:	401a      	ands	r2, r3
 800ccd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ccdc:	f04f 0a00 	mov.w	sl, #0
 800cce0:	9b08      	ldr	r3, [sp, #32]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1b9      	bne.n	800cc5a <_strtod_l+0x832>
 800cce6:	e5cd      	b.n	800c884 <_strtod_l+0x45c>
 800cce8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccec:	e7e8      	b.n	800ccc0 <_strtod_l+0x898>
 800ccee:	4613      	mov	r3, r2
 800ccf0:	e7e6      	b.n	800ccc0 <_strtod_l+0x898>
 800ccf2:	ea53 030a 	orrs.w	r3, r3, sl
 800ccf6:	d0a2      	beq.n	800cc3e <_strtod_l+0x816>
 800ccf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ccfa:	b1db      	cbz	r3, 800cd34 <_strtod_l+0x90c>
 800ccfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccfe:	4213      	tst	r3, r2
 800cd00:	d0ee      	beq.n	800cce0 <_strtod_l+0x8b8>
 800cd02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd04:	9a08      	ldr	r2, [sp, #32]
 800cd06:	4650      	mov	r0, sl
 800cd08:	4659      	mov	r1, fp
 800cd0a:	b1bb      	cbz	r3, 800cd3c <_strtod_l+0x914>
 800cd0c:	f7ff fb6e 	bl	800c3ec <sulp>
 800cd10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd14:	ec53 2b10 	vmov	r2, r3, d0
 800cd18:	f7f3 fac8 	bl	80002ac <__adddf3>
 800cd1c:	4682      	mov	sl, r0
 800cd1e:	468b      	mov	fp, r1
 800cd20:	e7de      	b.n	800cce0 <_strtod_l+0x8b8>
 800cd22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cd26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cd2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cd2e:	f04f 3aff 	mov.w	sl, #4294967295
 800cd32:	e7d5      	b.n	800cce0 <_strtod_l+0x8b8>
 800cd34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd36:	ea13 0f0a 	tst.w	r3, sl
 800cd3a:	e7e1      	b.n	800cd00 <_strtod_l+0x8d8>
 800cd3c:	f7ff fb56 	bl	800c3ec <sulp>
 800cd40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd44:	ec53 2b10 	vmov	r2, r3, d0
 800cd48:	f7f3 faae 	bl	80002a8 <__aeabi_dsub>
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	2300      	movs	r3, #0
 800cd50:	4682      	mov	sl, r0
 800cd52:	468b      	mov	fp, r1
 800cd54:	f7f3 fec8 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d0c1      	beq.n	800cce0 <_strtod_l+0x8b8>
 800cd5c:	e61a      	b.n	800c994 <_strtod_l+0x56c>
 800cd5e:	4641      	mov	r1, r8
 800cd60:	4620      	mov	r0, r4
 800cd62:	f002 fecb 	bl	800fafc <__ratio>
 800cd66:	ec57 6b10 	vmov	r6, r7, d0
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cd70:	4630      	mov	r0, r6
 800cd72:	4639      	mov	r1, r7
 800cd74:	f7f3 fecc 	bl	8000b10 <__aeabi_dcmple>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d06f      	beq.n	800ce5c <_strtod_l+0xa34>
 800cd7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d17a      	bne.n	800ce78 <_strtod_l+0xa50>
 800cd82:	f1ba 0f00 	cmp.w	sl, #0
 800cd86:	d158      	bne.n	800ce3a <_strtod_l+0xa12>
 800cd88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d15a      	bne.n	800ce48 <_strtod_l+0xa20>
 800cd92:	4b64      	ldr	r3, [pc, #400]	@ (800cf24 <_strtod_l+0xafc>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	4630      	mov	r0, r6
 800cd98:	4639      	mov	r1, r7
 800cd9a:	f7f3 feaf 	bl	8000afc <__aeabi_dcmplt>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d159      	bne.n	800ce56 <_strtod_l+0xa2e>
 800cda2:	4630      	mov	r0, r6
 800cda4:	4639      	mov	r1, r7
 800cda6:	4b60      	ldr	r3, [pc, #384]	@ (800cf28 <_strtod_l+0xb00>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f7f3 fc35 	bl	8000618 <__aeabi_dmul>
 800cdae:	4606      	mov	r6, r0
 800cdb0:	460f      	mov	r7, r1
 800cdb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cdb6:	9606      	str	r6, [sp, #24]
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdbe:	4d57      	ldr	r5, [pc, #348]	@ (800cf1c <_strtod_l+0xaf4>)
 800cdc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cdc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdc6:	401d      	ands	r5, r3
 800cdc8:	4b58      	ldr	r3, [pc, #352]	@ (800cf2c <_strtod_l+0xb04>)
 800cdca:	429d      	cmp	r5, r3
 800cdcc:	f040 80b2 	bne.w	800cf34 <_strtod_l+0xb0c>
 800cdd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cdd6:	ec4b ab10 	vmov	d0, sl, fp
 800cdda:	f002 fdc7 	bl	800f96c <__ulp>
 800cdde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cde2:	ec51 0b10 	vmov	r0, r1, d0
 800cde6:	f7f3 fc17 	bl	8000618 <__aeabi_dmul>
 800cdea:	4652      	mov	r2, sl
 800cdec:	465b      	mov	r3, fp
 800cdee:	f7f3 fa5d 	bl	80002ac <__adddf3>
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4949      	ldr	r1, [pc, #292]	@ (800cf1c <_strtod_l+0xaf4>)
 800cdf6:	4a4e      	ldr	r2, [pc, #312]	@ (800cf30 <_strtod_l+0xb08>)
 800cdf8:	4019      	ands	r1, r3
 800cdfa:	4291      	cmp	r1, r2
 800cdfc:	4682      	mov	sl, r0
 800cdfe:	d942      	bls.n	800ce86 <_strtod_l+0xa5e>
 800ce00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce02:	4b47      	ldr	r3, [pc, #284]	@ (800cf20 <_strtod_l+0xaf8>)
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d103      	bne.n	800ce10 <_strtod_l+0x9e8>
 800ce08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	f43f ad2f 	beq.w	800c86e <_strtod_l+0x446>
 800ce10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cf20 <_strtod_l+0xaf8>
 800ce14:	f04f 3aff 	mov.w	sl, #4294967295
 800ce18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce1a:	9805      	ldr	r0, [sp, #20]
 800ce1c:	f002 fa7a 	bl	800f314 <_Bfree>
 800ce20:	9805      	ldr	r0, [sp, #20]
 800ce22:	4649      	mov	r1, r9
 800ce24:	f002 fa76 	bl	800f314 <_Bfree>
 800ce28:	9805      	ldr	r0, [sp, #20]
 800ce2a:	4641      	mov	r1, r8
 800ce2c:	f002 fa72 	bl	800f314 <_Bfree>
 800ce30:	9805      	ldr	r0, [sp, #20]
 800ce32:	4621      	mov	r1, r4
 800ce34:	f002 fa6e 	bl	800f314 <_Bfree>
 800ce38:	e619      	b.n	800ca6e <_strtod_l+0x646>
 800ce3a:	f1ba 0f01 	cmp.w	sl, #1
 800ce3e:	d103      	bne.n	800ce48 <_strtod_l+0xa20>
 800ce40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f43f ada6 	beq.w	800c994 <_strtod_l+0x56c>
 800ce48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cef8 <_strtod_l+0xad0>
 800ce4c:	4f35      	ldr	r7, [pc, #212]	@ (800cf24 <_strtod_l+0xafc>)
 800ce4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce52:	2600      	movs	r6, #0
 800ce54:	e7b1      	b.n	800cdba <_strtod_l+0x992>
 800ce56:	4f34      	ldr	r7, [pc, #208]	@ (800cf28 <_strtod_l+0xb00>)
 800ce58:	2600      	movs	r6, #0
 800ce5a:	e7aa      	b.n	800cdb2 <_strtod_l+0x98a>
 800ce5c:	4b32      	ldr	r3, [pc, #200]	@ (800cf28 <_strtod_l+0xb00>)
 800ce5e:	4630      	mov	r0, r6
 800ce60:	4639      	mov	r1, r7
 800ce62:	2200      	movs	r2, #0
 800ce64:	f7f3 fbd8 	bl	8000618 <__aeabi_dmul>
 800ce68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	460f      	mov	r7, r1
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d09f      	beq.n	800cdb2 <_strtod_l+0x98a>
 800ce72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ce76:	e7a0      	b.n	800cdba <_strtod_l+0x992>
 800ce78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cf00 <_strtod_l+0xad8>
 800ce7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce80:	ec57 6b17 	vmov	r6, r7, d7
 800ce84:	e799      	b.n	800cdba <_strtod_l+0x992>
 800ce86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ce8a:	9b08      	ldr	r3, [sp, #32]
 800ce8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1c1      	bne.n	800ce18 <_strtod_l+0x9f0>
 800ce94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce98:	0d1b      	lsrs	r3, r3, #20
 800ce9a:	051b      	lsls	r3, r3, #20
 800ce9c:	429d      	cmp	r5, r3
 800ce9e:	d1bb      	bne.n	800ce18 <_strtod_l+0x9f0>
 800cea0:	4630      	mov	r0, r6
 800cea2:	4639      	mov	r1, r7
 800cea4:	f7f3 ff18 	bl	8000cd8 <__aeabi_d2lz>
 800cea8:	f7f3 fb88 	bl	80005bc <__aeabi_l2d>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	f7f3 f9f8 	bl	80002a8 <__aeabi_dsub>
 800ceb8:	460b      	mov	r3, r1
 800ceba:	4602      	mov	r2, r0
 800cebc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cec0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cec6:	ea46 060a 	orr.w	r6, r6, sl
 800ceca:	431e      	orrs	r6, r3
 800cecc:	d06f      	beq.n	800cfae <_strtod_l+0xb86>
 800cece:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf08 <_strtod_l+0xae0>)
 800ced0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced4:	f7f3 fe12 	bl	8000afc <__aeabi_dcmplt>
 800ced8:	2800      	cmp	r0, #0
 800ceda:	f47f acd3 	bne.w	800c884 <_strtod_l+0x45c>
 800cede:	a30c      	add	r3, pc, #48	@ (adr r3, 800cf10 <_strtod_l+0xae8>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cee8:	f7f3 fe26 	bl	8000b38 <__aeabi_dcmpgt>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d093      	beq.n	800ce18 <_strtod_l+0x9f0>
 800cef0:	e4c8      	b.n	800c884 <_strtod_l+0x45c>
 800cef2:	bf00      	nop
 800cef4:	f3af 8000 	nop.w
 800cef8:	00000000 	.word	0x00000000
 800cefc:	bff00000 	.word	0xbff00000
 800cf00:	00000000 	.word	0x00000000
 800cf04:	3ff00000 	.word	0x3ff00000
 800cf08:	94a03595 	.word	0x94a03595
 800cf0c:	3fdfffff 	.word	0x3fdfffff
 800cf10:	35afe535 	.word	0x35afe535
 800cf14:	3fe00000 	.word	0x3fe00000
 800cf18:	000fffff 	.word	0x000fffff
 800cf1c:	7ff00000 	.word	0x7ff00000
 800cf20:	7fefffff 	.word	0x7fefffff
 800cf24:	3ff00000 	.word	0x3ff00000
 800cf28:	3fe00000 	.word	0x3fe00000
 800cf2c:	7fe00000 	.word	0x7fe00000
 800cf30:	7c9fffff 	.word	0x7c9fffff
 800cf34:	9b08      	ldr	r3, [sp, #32]
 800cf36:	b323      	cbz	r3, 800cf82 <_strtod_l+0xb5a>
 800cf38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cf3c:	d821      	bhi.n	800cf82 <_strtod_l+0xb5a>
 800cf3e:	a328      	add	r3, pc, #160	@ (adr r3, 800cfe0 <_strtod_l+0xbb8>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	4630      	mov	r0, r6
 800cf46:	4639      	mov	r1, r7
 800cf48:	f7f3 fde2 	bl	8000b10 <__aeabi_dcmple>
 800cf4c:	b1a0      	cbz	r0, 800cf78 <_strtod_l+0xb50>
 800cf4e:	4639      	mov	r1, r7
 800cf50:	4630      	mov	r0, r6
 800cf52:	f7f3 fe39 	bl	8000bc8 <__aeabi_d2uiz>
 800cf56:	2801      	cmp	r0, #1
 800cf58:	bf38      	it	cc
 800cf5a:	2001      	movcc	r0, #1
 800cf5c:	f7f3 fae2 	bl	8000524 <__aeabi_ui2d>
 800cf60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf62:	4606      	mov	r6, r0
 800cf64:	460f      	mov	r7, r1
 800cf66:	b9fb      	cbnz	r3, 800cfa8 <_strtod_l+0xb80>
 800cf68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cf6c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cf6e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cf74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cf78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cf7e:	1b5b      	subs	r3, r3, r5
 800cf80:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cf86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cf8a:	f002 fcef 	bl	800f96c <__ulp>
 800cf8e:	4650      	mov	r0, sl
 800cf90:	ec53 2b10 	vmov	r2, r3, d0
 800cf94:	4659      	mov	r1, fp
 800cf96:	f7f3 fb3f 	bl	8000618 <__aeabi_dmul>
 800cf9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cf9e:	f7f3 f985 	bl	80002ac <__adddf3>
 800cfa2:	4682      	mov	sl, r0
 800cfa4:	468b      	mov	fp, r1
 800cfa6:	e770      	b.n	800ce8a <_strtod_l+0xa62>
 800cfa8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cfac:	e7e0      	b.n	800cf70 <_strtod_l+0xb48>
 800cfae:	a30e      	add	r3, pc, #56	@ (adr r3, 800cfe8 <_strtod_l+0xbc0>)
 800cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb4:	f7f3 fda2 	bl	8000afc <__aeabi_dcmplt>
 800cfb8:	e798      	b.n	800ceec <_strtod_l+0xac4>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	930e      	str	r3, [sp, #56]	@ 0x38
 800cfbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cfc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	f7ff ba6d 	b.w	800c4a2 <_strtod_l+0x7a>
 800cfc8:	2a65      	cmp	r2, #101	@ 0x65
 800cfca:	f43f ab68 	beq.w	800c69e <_strtod_l+0x276>
 800cfce:	2a45      	cmp	r2, #69	@ 0x45
 800cfd0:	f43f ab65 	beq.w	800c69e <_strtod_l+0x276>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	f7ff bba0 	b.w	800c71a <_strtod_l+0x2f2>
 800cfda:	bf00      	nop
 800cfdc:	f3af 8000 	nop.w
 800cfe0:	ffc00000 	.word	0xffc00000
 800cfe4:	41dfffff 	.word	0x41dfffff
 800cfe8:	94a03595 	.word	0x94a03595
 800cfec:	3fcfffff 	.word	0x3fcfffff

0800cff0 <strtod>:
 800cff0:	460a      	mov	r2, r1
 800cff2:	4601      	mov	r1, r0
 800cff4:	4802      	ldr	r0, [pc, #8]	@ (800d000 <strtod+0x10>)
 800cff6:	4b03      	ldr	r3, [pc, #12]	@ (800d004 <strtod+0x14>)
 800cff8:	6800      	ldr	r0, [r0, #0]
 800cffa:	f7ff ba15 	b.w	800c428 <_strtod_l>
 800cffe:	bf00      	nop
 800d000:	20000374 	.word	0x20000374
 800d004:	20000208 	.word	0x20000208

0800d008 <_strtol_l.isra.0>:
 800d008:	2b24      	cmp	r3, #36	@ 0x24
 800d00a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d00e:	4686      	mov	lr, r0
 800d010:	4690      	mov	r8, r2
 800d012:	d801      	bhi.n	800d018 <_strtol_l.isra.0+0x10>
 800d014:	2b01      	cmp	r3, #1
 800d016:	d106      	bne.n	800d026 <_strtol_l.isra.0+0x1e>
 800d018:	f000 fee8 	bl	800ddec <__errno>
 800d01c:	2316      	movs	r3, #22
 800d01e:	6003      	str	r3, [r0, #0]
 800d020:	2000      	movs	r0, #0
 800d022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d026:	4834      	ldr	r0, [pc, #208]	@ (800d0f8 <_strtol_l.isra.0+0xf0>)
 800d028:	460d      	mov	r5, r1
 800d02a:	462a      	mov	r2, r5
 800d02c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d030:	5d06      	ldrb	r6, [r0, r4]
 800d032:	f016 0608 	ands.w	r6, r6, #8
 800d036:	d1f8      	bne.n	800d02a <_strtol_l.isra.0+0x22>
 800d038:	2c2d      	cmp	r4, #45	@ 0x2d
 800d03a:	d110      	bne.n	800d05e <_strtol_l.isra.0+0x56>
 800d03c:	782c      	ldrb	r4, [r5, #0]
 800d03e:	2601      	movs	r6, #1
 800d040:	1c95      	adds	r5, r2, #2
 800d042:	f033 0210 	bics.w	r2, r3, #16
 800d046:	d115      	bne.n	800d074 <_strtol_l.isra.0+0x6c>
 800d048:	2c30      	cmp	r4, #48	@ 0x30
 800d04a:	d10d      	bne.n	800d068 <_strtol_l.isra.0+0x60>
 800d04c:	782a      	ldrb	r2, [r5, #0]
 800d04e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d052:	2a58      	cmp	r2, #88	@ 0x58
 800d054:	d108      	bne.n	800d068 <_strtol_l.isra.0+0x60>
 800d056:	786c      	ldrb	r4, [r5, #1]
 800d058:	3502      	adds	r5, #2
 800d05a:	2310      	movs	r3, #16
 800d05c:	e00a      	b.n	800d074 <_strtol_l.isra.0+0x6c>
 800d05e:	2c2b      	cmp	r4, #43	@ 0x2b
 800d060:	bf04      	itt	eq
 800d062:	782c      	ldrbeq	r4, [r5, #0]
 800d064:	1c95      	addeq	r5, r2, #2
 800d066:	e7ec      	b.n	800d042 <_strtol_l.isra.0+0x3a>
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1f6      	bne.n	800d05a <_strtol_l.isra.0+0x52>
 800d06c:	2c30      	cmp	r4, #48	@ 0x30
 800d06e:	bf14      	ite	ne
 800d070:	230a      	movne	r3, #10
 800d072:	2308      	moveq	r3, #8
 800d074:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d078:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d07c:	2200      	movs	r2, #0
 800d07e:	fbbc f9f3 	udiv	r9, ip, r3
 800d082:	4610      	mov	r0, r2
 800d084:	fb03 ca19 	mls	sl, r3, r9, ip
 800d088:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d08c:	2f09      	cmp	r7, #9
 800d08e:	d80f      	bhi.n	800d0b0 <_strtol_l.isra.0+0xa8>
 800d090:	463c      	mov	r4, r7
 800d092:	42a3      	cmp	r3, r4
 800d094:	dd1b      	ble.n	800d0ce <_strtol_l.isra.0+0xc6>
 800d096:	1c57      	adds	r7, r2, #1
 800d098:	d007      	beq.n	800d0aa <_strtol_l.isra.0+0xa2>
 800d09a:	4581      	cmp	r9, r0
 800d09c:	d314      	bcc.n	800d0c8 <_strtol_l.isra.0+0xc0>
 800d09e:	d101      	bne.n	800d0a4 <_strtol_l.isra.0+0x9c>
 800d0a0:	45a2      	cmp	sl, r4
 800d0a2:	db11      	blt.n	800d0c8 <_strtol_l.isra.0+0xc0>
 800d0a4:	fb00 4003 	mla	r0, r0, r3, r4
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0ae:	e7eb      	b.n	800d088 <_strtol_l.isra.0+0x80>
 800d0b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d0b4:	2f19      	cmp	r7, #25
 800d0b6:	d801      	bhi.n	800d0bc <_strtol_l.isra.0+0xb4>
 800d0b8:	3c37      	subs	r4, #55	@ 0x37
 800d0ba:	e7ea      	b.n	800d092 <_strtol_l.isra.0+0x8a>
 800d0bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d0c0:	2f19      	cmp	r7, #25
 800d0c2:	d804      	bhi.n	800d0ce <_strtol_l.isra.0+0xc6>
 800d0c4:	3c57      	subs	r4, #87	@ 0x57
 800d0c6:	e7e4      	b.n	800d092 <_strtol_l.isra.0+0x8a>
 800d0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0cc:	e7ed      	b.n	800d0aa <_strtol_l.isra.0+0xa2>
 800d0ce:	1c53      	adds	r3, r2, #1
 800d0d0:	d108      	bne.n	800d0e4 <_strtol_l.isra.0+0xdc>
 800d0d2:	2322      	movs	r3, #34	@ 0x22
 800d0d4:	f8ce 3000 	str.w	r3, [lr]
 800d0d8:	4660      	mov	r0, ip
 800d0da:	f1b8 0f00 	cmp.w	r8, #0
 800d0de:	d0a0      	beq.n	800d022 <_strtol_l.isra.0+0x1a>
 800d0e0:	1e69      	subs	r1, r5, #1
 800d0e2:	e006      	b.n	800d0f2 <_strtol_l.isra.0+0xea>
 800d0e4:	b106      	cbz	r6, 800d0e8 <_strtol_l.isra.0+0xe0>
 800d0e6:	4240      	negs	r0, r0
 800d0e8:	f1b8 0f00 	cmp.w	r8, #0
 800d0ec:	d099      	beq.n	800d022 <_strtol_l.isra.0+0x1a>
 800d0ee:	2a00      	cmp	r2, #0
 800d0f0:	d1f6      	bne.n	800d0e0 <_strtol_l.isra.0+0xd8>
 800d0f2:	f8c8 1000 	str.w	r1, [r8]
 800d0f6:	e794      	b.n	800d022 <_strtol_l.isra.0+0x1a>
 800d0f8:	08010671 	.word	0x08010671

0800d0fc <strtol>:
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	460a      	mov	r2, r1
 800d100:	4601      	mov	r1, r0
 800d102:	4802      	ldr	r0, [pc, #8]	@ (800d10c <strtol+0x10>)
 800d104:	6800      	ldr	r0, [r0, #0]
 800d106:	f7ff bf7f 	b.w	800d008 <_strtol_l.isra.0>
 800d10a:	bf00      	nop
 800d10c:	20000374 	.word	0x20000374

0800d110 <__cvt>:
 800d110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d114:	ec57 6b10 	vmov	r6, r7, d0
 800d118:	2f00      	cmp	r7, #0
 800d11a:	460c      	mov	r4, r1
 800d11c:	4619      	mov	r1, r3
 800d11e:	463b      	mov	r3, r7
 800d120:	bfbb      	ittet	lt
 800d122:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d126:	461f      	movlt	r7, r3
 800d128:	2300      	movge	r3, #0
 800d12a:	232d      	movlt	r3, #45	@ 0x2d
 800d12c:	700b      	strb	r3, [r1, #0]
 800d12e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d130:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d134:	4691      	mov	r9, r2
 800d136:	f023 0820 	bic.w	r8, r3, #32
 800d13a:	bfbc      	itt	lt
 800d13c:	4632      	movlt	r2, r6
 800d13e:	4616      	movlt	r6, r2
 800d140:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d144:	d005      	beq.n	800d152 <__cvt+0x42>
 800d146:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d14a:	d100      	bne.n	800d14e <__cvt+0x3e>
 800d14c:	3401      	adds	r4, #1
 800d14e:	2102      	movs	r1, #2
 800d150:	e000      	b.n	800d154 <__cvt+0x44>
 800d152:	2103      	movs	r1, #3
 800d154:	ab03      	add	r3, sp, #12
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	ab02      	add	r3, sp, #8
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	ec47 6b10 	vmov	d0, r6, r7
 800d160:	4653      	mov	r3, sl
 800d162:	4622      	mov	r2, r4
 800d164:	f000 ff30 	bl	800dfc8 <_dtoa_r>
 800d168:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d16c:	4605      	mov	r5, r0
 800d16e:	d119      	bne.n	800d1a4 <__cvt+0x94>
 800d170:	f019 0f01 	tst.w	r9, #1
 800d174:	d00e      	beq.n	800d194 <__cvt+0x84>
 800d176:	eb00 0904 	add.w	r9, r0, r4
 800d17a:	2200      	movs	r2, #0
 800d17c:	2300      	movs	r3, #0
 800d17e:	4630      	mov	r0, r6
 800d180:	4639      	mov	r1, r7
 800d182:	f7f3 fcb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d186:	b108      	cbz	r0, 800d18c <__cvt+0x7c>
 800d188:	f8cd 900c 	str.w	r9, [sp, #12]
 800d18c:	2230      	movs	r2, #48	@ 0x30
 800d18e:	9b03      	ldr	r3, [sp, #12]
 800d190:	454b      	cmp	r3, r9
 800d192:	d31e      	bcc.n	800d1d2 <__cvt+0xc2>
 800d194:	9b03      	ldr	r3, [sp, #12]
 800d196:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d198:	1b5b      	subs	r3, r3, r5
 800d19a:	4628      	mov	r0, r5
 800d19c:	6013      	str	r3, [r2, #0]
 800d19e:	b004      	add	sp, #16
 800d1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d1a8:	eb00 0904 	add.w	r9, r0, r4
 800d1ac:	d1e5      	bne.n	800d17a <__cvt+0x6a>
 800d1ae:	7803      	ldrb	r3, [r0, #0]
 800d1b0:	2b30      	cmp	r3, #48	@ 0x30
 800d1b2:	d10a      	bne.n	800d1ca <__cvt+0xba>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f3 fc94 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1c0:	b918      	cbnz	r0, 800d1ca <__cvt+0xba>
 800d1c2:	f1c4 0401 	rsb	r4, r4, #1
 800d1c6:	f8ca 4000 	str.w	r4, [sl]
 800d1ca:	f8da 3000 	ldr.w	r3, [sl]
 800d1ce:	4499      	add	r9, r3
 800d1d0:	e7d3      	b.n	800d17a <__cvt+0x6a>
 800d1d2:	1c59      	adds	r1, r3, #1
 800d1d4:	9103      	str	r1, [sp, #12]
 800d1d6:	701a      	strb	r2, [r3, #0]
 800d1d8:	e7d9      	b.n	800d18e <__cvt+0x7e>

0800d1da <__exponent>:
 800d1da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1dc:	2900      	cmp	r1, #0
 800d1de:	bfba      	itte	lt
 800d1e0:	4249      	neglt	r1, r1
 800d1e2:	232d      	movlt	r3, #45	@ 0x2d
 800d1e4:	232b      	movge	r3, #43	@ 0x2b
 800d1e6:	2909      	cmp	r1, #9
 800d1e8:	7002      	strb	r2, [r0, #0]
 800d1ea:	7043      	strb	r3, [r0, #1]
 800d1ec:	dd29      	ble.n	800d242 <__exponent+0x68>
 800d1ee:	f10d 0307 	add.w	r3, sp, #7
 800d1f2:	461d      	mov	r5, r3
 800d1f4:	270a      	movs	r7, #10
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	fbb1 f6f7 	udiv	r6, r1, r7
 800d1fc:	fb07 1416 	mls	r4, r7, r6, r1
 800d200:	3430      	adds	r4, #48	@ 0x30
 800d202:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d206:	460c      	mov	r4, r1
 800d208:	2c63      	cmp	r4, #99	@ 0x63
 800d20a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d20e:	4631      	mov	r1, r6
 800d210:	dcf1      	bgt.n	800d1f6 <__exponent+0x1c>
 800d212:	3130      	adds	r1, #48	@ 0x30
 800d214:	1e94      	subs	r4, r2, #2
 800d216:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d21a:	1c41      	adds	r1, r0, #1
 800d21c:	4623      	mov	r3, r4
 800d21e:	42ab      	cmp	r3, r5
 800d220:	d30a      	bcc.n	800d238 <__exponent+0x5e>
 800d222:	f10d 0309 	add.w	r3, sp, #9
 800d226:	1a9b      	subs	r3, r3, r2
 800d228:	42ac      	cmp	r4, r5
 800d22a:	bf88      	it	hi
 800d22c:	2300      	movhi	r3, #0
 800d22e:	3302      	adds	r3, #2
 800d230:	4403      	add	r3, r0
 800d232:	1a18      	subs	r0, r3, r0
 800d234:	b003      	add	sp, #12
 800d236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d238:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d23c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d240:	e7ed      	b.n	800d21e <__exponent+0x44>
 800d242:	2330      	movs	r3, #48	@ 0x30
 800d244:	3130      	adds	r1, #48	@ 0x30
 800d246:	7083      	strb	r3, [r0, #2]
 800d248:	70c1      	strb	r1, [r0, #3]
 800d24a:	1d03      	adds	r3, r0, #4
 800d24c:	e7f1      	b.n	800d232 <__exponent+0x58>
	...

0800d250 <_printf_float>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	b08d      	sub	sp, #52	@ 0x34
 800d256:	460c      	mov	r4, r1
 800d258:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d25c:	4616      	mov	r6, r2
 800d25e:	461f      	mov	r7, r3
 800d260:	4605      	mov	r5, r0
 800d262:	f000 fd69 	bl	800dd38 <_localeconv_r>
 800d266:	6803      	ldr	r3, [r0, #0]
 800d268:	9304      	str	r3, [sp, #16]
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7f3 f810 	bl	8000290 <strlen>
 800d270:	2300      	movs	r3, #0
 800d272:	930a      	str	r3, [sp, #40]	@ 0x28
 800d274:	f8d8 3000 	ldr.w	r3, [r8]
 800d278:	9005      	str	r0, [sp, #20]
 800d27a:	3307      	adds	r3, #7
 800d27c:	f023 0307 	bic.w	r3, r3, #7
 800d280:	f103 0208 	add.w	r2, r3, #8
 800d284:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d288:	f8d4 b000 	ldr.w	fp, [r4]
 800d28c:	f8c8 2000 	str.w	r2, [r8]
 800d290:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d294:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d298:	9307      	str	r3, [sp, #28]
 800d29a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d29e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d2a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2a6:	4b9c      	ldr	r3, [pc, #624]	@ (800d518 <_printf_float+0x2c8>)
 800d2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ac:	f7f3 fc4e 	bl	8000b4c <__aeabi_dcmpun>
 800d2b0:	bb70      	cbnz	r0, 800d310 <_printf_float+0xc0>
 800d2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2b6:	4b98      	ldr	r3, [pc, #608]	@ (800d518 <_printf_float+0x2c8>)
 800d2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2bc:	f7f3 fc28 	bl	8000b10 <__aeabi_dcmple>
 800d2c0:	bb30      	cbnz	r0, 800d310 <_printf_float+0xc0>
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	4640      	mov	r0, r8
 800d2c8:	4649      	mov	r1, r9
 800d2ca:	f7f3 fc17 	bl	8000afc <__aeabi_dcmplt>
 800d2ce:	b110      	cbz	r0, 800d2d6 <_printf_float+0x86>
 800d2d0:	232d      	movs	r3, #45	@ 0x2d
 800d2d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2d6:	4a91      	ldr	r2, [pc, #580]	@ (800d51c <_printf_float+0x2cc>)
 800d2d8:	4b91      	ldr	r3, [pc, #580]	@ (800d520 <_printf_float+0x2d0>)
 800d2da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d2de:	bf8c      	ite	hi
 800d2e0:	4690      	movhi	r8, r2
 800d2e2:	4698      	movls	r8, r3
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	6123      	str	r3, [r4, #16]
 800d2e8:	f02b 0304 	bic.w	r3, fp, #4
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	f04f 0900 	mov.w	r9, #0
 800d2f2:	9700      	str	r7, [sp, #0]
 800d2f4:	4633      	mov	r3, r6
 800d2f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	f000 f9d2 	bl	800d6a4 <_printf_common>
 800d300:	3001      	adds	r0, #1
 800d302:	f040 808d 	bne.w	800d420 <_printf_float+0x1d0>
 800d306:	f04f 30ff 	mov.w	r0, #4294967295
 800d30a:	b00d      	add	sp, #52	@ 0x34
 800d30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d310:	4642      	mov	r2, r8
 800d312:	464b      	mov	r3, r9
 800d314:	4640      	mov	r0, r8
 800d316:	4649      	mov	r1, r9
 800d318:	f7f3 fc18 	bl	8000b4c <__aeabi_dcmpun>
 800d31c:	b140      	cbz	r0, 800d330 <_printf_float+0xe0>
 800d31e:	464b      	mov	r3, r9
 800d320:	2b00      	cmp	r3, #0
 800d322:	bfbc      	itt	lt
 800d324:	232d      	movlt	r3, #45	@ 0x2d
 800d326:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d32a:	4a7e      	ldr	r2, [pc, #504]	@ (800d524 <_printf_float+0x2d4>)
 800d32c:	4b7e      	ldr	r3, [pc, #504]	@ (800d528 <_printf_float+0x2d8>)
 800d32e:	e7d4      	b.n	800d2da <_printf_float+0x8a>
 800d330:	6863      	ldr	r3, [r4, #4]
 800d332:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d336:	9206      	str	r2, [sp, #24]
 800d338:	1c5a      	adds	r2, r3, #1
 800d33a:	d13b      	bne.n	800d3b4 <_printf_float+0x164>
 800d33c:	2306      	movs	r3, #6
 800d33e:	6063      	str	r3, [r4, #4]
 800d340:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d344:	2300      	movs	r3, #0
 800d346:	6022      	str	r2, [r4, #0]
 800d348:	9303      	str	r3, [sp, #12]
 800d34a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d34c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d350:	ab09      	add	r3, sp, #36	@ 0x24
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	6861      	ldr	r1, [r4, #4]
 800d356:	ec49 8b10 	vmov	d0, r8, r9
 800d35a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d35e:	4628      	mov	r0, r5
 800d360:	f7ff fed6 	bl	800d110 <__cvt>
 800d364:	9b06      	ldr	r3, [sp, #24]
 800d366:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d368:	2b47      	cmp	r3, #71	@ 0x47
 800d36a:	4680      	mov	r8, r0
 800d36c:	d129      	bne.n	800d3c2 <_printf_float+0x172>
 800d36e:	1cc8      	adds	r0, r1, #3
 800d370:	db02      	blt.n	800d378 <_printf_float+0x128>
 800d372:	6863      	ldr	r3, [r4, #4]
 800d374:	4299      	cmp	r1, r3
 800d376:	dd41      	ble.n	800d3fc <_printf_float+0x1ac>
 800d378:	f1aa 0a02 	sub.w	sl, sl, #2
 800d37c:	fa5f fa8a 	uxtb.w	sl, sl
 800d380:	3901      	subs	r1, #1
 800d382:	4652      	mov	r2, sl
 800d384:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d388:	9109      	str	r1, [sp, #36]	@ 0x24
 800d38a:	f7ff ff26 	bl	800d1da <__exponent>
 800d38e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d390:	1813      	adds	r3, r2, r0
 800d392:	2a01      	cmp	r2, #1
 800d394:	4681      	mov	r9, r0
 800d396:	6123      	str	r3, [r4, #16]
 800d398:	dc02      	bgt.n	800d3a0 <_printf_float+0x150>
 800d39a:	6822      	ldr	r2, [r4, #0]
 800d39c:	07d2      	lsls	r2, r2, #31
 800d39e:	d501      	bpl.n	800d3a4 <_printf_float+0x154>
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	6123      	str	r3, [r4, #16]
 800d3a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d0a2      	beq.n	800d2f2 <_printf_float+0xa2>
 800d3ac:	232d      	movs	r3, #45	@ 0x2d
 800d3ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3b2:	e79e      	b.n	800d2f2 <_printf_float+0xa2>
 800d3b4:	9a06      	ldr	r2, [sp, #24]
 800d3b6:	2a47      	cmp	r2, #71	@ 0x47
 800d3b8:	d1c2      	bne.n	800d340 <_printf_float+0xf0>
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d1c0      	bne.n	800d340 <_printf_float+0xf0>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e7bd      	b.n	800d33e <_printf_float+0xee>
 800d3c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d3c6:	d9db      	bls.n	800d380 <_printf_float+0x130>
 800d3c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d3cc:	d118      	bne.n	800d400 <_printf_float+0x1b0>
 800d3ce:	2900      	cmp	r1, #0
 800d3d0:	6863      	ldr	r3, [r4, #4]
 800d3d2:	dd0b      	ble.n	800d3ec <_printf_float+0x19c>
 800d3d4:	6121      	str	r1, [r4, #16]
 800d3d6:	b913      	cbnz	r3, 800d3de <_printf_float+0x18e>
 800d3d8:	6822      	ldr	r2, [r4, #0]
 800d3da:	07d0      	lsls	r0, r2, #31
 800d3dc:	d502      	bpl.n	800d3e4 <_printf_float+0x194>
 800d3de:	3301      	adds	r3, #1
 800d3e0:	440b      	add	r3, r1
 800d3e2:	6123      	str	r3, [r4, #16]
 800d3e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d3e6:	f04f 0900 	mov.w	r9, #0
 800d3ea:	e7db      	b.n	800d3a4 <_printf_float+0x154>
 800d3ec:	b913      	cbnz	r3, 800d3f4 <_printf_float+0x1a4>
 800d3ee:	6822      	ldr	r2, [r4, #0]
 800d3f0:	07d2      	lsls	r2, r2, #31
 800d3f2:	d501      	bpl.n	800d3f8 <_printf_float+0x1a8>
 800d3f4:	3302      	adds	r3, #2
 800d3f6:	e7f4      	b.n	800d3e2 <_printf_float+0x192>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e7f2      	b.n	800d3e2 <_printf_float+0x192>
 800d3fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d402:	4299      	cmp	r1, r3
 800d404:	db05      	blt.n	800d412 <_printf_float+0x1c2>
 800d406:	6823      	ldr	r3, [r4, #0]
 800d408:	6121      	str	r1, [r4, #16]
 800d40a:	07d8      	lsls	r0, r3, #31
 800d40c:	d5ea      	bpl.n	800d3e4 <_printf_float+0x194>
 800d40e:	1c4b      	adds	r3, r1, #1
 800d410:	e7e7      	b.n	800d3e2 <_printf_float+0x192>
 800d412:	2900      	cmp	r1, #0
 800d414:	bfd4      	ite	le
 800d416:	f1c1 0202 	rsble	r2, r1, #2
 800d41a:	2201      	movgt	r2, #1
 800d41c:	4413      	add	r3, r2
 800d41e:	e7e0      	b.n	800d3e2 <_printf_float+0x192>
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	055a      	lsls	r2, r3, #21
 800d424:	d407      	bmi.n	800d436 <_printf_float+0x1e6>
 800d426:	6923      	ldr	r3, [r4, #16]
 800d428:	4642      	mov	r2, r8
 800d42a:	4631      	mov	r1, r6
 800d42c:	4628      	mov	r0, r5
 800d42e:	47b8      	blx	r7
 800d430:	3001      	adds	r0, #1
 800d432:	d12b      	bne.n	800d48c <_printf_float+0x23c>
 800d434:	e767      	b.n	800d306 <_printf_float+0xb6>
 800d436:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d43a:	f240 80dd 	bls.w	800d5f8 <_printf_float+0x3a8>
 800d43e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d442:	2200      	movs	r2, #0
 800d444:	2300      	movs	r3, #0
 800d446:	f7f3 fb4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d033      	beq.n	800d4b6 <_printf_float+0x266>
 800d44e:	4a37      	ldr	r2, [pc, #220]	@ (800d52c <_printf_float+0x2dc>)
 800d450:	2301      	movs	r3, #1
 800d452:	4631      	mov	r1, r6
 800d454:	4628      	mov	r0, r5
 800d456:	47b8      	blx	r7
 800d458:	3001      	adds	r0, #1
 800d45a:	f43f af54 	beq.w	800d306 <_printf_float+0xb6>
 800d45e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d462:	4543      	cmp	r3, r8
 800d464:	db02      	blt.n	800d46c <_printf_float+0x21c>
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	07d8      	lsls	r0, r3, #31
 800d46a:	d50f      	bpl.n	800d48c <_printf_float+0x23c>
 800d46c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d470:	4631      	mov	r1, r6
 800d472:	4628      	mov	r0, r5
 800d474:	47b8      	blx	r7
 800d476:	3001      	adds	r0, #1
 800d478:	f43f af45 	beq.w	800d306 <_printf_float+0xb6>
 800d47c:	f04f 0900 	mov.w	r9, #0
 800d480:	f108 38ff 	add.w	r8, r8, #4294967295
 800d484:	f104 0a1a 	add.w	sl, r4, #26
 800d488:	45c8      	cmp	r8, r9
 800d48a:	dc09      	bgt.n	800d4a0 <_printf_float+0x250>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	079b      	lsls	r3, r3, #30
 800d490:	f100 8103 	bmi.w	800d69a <_printf_float+0x44a>
 800d494:	68e0      	ldr	r0, [r4, #12]
 800d496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d498:	4298      	cmp	r0, r3
 800d49a:	bfb8      	it	lt
 800d49c:	4618      	movlt	r0, r3
 800d49e:	e734      	b.n	800d30a <_printf_float+0xba>
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	4652      	mov	r2, sl
 800d4a4:	4631      	mov	r1, r6
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	47b8      	blx	r7
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	f43f af2b 	beq.w	800d306 <_printf_float+0xb6>
 800d4b0:	f109 0901 	add.w	r9, r9, #1
 800d4b4:	e7e8      	b.n	800d488 <_printf_float+0x238>
 800d4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	dc39      	bgt.n	800d530 <_printf_float+0x2e0>
 800d4bc:	4a1b      	ldr	r2, [pc, #108]	@ (800d52c <_printf_float+0x2dc>)
 800d4be:	2301      	movs	r3, #1
 800d4c0:	4631      	mov	r1, r6
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	47b8      	blx	r7
 800d4c6:	3001      	adds	r0, #1
 800d4c8:	f43f af1d 	beq.w	800d306 <_printf_float+0xb6>
 800d4cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d4d0:	ea59 0303 	orrs.w	r3, r9, r3
 800d4d4:	d102      	bne.n	800d4dc <_printf_float+0x28c>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	07d9      	lsls	r1, r3, #31
 800d4da:	d5d7      	bpl.n	800d48c <_printf_float+0x23c>
 800d4dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	47b8      	blx	r7
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	f43f af0d 	beq.w	800d306 <_printf_float+0xb6>
 800d4ec:	f04f 0a00 	mov.w	sl, #0
 800d4f0:	f104 0b1a 	add.w	fp, r4, #26
 800d4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4f6:	425b      	negs	r3, r3
 800d4f8:	4553      	cmp	r3, sl
 800d4fa:	dc01      	bgt.n	800d500 <_printf_float+0x2b0>
 800d4fc:	464b      	mov	r3, r9
 800d4fe:	e793      	b.n	800d428 <_printf_float+0x1d8>
 800d500:	2301      	movs	r3, #1
 800d502:	465a      	mov	r2, fp
 800d504:	4631      	mov	r1, r6
 800d506:	4628      	mov	r0, r5
 800d508:	47b8      	blx	r7
 800d50a:	3001      	adds	r0, #1
 800d50c:	f43f aefb 	beq.w	800d306 <_printf_float+0xb6>
 800d510:	f10a 0a01 	add.w	sl, sl, #1
 800d514:	e7ee      	b.n	800d4f4 <_printf_float+0x2a4>
 800d516:	bf00      	nop
 800d518:	7fefffff 	.word	0x7fefffff
 800d51c:	080103fa 	.word	0x080103fa
 800d520:	080103f6 	.word	0x080103f6
 800d524:	08010402 	.word	0x08010402
 800d528:	080103fe 	.word	0x080103fe
 800d52c:	08010406 	.word	0x08010406
 800d530:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d532:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d536:	4553      	cmp	r3, sl
 800d538:	bfa8      	it	ge
 800d53a:	4653      	movge	r3, sl
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	4699      	mov	r9, r3
 800d540:	dc36      	bgt.n	800d5b0 <_printf_float+0x360>
 800d542:	f04f 0b00 	mov.w	fp, #0
 800d546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d54a:	f104 021a 	add.w	r2, r4, #26
 800d54e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d550:	9306      	str	r3, [sp, #24]
 800d552:	eba3 0309 	sub.w	r3, r3, r9
 800d556:	455b      	cmp	r3, fp
 800d558:	dc31      	bgt.n	800d5be <_printf_float+0x36e>
 800d55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d55c:	459a      	cmp	sl, r3
 800d55e:	dc3a      	bgt.n	800d5d6 <_printf_float+0x386>
 800d560:	6823      	ldr	r3, [r4, #0]
 800d562:	07da      	lsls	r2, r3, #31
 800d564:	d437      	bmi.n	800d5d6 <_printf_float+0x386>
 800d566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d568:	ebaa 0903 	sub.w	r9, sl, r3
 800d56c:	9b06      	ldr	r3, [sp, #24]
 800d56e:	ebaa 0303 	sub.w	r3, sl, r3
 800d572:	4599      	cmp	r9, r3
 800d574:	bfa8      	it	ge
 800d576:	4699      	movge	r9, r3
 800d578:	f1b9 0f00 	cmp.w	r9, #0
 800d57c:	dc33      	bgt.n	800d5e6 <_printf_float+0x396>
 800d57e:	f04f 0800 	mov.w	r8, #0
 800d582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d586:	f104 0b1a 	add.w	fp, r4, #26
 800d58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d58c:	ebaa 0303 	sub.w	r3, sl, r3
 800d590:	eba3 0309 	sub.w	r3, r3, r9
 800d594:	4543      	cmp	r3, r8
 800d596:	f77f af79 	ble.w	800d48c <_printf_float+0x23c>
 800d59a:	2301      	movs	r3, #1
 800d59c:	465a      	mov	r2, fp
 800d59e:	4631      	mov	r1, r6
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	47b8      	blx	r7
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	f43f aeae 	beq.w	800d306 <_printf_float+0xb6>
 800d5aa:	f108 0801 	add.w	r8, r8, #1
 800d5ae:	e7ec      	b.n	800d58a <_printf_float+0x33a>
 800d5b0:	4642      	mov	r2, r8
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	47b8      	blx	r7
 800d5b8:	3001      	adds	r0, #1
 800d5ba:	d1c2      	bne.n	800d542 <_printf_float+0x2f2>
 800d5bc:	e6a3      	b.n	800d306 <_printf_float+0xb6>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	4631      	mov	r1, r6
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	9206      	str	r2, [sp, #24]
 800d5c6:	47b8      	blx	r7
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	f43f ae9c 	beq.w	800d306 <_printf_float+0xb6>
 800d5ce:	9a06      	ldr	r2, [sp, #24]
 800d5d0:	f10b 0b01 	add.w	fp, fp, #1
 800d5d4:	e7bb      	b.n	800d54e <_printf_float+0x2fe>
 800d5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4628      	mov	r0, r5
 800d5de:	47b8      	blx	r7
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	d1c0      	bne.n	800d566 <_printf_float+0x316>
 800d5e4:	e68f      	b.n	800d306 <_printf_float+0xb6>
 800d5e6:	9a06      	ldr	r2, [sp, #24]
 800d5e8:	464b      	mov	r3, r9
 800d5ea:	4442      	add	r2, r8
 800d5ec:	4631      	mov	r1, r6
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	47b8      	blx	r7
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	d1c3      	bne.n	800d57e <_printf_float+0x32e>
 800d5f6:	e686      	b.n	800d306 <_printf_float+0xb6>
 800d5f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d5fc:	f1ba 0f01 	cmp.w	sl, #1
 800d600:	dc01      	bgt.n	800d606 <_printf_float+0x3b6>
 800d602:	07db      	lsls	r3, r3, #31
 800d604:	d536      	bpl.n	800d674 <_printf_float+0x424>
 800d606:	2301      	movs	r3, #1
 800d608:	4642      	mov	r2, r8
 800d60a:	4631      	mov	r1, r6
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b8      	blx	r7
 800d610:	3001      	adds	r0, #1
 800d612:	f43f ae78 	beq.w	800d306 <_printf_float+0xb6>
 800d616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d61a:	4631      	mov	r1, r6
 800d61c:	4628      	mov	r0, r5
 800d61e:	47b8      	blx	r7
 800d620:	3001      	adds	r0, #1
 800d622:	f43f ae70 	beq.w	800d306 <_printf_float+0xb6>
 800d626:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d62a:	2200      	movs	r2, #0
 800d62c:	2300      	movs	r3, #0
 800d62e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d632:	f7f3 fa59 	bl	8000ae8 <__aeabi_dcmpeq>
 800d636:	b9c0      	cbnz	r0, 800d66a <_printf_float+0x41a>
 800d638:	4653      	mov	r3, sl
 800d63a:	f108 0201 	add.w	r2, r8, #1
 800d63e:	4631      	mov	r1, r6
 800d640:	4628      	mov	r0, r5
 800d642:	47b8      	blx	r7
 800d644:	3001      	adds	r0, #1
 800d646:	d10c      	bne.n	800d662 <_printf_float+0x412>
 800d648:	e65d      	b.n	800d306 <_printf_float+0xb6>
 800d64a:	2301      	movs	r3, #1
 800d64c:	465a      	mov	r2, fp
 800d64e:	4631      	mov	r1, r6
 800d650:	4628      	mov	r0, r5
 800d652:	47b8      	blx	r7
 800d654:	3001      	adds	r0, #1
 800d656:	f43f ae56 	beq.w	800d306 <_printf_float+0xb6>
 800d65a:	f108 0801 	add.w	r8, r8, #1
 800d65e:	45d0      	cmp	r8, sl
 800d660:	dbf3      	blt.n	800d64a <_printf_float+0x3fa>
 800d662:	464b      	mov	r3, r9
 800d664:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d668:	e6df      	b.n	800d42a <_printf_float+0x1da>
 800d66a:	f04f 0800 	mov.w	r8, #0
 800d66e:	f104 0b1a 	add.w	fp, r4, #26
 800d672:	e7f4      	b.n	800d65e <_printf_float+0x40e>
 800d674:	2301      	movs	r3, #1
 800d676:	4642      	mov	r2, r8
 800d678:	e7e1      	b.n	800d63e <_printf_float+0x3ee>
 800d67a:	2301      	movs	r3, #1
 800d67c:	464a      	mov	r2, r9
 800d67e:	4631      	mov	r1, r6
 800d680:	4628      	mov	r0, r5
 800d682:	47b8      	blx	r7
 800d684:	3001      	adds	r0, #1
 800d686:	f43f ae3e 	beq.w	800d306 <_printf_float+0xb6>
 800d68a:	f108 0801 	add.w	r8, r8, #1
 800d68e:	68e3      	ldr	r3, [r4, #12]
 800d690:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d692:	1a5b      	subs	r3, r3, r1
 800d694:	4543      	cmp	r3, r8
 800d696:	dcf0      	bgt.n	800d67a <_printf_float+0x42a>
 800d698:	e6fc      	b.n	800d494 <_printf_float+0x244>
 800d69a:	f04f 0800 	mov.w	r8, #0
 800d69e:	f104 0919 	add.w	r9, r4, #25
 800d6a2:	e7f4      	b.n	800d68e <_printf_float+0x43e>

0800d6a4 <_printf_common>:
 800d6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a8:	4616      	mov	r6, r2
 800d6aa:	4698      	mov	r8, r3
 800d6ac:	688a      	ldr	r2, [r1, #8]
 800d6ae:	690b      	ldr	r3, [r1, #16]
 800d6b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	bfb8      	it	lt
 800d6b8:	4613      	movlt	r3, r2
 800d6ba:	6033      	str	r3, [r6, #0]
 800d6bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6c0:	4607      	mov	r7, r0
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	b10a      	cbz	r2, 800d6ca <_printf_common+0x26>
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	6033      	str	r3, [r6, #0]
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	0699      	lsls	r1, r3, #26
 800d6ce:	bf42      	ittt	mi
 800d6d0:	6833      	ldrmi	r3, [r6, #0]
 800d6d2:	3302      	addmi	r3, #2
 800d6d4:	6033      	strmi	r3, [r6, #0]
 800d6d6:	6825      	ldr	r5, [r4, #0]
 800d6d8:	f015 0506 	ands.w	r5, r5, #6
 800d6dc:	d106      	bne.n	800d6ec <_printf_common+0x48>
 800d6de:	f104 0a19 	add.w	sl, r4, #25
 800d6e2:	68e3      	ldr	r3, [r4, #12]
 800d6e4:	6832      	ldr	r2, [r6, #0]
 800d6e6:	1a9b      	subs	r3, r3, r2
 800d6e8:	42ab      	cmp	r3, r5
 800d6ea:	dc26      	bgt.n	800d73a <_printf_common+0x96>
 800d6ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d6f0:	6822      	ldr	r2, [r4, #0]
 800d6f2:	3b00      	subs	r3, #0
 800d6f4:	bf18      	it	ne
 800d6f6:	2301      	movne	r3, #1
 800d6f8:	0692      	lsls	r2, r2, #26
 800d6fa:	d42b      	bmi.n	800d754 <_printf_common+0xb0>
 800d6fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d700:	4641      	mov	r1, r8
 800d702:	4638      	mov	r0, r7
 800d704:	47c8      	blx	r9
 800d706:	3001      	adds	r0, #1
 800d708:	d01e      	beq.n	800d748 <_printf_common+0xa4>
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	6922      	ldr	r2, [r4, #16]
 800d70e:	f003 0306 	and.w	r3, r3, #6
 800d712:	2b04      	cmp	r3, #4
 800d714:	bf02      	ittt	eq
 800d716:	68e5      	ldreq	r5, [r4, #12]
 800d718:	6833      	ldreq	r3, [r6, #0]
 800d71a:	1aed      	subeq	r5, r5, r3
 800d71c:	68a3      	ldr	r3, [r4, #8]
 800d71e:	bf0c      	ite	eq
 800d720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d724:	2500      	movne	r5, #0
 800d726:	4293      	cmp	r3, r2
 800d728:	bfc4      	itt	gt
 800d72a:	1a9b      	subgt	r3, r3, r2
 800d72c:	18ed      	addgt	r5, r5, r3
 800d72e:	2600      	movs	r6, #0
 800d730:	341a      	adds	r4, #26
 800d732:	42b5      	cmp	r5, r6
 800d734:	d11a      	bne.n	800d76c <_printf_common+0xc8>
 800d736:	2000      	movs	r0, #0
 800d738:	e008      	b.n	800d74c <_printf_common+0xa8>
 800d73a:	2301      	movs	r3, #1
 800d73c:	4652      	mov	r2, sl
 800d73e:	4641      	mov	r1, r8
 800d740:	4638      	mov	r0, r7
 800d742:	47c8      	blx	r9
 800d744:	3001      	adds	r0, #1
 800d746:	d103      	bne.n	800d750 <_printf_common+0xac>
 800d748:	f04f 30ff 	mov.w	r0, #4294967295
 800d74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d750:	3501      	adds	r5, #1
 800d752:	e7c6      	b.n	800d6e2 <_printf_common+0x3e>
 800d754:	18e1      	adds	r1, r4, r3
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	2030      	movs	r0, #48	@ 0x30
 800d75a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d75e:	4422      	add	r2, r4
 800d760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d768:	3302      	adds	r3, #2
 800d76a:	e7c7      	b.n	800d6fc <_printf_common+0x58>
 800d76c:	2301      	movs	r3, #1
 800d76e:	4622      	mov	r2, r4
 800d770:	4641      	mov	r1, r8
 800d772:	4638      	mov	r0, r7
 800d774:	47c8      	blx	r9
 800d776:	3001      	adds	r0, #1
 800d778:	d0e6      	beq.n	800d748 <_printf_common+0xa4>
 800d77a:	3601      	adds	r6, #1
 800d77c:	e7d9      	b.n	800d732 <_printf_common+0x8e>
	...

0800d780 <_printf_i>:
 800d780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d784:	7e0f      	ldrb	r7, [r1, #24]
 800d786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d788:	2f78      	cmp	r7, #120	@ 0x78
 800d78a:	4691      	mov	r9, r2
 800d78c:	4680      	mov	r8, r0
 800d78e:	460c      	mov	r4, r1
 800d790:	469a      	mov	sl, r3
 800d792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d796:	d807      	bhi.n	800d7a8 <_printf_i+0x28>
 800d798:	2f62      	cmp	r7, #98	@ 0x62
 800d79a:	d80a      	bhi.n	800d7b2 <_printf_i+0x32>
 800d79c:	2f00      	cmp	r7, #0
 800d79e:	f000 80d1 	beq.w	800d944 <_printf_i+0x1c4>
 800d7a2:	2f58      	cmp	r7, #88	@ 0x58
 800d7a4:	f000 80b8 	beq.w	800d918 <_printf_i+0x198>
 800d7a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7b0:	e03a      	b.n	800d828 <_printf_i+0xa8>
 800d7b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7b6:	2b15      	cmp	r3, #21
 800d7b8:	d8f6      	bhi.n	800d7a8 <_printf_i+0x28>
 800d7ba:	a101      	add	r1, pc, #4	@ (adr r1, 800d7c0 <_printf_i+0x40>)
 800d7bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7c0:	0800d819 	.word	0x0800d819
 800d7c4:	0800d82d 	.word	0x0800d82d
 800d7c8:	0800d7a9 	.word	0x0800d7a9
 800d7cc:	0800d7a9 	.word	0x0800d7a9
 800d7d0:	0800d7a9 	.word	0x0800d7a9
 800d7d4:	0800d7a9 	.word	0x0800d7a9
 800d7d8:	0800d82d 	.word	0x0800d82d
 800d7dc:	0800d7a9 	.word	0x0800d7a9
 800d7e0:	0800d7a9 	.word	0x0800d7a9
 800d7e4:	0800d7a9 	.word	0x0800d7a9
 800d7e8:	0800d7a9 	.word	0x0800d7a9
 800d7ec:	0800d92b 	.word	0x0800d92b
 800d7f0:	0800d857 	.word	0x0800d857
 800d7f4:	0800d8e5 	.word	0x0800d8e5
 800d7f8:	0800d7a9 	.word	0x0800d7a9
 800d7fc:	0800d7a9 	.word	0x0800d7a9
 800d800:	0800d94d 	.word	0x0800d94d
 800d804:	0800d7a9 	.word	0x0800d7a9
 800d808:	0800d857 	.word	0x0800d857
 800d80c:	0800d7a9 	.word	0x0800d7a9
 800d810:	0800d7a9 	.word	0x0800d7a9
 800d814:	0800d8ed 	.word	0x0800d8ed
 800d818:	6833      	ldr	r3, [r6, #0]
 800d81a:	1d1a      	adds	r2, r3, #4
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6032      	str	r2, [r6, #0]
 800d820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d828:	2301      	movs	r3, #1
 800d82a:	e09c      	b.n	800d966 <_printf_i+0x1e6>
 800d82c:	6833      	ldr	r3, [r6, #0]
 800d82e:	6820      	ldr	r0, [r4, #0]
 800d830:	1d19      	adds	r1, r3, #4
 800d832:	6031      	str	r1, [r6, #0]
 800d834:	0606      	lsls	r6, r0, #24
 800d836:	d501      	bpl.n	800d83c <_printf_i+0xbc>
 800d838:	681d      	ldr	r5, [r3, #0]
 800d83a:	e003      	b.n	800d844 <_printf_i+0xc4>
 800d83c:	0645      	lsls	r5, r0, #25
 800d83e:	d5fb      	bpl.n	800d838 <_printf_i+0xb8>
 800d840:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d844:	2d00      	cmp	r5, #0
 800d846:	da03      	bge.n	800d850 <_printf_i+0xd0>
 800d848:	232d      	movs	r3, #45	@ 0x2d
 800d84a:	426d      	negs	r5, r5
 800d84c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d850:	4858      	ldr	r0, [pc, #352]	@ (800d9b4 <_printf_i+0x234>)
 800d852:	230a      	movs	r3, #10
 800d854:	e011      	b.n	800d87a <_printf_i+0xfa>
 800d856:	6821      	ldr	r1, [r4, #0]
 800d858:	6833      	ldr	r3, [r6, #0]
 800d85a:	0608      	lsls	r0, r1, #24
 800d85c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d860:	d402      	bmi.n	800d868 <_printf_i+0xe8>
 800d862:	0649      	lsls	r1, r1, #25
 800d864:	bf48      	it	mi
 800d866:	b2ad      	uxthmi	r5, r5
 800d868:	2f6f      	cmp	r7, #111	@ 0x6f
 800d86a:	4852      	ldr	r0, [pc, #328]	@ (800d9b4 <_printf_i+0x234>)
 800d86c:	6033      	str	r3, [r6, #0]
 800d86e:	bf14      	ite	ne
 800d870:	230a      	movne	r3, #10
 800d872:	2308      	moveq	r3, #8
 800d874:	2100      	movs	r1, #0
 800d876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d87a:	6866      	ldr	r6, [r4, #4]
 800d87c:	60a6      	str	r6, [r4, #8]
 800d87e:	2e00      	cmp	r6, #0
 800d880:	db05      	blt.n	800d88e <_printf_i+0x10e>
 800d882:	6821      	ldr	r1, [r4, #0]
 800d884:	432e      	orrs	r6, r5
 800d886:	f021 0104 	bic.w	r1, r1, #4
 800d88a:	6021      	str	r1, [r4, #0]
 800d88c:	d04b      	beq.n	800d926 <_printf_i+0x1a6>
 800d88e:	4616      	mov	r6, r2
 800d890:	fbb5 f1f3 	udiv	r1, r5, r3
 800d894:	fb03 5711 	mls	r7, r3, r1, r5
 800d898:	5dc7      	ldrb	r7, [r0, r7]
 800d89a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d89e:	462f      	mov	r7, r5
 800d8a0:	42bb      	cmp	r3, r7
 800d8a2:	460d      	mov	r5, r1
 800d8a4:	d9f4      	bls.n	800d890 <_printf_i+0x110>
 800d8a6:	2b08      	cmp	r3, #8
 800d8a8:	d10b      	bne.n	800d8c2 <_printf_i+0x142>
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	07df      	lsls	r7, r3, #31
 800d8ae:	d508      	bpl.n	800d8c2 <_printf_i+0x142>
 800d8b0:	6923      	ldr	r3, [r4, #16]
 800d8b2:	6861      	ldr	r1, [r4, #4]
 800d8b4:	4299      	cmp	r1, r3
 800d8b6:	bfde      	ittt	le
 800d8b8:	2330      	movle	r3, #48	@ 0x30
 800d8ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8be:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8c2:	1b92      	subs	r2, r2, r6
 800d8c4:	6122      	str	r2, [r4, #16]
 800d8c6:	f8cd a000 	str.w	sl, [sp]
 800d8ca:	464b      	mov	r3, r9
 800d8cc:	aa03      	add	r2, sp, #12
 800d8ce:	4621      	mov	r1, r4
 800d8d0:	4640      	mov	r0, r8
 800d8d2:	f7ff fee7 	bl	800d6a4 <_printf_common>
 800d8d6:	3001      	adds	r0, #1
 800d8d8:	d14a      	bne.n	800d970 <_printf_i+0x1f0>
 800d8da:	f04f 30ff 	mov.w	r0, #4294967295
 800d8de:	b004      	add	sp, #16
 800d8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	f043 0320 	orr.w	r3, r3, #32
 800d8ea:	6023      	str	r3, [r4, #0]
 800d8ec:	4832      	ldr	r0, [pc, #200]	@ (800d9b8 <_printf_i+0x238>)
 800d8ee:	2778      	movs	r7, #120	@ 0x78
 800d8f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d8f4:	6823      	ldr	r3, [r4, #0]
 800d8f6:	6831      	ldr	r1, [r6, #0]
 800d8f8:	061f      	lsls	r7, r3, #24
 800d8fa:	f851 5b04 	ldr.w	r5, [r1], #4
 800d8fe:	d402      	bmi.n	800d906 <_printf_i+0x186>
 800d900:	065f      	lsls	r7, r3, #25
 800d902:	bf48      	it	mi
 800d904:	b2ad      	uxthmi	r5, r5
 800d906:	6031      	str	r1, [r6, #0]
 800d908:	07d9      	lsls	r1, r3, #31
 800d90a:	bf44      	itt	mi
 800d90c:	f043 0320 	orrmi.w	r3, r3, #32
 800d910:	6023      	strmi	r3, [r4, #0]
 800d912:	b11d      	cbz	r5, 800d91c <_printf_i+0x19c>
 800d914:	2310      	movs	r3, #16
 800d916:	e7ad      	b.n	800d874 <_printf_i+0xf4>
 800d918:	4826      	ldr	r0, [pc, #152]	@ (800d9b4 <_printf_i+0x234>)
 800d91a:	e7e9      	b.n	800d8f0 <_printf_i+0x170>
 800d91c:	6823      	ldr	r3, [r4, #0]
 800d91e:	f023 0320 	bic.w	r3, r3, #32
 800d922:	6023      	str	r3, [r4, #0]
 800d924:	e7f6      	b.n	800d914 <_printf_i+0x194>
 800d926:	4616      	mov	r6, r2
 800d928:	e7bd      	b.n	800d8a6 <_printf_i+0x126>
 800d92a:	6833      	ldr	r3, [r6, #0]
 800d92c:	6825      	ldr	r5, [r4, #0]
 800d92e:	6961      	ldr	r1, [r4, #20]
 800d930:	1d18      	adds	r0, r3, #4
 800d932:	6030      	str	r0, [r6, #0]
 800d934:	062e      	lsls	r6, r5, #24
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	d501      	bpl.n	800d93e <_printf_i+0x1be>
 800d93a:	6019      	str	r1, [r3, #0]
 800d93c:	e002      	b.n	800d944 <_printf_i+0x1c4>
 800d93e:	0668      	lsls	r0, r5, #25
 800d940:	d5fb      	bpl.n	800d93a <_printf_i+0x1ba>
 800d942:	8019      	strh	r1, [r3, #0]
 800d944:	2300      	movs	r3, #0
 800d946:	6123      	str	r3, [r4, #16]
 800d948:	4616      	mov	r6, r2
 800d94a:	e7bc      	b.n	800d8c6 <_printf_i+0x146>
 800d94c:	6833      	ldr	r3, [r6, #0]
 800d94e:	1d1a      	adds	r2, r3, #4
 800d950:	6032      	str	r2, [r6, #0]
 800d952:	681e      	ldr	r6, [r3, #0]
 800d954:	6862      	ldr	r2, [r4, #4]
 800d956:	2100      	movs	r1, #0
 800d958:	4630      	mov	r0, r6
 800d95a:	f7f2 fc49 	bl	80001f0 <memchr>
 800d95e:	b108      	cbz	r0, 800d964 <_printf_i+0x1e4>
 800d960:	1b80      	subs	r0, r0, r6
 800d962:	6060      	str	r0, [r4, #4]
 800d964:	6863      	ldr	r3, [r4, #4]
 800d966:	6123      	str	r3, [r4, #16]
 800d968:	2300      	movs	r3, #0
 800d96a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d96e:	e7aa      	b.n	800d8c6 <_printf_i+0x146>
 800d970:	6923      	ldr	r3, [r4, #16]
 800d972:	4632      	mov	r2, r6
 800d974:	4649      	mov	r1, r9
 800d976:	4640      	mov	r0, r8
 800d978:	47d0      	blx	sl
 800d97a:	3001      	adds	r0, #1
 800d97c:	d0ad      	beq.n	800d8da <_printf_i+0x15a>
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	079b      	lsls	r3, r3, #30
 800d982:	d413      	bmi.n	800d9ac <_printf_i+0x22c>
 800d984:	68e0      	ldr	r0, [r4, #12]
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	4298      	cmp	r0, r3
 800d98a:	bfb8      	it	lt
 800d98c:	4618      	movlt	r0, r3
 800d98e:	e7a6      	b.n	800d8de <_printf_i+0x15e>
 800d990:	2301      	movs	r3, #1
 800d992:	4632      	mov	r2, r6
 800d994:	4649      	mov	r1, r9
 800d996:	4640      	mov	r0, r8
 800d998:	47d0      	blx	sl
 800d99a:	3001      	adds	r0, #1
 800d99c:	d09d      	beq.n	800d8da <_printf_i+0x15a>
 800d99e:	3501      	adds	r5, #1
 800d9a0:	68e3      	ldr	r3, [r4, #12]
 800d9a2:	9903      	ldr	r1, [sp, #12]
 800d9a4:	1a5b      	subs	r3, r3, r1
 800d9a6:	42ab      	cmp	r3, r5
 800d9a8:	dcf2      	bgt.n	800d990 <_printf_i+0x210>
 800d9aa:	e7eb      	b.n	800d984 <_printf_i+0x204>
 800d9ac:	2500      	movs	r5, #0
 800d9ae:	f104 0619 	add.w	r6, r4, #25
 800d9b2:	e7f5      	b.n	800d9a0 <_printf_i+0x220>
 800d9b4:	08010408 	.word	0x08010408
 800d9b8:	08010419 	.word	0x08010419

0800d9bc <std>:
 800d9bc:	2300      	movs	r3, #0
 800d9be:	b510      	push	{r4, lr}
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	e9c0 3300 	strd	r3, r3, [r0]
 800d9c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9ca:	6083      	str	r3, [r0, #8]
 800d9cc:	8181      	strh	r1, [r0, #12]
 800d9ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9d0:	81c2      	strh	r2, [r0, #14]
 800d9d2:	6183      	str	r3, [r0, #24]
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	2208      	movs	r2, #8
 800d9d8:	305c      	adds	r0, #92	@ 0x5c
 800d9da:	f000 f906 	bl	800dbea <memset>
 800d9de:	4b0d      	ldr	r3, [pc, #52]	@ (800da14 <std+0x58>)
 800d9e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800da18 <std+0x5c>)
 800d9e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800da1c <std+0x60>)
 800d9e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800da20 <std+0x64>)
 800d9ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800da24 <std+0x68>)
 800d9f0:	6224      	str	r4, [r4, #32]
 800d9f2:	429c      	cmp	r4, r3
 800d9f4:	d006      	beq.n	800da04 <std+0x48>
 800d9f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9fa:	4294      	cmp	r4, r2
 800d9fc:	d002      	beq.n	800da04 <std+0x48>
 800d9fe:	33d0      	adds	r3, #208	@ 0xd0
 800da00:	429c      	cmp	r4, r3
 800da02:	d105      	bne.n	800da10 <std+0x54>
 800da04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da0c:	f000 ba18 	b.w	800de40 <__retarget_lock_init_recursive>
 800da10:	bd10      	pop	{r4, pc}
 800da12:	bf00      	nop
 800da14:	0800db65 	.word	0x0800db65
 800da18:	0800db87 	.word	0x0800db87
 800da1c:	0800dbbf 	.word	0x0800dbbf
 800da20:	0800dbe3 	.word	0x0800dbe3
 800da24:	200026e8 	.word	0x200026e8

0800da28 <stdio_exit_handler>:
 800da28:	4a02      	ldr	r2, [pc, #8]	@ (800da34 <stdio_exit_handler+0xc>)
 800da2a:	4903      	ldr	r1, [pc, #12]	@ (800da38 <stdio_exit_handler+0x10>)
 800da2c:	4803      	ldr	r0, [pc, #12]	@ (800da3c <stdio_exit_handler+0x14>)
 800da2e:	f000 b869 	b.w	800db04 <_fwalk_sglue>
 800da32:	bf00      	nop
 800da34:	200001fc 	.word	0x200001fc
 800da38:	0800ff8d 	.word	0x0800ff8d
 800da3c:	20000378 	.word	0x20000378

0800da40 <cleanup_stdio>:
 800da40:	6841      	ldr	r1, [r0, #4]
 800da42:	4b0c      	ldr	r3, [pc, #48]	@ (800da74 <cleanup_stdio+0x34>)
 800da44:	4299      	cmp	r1, r3
 800da46:	b510      	push	{r4, lr}
 800da48:	4604      	mov	r4, r0
 800da4a:	d001      	beq.n	800da50 <cleanup_stdio+0x10>
 800da4c:	f002 fa9e 	bl	800ff8c <_fflush_r>
 800da50:	68a1      	ldr	r1, [r4, #8]
 800da52:	4b09      	ldr	r3, [pc, #36]	@ (800da78 <cleanup_stdio+0x38>)
 800da54:	4299      	cmp	r1, r3
 800da56:	d002      	beq.n	800da5e <cleanup_stdio+0x1e>
 800da58:	4620      	mov	r0, r4
 800da5a:	f002 fa97 	bl	800ff8c <_fflush_r>
 800da5e:	68e1      	ldr	r1, [r4, #12]
 800da60:	4b06      	ldr	r3, [pc, #24]	@ (800da7c <cleanup_stdio+0x3c>)
 800da62:	4299      	cmp	r1, r3
 800da64:	d004      	beq.n	800da70 <cleanup_stdio+0x30>
 800da66:	4620      	mov	r0, r4
 800da68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da6c:	f002 ba8e 	b.w	800ff8c <_fflush_r>
 800da70:	bd10      	pop	{r4, pc}
 800da72:	bf00      	nop
 800da74:	200026e8 	.word	0x200026e8
 800da78:	20002750 	.word	0x20002750
 800da7c:	200027b8 	.word	0x200027b8

0800da80 <global_stdio_init.part.0>:
 800da80:	b510      	push	{r4, lr}
 800da82:	4b0b      	ldr	r3, [pc, #44]	@ (800dab0 <global_stdio_init.part.0+0x30>)
 800da84:	4c0b      	ldr	r4, [pc, #44]	@ (800dab4 <global_stdio_init.part.0+0x34>)
 800da86:	4a0c      	ldr	r2, [pc, #48]	@ (800dab8 <global_stdio_init.part.0+0x38>)
 800da88:	601a      	str	r2, [r3, #0]
 800da8a:	4620      	mov	r0, r4
 800da8c:	2200      	movs	r2, #0
 800da8e:	2104      	movs	r1, #4
 800da90:	f7ff ff94 	bl	800d9bc <std>
 800da94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da98:	2201      	movs	r2, #1
 800da9a:	2109      	movs	r1, #9
 800da9c:	f7ff ff8e 	bl	800d9bc <std>
 800daa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800daa4:	2202      	movs	r2, #2
 800daa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daaa:	2112      	movs	r1, #18
 800daac:	f7ff bf86 	b.w	800d9bc <std>
 800dab0:	20002820 	.word	0x20002820
 800dab4:	200026e8 	.word	0x200026e8
 800dab8:	0800da29 	.word	0x0800da29

0800dabc <__sfp_lock_acquire>:
 800dabc:	4801      	ldr	r0, [pc, #4]	@ (800dac4 <__sfp_lock_acquire+0x8>)
 800dabe:	f000 b9c0 	b.w	800de42 <__retarget_lock_acquire_recursive>
 800dac2:	bf00      	nop
 800dac4:	20002829 	.word	0x20002829

0800dac8 <__sfp_lock_release>:
 800dac8:	4801      	ldr	r0, [pc, #4]	@ (800dad0 <__sfp_lock_release+0x8>)
 800daca:	f000 b9bb 	b.w	800de44 <__retarget_lock_release_recursive>
 800dace:	bf00      	nop
 800dad0:	20002829 	.word	0x20002829

0800dad4 <__sinit>:
 800dad4:	b510      	push	{r4, lr}
 800dad6:	4604      	mov	r4, r0
 800dad8:	f7ff fff0 	bl	800dabc <__sfp_lock_acquire>
 800dadc:	6a23      	ldr	r3, [r4, #32]
 800dade:	b11b      	cbz	r3, 800dae8 <__sinit+0x14>
 800dae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dae4:	f7ff bff0 	b.w	800dac8 <__sfp_lock_release>
 800dae8:	4b04      	ldr	r3, [pc, #16]	@ (800dafc <__sinit+0x28>)
 800daea:	6223      	str	r3, [r4, #32]
 800daec:	4b04      	ldr	r3, [pc, #16]	@ (800db00 <__sinit+0x2c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1f5      	bne.n	800dae0 <__sinit+0xc>
 800daf4:	f7ff ffc4 	bl	800da80 <global_stdio_init.part.0>
 800daf8:	e7f2      	b.n	800dae0 <__sinit+0xc>
 800dafa:	bf00      	nop
 800dafc:	0800da41 	.word	0x0800da41
 800db00:	20002820 	.word	0x20002820

0800db04 <_fwalk_sglue>:
 800db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db08:	4607      	mov	r7, r0
 800db0a:	4688      	mov	r8, r1
 800db0c:	4614      	mov	r4, r2
 800db0e:	2600      	movs	r6, #0
 800db10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db14:	f1b9 0901 	subs.w	r9, r9, #1
 800db18:	d505      	bpl.n	800db26 <_fwalk_sglue+0x22>
 800db1a:	6824      	ldr	r4, [r4, #0]
 800db1c:	2c00      	cmp	r4, #0
 800db1e:	d1f7      	bne.n	800db10 <_fwalk_sglue+0xc>
 800db20:	4630      	mov	r0, r6
 800db22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db26:	89ab      	ldrh	r3, [r5, #12]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d907      	bls.n	800db3c <_fwalk_sglue+0x38>
 800db2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db30:	3301      	adds	r3, #1
 800db32:	d003      	beq.n	800db3c <_fwalk_sglue+0x38>
 800db34:	4629      	mov	r1, r5
 800db36:	4638      	mov	r0, r7
 800db38:	47c0      	blx	r8
 800db3a:	4306      	orrs	r6, r0
 800db3c:	3568      	adds	r5, #104	@ 0x68
 800db3e:	e7e9      	b.n	800db14 <_fwalk_sglue+0x10>

0800db40 <iprintf>:
 800db40:	b40f      	push	{r0, r1, r2, r3}
 800db42:	b507      	push	{r0, r1, r2, lr}
 800db44:	4906      	ldr	r1, [pc, #24]	@ (800db60 <iprintf+0x20>)
 800db46:	ab04      	add	r3, sp, #16
 800db48:	6808      	ldr	r0, [r1, #0]
 800db4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db4e:	6881      	ldr	r1, [r0, #8]
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	f002 f87f 	bl	800fc54 <_vfiprintf_r>
 800db56:	b003      	add	sp, #12
 800db58:	f85d eb04 	ldr.w	lr, [sp], #4
 800db5c:	b004      	add	sp, #16
 800db5e:	4770      	bx	lr
 800db60:	20000374 	.word	0x20000374

0800db64 <__sread>:
 800db64:	b510      	push	{r4, lr}
 800db66:	460c      	mov	r4, r1
 800db68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db6c:	f000 f90a 	bl	800dd84 <_read_r>
 800db70:	2800      	cmp	r0, #0
 800db72:	bfab      	itete	ge
 800db74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db76:	89a3      	ldrhlt	r3, [r4, #12]
 800db78:	181b      	addge	r3, r3, r0
 800db7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db7e:	bfac      	ite	ge
 800db80:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db82:	81a3      	strhlt	r3, [r4, #12]
 800db84:	bd10      	pop	{r4, pc}

0800db86 <__swrite>:
 800db86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db8a:	461f      	mov	r7, r3
 800db8c:	898b      	ldrh	r3, [r1, #12]
 800db8e:	05db      	lsls	r3, r3, #23
 800db90:	4605      	mov	r5, r0
 800db92:	460c      	mov	r4, r1
 800db94:	4616      	mov	r6, r2
 800db96:	d505      	bpl.n	800dba4 <__swrite+0x1e>
 800db98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db9c:	2302      	movs	r3, #2
 800db9e:	2200      	movs	r2, #0
 800dba0:	f000 f8de 	bl	800dd60 <_lseek_r>
 800dba4:	89a3      	ldrh	r3, [r4, #12]
 800dba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbae:	81a3      	strh	r3, [r4, #12]
 800dbb0:	4632      	mov	r2, r6
 800dbb2:	463b      	mov	r3, r7
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbba:	f000 b905 	b.w	800ddc8 <_write_r>

0800dbbe <__sseek>:
 800dbbe:	b510      	push	{r4, lr}
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc6:	f000 f8cb 	bl	800dd60 <_lseek_r>
 800dbca:	1c43      	adds	r3, r0, #1
 800dbcc:	89a3      	ldrh	r3, [r4, #12]
 800dbce:	bf15      	itete	ne
 800dbd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbda:	81a3      	strheq	r3, [r4, #12]
 800dbdc:	bf18      	it	ne
 800dbde:	81a3      	strhne	r3, [r4, #12]
 800dbe0:	bd10      	pop	{r4, pc}

0800dbe2 <__sclose>:
 800dbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe6:	f000 b8ab 	b.w	800dd40 <_close_r>

0800dbea <memset>:
 800dbea:	4402      	add	r2, r0
 800dbec:	4603      	mov	r3, r0
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d100      	bne.n	800dbf4 <memset+0xa>
 800dbf2:	4770      	bx	lr
 800dbf4:	f803 1b01 	strb.w	r1, [r3], #1
 800dbf8:	e7f9      	b.n	800dbee <memset+0x4>
	...

0800dbfc <strcasecmp>:
 800dbfc:	b530      	push	{r4, r5, lr}
 800dbfe:	4d0c      	ldr	r5, [pc, #48]	@ (800dc30 <strcasecmp+0x34>)
 800dc00:	4602      	mov	r2, r0
 800dc02:	f812 3b01 	ldrb.w	r3, [r2], #1
 800dc06:	5ce8      	ldrb	r0, [r5, r3]
 800dc08:	f000 0003 	and.w	r0, r0, #3
 800dc0c:	2801      	cmp	r0, #1
 800dc0e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800dc12:	5c2c      	ldrb	r4, [r5, r0]
 800dc14:	f004 0403 	and.w	r4, r4, #3
 800dc18:	bf08      	it	eq
 800dc1a:	3320      	addeq	r3, #32
 800dc1c:	2c01      	cmp	r4, #1
 800dc1e:	bf08      	it	eq
 800dc20:	3020      	addeq	r0, #32
 800dc22:	1a1b      	subs	r3, r3, r0
 800dc24:	d102      	bne.n	800dc2c <strcasecmp+0x30>
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d1eb      	bne.n	800dc02 <strcasecmp+0x6>
 800dc2a:	bd30      	pop	{r4, r5, pc}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	e7fc      	b.n	800dc2a <strcasecmp+0x2e>
 800dc30:	08010671 	.word	0x08010671

0800dc34 <strncmp>:
 800dc34:	b510      	push	{r4, lr}
 800dc36:	b16a      	cbz	r2, 800dc54 <strncmp+0x20>
 800dc38:	3901      	subs	r1, #1
 800dc3a:	1884      	adds	r4, r0, r2
 800dc3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d103      	bne.n	800dc50 <strncmp+0x1c>
 800dc48:	42a0      	cmp	r0, r4
 800dc4a:	d001      	beq.n	800dc50 <strncmp+0x1c>
 800dc4c:	2a00      	cmp	r2, #0
 800dc4e:	d1f5      	bne.n	800dc3c <strncmp+0x8>
 800dc50:	1ad0      	subs	r0, r2, r3
 800dc52:	bd10      	pop	{r4, pc}
 800dc54:	4610      	mov	r0, r2
 800dc56:	e7fc      	b.n	800dc52 <strncmp+0x1e>

0800dc58 <strncpy>:
 800dc58:	b510      	push	{r4, lr}
 800dc5a:	3901      	subs	r1, #1
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	b132      	cbz	r2, 800dc6e <strncpy+0x16>
 800dc60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dc64:	f803 4b01 	strb.w	r4, [r3], #1
 800dc68:	3a01      	subs	r2, #1
 800dc6a:	2c00      	cmp	r4, #0
 800dc6c:	d1f7      	bne.n	800dc5e <strncpy+0x6>
 800dc6e:	441a      	add	r2, r3
 800dc70:	2100      	movs	r1, #0
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d100      	bne.n	800dc78 <strncpy+0x20>
 800dc76:	bd10      	pop	{r4, pc}
 800dc78:	f803 1b01 	strb.w	r1, [r3], #1
 800dc7c:	e7f9      	b.n	800dc72 <strncpy+0x1a>
	...

0800dc80 <strtok>:
 800dc80:	4b16      	ldr	r3, [pc, #88]	@ (800dcdc <strtok+0x5c>)
 800dc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc86:	681f      	ldr	r7, [r3, #0]
 800dc88:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800dc8a:	4605      	mov	r5, r0
 800dc8c:	460e      	mov	r6, r1
 800dc8e:	b9ec      	cbnz	r4, 800dccc <strtok+0x4c>
 800dc90:	2050      	movs	r0, #80	@ 0x50
 800dc92:	f7fe faf5 	bl	800c280 <malloc>
 800dc96:	4602      	mov	r2, r0
 800dc98:	6478      	str	r0, [r7, #68]	@ 0x44
 800dc9a:	b920      	cbnz	r0, 800dca6 <strtok+0x26>
 800dc9c:	4b10      	ldr	r3, [pc, #64]	@ (800dce0 <strtok+0x60>)
 800dc9e:	4811      	ldr	r0, [pc, #68]	@ (800dce4 <strtok+0x64>)
 800dca0:	215b      	movs	r1, #91	@ 0x5b
 800dca2:	f000 f8e9 	bl	800de78 <__assert_func>
 800dca6:	e9c0 4400 	strd	r4, r4, [r0]
 800dcaa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dcae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dcb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800dcb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dcba:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dcbe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dcc2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dcc6:	6184      	str	r4, [r0, #24]
 800dcc8:	7704      	strb	r4, [r0, #28]
 800dcca:	6244      	str	r4, [r0, #36]	@ 0x24
 800dccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dcce:	4631      	mov	r1, r6
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd8:	f000 b806 	b.w	800dce8 <__strtok_r>
 800dcdc:	20000374 	.word	0x20000374
 800dce0:	0801042a 	.word	0x0801042a
 800dce4:	08010441 	.word	0x08010441

0800dce8 <__strtok_r>:
 800dce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcea:	4604      	mov	r4, r0
 800dcec:	b908      	cbnz	r0, 800dcf2 <__strtok_r+0xa>
 800dcee:	6814      	ldr	r4, [r2, #0]
 800dcf0:	b144      	cbz	r4, 800dd04 <__strtok_r+0x1c>
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dcf8:	460f      	mov	r7, r1
 800dcfa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dcfe:	b91e      	cbnz	r6, 800dd08 <__strtok_r+0x20>
 800dd00:	b965      	cbnz	r5, 800dd1c <__strtok_r+0x34>
 800dd02:	6015      	str	r5, [r2, #0]
 800dd04:	2000      	movs	r0, #0
 800dd06:	e005      	b.n	800dd14 <__strtok_r+0x2c>
 800dd08:	42b5      	cmp	r5, r6
 800dd0a:	d1f6      	bne.n	800dcfa <__strtok_r+0x12>
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d1f0      	bne.n	800dcf2 <__strtok_r+0xa>
 800dd10:	6014      	str	r4, [r2, #0]
 800dd12:	7003      	strb	r3, [r0, #0]
 800dd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd16:	461c      	mov	r4, r3
 800dd18:	e00c      	b.n	800dd34 <__strtok_r+0x4c>
 800dd1a:	b91d      	cbnz	r5, 800dd24 <__strtok_r+0x3c>
 800dd1c:	4627      	mov	r7, r4
 800dd1e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd22:	460e      	mov	r6, r1
 800dd24:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dd28:	42ab      	cmp	r3, r5
 800dd2a:	d1f6      	bne.n	800dd1a <__strtok_r+0x32>
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d0f2      	beq.n	800dd16 <__strtok_r+0x2e>
 800dd30:	2300      	movs	r3, #0
 800dd32:	703b      	strb	r3, [r7, #0]
 800dd34:	6014      	str	r4, [r2, #0]
 800dd36:	e7ed      	b.n	800dd14 <__strtok_r+0x2c>

0800dd38 <_localeconv_r>:
 800dd38:	4800      	ldr	r0, [pc, #0]	@ (800dd3c <_localeconv_r+0x4>)
 800dd3a:	4770      	bx	lr
 800dd3c:	200002f8 	.word	0x200002f8

0800dd40 <_close_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4d06      	ldr	r5, [pc, #24]	@ (800dd5c <_close_r+0x1c>)
 800dd44:	2300      	movs	r3, #0
 800dd46:	4604      	mov	r4, r0
 800dd48:	4608      	mov	r0, r1
 800dd4a:	602b      	str	r3, [r5, #0]
 800dd4c:	f7f4 fd52 	bl	80027f4 <_close>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	d102      	bne.n	800dd5a <_close_r+0x1a>
 800dd54:	682b      	ldr	r3, [r5, #0]
 800dd56:	b103      	cbz	r3, 800dd5a <_close_r+0x1a>
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
 800dd5c:	20002824 	.word	0x20002824

0800dd60 <_lseek_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	4d07      	ldr	r5, [pc, #28]	@ (800dd80 <_lseek_r+0x20>)
 800dd64:	4604      	mov	r4, r0
 800dd66:	4608      	mov	r0, r1
 800dd68:	4611      	mov	r1, r2
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	602a      	str	r2, [r5, #0]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	f7f4 fd67 	bl	8002842 <_lseek>
 800dd74:	1c43      	adds	r3, r0, #1
 800dd76:	d102      	bne.n	800dd7e <_lseek_r+0x1e>
 800dd78:	682b      	ldr	r3, [r5, #0]
 800dd7a:	b103      	cbz	r3, 800dd7e <_lseek_r+0x1e>
 800dd7c:	6023      	str	r3, [r4, #0]
 800dd7e:	bd38      	pop	{r3, r4, r5, pc}
 800dd80:	20002824 	.word	0x20002824

0800dd84 <_read_r>:
 800dd84:	b538      	push	{r3, r4, r5, lr}
 800dd86:	4d07      	ldr	r5, [pc, #28]	@ (800dda4 <_read_r+0x20>)
 800dd88:	4604      	mov	r4, r0
 800dd8a:	4608      	mov	r0, r1
 800dd8c:	4611      	mov	r1, r2
 800dd8e:	2200      	movs	r2, #0
 800dd90:	602a      	str	r2, [r5, #0]
 800dd92:	461a      	mov	r2, r3
 800dd94:	f7f4 fd11 	bl	80027ba <_read>
 800dd98:	1c43      	adds	r3, r0, #1
 800dd9a:	d102      	bne.n	800dda2 <_read_r+0x1e>
 800dd9c:	682b      	ldr	r3, [r5, #0]
 800dd9e:	b103      	cbz	r3, 800dda2 <_read_r+0x1e>
 800dda0:	6023      	str	r3, [r4, #0]
 800dda2:	bd38      	pop	{r3, r4, r5, pc}
 800dda4:	20002824 	.word	0x20002824

0800dda8 <_sbrk_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	4d06      	ldr	r5, [pc, #24]	@ (800ddc4 <_sbrk_r+0x1c>)
 800ddac:	2300      	movs	r3, #0
 800ddae:	4604      	mov	r4, r0
 800ddb0:	4608      	mov	r0, r1
 800ddb2:	602b      	str	r3, [r5, #0]
 800ddb4:	f7f4 fd52 	bl	800285c <_sbrk>
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	d102      	bne.n	800ddc2 <_sbrk_r+0x1a>
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	b103      	cbz	r3, 800ddc2 <_sbrk_r+0x1a>
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	20002824 	.word	0x20002824

0800ddc8 <_write_r>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4d07      	ldr	r5, [pc, #28]	@ (800dde8 <_write_r+0x20>)
 800ddcc:	4604      	mov	r4, r0
 800ddce:	4608      	mov	r0, r1
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	602a      	str	r2, [r5, #0]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	f7fd fcd3 	bl	800b782 <_write>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d102      	bne.n	800dde6 <_write_r+0x1e>
 800dde0:	682b      	ldr	r3, [r5, #0]
 800dde2:	b103      	cbz	r3, 800dde6 <_write_r+0x1e>
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	bd38      	pop	{r3, r4, r5, pc}
 800dde8:	20002824 	.word	0x20002824

0800ddec <__errno>:
 800ddec:	4b01      	ldr	r3, [pc, #4]	@ (800ddf4 <__errno+0x8>)
 800ddee:	6818      	ldr	r0, [r3, #0]
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	20000374 	.word	0x20000374

0800ddf8 <__libc_init_array>:
 800ddf8:	b570      	push	{r4, r5, r6, lr}
 800ddfa:	4d0d      	ldr	r5, [pc, #52]	@ (800de30 <__libc_init_array+0x38>)
 800ddfc:	4c0d      	ldr	r4, [pc, #52]	@ (800de34 <__libc_init_array+0x3c>)
 800ddfe:	1b64      	subs	r4, r4, r5
 800de00:	10a4      	asrs	r4, r4, #2
 800de02:	2600      	movs	r6, #0
 800de04:	42a6      	cmp	r6, r4
 800de06:	d109      	bne.n	800de1c <__libc_init_array+0x24>
 800de08:	4d0b      	ldr	r5, [pc, #44]	@ (800de38 <__libc_init_array+0x40>)
 800de0a:	4c0c      	ldr	r4, [pc, #48]	@ (800de3c <__libc_init_array+0x44>)
 800de0c:	f002 fa70 	bl	80102f0 <_init>
 800de10:	1b64      	subs	r4, r4, r5
 800de12:	10a4      	asrs	r4, r4, #2
 800de14:	2600      	movs	r6, #0
 800de16:	42a6      	cmp	r6, r4
 800de18:	d105      	bne.n	800de26 <__libc_init_array+0x2e>
 800de1a:	bd70      	pop	{r4, r5, r6, pc}
 800de1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de20:	4798      	blx	r3
 800de22:	3601      	adds	r6, #1
 800de24:	e7ee      	b.n	800de04 <__libc_init_array+0xc>
 800de26:	f855 3b04 	ldr.w	r3, [r5], #4
 800de2a:	4798      	blx	r3
 800de2c:	3601      	adds	r6, #1
 800de2e:	e7f2      	b.n	800de16 <__libc_init_array+0x1e>
 800de30:	08010878 	.word	0x08010878
 800de34:	08010878 	.word	0x08010878
 800de38:	08010878 	.word	0x08010878
 800de3c:	0801087c 	.word	0x0801087c

0800de40 <__retarget_lock_init_recursive>:
 800de40:	4770      	bx	lr

0800de42 <__retarget_lock_acquire_recursive>:
 800de42:	4770      	bx	lr

0800de44 <__retarget_lock_release_recursive>:
 800de44:	4770      	bx	lr

0800de46 <memcpy>:
 800de46:	440a      	add	r2, r1
 800de48:	4291      	cmp	r1, r2
 800de4a:	f100 33ff 	add.w	r3, r0, #4294967295
 800de4e:	d100      	bne.n	800de52 <memcpy+0xc>
 800de50:	4770      	bx	lr
 800de52:	b510      	push	{r4, lr}
 800de54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de5c:	4291      	cmp	r1, r2
 800de5e:	d1f9      	bne.n	800de54 <memcpy+0xe>
 800de60:	bd10      	pop	{r4, pc}
 800de62:	0000      	movs	r0, r0
 800de64:	0000      	movs	r0, r0
	...

0800de68 <nan>:
 800de68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de70 <nan+0x8>
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	00000000 	.word	0x00000000
 800de74:	7ff80000 	.word	0x7ff80000

0800de78 <__assert_func>:
 800de78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de7a:	4614      	mov	r4, r2
 800de7c:	461a      	mov	r2, r3
 800de7e:	4b09      	ldr	r3, [pc, #36]	@ (800dea4 <__assert_func+0x2c>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4605      	mov	r5, r0
 800de84:	68d8      	ldr	r0, [r3, #12]
 800de86:	b14c      	cbz	r4, 800de9c <__assert_func+0x24>
 800de88:	4b07      	ldr	r3, [pc, #28]	@ (800dea8 <__assert_func+0x30>)
 800de8a:	9100      	str	r1, [sp, #0]
 800de8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de90:	4906      	ldr	r1, [pc, #24]	@ (800deac <__assert_func+0x34>)
 800de92:	462b      	mov	r3, r5
 800de94:	f002 f8a2 	bl	800ffdc <fiprintf>
 800de98:	f002 f946 	bl	8010128 <abort>
 800de9c:	4b04      	ldr	r3, [pc, #16]	@ (800deb0 <__assert_func+0x38>)
 800de9e:	461c      	mov	r4, r3
 800dea0:	e7f3      	b.n	800de8a <__assert_func+0x12>
 800dea2:	bf00      	nop
 800dea4:	20000374 	.word	0x20000374
 800dea8:	080104a3 	.word	0x080104a3
 800deac:	080104b0 	.word	0x080104b0
 800deb0:	080104de 	.word	0x080104de

0800deb4 <quorem>:
 800deb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb8:	6903      	ldr	r3, [r0, #16]
 800deba:	690c      	ldr	r4, [r1, #16]
 800debc:	42a3      	cmp	r3, r4
 800debe:	4607      	mov	r7, r0
 800dec0:	db7e      	blt.n	800dfc0 <quorem+0x10c>
 800dec2:	3c01      	subs	r4, #1
 800dec4:	f101 0814 	add.w	r8, r1, #20
 800dec8:	00a3      	lsls	r3, r4, #2
 800deca:	f100 0514 	add.w	r5, r0, #20
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800deda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dede:	3301      	adds	r3, #1
 800dee0:	429a      	cmp	r2, r3
 800dee2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dee6:	fbb2 f6f3 	udiv	r6, r2, r3
 800deea:	d32e      	bcc.n	800df4a <quorem+0x96>
 800deec:	f04f 0a00 	mov.w	sl, #0
 800def0:	46c4      	mov	ip, r8
 800def2:	46ae      	mov	lr, r5
 800def4:	46d3      	mov	fp, sl
 800def6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800defa:	b298      	uxth	r0, r3
 800defc:	fb06 a000 	mla	r0, r6, r0, sl
 800df00:	0c02      	lsrs	r2, r0, #16
 800df02:	0c1b      	lsrs	r3, r3, #16
 800df04:	fb06 2303 	mla	r3, r6, r3, r2
 800df08:	f8de 2000 	ldr.w	r2, [lr]
 800df0c:	b280      	uxth	r0, r0
 800df0e:	b292      	uxth	r2, r2
 800df10:	1a12      	subs	r2, r2, r0
 800df12:	445a      	add	r2, fp
 800df14:	f8de 0000 	ldr.w	r0, [lr]
 800df18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df22:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df26:	b292      	uxth	r2, r2
 800df28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df2c:	45e1      	cmp	r9, ip
 800df2e:	f84e 2b04 	str.w	r2, [lr], #4
 800df32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df36:	d2de      	bcs.n	800def6 <quorem+0x42>
 800df38:	9b00      	ldr	r3, [sp, #0]
 800df3a:	58eb      	ldr	r3, [r5, r3]
 800df3c:	b92b      	cbnz	r3, 800df4a <quorem+0x96>
 800df3e:	9b01      	ldr	r3, [sp, #4]
 800df40:	3b04      	subs	r3, #4
 800df42:	429d      	cmp	r5, r3
 800df44:	461a      	mov	r2, r3
 800df46:	d32f      	bcc.n	800dfa8 <quorem+0xf4>
 800df48:	613c      	str	r4, [r7, #16]
 800df4a:	4638      	mov	r0, r7
 800df4c:	f001 fc5e 	bl	800f80c <__mcmp>
 800df50:	2800      	cmp	r0, #0
 800df52:	db25      	blt.n	800dfa0 <quorem+0xec>
 800df54:	4629      	mov	r1, r5
 800df56:	2000      	movs	r0, #0
 800df58:	f858 2b04 	ldr.w	r2, [r8], #4
 800df5c:	f8d1 c000 	ldr.w	ip, [r1]
 800df60:	fa1f fe82 	uxth.w	lr, r2
 800df64:	fa1f f38c 	uxth.w	r3, ip
 800df68:	eba3 030e 	sub.w	r3, r3, lr
 800df6c:	4403      	add	r3, r0
 800df6e:	0c12      	lsrs	r2, r2, #16
 800df70:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df74:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df78:	b29b      	uxth	r3, r3
 800df7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df7e:	45c1      	cmp	r9, r8
 800df80:	f841 3b04 	str.w	r3, [r1], #4
 800df84:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df88:	d2e6      	bcs.n	800df58 <quorem+0xa4>
 800df8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df92:	b922      	cbnz	r2, 800df9e <quorem+0xea>
 800df94:	3b04      	subs	r3, #4
 800df96:	429d      	cmp	r5, r3
 800df98:	461a      	mov	r2, r3
 800df9a:	d30b      	bcc.n	800dfb4 <quorem+0x100>
 800df9c:	613c      	str	r4, [r7, #16]
 800df9e:	3601      	adds	r6, #1
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	b003      	add	sp, #12
 800dfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa8:	6812      	ldr	r2, [r2, #0]
 800dfaa:	3b04      	subs	r3, #4
 800dfac:	2a00      	cmp	r2, #0
 800dfae:	d1cb      	bne.n	800df48 <quorem+0x94>
 800dfb0:	3c01      	subs	r4, #1
 800dfb2:	e7c6      	b.n	800df42 <quorem+0x8e>
 800dfb4:	6812      	ldr	r2, [r2, #0]
 800dfb6:	3b04      	subs	r3, #4
 800dfb8:	2a00      	cmp	r2, #0
 800dfba:	d1ef      	bne.n	800df9c <quorem+0xe8>
 800dfbc:	3c01      	subs	r4, #1
 800dfbe:	e7ea      	b.n	800df96 <quorem+0xe2>
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	e7ee      	b.n	800dfa2 <quorem+0xee>
 800dfc4:	0000      	movs	r0, r0
	...

0800dfc8 <_dtoa_r>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	69c7      	ldr	r7, [r0, #28]
 800dfce:	b097      	sub	sp, #92	@ 0x5c
 800dfd0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dfd4:	ec55 4b10 	vmov	r4, r5, d0
 800dfd8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dfda:	9107      	str	r1, [sp, #28]
 800dfdc:	4681      	mov	r9, r0
 800dfde:	920c      	str	r2, [sp, #48]	@ 0x30
 800dfe0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfe2:	b97f      	cbnz	r7, 800e004 <_dtoa_r+0x3c>
 800dfe4:	2010      	movs	r0, #16
 800dfe6:	f7fe f94b 	bl	800c280 <malloc>
 800dfea:	4602      	mov	r2, r0
 800dfec:	f8c9 001c 	str.w	r0, [r9, #28]
 800dff0:	b920      	cbnz	r0, 800dffc <_dtoa_r+0x34>
 800dff2:	4ba9      	ldr	r3, [pc, #676]	@ (800e298 <_dtoa_r+0x2d0>)
 800dff4:	21ef      	movs	r1, #239	@ 0xef
 800dff6:	48a9      	ldr	r0, [pc, #676]	@ (800e29c <_dtoa_r+0x2d4>)
 800dff8:	f7ff ff3e 	bl	800de78 <__assert_func>
 800dffc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e000:	6007      	str	r7, [r0, #0]
 800e002:	60c7      	str	r7, [r0, #12]
 800e004:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e008:	6819      	ldr	r1, [r3, #0]
 800e00a:	b159      	cbz	r1, 800e024 <_dtoa_r+0x5c>
 800e00c:	685a      	ldr	r2, [r3, #4]
 800e00e:	604a      	str	r2, [r1, #4]
 800e010:	2301      	movs	r3, #1
 800e012:	4093      	lsls	r3, r2
 800e014:	608b      	str	r3, [r1, #8]
 800e016:	4648      	mov	r0, r9
 800e018:	f001 f97c 	bl	800f314 <_Bfree>
 800e01c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	1e2b      	subs	r3, r5, #0
 800e026:	bfb9      	ittee	lt
 800e028:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e02c:	9305      	strlt	r3, [sp, #20]
 800e02e:	2300      	movge	r3, #0
 800e030:	6033      	strge	r3, [r6, #0]
 800e032:	9f05      	ldr	r7, [sp, #20]
 800e034:	4b9a      	ldr	r3, [pc, #616]	@ (800e2a0 <_dtoa_r+0x2d8>)
 800e036:	bfbc      	itt	lt
 800e038:	2201      	movlt	r2, #1
 800e03a:	6032      	strlt	r2, [r6, #0]
 800e03c:	43bb      	bics	r3, r7
 800e03e:	d112      	bne.n	800e066 <_dtoa_r+0x9e>
 800e040:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e042:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e04c:	4323      	orrs	r3, r4
 800e04e:	f000 855a 	beq.w	800eb06 <_dtoa_r+0xb3e>
 800e052:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e054:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e2b4 <_dtoa_r+0x2ec>
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f000 855c 	beq.w	800eb16 <_dtoa_r+0xb4e>
 800e05e:	f10a 0303 	add.w	r3, sl, #3
 800e062:	f000 bd56 	b.w	800eb12 <_dtoa_r+0xb4a>
 800e066:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e06a:	2200      	movs	r2, #0
 800e06c:	ec51 0b17 	vmov	r0, r1, d7
 800e070:	2300      	movs	r3, #0
 800e072:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e076:	f7f2 fd37 	bl	8000ae8 <__aeabi_dcmpeq>
 800e07a:	4680      	mov	r8, r0
 800e07c:	b158      	cbz	r0, 800e096 <_dtoa_r+0xce>
 800e07e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e080:	2301      	movs	r3, #1
 800e082:	6013      	str	r3, [r2, #0]
 800e084:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e086:	b113      	cbz	r3, 800e08e <_dtoa_r+0xc6>
 800e088:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e08a:	4b86      	ldr	r3, [pc, #536]	@ (800e2a4 <_dtoa_r+0x2dc>)
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e2b8 <_dtoa_r+0x2f0>
 800e092:	f000 bd40 	b.w	800eb16 <_dtoa_r+0xb4e>
 800e096:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e09a:	aa14      	add	r2, sp, #80	@ 0x50
 800e09c:	a915      	add	r1, sp, #84	@ 0x54
 800e09e:	4648      	mov	r0, r9
 800e0a0:	f001 fcd4 	bl	800fa4c <__d2b>
 800e0a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e0a8:	9002      	str	r0, [sp, #8]
 800e0aa:	2e00      	cmp	r6, #0
 800e0ac:	d078      	beq.n	800e1a0 <_dtoa_r+0x1d8>
 800e0ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e0b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e0bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	4b76      	ldr	r3, [pc, #472]	@ (800e2a8 <_dtoa_r+0x2e0>)
 800e0ce:	f7f2 f8eb 	bl	80002a8 <__aeabi_dsub>
 800e0d2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e280 <_dtoa_r+0x2b8>)
 800e0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d8:	f7f2 fa9e 	bl	8000618 <__aeabi_dmul>
 800e0dc:	a36a      	add	r3, pc, #424	@ (adr r3, 800e288 <_dtoa_r+0x2c0>)
 800e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e2:	f7f2 f8e3 	bl	80002ac <__adddf3>
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	f7f2 fa2a 	bl	8000544 <__aeabi_i2d>
 800e0f0:	a367      	add	r3, pc, #412	@ (adr r3, 800e290 <_dtoa_r+0x2c8>)
 800e0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f6:	f7f2 fa8f 	bl	8000618 <__aeabi_dmul>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	4620      	mov	r0, r4
 800e100:	4629      	mov	r1, r5
 800e102:	f7f2 f8d3 	bl	80002ac <__adddf3>
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	f7f2 fd35 	bl	8000b78 <__aeabi_d2iz>
 800e10e:	2200      	movs	r2, #0
 800e110:	4607      	mov	r7, r0
 800e112:	2300      	movs	r3, #0
 800e114:	4620      	mov	r0, r4
 800e116:	4629      	mov	r1, r5
 800e118:	f7f2 fcf0 	bl	8000afc <__aeabi_dcmplt>
 800e11c:	b140      	cbz	r0, 800e130 <_dtoa_r+0x168>
 800e11e:	4638      	mov	r0, r7
 800e120:	f7f2 fa10 	bl	8000544 <__aeabi_i2d>
 800e124:	4622      	mov	r2, r4
 800e126:	462b      	mov	r3, r5
 800e128:	f7f2 fcde 	bl	8000ae8 <__aeabi_dcmpeq>
 800e12c:	b900      	cbnz	r0, 800e130 <_dtoa_r+0x168>
 800e12e:	3f01      	subs	r7, #1
 800e130:	2f16      	cmp	r7, #22
 800e132:	d852      	bhi.n	800e1da <_dtoa_r+0x212>
 800e134:	4b5d      	ldr	r3, [pc, #372]	@ (800e2ac <_dtoa_r+0x2e4>)
 800e136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e142:	f7f2 fcdb 	bl	8000afc <__aeabi_dcmplt>
 800e146:	2800      	cmp	r0, #0
 800e148:	d049      	beq.n	800e1de <_dtoa_r+0x216>
 800e14a:	3f01      	subs	r7, #1
 800e14c:	2300      	movs	r3, #0
 800e14e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e150:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e152:	1b9b      	subs	r3, r3, r6
 800e154:	1e5a      	subs	r2, r3, #1
 800e156:	bf45      	ittet	mi
 800e158:	f1c3 0301 	rsbmi	r3, r3, #1
 800e15c:	9300      	strmi	r3, [sp, #0]
 800e15e:	2300      	movpl	r3, #0
 800e160:	2300      	movmi	r3, #0
 800e162:	9206      	str	r2, [sp, #24]
 800e164:	bf54      	ite	pl
 800e166:	9300      	strpl	r3, [sp, #0]
 800e168:	9306      	strmi	r3, [sp, #24]
 800e16a:	2f00      	cmp	r7, #0
 800e16c:	db39      	blt.n	800e1e2 <_dtoa_r+0x21a>
 800e16e:	9b06      	ldr	r3, [sp, #24]
 800e170:	970d      	str	r7, [sp, #52]	@ 0x34
 800e172:	443b      	add	r3, r7
 800e174:	9306      	str	r3, [sp, #24]
 800e176:	2300      	movs	r3, #0
 800e178:	9308      	str	r3, [sp, #32]
 800e17a:	9b07      	ldr	r3, [sp, #28]
 800e17c:	2b09      	cmp	r3, #9
 800e17e:	d863      	bhi.n	800e248 <_dtoa_r+0x280>
 800e180:	2b05      	cmp	r3, #5
 800e182:	bfc4      	itt	gt
 800e184:	3b04      	subgt	r3, #4
 800e186:	9307      	strgt	r3, [sp, #28]
 800e188:	9b07      	ldr	r3, [sp, #28]
 800e18a:	f1a3 0302 	sub.w	r3, r3, #2
 800e18e:	bfcc      	ite	gt
 800e190:	2400      	movgt	r4, #0
 800e192:	2401      	movle	r4, #1
 800e194:	2b03      	cmp	r3, #3
 800e196:	d863      	bhi.n	800e260 <_dtoa_r+0x298>
 800e198:	e8df f003 	tbb	[pc, r3]
 800e19c:	2b375452 	.word	0x2b375452
 800e1a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e1a4:	441e      	add	r6, r3
 800e1a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e1aa:	2b20      	cmp	r3, #32
 800e1ac:	bfc1      	itttt	gt
 800e1ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e1b2:	409f      	lslgt	r7, r3
 800e1b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e1b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e1bc:	bfd6      	itet	le
 800e1be:	f1c3 0320 	rsble	r3, r3, #32
 800e1c2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e1c6:	fa04 f003 	lslle.w	r0, r4, r3
 800e1ca:	f7f2 f9ab 	bl	8000524 <__aeabi_ui2d>
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1d4:	3e01      	subs	r6, #1
 800e1d6:	9212      	str	r2, [sp, #72]	@ 0x48
 800e1d8:	e776      	b.n	800e0c8 <_dtoa_r+0x100>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e7b7      	b.n	800e14e <_dtoa_r+0x186>
 800e1de:	9010      	str	r0, [sp, #64]	@ 0x40
 800e1e0:	e7b6      	b.n	800e150 <_dtoa_r+0x188>
 800e1e2:	9b00      	ldr	r3, [sp, #0]
 800e1e4:	1bdb      	subs	r3, r3, r7
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	427b      	negs	r3, r7
 800e1ea:	9308      	str	r3, [sp, #32]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800e1f0:	e7c3      	b.n	800e17a <_dtoa_r+0x1b2>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1f8:	eb07 0b03 	add.w	fp, r7, r3
 800e1fc:	f10b 0301 	add.w	r3, fp, #1
 800e200:	2b01      	cmp	r3, #1
 800e202:	9303      	str	r3, [sp, #12]
 800e204:	bfb8      	it	lt
 800e206:	2301      	movlt	r3, #1
 800e208:	e006      	b.n	800e218 <_dtoa_r+0x250>
 800e20a:	2301      	movs	r3, #1
 800e20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e20e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e210:	2b00      	cmp	r3, #0
 800e212:	dd28      	ble.n	800e266 <_dtoa_r+0x29e>
 800e214:	469b      	mov	fp, r3
 800e216:	9303      	str	r3, [sp, #12]
 800e218:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e21c:	2100      	movs	r1, #0
 800e21e:	2204      	movs	r2, #4
 800e220:	f102 0514 	add.w	r5, r2, #20
 800e224:	429d      	cmp	r5, r3
 800e226:	d926      	bls.n	800e276 <_dtoa_r+0x2ae>
 800e228:	6041      	str	r1, [r0, #4]
 800e22a:	4648      	mov	r0, r9
 800e22c:	f001 f832 	bl	800f294 <_Balloc>
 800e230:	4682      	mov	sl, r0
 800e232:	2800      	cmp	r0, #0
 800e234:	d142      	bne.n	800e2bc <_dtoa_r+0x2f4>
 800e236:	4b1e      	ldr	r3, [pc, #120]	@ (800e2b0 <_dtoa_r+0x2e8>)
 800e238:	4602      	mov	r2, r0
 800e23a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e23e:	e6da      	b.n	800dff6 <_dtoa_r+0x2e>
 800e240:	2300      	movs	r3, #0
 800e242:	e7e3      	b.n	800e20c <_dtoa_r+0x244>
 800e244:	2300      	movs	r3, #0
 800e246:	e7d5      	b.n	800e1f4 <_dtoa_r+0x22c>
 800e248:	2401      	movs	r4, #1
 800e24a:	2300      	movs	r3, #0
 800e24c:	9307      	str	r3, [sp, #28]
 800e24e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e250:	f04f 3bff 	mov.w	fp, #4294967295
 800e254:	2200      	movs	r2, #0
 800e256:	f8cd b00c 	str.w	fp, [sp, #12]
 800e25a:	2312      	movs	r3, #18
 800e25c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e25e:	e7db      	b.n	800e218 <_dtoa_r+0x250>
 800e260:	2301      	movs	r3, #1
 800e262:	9309      	str	r3, [sp, #36]	@ 0x24
 800e264:	e7f4      	b.n	800e250 <_dtoa_r+0x288>
 800e266:	f04f 0b01 	mov.w	fp, #1
 800e26a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e26e:	465b      	mov	r3, fp
 800e270:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e274:	e7d0      	b.n	800e218 <_dtoa_r+0x250>
 800e276:	3101      	adds	r1, #1
 800e278:	0052      	lsls	r2, r2, #1
 800e27a:	e7d1      	b.n	800e220 <_dtoa_r+0x258>
 800e27c:	f3af 8000 	nop.w
 800e280:	636f4361 	.word	0x636f4361
 800e284:	3fd287a7 	.word	0x3fd287a7
 800e288:	8b60c8b3 	.word	0x8b60c8b3
 800e28c:	3fc68a28 	.word	0x3fc68a28
 800e290:	509f79fb 	.word	0x509f79fb
 800e294:	3fd34413 	.word	0x3fd34413
 800e298:	0801042a 	.word	0x0801042a
 800e29c:	080104ec 	.word	0x080104ec
 800e2a0:	7ff00000 	.word	0x7ff00000
 800e2a4:	08010407 	.word	0x08010407
 800e2a8:	3ff80000 	.word	0x3ff80000
 800e2ac:	080107a8 	.word	0x080107a8
 800e2b0:	08010544 	.word	0x08010544
 800e2b4:	080104e8 	.word	0x080104e8
 800e2b8:	08010406 	.word	0x08010406
 800e2bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2c0:	6018      	str	r0, [r3, #0]
 800e2c2:	9b03      	ldr	r3, [sp, #12]
 800e2c4:	2b0e      	cmp	r3, #14
 800e2c6:	f200 80a1 	bhi.w	800e40c <_dtoa_r+0x444>
 800e2ca:	2c00      	cmp	r4, #0
 800e2cc:	f000 809e 	beq.w	800e40c <_dtoa_r+0x444>
 800e2d0:	2f00      	cmp	r7, #0
 800e2d2:	dd33      	ble.n	800e33c <_dtoa_r+0x374>
 800e2d4:	4b9c      	ldr	r3, [pc, #624]	@ (800e548 <_dtoa_r+0x580>)
 800e2d6:	f007 020f 	and.w	r2, r7, #15
 800e2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2de:	ed93 7b00 	vldr	d7, [r3]
 800e2e2:	05f8      	lsls	r0, r7, #23
 800e2e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e2e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e2ec:	d516      	bpl.n	800e31c <_dtoa_r+0x354>
 800e2ee:	4b97      	ldr	r3, [pc, #604]	@ (800e54c <_dtoa_r+0x584>)
 800e2f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e2f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2f8:	f7f2 fab8 	bl	800086c <__aeabi_ddiv>
 800e2fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e300:	f004 040f 	and.w	r4, r4, #15
 800e304:	2603      	movs	r6, #3
 800e306:	4d91      	ldr	r5, [pc, #580]	@ (800e54c <_dtoa_r+0x584>)
 800e308:	b954      	cbnz	r4, 800e320 <_dtoa_r+0x358>
 800e30a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e30e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e312:	f7f2 faab 	bl	800086c <__aeabi_ddiv>
 800e316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e31a:	e028      	b.n	800e36e <_dtoa_r+0x3a6>
 800e31c:	2602      	movs	r6, #2
 800e31e:	e7f2      	b.n	800e306 <_dtoa_r+0x33e>
 800e320:	07e1      	lsls	r1, r4, #31
 800e322:	d508      	bpl.n	800e336 <_dtoa_r+0x36e>
 800e324:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e32c:	f7f2 f974 	bl	8000618 <__aeabi_dmul>
 800e330:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e334:	3601      	adds	r6, #1
 800e336:	1064      	asrs	r4, r4, #1
 800e338:	3508      	adds	r5, #8
 800e33a:	e7e5      	b.n	800e308 <_dtoa_r+0x340>
 800e33c:	f000 80af 	beq.w	800e49e <_dtoa_r+0x4d6>
 800e340:	427c      	negs	r4, r7
 800e342:	4b81      	ldr	r3, [pc, #516]	@ (800e548 <_dtoa_r+0x580>)
 800e344:	4d81      	ldr	r5, [pc, #516]	@ (800e54c <_dtoa_r+0x584>)
 800e346:	f004 020f 	and.w	r2, r4, #15
 800e34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e356:	f7f2 f95f 	bl	8000618 <__aeabi_dmul>
 800e35a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e35e:	1124      	asrs	r4, r4, #4
 800e360:	2300      	movs	r3, #0
 800e362:	2602      	movs	r6, #2
 800e364:	2c00      	cmp	r4, #0
 800e366:	f040 808f 	bne.w	800e488 <_dtoa_r+0x4c0>
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1d3      	bne.n	800e316 <_dtoa_r+0x34e>
 800e36e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e370:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 8094 	beq.w	800e4a2 <_dtoa_r+0x4da>
 800e37a:	4b75      	ldr	r3, [pc, #468]	@ (800e550 <_dtoa_r+0x588>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	4620      	mov	r0, r4
 800e380:	4629      	mov	r1, r5
 800e382:	f7f2 fbbb 	bl	8000afc <__aeabi_dcmplt>
 800e386:	2800      	cmp	r0, #0
 800e388:	f000 808b 	beq.w	800e4a2 <_dtoa_r+0x4da>
 800e38c:	9b03      	ldr	r3, [sp, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 8087 	beq.w	800e4a2 <_dtoa_r+0x4da>
 800e394:	f1bb 0f00 	cmp.w	fp, #0
 800e398:	dd34      	ble.n	800e404 <_dtoa_r+0x43c>
 800e39a:	4620      	mov	r0, r4
 800e39c:	4b6d      	ldr	r3, [pc, #436]	@ (800e554 <_dtoa_r+0x58c>)
 800e39e:	2200      	movs	r2, #0
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	f7f2 f939 	bl	8000618 <__aeabi_dmul>
 800e3a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3aa:	f107 38ff 	add.w	r8, r7, #4294967295
 800e3ae:	3601      	adds	r6, #1
 800e3b0:	465c      	mov	r4, fp
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7f2 f8c6 	bl	8000544 <__aeabi_i2d>
 800e3b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3bc:	f7f2 f92c 	bl	8000618 <__aeabi_dmul>
 800e3c0:	4b65      	ldr	r3, [pc, #404]	@ (800e558 <_dtoa_r+0x590>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f7f1 ff72 	bl	80002ac <__adddf3>
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3ce:	2c00      	cmp	r4, #0
 800e3d0:	d16a      	bne.n	800e4a8 <_dtoa_r+0x4e0>
 800e3d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3d6:	4b61      	ldr	r3, [pc, #388]	@ (800e55c <_dtoa_r+0x594>)
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f7f1 ff65 	bl	80002a8 <__aeabi_dsub>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3e6:	462a      	mov	r2, r5
 800e3e8:	4633      	mov	r3, r6
 800e3ea:	f7f2 fba5 	bl	8000b38 <__aeabi_dcmpgt>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	f040 8298 	bne.w	800e924 <_dtoa_r+0x95c>
 800e3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3f8:	462a      	mov	r2, r5
 800e3fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e3fe:	f7f2 fb7d 	bl	8000afc <__aeabi_dcmplt>
 800e402:	bb38      	cbnz	r0, 800e454 <_dtoa_r+0x48c>
 800e404:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e408:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e40c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f2c0 8157 	blt.w	800e6c2 <_dtoa_r+0x6fa>
 800e414:	2f0e      	cmp	r7, #14
 800e416:	f300 8154 	bgt.w	800e6c2 <_dtoa_r+0x6fa>
 800e41a:	4b4b      	ldr	r3, [pc, #300]	@ (800e548 <_dtoa_r+0x580>)
 800e41c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e420:	ed93 7b00 	vldr	d7, [r3]
 800e424:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e426:	2b00      	cmp	r3, #0
 800e428:	ed8d 7b00 	vstr	d7, [sp]
 800e42c:	f280 80e5 	bge.w	800e5fa <_dtoa_r+0x632>
 800e430:	9b03      	ldr	r3, [sp, #12]
 800e432:	2b00      	cmp	r3, #0
 800e434:	f300 80e1 	bgt.w	800e5fa <_dtoa_r+0x632>
 800e438:	d10c      	bne.n	800e454 <_dtoa_r+0x48c>
 800e43a:	4b48      	ldr	r3, [pc, #288]	@ (800e55c <_dtoa_r+0x594>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	ec51 0b17 	vmov	r0, r1, d7
 800e442:	f7f2 f8e9 	bl	8000618 <__aeabi_dmul>
 800e446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e44a:	f7f2 fb6b 	bl	8000b24 <__aeabi_dcmpge>
 800e44e:	2800      	cmp	r0, #0
 800e450:	f000 8266 	beq.w	800e920 <_dtoa_r+0x958>
 800e454:	2400      	movs	r4, #0
 800e456:	4625      	mov	r5, r4
 800e458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e45a:	4656      	mov	r6, sl
 800e45c:	ea6f 0803 	mvn.w	r8, r3
 800e460:	2700      	movs	r7, #0
 800e462:	4621      	mov	r1, r4
 800e464:	4648      	mov	r0, r9
 800e466:	f000 ff55 	bl	800f314 <_Bfree>
 800e46a:	2d00      	cmp	r5, #0
 800e46c:	f000 80bd 	beq.w	800e5ea <_dtoa_r+0x622>
 800e470:	b12f      	cbz	r7, 800e47e <_dtoa_r+0x4b6>
 800e472:	42af      	cmp	r7, r5
 800e474:	d003      	beq.n	800e47e <_dtoa_r+0x4b6>
 800e476:	4639      	mov	r1, r7
 800e478:	4648      	mov	r0, r9
 800e47a:	f000 ff4b 	bl	800f314 <_Bfree>
 800e47e:	4629      	mov	r1, r5
 800e480:	4648      	mov	r0, r9
 800e482:	f000 ff47 	bl	800f314 <_Bfree>
 800e486:	e0b0      	b.n	800e5ea <_dtoa_r+0x622>
 800e488:	07e2      	lsls	r2, r4, #31
 800e48a:	d505      	bpl.n	800e498 <_dtoa_r+0x4d0>
 800e48c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e490:	f7f2 f8c2 	bl	8000618 <__aeabi_dmul>
 800e494:	3601      	adds	r6, #1
 800e496:	2301      	movs	r3, #1
 800e498:	1064      	asrs	r4, r4, #1
 800e49a:	3508      	adds	r5, #8
 800e49c:	e762      	b.n	800e364 <_dtoa_r+0x39c>
 800e49e:	2602      	movs	r6, #2
 800e4a0:	e765      	b.n	800e36e <_dtoa_r+0x3a6>
 800e4a2:	9c03      	ldr	r4, [sp, #12]
 800e4a4:	46b8      	mov	r8, r7
 800e4a6:	e784      	b.n	800e3b2 <_dtoa_r+0x3ea>
 800e4a8:	4b27      	ldr	r3, [pc, #156]	@ (800e548 <_dtoa_r+0x580>)
 800e4aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4b4:	4454      	add	r4, sl
 800e4b6:	2900      	cmp	r1, #0
 800e4b8:	d054      	beq.n	800e564 <_dtoa_r+0x59c>
 800e4ba:	4929      	ldr	r1, [pc, #164]	@ (800e560 <_dtoa_r+0x598>)
 800e4bc:	2000      	movs	r0, #0
 800e4be:	f7f2 f9d5 	bl	800086c <__aeabi_ddiv>
 800e4c2:	4633      	mov	r3, r6
 800e4c4:	462a      	mov	r2, r5
 800e4c6:	f7f1 feef 	bl	80002a8 <__aeabi_dsub>
 800e4ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e4ce:	4656      	mov	r6, sl
 800e4d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4d4:	f7f2 fb50 	bl	8000b78 <__aeabi_d2iz>
 800e4d8:	4605      	mov	r5, r0
 800e4da:	f7f2 f833 	bl	8000544 <__aeabi_i2d>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4e6:	f7f1 fedf 	bl	80002a8 <__aeabi_dsub>
 800e4ea:	3530      	adds	r5, #48	@ 0x30
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4f4:	f806 5b01 	strb.w	r5, [r6], #1
 800e4f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e4fc:	f7f2 fafe 	bl	8000afc <__aeabi_dcmplt>
 800e500:	2800      	cmp	r0, #0
 800e502:	d172      	bne.n	800e5ea <_dtoa_r+0x622>
 800e504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e508:	4911      	ldr	r1, [pc, #68]	@ (800e550 <_dtoa_r+0x588>)
 800e50a:	2000      	movs	r0, #0
 800e50c:	f7f1 fecc 	bl	80002a8 <__aeabi_dsub>
 800e510:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e514:	f7f2 faf2 	bl	8000afc <__aeabi_dcmplt>
 800e518:	2800      	cmp	r0, #0
 800e51a:	f040 80b4 	bne.w	800e686 <_dtoa_r+0x6be>
 800e51e:	42a6      	cmp	r6, r4
 800e520:	f43f af70 	beq.w	800e404 <_dtoa_r+0x43c>
 800e524:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e528:	4b0a      	ldr	r3, [pc, #40]	@ (800e554 <_dtoa_r+0x58c>)
 800e52a:	2200      	movs	r2, #0
 800e52c:	f7f2 f874 	bl	8000618 <__aeabi_dmul>
 800e530:	4b08      	ldr	r3, [pc, #32]	@ (800e554 <_dtoa_r+0x58c>)
 800e532:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e536:	2200      	movs	r2, #0
 800e538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e53c:	f7f2 f86c 	bl	8000618 <__aeabi_dmul>
 800e540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e544:	e7c4      	b.n	800e4d0 <_dtoa_r+0x508>
 800e546:	bf00      	nop
 800e548:	080107a8 	.word	0x080107a8
 800e54c:	08010780 	.word	0x08010780
 800e550:	3ff00000 	.word	0x3ff00000
 800e554:	40240000 	.word	0x40240000
 800e558:	401c0000 	.word	0x401c0000
 800e55c:	40140000 	.word	0x40140000
 800e560:	3fe00000 	.word	0x3fe00000
 800e564:	4631      	mov	r1, r6
 800e566:	4628      	mov	r0, r5
 800e568:	f7f2 f856 	bl	8000618 <__aeabi_dmul>
 800e56c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e570:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e572:	4656      	mov	r6, sl
 800e574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e578:	f7f2 fafe 	bl	8000b78 <__aeabi_d2iz>
 800e57c:	4605      	mov	r5, r0
 800e57e:	f7f1 ffe1 	bl	8000544 <__aeabi_i2d>
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e58a:	f7f1 fe8d 	bl	80002a8 <__aeabi_dsub>
 800e58e:	3530      	adds	r5, #48	@ 0x30
 800e590:	f806 5b01 	strb.w	r5, [r6], #1
 800e594:	4602      	mov	r2, r0
 800e596:	460b      	mov	r3, r1
 800e598:	42a6      	cmp	r6, r4
 800e59a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e59e:	f04f 0200 	mov.w	r2, #0
 800e5a2:	d124      	bne.n	800e5ee <_dtoa_r+0x626>
 800e5a4:	4baf      	ldr	r3, [pc, #700]	@ (800e864 <_dtoa_r+0x89c>)
 800e5a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e5aa:	f7f1 fe7f 	bl	80002ac <__adddf3>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5b6:	f7f2 fabf 	bl	8000b38 <__aeabi_dcmpgt>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d163      	bne.n	800e686 <_dtoa_r+0x6be>
 800e5be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e5c2:	49a8      	ldr	r1, [pc, #672]	@ (800e864 <_dtoa_r+0x89c>)
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	f7f1 fe6f 	bl	80002a8 <__aeabi_dsub>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5d2:	f7f2 fa93 	bl	8000afc <__aeabi_dcmplt>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	f43f af14 	beq.w	800e404 <_dtoa_r+0x43c>
 800e5dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e5de:	1e73      	subs	r3, r6, #1
 800e5e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e5e6:	2b30      	cmp	r3, #48	@ 0x30
 800e5e8:	d0f8      	beq.n	800e5dc <_dtoa_r+0x614>
 800e5ea:	4647      	mov	r7, r8
 800e5ec:	e03b      	b.n	800e666 <_dtoa_r+0x69e>
 800e5ee:	4b9e      	ldr	r3, [pc, #632]	@ (800e868 <_dtoa_r+0x8a0>)
 800e5f0:	f7f2 f812 	bl	8000618 <__aeabi_dmul>
 800e5f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5f8:	e7bc      	b.n	800e574 <_dtoa_r+0x5ac>
 800e5fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e5fe:	4656      	mov	r6, sl
 800e600:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e604:	4620      	mov	r0, r4
 800e606:	4629      	mov	r1, r5
 800e608:	f7f2 f930 	bl	800086c <__aeabi_ddiv>
 800e60c:	f7f2 fab4 	bl	8000b78 <__aeabi_d2iz>
 800e610:	4680      	mov	r8, r0
 800e612:	f7f1 ff97 	bl	8000544 <__aeabi_i2d>
 800e616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e61a:	f7f1 fffd 	bl	8000618 <__aeabi_dmul>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	4620      	mov	r0, r4
 800e624:	4629      	mov	r1, r5
 800e626:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e62a:	f7f1 fe3d 	bl	80002a8 <__aeabi_dsub>
 800e62e:	f806 4b01 	strb.w	r4, [r6], #1
 800e632:	9d03      	ldr	r5, [sp, #12]
 800e634:	eba6 040a 	sub.w	r4, r6, sl
 800e638:	42a5      	cmp	r5, r4
 800e63a:	4602      	mov	r2, r0
 800e63c:	460b      	mov	r3, r1
 800e63e:	d133      	bne.n	800e6a8 <_dtoa_r+0x6e0>
 800e640:	f7f1 fe34 	bl	80002ac <__adddf3>
 800e644:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e648:	4604      	mov	r4, r0
 800e64a:	460d      	mov	r5, r1
 800e64c:	f7f2 fa74 	bl	8000b38 <__aeabi_dcmpgt>
 800e650:	b9c0      	cbnz	r0, 800e684 <_dtoa_r+0x6bc>
 800e652:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e656:	4620      	mov	r0, r4
 800e658:	4629      	mov	r1, r5
 800e65a:	f7f2 fa45 	bl	8000ae8 <__aeabi_dcmpeq>
 800e65e:	b110      	cbz	r0, 800e666 <_dtoa_r+0x69e>
 800e660:	f018 0f01 	tst.w	r8, #1
 800e664:	d10e      	bne.n	800e684 <_dtoa_r+0x6bc>
 800e666:	9902      	ldr	r1, [sp, #8]
 800e668:	4648      	mov	r0, r9
 800e66a:	f000 fe53 	bl	800f314 <_Bfree>
 800e66e:	2300      	movs	r3, #0
 800e670:	7033      	strb	r3, [r6, #0]
 800e672:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e674:	3701      	adds	r7, #1
 800e676:	601f      	str	r7, [r3, #0]
 800e678:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 824b 	beq.w	800eb16 <_dtoa_r+0xb4e>
 800e680:	601e      	str	r6, [r3, #0]
 800e682:	e248      	b.n	800eb16 <_dtoa_r+0xb4e>
 800e684:	46b8      	mov	r8, r7
 800e686:	4633      	mov	r3, r6
 800e688:	461e      	mov	r6, r3
 800e68a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e68e:	2a39      	cmp	r2, #57	@ 0x39
 800e690:	d106      	bne.n	800e6a0 <_dtoa_r+0x6d8>
 800e692:	459a      	cmp	sl, r3
 800e694:	d1f8      	bne.n	800e688 <_dtoa_r+0x6c0>
 800e696:	2230      	movs	r2, #48	@ 0x30
 800e698:	f108 0801 	add.w	r8, r8, #1
 800e69c:	f88a 2000 	strb.w	r2, [sl]
 800e6a0:	781a      	ldrb	r2, [r3, #0]
 800e6a2:	3201      	adds	r2, #1
 800e6a4:	701a      	strb	r2, [r3, #0]
 800e6a6:	e7a0      	b.n	800e5ea <_dtoa_r+0x622>
 800e6a8:	4b6f      	ldr	r3, [pc, #444]	@ (800e868 <_dtoa_r+0x8a0>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f7f1 ffb4 	bl	8000618 <__aeabi_dmul>
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	4604      	mov	r4, r0
 800e6b6:	460d      	mov	r5, r1
 800e6b8:	f7f2 fa16 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d09f      	beq.n	800e600 <_dtoa_r+0x638>
 800e6c0:	e7d1      	b.n	800e666 <_dtoa_r+0x69e>
 800e6c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	f000 80ea 	beq.w	800e89e <_dtoa_r+0x8d6>
 800e6ca:	9a07      	ldr	r2, [sp, #28]
 800e6cc:	2a01      	cmp	r2, #1
 800e6ce:	f300 80cd 	bgt.w	800e86c <_dtoa_r+0x8a4>
 800e6d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e6d4:	2a00      	cmp	r2, #0
 800e6d6:	f000 80c1 	beq.w	800e85c <_dtoa_r+0x894>
 800e6da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e6de:	9c08      	ldr	r4, [sp, #32]
 800e6e0:	9e00      	ldr	r6, [sp, #0]
 800e6e2:	9a00      	ldr	r2, [sp, #0]
 800e6e4:	441a      	add	r2, r3
 800e6e6:	9200      	str	r2, [sp, #0]
 800e6e8:	9a06      	ldr	r2, [sp, #24]
 800e6ea:	2101      	movs	r1, #1
 800e6ec:	441a      	add	r2, r3
 800e6ee:	4648      	mov	r0, r9
 800e6f0:	9206      	str	r2, [sp, #24]
 800e6f2:	f000 ff0d 	bl	800f510 <__i2b>
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	b166      	cbz	r6, 800e714 <_dtoa_r+0x74c>
 800e6fa:	9b06      	ldr	r3, [sp, #24]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dd09      	ble.n	800e714 <_dtoa_r+0x74c>
 800e700:	42b3      	cmp	r3, r6
 800e702:	9a00      	ldr	r2, [sp, #0]
 800e704:	bfa8      	it	ge
 800e706:	4633      	movge	r3, r6
 800e708:	1ad2      	subs	r2, r2, r3
 800e70a:	9200      	str	r2, [sp, #0]
 800e70c:	9a06      	ldr	r2, [sp, #24]
 800e70e:	1af6      	subs	r6, r6, r3
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	9306      	str	r3, [sp, #24]
 800e714:	9b08      	ldr	r3, [sp, #32]
 800e716:	b30b      	cbz	r3, 800e75c <_dtoa_r+0x794>
 800e718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 80c6 	beq.w	800e8ac <_dtoa_r+0x8e4>
 800e720:	2c00      	cmp	r4, #0
 800e722:	f000 80c0 	beq.w	800e8a6 <_dtoa_r+0x8de>
 800e726:	4629      	mov	r1, r5
 800e728:	4622      	mov	r2, r4
 800e72a:	4648      	mov	r0, r9
 800e72c:	f000 ffa8 	bl	800f680 <__pow5mult>
 800e730:	9a02      	ldr	r2, [sp, #8]
 800e732:	4601      	mov	r1, r0
 800e734:	4605      	mov	r5, r0
 800e736:	4648      	mov	r0, r9
 800e738:	f000 ff00 	bl	800f53c <__multiply>
 800e73c:	9902      	ldr	r1, [sp, #8]
 800e73e:	4680      	mov	r8, r0
 800e740:	4648      	mov	r0, r9
 800e742:	f000 fde7 	bl	800f314 <_Bfree>
 800e746:	9b08      	ldr	r3, [sp, #32]
 800e748:	1b1b      	subs	r3, r3, r4
 800e74a:	9308      	str	r3, [sp, #32]
 800e74c:	f000 80b1 	beq.w	800e8b2 <_dtoa_r+0x8ea>
 800e750:	9a08      	ldr	r2, [sp, #32]
 800e752:	4641      	mov	r1, r8
 800e754:	4648      	mov	r0, r9
 800e756:	f000 ff93 	bl	800f680 <__pow5mult>
 800e75a:	9002      	str	r0, [sp, #8]
 800e75c:	2101      	movs	r1, #1
 800e75e:	4648      	mov	r0, r9
 800e760:	f000 fed6 	bl	800f510 <__i2b>
 800e764:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e766:	4604      	mov	r4, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f000 81d8 	beq.w	800eb1e <_dtoa_r+0xb56>
 800e76e:	461a      	mov	r2, r3
 800e770:	4601      	mov	r1, r0
 800e772:	4648      	mov	r0, r9
 800e774:	f000 ff84 	bl	800f680 <__pow5mult>
 800e778:	9b07      	ldr	r3, [sp, #28]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	4604      	mov	r4, r0
 800e77e:	f300 809f 	bgt.w	800e8c0 <_dtoa_r+0x8f8>
 800e782:	9b04      	ldr	r3, [sp, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	f040 8097 	bne.w	800e8b8 <_dtoa_r+0x8f0>
 800e78a:	9b05      	ldr	r3, [sp, #20]
 800e78c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e790:	2b00      	cmp	r3, #0
 800e792:	f040 8093 	bne.w	800e8bc <_dtoa_r+0x8f4>
 800e796:	9b05      	ldr	r3, [sp, #20]
 800e798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e79c:	0d1b      	lsrs	r3, r3, #20
 800e79e:	051b      	lsls	r3, r3, #20
 800e7a0:	b133      	cbz	r3, 800e7b0 <_dtoa_r+0x7e8>
 800e7a2:	9b00      	ldr	r3, [sp, #0]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	9b06      	ldr	r3, [sp, #24]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	9306      	str	r3, [sp, #24]
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	9308      	str	r3, [sp, #32]
 800e7b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f000 81b8 	beq.w	800eb2a <_dtoa_r+0xb62>
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7c0:	6918      	ldr	r0, [r3, #16]
 800e7c2:	f000 fe59 	bl	800f478 <__hi0bits>
 800e7c6:	f1c0 0020 	rsb	r0, r0, #32
 800e7ca:	9b06      	ldr	r3, [sp, #24]
 800e7cc:	4418      	add	r0, r3
 800e7ce:	f010 001f 	ands.w	r0, r0, #31
 800e7d2:	f000 8082 	beq.w	800e8da <_dtoa_r+0x912>
 800e7d6:	f1c0 0320 	rsb	r3, r0, #32
 800e7da:	2b04      	cmp	r3, #4
 800e7dc:	dd73      	ble.n	800e8c6 <_dtoa_r+0x8fe>
 800e7de:	9b00      	ldr	r3, [sp, #0]
 800e7e0:	f1c0 001c 	rsb	r0, r0, #28
 800e7e4:	4403      	add	r3, r0
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	9b06      	ldr	r3, [sp, #24]
 800e7ea:	4403      	add	r3, r0
 800e7ec:	4406      	add	r6, r0
 800e7ee:	9306      	str	r3, [sp, #24]
 800e7f0:	9b00      	ldr	r3, [sp, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	dd05      	ble.n	800e802 <_dtoa_r+0x83a>
 800e7f6:	9902      	ldr	r1, [sp, #8]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	4648      	mov	r0, r9
 800e7fc:	f000 ff9a 	bl	800f734 <__lshift>
 800e800:	9002      	str	r0, [sp, #8]
 800e802:	9b06      	ldr	r3, [sp, #24]
 800e804:	2b00      	cmp	r3, #0
 800e806:	dd05      	ble.n	800e814 <_dtoa_r+0x84c>
 800e808:	4621      	mov	r1, r4
 800e80a:	461a      	mov	r2, r3
 800e80c:	4648      	mov	r0, r9
 800e80e:	f000 ff91 	bl	800f734 <__lshift>
 800e812:	4604      	mov	r4, r0
 800e814:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e816:	2b00      	cmp	r3, #0
 800e818:	d061      	beq.n	800e8de <_dtoa_r+0x916>
 800e81a:	9802      	ldr	r0, [sp, #8]
 800e81c:	4621      	mov	r1, r4
 800e81e:	f000 fff5 	bl	800f80c <__mcmp>
 800e822:	2800      	cmp	r0, #0
 800e824:	da5b      	bge.n	800e8de <_dtoa_r+0x916>
 800e826:	2300      	movs	r3, #0
 800e828:	9902      	ldr	r1, [sp, #8]
 800e82a:	220a      	movs	r2, #10
 800e82c:	4648      	mov	r0, r9
 800e82e:	f000 fd93 	bl	800f358 <__multadd>
 800e832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e834:	9002      	str	r0, [sp, #8]
 800e836:	f107 38ff 	add.w	r8, r7, #4294967295
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f000 8177 	beq.w	800eb2e <_dtoa_r+0xb66>
 800e840:	4629      	mov	r1, r5
 800e842:	2300      	movs	r3, #0
 800e844:	220a      	movs	r2, #10
 800e846:	4648      	mov	r0, r9
 800e848:	f000 fd86 	bl	800f358 <__multadd>
 800e84c:	f1bb 0f00 	cmp.w	fp, #0
 800e850:	4605      	mov	r5, r0
 800e852:	dc6f      	bgt.n	800e934 <_dtoa_r+0x96c>
 800e854:	9b07      	ldr	r3, [sp, #28]
 800e856:	2b02      	cmp	r3, #2
 800e858:	dc49      	bgt.n	800e8ee <_dtoa_r+0x926>
 800e85a:	e06b      	b.n	800e934 <_dtoa_r+0x96c>
 800e85c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e85e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e862:	e73c      	b.n	800e6de <_dtoa_r+0x716>
 800e864:	3fe00000 	.word	0x3fe00000
 800e868:	40240000 	.word	0x40240000
 800e86c:	9b03      	ldr	r3, [sp, #12]
 800e86e:	1e5c      	subs	r4, r3, #1
 800e870:	9b08      	ldr	r3, [sp, #32]
 800e872:	42a3      	cmp	r3, r4
 800e874:	db09      	blt.n	800e88a <_dtoa_r+0x8c2>
 800e876:	1b1c      	subs	r4, r3, r4
 800e878:	9b03      	ldr	r3, [sp, #12]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f6bf af30 	bge.w	800e6e0 <_dtoa_r+0x718>
 800e880:	9b00      	ldr	r3, [sp, #0]
 800e882:	9a03      	ldr	r2, [sp, #12]
 800e884:	1a9e      	subs	r6, r3, r2
 800e886:	2300      	movs	r3, #0
 800e888:	e72b      	b.n	800e6e2 <_dtoa_r+0x71a>
 800e88a:	9b08      	ldr	r3, [sp, #32]
 800e88c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e88e:	9408      	str	r4, [sp, #32]
 800e890:	1ae3      	subs	r3, r4, r3
 800e892:	441a      	add	r2, r3
 800e894:	9e00      	ldr	r6, [sp, #0]
 800e896:	9b03      	ldr	r3, [sp, #12]
 800e898:	920d      	str	r2, [sp, #52]	@ 0x34
 800e89a:	2400      	movs	r4, #0
 800e89c:	e721      	b.n	800e6e2 <_dtoa_r+0x71a>
 800e89e:	9c08      	ldr	r4, [sp, #32]
 800e8a0:	9e00      	ldr	r6, [sp, #0]
 800e8a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e8a4:	e728      	b.n	800e6f8 <_dtoa_r+0x730>
 800e8a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e8aa:	e751      	b.n	800e750 <_dtoa_r+0x788>
 800e8ac:	9a08      	ldr	r2, [sp, #32]
 800e8ae:	9902      	ldr	r1, [sp, #8]
 800e8b0:	e750      	b.n	800e754 <_dtoa_r+0x78c>
 800e8b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e8b6:	e751      	b.n	800e75c <_dtoa_r+0x794>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e779      	b.n	800e7b0 <_dtoa_r+0x7e8>
 800e8bc:	9b04      	ldr	r3, [sp, #16]
 800e8be:	e777      	b.n	800e7b0 <_dtoa_r+0x7e8>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	9308      	str	r3, [sp, #32]
 800e8c4:	e779      	b.n	800e7ba <_dtoa_r+0x7f2>
 800e8c6:	d093      	beq.n	800e7f0 <_dtoa_r+0x828>
 800e8c8:	9a00      	ldr	r2, [sp, #0]
 800e8ca:	331c      	adds	r3, #28
 800e8cc:	441a      	add	r2, r3
 800e8ce:	9200      	str	r2, [sp, #0]
 800e8d0:	9a06      	ldr	r2, [sp, #24]
 800e8d2:	441a      	add	r2, r3
 800e8d4:	441e      	add	r6, r3
 800e8d6:	9206      	str	r2, [sp, #24]
 800e8d8:	e78a      	b.n	800e7f0 <_dtoa_r+0x828>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	e7f4      	b.n	800e8c8 <_dtoa_r+0x900>
 800e8de:	9b03      	ldr	r3, [sp, #12]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	46b8      	mov	r8, r7
 800e8e4:	dc20      	bgt.n	800e928 <_dtoa_r+0x960>
 800e8e6:	469b      	mov	fp, r3
 800e8e8:	9b07      	ldr	r3, [sp, #28]
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	dd1e      	ble.n	800e92c <_dtoa_r+0x964>
 800e8ee:	f1bb 0f00 	cmp.w	fp, #0
 800e8f2:	f47f adb1 	bne.w	800e458 <_dtoa_r+0x490>
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	465b      	mov	r3, fp
 800e8fa:	2205      	movs	r2, #5
 800e8fc:	4648      	mov	r0, r9
 800e8fe:	f000 fd2b 	bl	800f358 <__multadd>
 800e902:	4601      	mov	r1, r0
 800e904:	4604      	mov	r4, r0
 800e906:	9802      	ldr	r0, [sp, #8]
 800e908:	f000 ff80 	bl	800f80c <__mcmp>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	f77f ada3 	ble.w	800e458 <_dtoa_r+0x490>
 800e912:	4656      	mov	r6, sl
 800e914:	2331      	movs	r3, #49	@ 0x31
 800e916:	f806 3b01 	strb.w	r3, [r6], #1
 800e91a:	f108 0801 	add.w	r8, r8, #1
 800e91e:	e59f      	b.n	800e460 <_dtoa_r+0x498>
 800e920:	9c03      	ldr	r4, [sp, #12]
 800e922:	46b8      	mov	r8, r7
 800e924:	4625      	mov	r5, r4
 800e926:	e7f4      	b.n	800e912 <_dtoa_r+0x94a>
 800e928:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f000 8101 	beq.w	800eb36 <_dtoa_r+0xb6e>
 800e934:	2e00      	cmp	r6, #0
 800e936:	dd05      	ble.n	800e944 <_dtoa_r+0x97c>
 800e938:	4629      	mov	r1, r5
 800e93a:	4632      	mov	r2, r6
 800e93c:	4648      	mov	r0, r9
 800e93e:	f000 fef9 	bl	800f734 <__lshift>
 800e942:	4605      	mov	r5, r0
 800e944:	9b08      	ldr	r3, [sp, #32]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d05c      	beq.n	800ea04 <_dtoa_r+0xa3c>
 800e94a:	6869      	ldr	r1, [r5, #4]
 800e94c:	4648      	mov	r0, r9
 800e94e:	f000 fca1 	bl	800f294 <_Balloc>
 800e952:	4606      	mov	r6, r0
 800e954:	b928      	cbnz	r0, 800e962 <_dtoa_r+0x99a>
 800e956:	4b82      	ldr	r3, [pc, #520]	@ (800eb60 <_dtoa_r+0xb98>)
 800e958:	4602      	mov	r2, r0
 800e95a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e95e:	f7ff bb4a 	b.w	800dff6 <_dtoa_r+0x2e>
 800e962:	692a      	ldr	r2, [r5, #16]
 800e964:	3202      	adds	r2, #2
 800e966:	0092      	lsls	r2, r2, #2
 800e968:	f105 010c 	add.w	r1, r5, #12
 800e96c:	300c      	adds	r0, #12
 800e96e:	f7ff fa6a 	bl	800de46 <memcpy>
 800e972:	2201      	movs	r2, #1
 800e974:	4631      	mov	r1, r6
 800e976:	4648      	mov	r0, r9
 800e978:	f000 fedc 	bl	800f734 <__lshift>
 800e97c:	f10a 0301 	add.w	r3, sl, #1
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	eb0a 030b 	add.w	r3, sl, fp
 800e986:	9308      	str	r3, [sp, #32]
 800e988:	9b04      	ldr	r3, [sp, #16]
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	462f      	mov	r7, r5
 800e990:	9306      	str	r3, [sp, #24]
 800e992:	4605      	mov	r5, r0
 800e994:	9b00      	ldr	r3, [sp, #0]
 800e996:	9802      	ldr	r0, [sp, #8]
 800e998:	4621      	mov	r1, r4
 800e99a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e99e:	f7ff fa89 	bl	800deb4 <quorem>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	3330      	adds	r3, #48	@ 0x30
 800e9a6:	9003      	str	r0, [sp, #12]
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	9802      	ldr	r0, [sp, #8]
 800e9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ae:	f000 ff2d 	bl	800f80c <__mcmp>
 800e9b2:	462a      	mov	r2, r5
 800e9b4:	9004      	str	r0, [sp, #16]
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	4648      	mov	r0, r9
 800e9ba:	f000 ff43 	bl	800f844 <__mdiff>
 800e9be:	68c2      	ldr	r2, [r0, #12]
 800e9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	bb02      	cbnz	r2, 800ea08 <_dtoa_r+0xa40>
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	9802      	ldr	r0, [sp, #8]
 800e9ca:	f000 ff1f 	bl	800f80c <__mcmp>
 800e9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	4648      	mov	r0, r9
 800e9d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e9d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9da:	f000 fc9b 	bl	800f314 <_Bfree>
 800e9de:	9b07      	ldr	r3, [sp, #28]
 800e9e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e9e2:	9e00      	ldr	r6, [sp, #0]
 800e9e4:	ea42 0103 	orr.w	r1, r2, r3
 800e9e8:	9b06      	ldr	r3, [sp, #24]
 800e9ea:	4319      	orrs	r1, r3
 800e9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ee:	d10d      	bne.n	800ea0c <_dtoa_r+0xa44>
 800e9f0:	2b39      	cmp	r3, #57	@ 0x39
 800e9f2:	d027      	beq.n	800ea44 <_dtoa_r+0xa7c>
 800e9f4:	9a04      	ldr	r2, [sp, #16]
 800e9f6:	2a00      	cmp	r2, #0
 800e9f8:	dd01      	ble.n	800e9fe <_dtoa_r+0xa36>
 800e9fa:	9b03      	ldr	r3, [sp, #12]
 800e9fc:	3331      	adds	r3, #49	@ 0x31
 800e9fe:	f88b 3000 	strb.w	r3, [fp]
 800ea02:	e52e      	b.n	800e462 <_dtoa_r+0x49a>
 800ea04:	4628      	mov	r0, r5
 800ea06:	e7b9      	b.n	800e97c <_dtoa_r+0x9b4>
 800ea08:	2201      	movs	r2, #1
 800ea0a:	e7e2      	b.n	800e9d2 <_dtoa_r+0xa0a>
 800ea0c:	9904      	ldr	r1, [sp, #16]
 800ea0e:	2900      	cmp	r1, #0
 800ea10:	db04      	blt.n	800ea1c <_dtoa_r+0xa54>
 800ea12:	9807      	ldr	r0, [sp, #28]
 800ea14:	4301      	orrs	r1, r0
 800ea16:	9806      	ldr	r0, [sp, #24]
 800ea18:	4301      	orrs	r1, r0
 800ea1a:	d120      	bne.n	800ea5e <_dtoa_r+0xa96>
 800ea1c:	2a00      	cmp	r2, #0
 800ea1e:	ddee      	ble.n	800e9fe <_dtoa_r+0xa36>
 800ea20:	9902      	ldr	r1, [sp, #8]
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	2201      	movs	r2, #1
 800ea26:	4648      	mov	r0, r9
 800ea28:	f000 fe84 	bl	800f734 <__lshift>
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	9002      	str	r0, [sp, #8]
 800ea30:	f000 feec 	bl	800f80c <__mcmp>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	9b00      	ldr	r3, [sp, #0]
 800ea38:	dc02      	bgt.n	800ea40 <_dtoa_r+0xa78>
 800ea3a:	d1e0      	bne.n	800e9fe <_dtoa_r+0xa36>
 800ea3c:	07da      	lsls	r2, r3, #31
 800ea3e:	d5de      	bpl.n	800e9fe <_dtoa_r+0xa36>
 800ea40:	2b39      	cmp	r3, #57	@ 0x39
 800ea42:	d1da      	bne.n	800e9fa <_dtoa_r+0xa32>
 800ea44:	2339      	movs	r3, #57	@ 0x39
 800ea46:	f88b 3000 	strb.w	r3, [fp]
 800ea4a:	4633      	mov	r3, r6
 800ea4c:	461e      	mov	r6, r3
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea54:	2a39      	cmp	r2, #57	@ 0x39
 800ea56:	d04e      	beq.n	800eaf6 <_dtoa_r+0xb2e>
 800ea58:	3201      	adds	r2, #1
 800ea5a:	701a      	strb	r2, [r3, #0]
 800ea5c:	e501      	b.n	800e462 <_dtoa_r+0x49a>
 800ea5e:	2a00      	cmp	r2, #0
 800ea60:	dd03      	ble.n	800ea6a <_dtoa_r+0xaa2>
 800ea62:	2b39      	cmp	r3, #57	@ 0x39
 800ea64:	d0ee      	beq.n	800ea44 <_dtoa_r+0xa7c>
 800ea66:	3301      	adds	r3, #1
 800ea68:	e7c9      	b.n	800e9fe <_dtoa_r+0xa36>
 800ea6a:	9a00      	ldr	r2, [sp, #0]
 800ea6c:	9908      	ldr	r1, [sp, #32]
 800ea6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ea72:	428a      	cmp	r2, r1
 800ea74:	d028      	beq.n	800eac8 <_dtoa_r+0xb00>
 800ea76:	9902      	ldr	r1, [sp, #8]
 800ea78:	2300      	movs	r3, #0
 800ea7a:	220a      	movs	r2, #10
 800ea7c:	4648      	mov	r0, r9
 800ea7e:	f000 fc6b 	bl	800f358 <__multadd>
 800ea82:	42af      	cmp	r7, r5
 800ea84:	9002      	str	r0, [sp, #8]
 800ea86:	f04f 0300 	mov.w	r3, #0
 800ea8a:	f04f 020a 	mov.w	r2, #10
 800ea8e:	4639      	mov	r1, r7
 800ea90:	4648      	mov	r0, r9
 800ea92:	d107      	bne.n	800eaa4 <_dtoa_r+0xadc>
 800ea94:	f000 fc60 	bl	800f358 <__multadd>
 800ea98:	4607      	mov	r7, r0
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	9b00      	ldr	r3, [sp, #0]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	e777      	b.n	800e994 <_dtoa_r+0x9cc>
 800eaa4:	f000 fc58 	bl	800f358 <__multadd>
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	4607      	mov	r7, r0
 800eaac:	2300      	movs	r3, #0
 800eaae:	220a      	movs	r2, #10
 800eab0:	4648      	mov	r0, r9
 800eab2:	f000 fc51 	bl	800f358 <__multadd>
 800eab6:	4605      	mov	r5, r0
 800eab8:	e7f0      	b.n	800ea9c <_dtoa_r+0xad4>
 800eaba:	f1bb 0f00 	cmp.w	fp, #0
 800eabe:	bfcc      	ite	gt
 800eac0:	465e      	movgt	r6, fp
 800eac2:	2601      	movle	r6, #1
 800eac4:	4456      	add	r6, sl
 800eac6:	2700      	movs	r7, #0
 800eac8:	9902      	ldr	r1, [sp, #8]
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	2201      	movs	r2, #1
 800eace:	4648      	mov	r0, r9
 800ead0:	f000 fe30 	bl	800f734 <__lshift>
 800ead4:	4621      	mov	r1, r4
 800ead6:	9002      	str	r0, [sp, #8]
 800ead8:	f000 fe98 	bl	800f80c <__mcmp>
 800eadc:	2800      	cmp	r0, #0
 800eade:	dcb4      	bgt.n	800ea4a <_dtoa_r+0xa82>
 800eae0:	d102      	bne.n	800eae8 <_dtoa_r+0xb20>
 800eae2:	9b00      	ldr	r3, [sp, #0]
 800eae4:	07db      	lsls	r3, r3, #31
 800eae6:	d4b0      	bmi.n	800ea4a <_dtoa_r+0xa82>
 800eae8:	4633      	mov	r3, r6
 800eaea:	461e      	mov	r6, r3
 800eaec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eaf0:	2a30      	cmp	r2, #48	@ 0x30
 800eaf2:	d0fa      	beq.n	800eaea <_dtoa_r+0xb22>
 800eaf4:	e4b5      	b.n	800e462 <_dtoa_r+0x49a>
 800eaf6:	459a      	cmp	sl, r3
 800eaf8:	d1a8      	bne.n	800ea4c <_dtoa_r+0xa84>
 800eafa:	2331      	movs	r3, #49	@ 0x31
 800eafc:	f108 0801 	add.w	r8, r8, #1
 800eb00:	f88a 3000 	strb.w	r3, [sl]
 800eb04:	e4ad      	b.n	800e462 <_dtoa_r+0x49a>
 800eb06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800eb64 <_dtoa_r+0xb9c>
 800eb0c:	b11b      	cbz	r3, 800eb16 <_dtoa_r+0xb4e>
 800eb0e:	f10a 0308 	add.w	r3, sl, #8
 800eb12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eb14:	6013      	str	r3, [r2, #0]
 800eb16:	4650      	mov	r0, sl
 800eb18:	b017      	add	sp, #92	@ 0x5c
 800eb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb1e:	9b07      	ldr	r3, [sp, #28]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	f77f ae2e 	ble.w	800e782 <_dtoa_r+0x7ba>
 800eb26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb28:	9308      	str	r3, [sp, #32]
 800eb2a:	2001      	movs	r0, #1
 800eb2c:	e64d      	b.n	800e7ca <_dtoa_r+0x802>
 800eb2e:	f1bb 0f00 	cmp.w	fp, #0
 800eb32:	f77f aed9 	ble.w	800e8e8 <_dtoa_r+0x920>
 800eb36:	4656      	mov	r6, sl
 800eb38:	9802      	ldr	r0, [sp, #8]
 800eb3a:	4621      	mov	r1, r4
 800eb3c:	f7ff f9ba 	bl	800deb4 <quorem>
 800eb40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800eb44:	f806 3b01 	strb.w	r3, [r6], #1
 800eb48:	eba6 020a 	sub.w	r2, r6, sl
 800eb4c:	4593      	cmp	fp, r2
 800eb4e:	ddb4      	ble.n	800eaba <_dtoa_r+0xaf2>
 800eb50:	9902      	ldr	r1, [sp, #8]
 800eb52:	2300      	movs	r3, #0
 800eb54:	220a      	movs	r2, #10
 800eb56:	4648      	mov	r0, r9
 800eb58:	f000 fbfe 	bl	800f358 <__multadd>
 800eb5c:	9002      	str	r0, [sp, #8]
 800eb5e:	e7eb      	b.n	800eb38 <_dtoa_r+0xb70>
 800eb60:	08010544 	.word	0x08010544
 800eb64:	080104df 	.word	0x080104df

0800eb68 <_free_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	2900      	cmp	r1, #0
 800eb6e:	d041      	beq.n	800ebf4 <_free_r+0x8c>
 800eb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb74:	1f0c      	subs	r4, r1, #4
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	bfb8      	it	lt
 800eb7a:	18e4      	addlt	r4, r4, r3
 800eb7c:	f7fd fc2a 	bl	800c3d4 <__malloc_lock>
 800eb80:	4a1d      	ldr	r2, [pc, #116]	@ (800ebf8 <_free_r+0x90>)
 800eb82:	6813      	ldr	r3, [r2, #0]
 800eb84:	b933      	cbnz	r3, 800eb94 <_free_r+0x2c>
 800eb86:	6063      	str	r3, [r4, #4]
 800eb88:	6014      	str	r4, [r2, #0]
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb90:	f7fd bc26 	b.w	800c3e0 <__malloc_unlock>
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	d908      	bls.n	800ebaa <_free_r+0x42>
 800eb98:	6820      	ldr	r0, [r4, #0]
 800eb9a:	1821      	adds	r1, r4, r0
 800eb9c:	428b      	cmp	r3, r1
 800eb9e:	bf01      	itttt	eq
 800eba0:	6819      	ldreq	r1, [r3, #0]
 800eba2:	685b      	ldreq	r3, [r3, #4]
 800eba4:	1809      	addeq	r1, r1, r0
 800eba6:	6021      	streq	r1, [r4, #0]
 800eba8:	e7ed      	b.n	800eb86 <_free_r+0x1e>
 800ebaa:	461a      	mov	r2, r3
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	b10b      	cbz	r3, 800ebb4 <_free_r+0x4c>
 800ebb0:	42a3      	cmp	r3, r4
 800ebb2:	d9fa      	bls.n	800ebaa <_free_r+0x42>
 800ebb4:	6811      	ldr	r1, [r2, #0]
 800ebb6:	1850      	adds	r0, r2, r1
 800ebb8:	42a0      	cmp	r0, r4
 800ebba:	d10b      	bne.n	800ebd4 <_free_r+0x6c>
 800ebbc:	6820      	ldr	r0, [r4, #0]
 800ebbe:	4401      	add	r1, r0
 800ebc0:	1850      	adds	r0, r2, r1
 800ebc2:	4283      	cmp	r3, r0
 800ebc4:	6011      	str	r1, [r2, #0]
 800ebc6:	d1e0      	bne.n	800eb8a <_free_r+0x22>
 800ebc8:	6818      	ldr	r0, [r3, #0]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	6053      	str	r3, [r2, #4]
 800ebce:	4408      	add	r0, r1
 800ebd0:	6010      	str	r0, [r2, #0]
 800ebd2:	e7da      	b.n	800eb8a <_free_r+0x22>
 800ebd4:	d902      	bls.n	800ebdc <_free_r+0x74>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	602b      	str	r3, [r5, #0]
 800ebda:	e7d6      	b.n	800eb8a <_free_r+0x22>
 800ebdc:	6820      	ldr	r0, [r4, #0]
 800ebde:	1821      	adds	r1, r4, r0
 800ebe0:	428b      	cmp	r3, r1
 800ebe2:	bf04      	itt	eq
 800ebe4:	6819      	ldreq	r1, [r3, #0]
 800ebe6:	685b      	ldreq	r3, [r3, #4]
 800ebe8:	6063      	str	r3, [r4, #4]
 800ebea:	bf04      	itt	eq
 800ebec:	1809      	addeq	r1, r1, r0
 800ebee:	6021      	streq	r1, [r4, #0]
 800ebf0:	6054      	str	r4, [r2, #4]
 800ebf2:	e7ca      	b.n	800eb8a <_free_r+0x22>
 800ebf4:	bd38      	pop	{r3, r4, r5, pc}
 800ebf6:	bf00      	nop
 800ebf8:	200026e4 	.word	0x200026e4

0800ebfc <rshift>:
 800ebfc:	6903      	ldr	r3, [r0, #16]
 800ebfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ec0a:	f100 0414 	add.w	r4, r0, #20
 800ec0e:	dd45      	ble.n	800ec9c <rshift+0xa0>
 800ec10:	f011 011f 	ands.w	r1, r1, #31
 800ec14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ec18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec1c:	d10c      	bne.n	800ec38 <rshift+0x3c>
 800ec1e:	f100 0710 	add.w	r7, r0, #16
 800ec22:	4629      	mov	r1, r5
 800ec24:	42b1      	cmp	r1, r6
 800ec26:	d334      	bcc.n	800ec92 <rshift+0x96>
 800ec28:	1a9b      	subs	r3, r3, r2
 800ec2a:	009b      	lsls	r3, r3, #2
 800ec2c:	1eea      	subs	r2, r5, #3
 800ec2e:	4296      	cmp	r6, r2
 800ec30:	bf38      	it	cc
 800ec32:	2300      	movcc	r3, #0
 800ec34:	4423      	add	r3, r4
 800ec36:	e015      	b.n	800ec64 <rshift+0x68>
 800ec38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ec3c:	f1c1 0820 	rsb	r8, r1, #32
 800ec40:	40cf      	lsrs	r7, r1
 800ec42:	f105 0e04 	add.w	lr, r5, #4
 800ec46:	46a1      	mov	r9, r4
 800ec48:	4576      	cmp	r6, lr
 800ec4a:	46f4      	mov	ip, lr
 800ec4c:	d815      	bhi.n	800ec7a <rshift+0x7e>
 800ec4e:	1a9a      	subs	r2, r3, r2
 800ec50:	0092      	lsls	r2, r2, #2
 800ec52:	3a04      	subs	r2, #4
 800ec54:	3501      	adds	r5, #1
 800ec56:	42ae      	cmp	r6, r5
 800ec58:	bf38      	it	cc
 800ec5a:	2200      	movcc	r2, #0
 800ec5c:	18a3      	adds	r3, r4, r2
 800ec5e:	50a7      	str	r7, [r4, r2]
 800ec60:	b107      	cbz	r7, 800ec64 <rshift+0x68>
 800ec62:	3304      	adds	r3, #4
 800ec64:	1b1a      	subs	r2, r3, r4
 800ec66:	42a3      	cmp	r3, r4
 800ec68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec6c:	bf08      	it	eq
 800ec6e:	2300      	moveq	r3, #0
 800ec70:	6102      	str	r2, [r0, #16]
 800ec72:	bf08      	it	eq
 800ec74:	6143      	streq	r3, [r0, #20]
 800ec76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec7a:	f8dc c000 	ldr.w	ip, [ip]
 800ec7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ec82:	ea4c 0707 	orr.w	r7, ip, r7
 800ec86:	f849 7b04 	str.w	r7, [r9], #4
 800ec8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec8e:	40cf      	lsrs	r7, r1
 800ec90:	e7da      	b.n	800ec48 <rshift+0x4c>
 800ec92:	f851 cb04 	ldr.w	ip, [r1], #4
 800ec96:	f847 cf04 	str.w	ip, [r7, #4]!
 800ec9a:	e7c3      	b.n	800ec24 <rshift+0x28>
 800ec9c:	4623      	mov	r3, r4
 800ec9e:	e7e1      	b.n	800ec64 <rshift+0x68>

0800eca0 <__hexdig_fun>:
 800eca0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eca4:	2b09      	cmp	r3, #9
 800eca6:	d802      	bhi.n	800ecae <__hexdig_fun+0xe>
 800eca8:	3820      	subs	r0, #32
 800ecaa:	b2c0      	uxtb	r0, r0
 800ecac:	4770      	bx	lr
 800ecae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ecb2:	2b05      	cmp	r3, #5
 800ecb4:	d801      	bhi.n	800ecba <__hexdig_fun+0x1a>
 800ecb6:	3847      	subs	r0, #71	@ 0x47
 800ecb8:	e7f7      	b.n	800ecaa <__hexdig_fun+0xa>
 800ecba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ecbe:	2b05      	cmp	r3, #5
 800ecc0:	d801      	bhi.n	800ecc6 <__hexdig_fun+0x26>
 800ecc2:	3827      	subs	r0, #39	@ 0x27
 800ecc4:	e7f1      	b.n	800ecaa <__hexdig_fun+0xa>
 800ecc6:	2000      	movs	r0, #0
 800ecc8:	4770      	bx	lr
	...

0800eccc <__gethex>:
 800eccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd0:	b085      	sub	sp, #20
 800ecd2:	468a      	mov	sl, r1
 800ecd4:	9302      	str	r3, [sp, #8]
 800ecd6:	680b      	ldr	r3, [r1, #0]
 800ecd8:	9001      	str	r0, [sp, #4]
 800ecda:	4690      	mov	r8, r2
 800ecdc:	1c9c      	adds	r4, r3, #2
 800ecde:	46a1      	mov	r9, r4
 800ece0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ece4:	2830      	cmp	r0, #48	@ 0x30
 800ece6:	d0fa      	beq.n	800ecde <__gethex+0x12>
 800ece8:	eba9 0303 	sub.w	r3, r9, r3
 800ecec:	f1a3 0b02 	sub.w	fp, r3, #2
 800ecf0:	f7ff ffd6 	bl	800eca0 <__hexdig_fun>
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d168      	bne.n	800edcc <__gethex+0x100>
 800ecfa:	49a0      	ldr	r1, [pc, #640]	@ (800ef7c <__gethex+0x2b0>)
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	4648      	mov	r0, r9
 800ed00:	f7fe ff98 	bl	800dc34 <strncmp>
 800ed04:	4607      	mov	r7, r0
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d167      	bne.n	800edda <__gethex+0x10e>
 800ed0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ed0e:	4626      	mov	r6, r4
 800ed10:	f7ff ffc6 	bl	800eca0 <__hexdig_fun>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d062      	beq.n	800edde <__gethex+0x112>
 800ed18:	4623      	mov	r3, r4
 800ed1a:	7818      	ldrb	r0, [r3, #0]
 800ed1c:	2830      	cmp	r0, #48	@ 0x30
 800ed1e:	4699      	mov	r9, r3
 800ed20:	f103 0301 	add.w	r3, r3, #1
 800ed24:	d0f9      	beq.n	800ed1a <__gethex+0x4e>
 800ed26:	f7ff ffbb 	bl	800eca0 <__hexdig_fun>
 800ed2a:	fab0 f580 	clz	r5, r0
 800ed2e:	096d      	lsrs	r5, r5, #5
 800ed30:	f04f 0b01 	mov.w	fp, #1
 800ed34:	464a      	mov	r2, r9
 800ed36:	4616      	mov	r6, r2
 800ed38:	3201      	adds	r2, #1
 800ed3a:	7830      	ldrb	r0, [r6, #0]
 800ed3c:	f7ff ffb0 	bl	800eca0 <__hexdig_fun>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d1f8      	bne.n	800ed36 <__gethex+0x6a>
 800ed44:	498d      	ldr	r1, [pc, #564]	@ (800ef7c <__gethex+0x2b0>)
 800ed46:	2201      	movs	r2, #1
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f7fe ff73 	bl	800dc34 <strncmp>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d13f      	bne.n	800edd2 <__gethex+0x106>
 800ed52:	b944      	cbnz	r4, 800ed66 <__gethex+0x9a>
 800ed54:	1c74      	adds	r4, r6, #1
 800ed56:	4622      	mov	r2, r4
 800ed58:	4616      	mov	r6, r2
 800ed5a:	3201      	adds	r2, #1
 800ed5c:	7830      	ldrb	r0, [r6, #0]
 800ed5e:	f7ff ff9f 	bl	800eca0 <__hexdig_fun>
 800ed62:	2800      	cmp	r0, #0
 800ed64:	d1f8      	bne.n	800ed58 <__gethex+0x8c>
 800ed66:	1ba4      	subs	r4, r4, r6
 800ed68:	00a7      	lsls	r7, r4, #2
 800ed6a:	7833      	ldrb	r3, [r6, #0]
 800ed6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ed70:	2b50      	cmp	r3, #80	@ 0x50
 800ed72:	d13e      	bne.n	800edf2 <__gethex+0x126>
 800ed74:	7873      	ldrb	r3, [r6, #1]
 800ed76:	2b2b      	cmp	r3, #43	@ 0x2b
 800ed78:	d033      	beq.n	800ede2 <__gethex+0x116>
 800ed7a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ed7c:	d034      	beq.n	800ede8 <__gethex+0x11c>
 800ed7e:	1c71      	adds	r1, r6, #1
 800ed80:	2400      	movs	r4, #0
 800ed82:	7808      	ldrb	r0, [r1, #0]
 800ed84:	f7ff ff8c 	bl	800eca0 <__hexdig_fun>
 800ed88:	1e43      	subs	r3, r0, #1
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	2b18      	cmp	r3, #24
 800ed8e:	d830      	bhi.n	800edf2 <__gethex+0x126>
 800ed90:	f1a0 0210 	sub.w	r2, r0, #16
 800ed94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed98:	f7ff ff82 	bl	800eca0 <__hexdig_fun>
 800ed9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800eda0:	fa5f fc8c 	uxtb.w	ip, ip
 800eda4:	f1bc 0f18 	cmp.w	ip, #24
 800eda8:	f04f 030a 	mov.w	r3, #10
 800edac:	d91e      	bls.n	800edec <__gethex+0x120>
 800edae:	b104      	cbz	r4, 800edb2 <__gethex+0xe6>
 800edb0:	4252      	negs	r2, r2
 800edb2:	4417      	add	r7, r2
 800edb4:	f8ca 1000 	str.w	r1, [sl]
 800edb8:	b1ed      	cbz	r5, 800edf6 <__gethex+0x12a>
 800edba:	f1bb 0f00 	cmp.w	fp, #0
 800edbe:	bf0c      	ite	eq
 800edc0:	2506      	moveq	r5, #6
 800edc2:	2500      	movne	r5, #0
 800edc4:	4628      	mov	r0, r5
 800edc6:	b005      	add	sp, #20
 800edc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edcc:	2500      	movs	r5, #0
 800edce:	462c      	mov	r4, r5
 800edd0:	e7b0      	b.n	800ed34 <__gethex+0x68>
 800edd2:	2c00      	cmp	r4, #0
 800edd4:	d1c7      	bne.n	800ed66 <__gethex+0x9a>
 800edd6:	4627      	mov	r7, r4
 800edd8:	e7c7      	b.n	800ed6a <__gethex+0x9e>
 800edda:	464e      	mov	r6, r9
 800eddc:	462f      	mov	r7, r5
 800edde:	2501      	movs	r5, #1
 800ede0:	e7c3      	b.n	800ed6a <__gethex+0x9e>
 800ede2:	2400      	movs	r4, #0
 800ede4:	1cb1      	adds	r1, r6, #2
 800ede6:	e7cc      	b.n	800ed82 <__gethex+0xb6>
 800ede8:	2401      	movs	r4, #1
 800edea:	e7fb      	b.n	800ede4 <__gethex+0x118>
 800edec:	fb03 0002 	mla	r0, r3, r2, r0
 800edf0:	e7ce      	b.n	800ed90 <__gethex+0xc4>
 800edf2:	4631      	mov	r1, r6
 800edf4:	e7de      	b.n	800edb4 <__gethex+0xe8>
 800edf6:	eba6 0309 	sub.w	r3, r6, r9
 800edfa:	3b01      	subs	r3, #1
 800edfc:	4629      	mov	r1, r5
 800edfe:	2b07      	cmp	r3, #7
 800ee00:	dc0a      	bgt.n	800ee18 <__gethex+0x14c>
 800ee02:	9801      	ldr	r0, [sp, #4]
 800ee04:	f000 fa46 	bl	800f294 <_Balloc>
 800ee08:	4604      	mov	r4, r0
 800ee0a:	b940      	cbnz	r0, 800ee1e <__gethex+0x152>
 800ee0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ef80 <__gethex+0x2b4>)
 800ee0e:	4602      	mov	r2, r0
 800ee10:	21e4      	movs	r1, #228	@ 0xe4
 800ee12:	485c      	ldr	r0, [pc, #368]	@ (800ef84 <__gethex+0x2b8>)
 800ee14:	f7ff f830 	bl	800de78 <__assert_func>
 800ee18:	3101      	adds	r1, #1
 800ee1a:	105b      	asrs	r3, r3, #1
 800ee1c:	e7ef      	b.n	800edfe <__gethex+0x132>
 800ee1e:	f100 0a14 	add.w	sl, r0, #20
 800ee22:	2300      	movs	r3, #0
 800ee24:	4655      	mov	r5, sl
 800ee26:	469b      	mov	fp, r3
 800ee28:	45b1      	cmp	r9, r6
 800ee2a:	d337      	bcc.n	800ee9c <__gethex+0x1d0>
 800ee2c:	f845 bb04 	str.w	fp, [r5], #4
 800ee30:	eba5 050a 	sub.w	r5, r5, sl
 800ee34:	10ad      	asrs	r5, r5, #2
 800ee36:	6125      	str	r5, [r4, #16]
 800ee38:	4658      	mov	r0, fp
 800ee3a:	f000 fb1d 	bl	800f478 <__hi0bits>
 800ee3e:	016d      	lsls	r5, r5, #5
 800ee40:	f8d8 6000 	ldr.w	r6, [r8]
 800ee44:	1a2d      	subs	r5, r5, r0
 800ee46:	42b5      	cmp	r5, r6
 800ee48:	dd54      	ble.n	800eef4 <__gethex+0x228>
 800ee4a:	1bad      	subs	r5, r5, r6
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	4620      	mov	r0, r4
 800ee50:	f000 fea9 	bl	800fba6 <__any_on>
 800ee54:	4681      	mov	r9, r0
 800ee56:	b178      	cbz	r0, 800ee78 <__gethex+0x1ac>
 800ee58:	1e6b      	subs	r3, r5, #1
 800ee5a:	1159      	asrs	r1, r3, #5
 800ee5c:	f003 021f 	and.w	r2, r3, #31
 800ee60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ee64:	f04f 0901 	mov.w	r9, #1
 800ee68:	fa09 f202 	lsl.w	r2, r9, r2
 800ee6c:	420a      	tst	r2, r1
 800ee6e:	d003      	beq.n	800ee78 <__gethex+0x1ac>
 800ee70:	454b      	cmp	r3, r9
 800ee72:	dc36      	bgt.n	800eee2 <__gethex+0x216>
 800ee74:	f04f 0902 	mov.w	r9, #2
 800ee78:	4629      	mov	r1, r5
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f7ff febe 	bl	800ebfc <rshift>
 800ee80:	442f      	add	r7, r5
 800ee82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee86:	42bb      	cmp	r3, r7
 800ee88:	da42      	bge.n	800ef10 <__gethex+0x244>
 800ee8a:	9801      	ldr	r0, [sp, #4]
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	f000 fa41 	bl	800f314 <_Bfree>
 800ee92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee94:	2300      	movs	r3, #0
 800ee96:	6013      	str	r3, [r2, #0]
 800ee98:	25a3      	movs	r5, #163	@ 0xa3
 800ee9a:	e793      	b.n	800edc4 <__gethex+0xf8>
 800ee9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eea0:	2a2e      	cmp	r2, #46	@ 0x2e
 800eea2:	d012      	beq.n	800eeca <__gethex+0x1fe>
 800eea4:	2b20      	cmp	r3, #32
 800eea6:	d104      	bne.n	800eeb2 <__gethex+0x1e6>
 800eea8:	f845 bb04 	str.w	fp, [r5], #4
 800eeac:	f04f 0b00 	mov.w	fp, #0
 800eeb0:	465b      	mov	r3, fp
 800eeb2:	7830      	ldrb	r0, [r6, #0]
 800eeb4:	9303      	str	r3, [sp, #12]
 800eeb6:	f7ff fef3 	bl	800eca0 <__hexdig_fun>
 800eeba:	9b03      	ldr	r3, [sp, #12]
 800eebc:	f000 000f 	and.w	r0, r0, #15
 800eec0:	4098      	lsls	r0, r3
 800eec2:	ea4b 0b00 	orr.w	fp, fp, r0
 800eec6:	3304      	adds	r3, #4
 800eec8:	e7ae      	b.n	800ee28 <__gethex+0x15c>
 800eeca:	45b1      	cmp	r9, r6
 800eecc:	d8ea      	bhi.n	800eea4 <__gethex+0x1d8>
 800eece:	492b      	ldr	r1, [pc, #172]	@ (800ef7c <__gethex+0x2b0>)
 800eed0:	9303      	str	r3, [sp, #12]
 800eed2:	2201      	movs	r2, #1
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7fe fead 	bl	800dc34 <strncmp>
 800eeda:	9b03      	ldr	r3, [sp, #12]
 800eedc:	2800      	cmp	r0, #0
 800eede:	d1e1      	bne.n	800eea4 <__gethex+0x1d8>
 800eee0:	e7a2      	b.n	800ee28 <__gethex+0x15c>
 800eee2:	1ea9      	subs	r1, r5, #2
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 fe5e 	bl	800fba6 <__any_on>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d0c2      	beq.n	800ee74 <__gethex+0x1a8>
 800eeee:	f04f 0903 	mov.w	r9, #3
 800eef2:	e7c1      	b.n	800ee78 <__gethex+0x1ac>
 800eef4:	da09      	bge.n	800ef0a <__gethex+0x23e>
 800eef6:	1b75      	subs	r5, r6, r5
 800eef8:	4621      	mov	r1, r4
 800eefa:	9801      	ldr	r0, [sp, #4]
 800eefc:	462a      	mov	r2, r5
 800eefe:	f000 fc19 	bl	800f734 <__lshift>
 800ef02:	1b7f      	subs	r7, r7, r5
 800ef04:	4604      	mov	r4, r0
 800ef06:	f100 0a14 	add.w	sl, r0, #20
 800ef0a:	f04f 0900 	mov.w	r9, #0
 800ef0e:	e7b8      	b.n	800ee82 <__gethex+0x1b6>
 800ef10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ef14:	42bd      	cmp	r5, r7
 800ef16:	dd6f      	ble.n	800eff8 <__gethex+0x32c>
 800ef18:	1bed      	subs	r5, r5, r7
 800ef1a:	42ae      	cmp	r6, r5
 800ef1c:	dc34      	bgt.n	800ef88 <__gethex+0x2bc>
 800ef1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	d022      	beq.n	800ef6c <__gethex+0x2a0>
 800ef26:	2b03      	cmp	r3, #3
 800ef28:	d024      	beq.n	800ef74 <__gethex+0x2a8>
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d115      	bne.n	800ef5a <__gethex+0x28e>
 800ef2e:	42ae      	cmp	r6, r5
 800ef30:	d113      	bne.n	800ef5a <__gethex+0x28e>
 800ef32:	2e01      	cmp	r6, #1
 800ef34:	d10b      	bne.n	800ef4e <__gethex+0x282>
 800ef36:	9a02      	ldr	r2, [sp, #8]
 800ef38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	2301      	movs	r3, #1
 800ef40:	6123      	str	r3, [r4, #16]
 800ef42:	f8ca 3000 	str.w	r3, [sl]
 800ef46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef48:	2562      	movs	r5, #98	@ 0x62
 800ef4a:	601c      	str	r4, [r3, #0]
 800ef4c:	e73a      	b.n	800edc4 <__gethex+0xf8>
 800ef4e:	1e71      	subs	r1, r6, #1
 800ef50:	4620      	mov	r0, r4
 800ef52:	f000 fe28 	bl	800fba6 <__any_on>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d1ed      	bne.n	800ef36 <__gethex+0x26a>
 800ef5a:	9801      	ldr	r0, [sp, #4]
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	f000 f9d9 	bl	800f314 <_Bfree>
 800ef62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef64:	2300      	movs	r3, #0
 800ef66:	6013      	str	r3, [r2, #0]
 800ef68:	2550      	movs	r5, #80	@ 0x50
 800ef6a:	e72b      	b.n	800edc4 <__gethex+0xf8>
 800ef6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d1f3      	bne.n	800ef5a <__gethex+0x28e>
 800ef72:	e7e0      	b.n	800ef36 <__gethex+0x26a>
 800ef74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1dd      	bne.n	800ef36 <__gethex+0x26a>
 800ef7a:	e7ee      	b.n	800ef5a <__gethex+0x28e>
 800ef7c:	080103f4 	.word	0x080103f4
 800ef80:	08010544 	.word	0x08010544
 800ef84:	08010555 	.word	0x08010555
 800ef88:	1e6f      	subs	r7, r5, #1
 800ef8a:	f1b9 0f00 	cmp.w	r9, #0
 800ef8e:	d130      	bne.n	800eff2 <__gethex+0x326>
 800ef90:	b127      	cbz	r7, 800ef9c <__gethex+0x2d0>
 800ef92:	4639      	mov	r1, r7
 800ef94:	4620      	mov	r0, r4
 800ef96:	f000 fe06 	bl	800fba6 <__any_on>
 800ef9a:	4681      	mov	r9, r0
 800ef9c:	117a      	asrs	r2, r7, #5
 800ef9e:	2301      	movs	r3, #1
 800efa0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800efa4:	f007 071f 	and.w	r7, r7, #31
 800efa8:	40bb      	lsls	r3, r7
 800efaa:	4213      	tst	r3, r2
 800efac:	4629      	mov	r1, r5
 800efae:	4620      	mov	r0, r4
 800efb0:	bf18      	it	ne
 800efb2:	f049 0902 	orrne.w	r9, r9, #2
 800efb6:	f7ff fe21 	bl	800ebfc <rshift>
 800efba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800efbe:	1b76      	subs	r6, r6, r5
 800efc0:	2502      	movs	r5, #2
 800efc2:	f1b9 0f00 	cmp.w	r9, #0
 800efc6:	d047      	beq.n	800f058 <__gethex+0x38c>
 800efc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efcc:	2b02      	cmp	r3, #2
 800efce:	d015      	beq.n	800effc <__gethex+0x330>
 800efd0:	2b03      	cmp	r3, #3
 800efd2:	d017      	beq.n	800f004 <__gethex+0x338>
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d109      	bne.n	800efec <__gethex+0x320>
 800efd8:	f019 0f02 	tst.w	r9, #2
 800efdc:	d006      	beq.n	800efec <__gethex+0x320>
 800efde:	f8da 3000 	ldr.w	r3, [sl]
 800efe2:	ea49 0903 	orr.w	r9, r9, r3
 800efe6:	f019 0f01 	tst.w	r9, #1
 800efea:	d10e      	bne.n	800f00a <__gethex+0x33e>
 800efec:	f045 0510 	orr.w	r5, r5, #16
 800eff0:	e032      	b.n	800f058 <__gethex+0x38c>
 800eff2:	f04f 0901 	mov.w	r9, #1
 800eff6:	e7d1      	b.n	800ef9c <__gethex+0x2d0>
 800eff8:	2501      	movs	r5, #1
 800effa:	e7e2      	b.n	800efc2 <__gethex+0x2f6>
 800effc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800effe:	f1c3 0301 	rsb	r3, r3, #1
 800f002:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f006:	2b00      	cmp	r3, #0
 800f008:	d0f0      	beq.n	800efec <__gethex+0x320>
 800f00a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f00e:	f104 0314 	add.w	r3, r4, #20
 800f012:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f016:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f01a:	f04f 0c00 	mov.w	ip, #0
 800f01e:	4618      	mov	r0, r3
 800f020:	f853 2b04 	ldr.w	r2, [r3], #4
 800f024:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f028:	d01b      	beq.n	800f062 <__gethex+0x396>
 800f02a:	3201      	adds	r2, #1
 800f02c:	6002      	str	r2, [r0, #0]
 800f02e:	2d02      	cmp	r5, #2
 800f030:	f104 0314 	add.w	r3, r4, #20
 800f034:	d13c      	bne.n	800f0b0 <__gethex+0x3e4>
 800f036:	f8d8 2000 	ldr.w	r2, [r8]
 800f03a:	3a01      	subs	r2, #1
 800f03c:	42b2      	cmp	r2, r6
 800f03e:	d109      	bne.n	800f054 <__gethex+0x388>
 800f040:	1171      	asrs	r1, r6, #5
 800f042:	2201      	movs	r2, #1
 800f044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f048:	f006 061f 	and.w	r6, r6, #31
 800f04c:	fa02 f606 	lsl.w	r6, r2, r6
 800f050:	421e      	tst	r6, r3
 800f052:	d13a      	bne.n	800f0ca <__gethex+0x3fe>
 800f054:	f045 0520 	orr.w	r5, r5, #32
 800f058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f05a:	601c      	str	r4, [r3, #0]
 800f05c:	9b02      	ldr	r3, [sp, #8]
 800f05e:	601f      	str	r7, [r3, #0]
 800f060:	e6b0      	b.n	800edc4 <__gethex+0xf8>
 800f062:	4299      	cmp	r1, r3
 800f064:	f843 cc04 	str.w	ip, [r3, #-4]
 800f068:	d8d9      	bhi.n	800f01e <__gethex+0x352>
 800f06a:	68a3      	ldr	r3, [r4, #8]
 800f06c:	459b      	cmp	fp, r3
 800f06e:	db17      	blt.n	800f0a0 <__gethex+0x3d4>
 800f070:	6861      	ldr	r1, [r4, #4]
 800f072:	9801      	ldr	r0, [sp, #4]
 800f074:	3101      	adds	r1, #1
 800f076:	f000 f90d 	bl	800f294 <_Balloc>
 800f07a:	4681      	mov	r9, r0
 800f07c:	b918      	cbnz	r0, 800f086 <__gethex+0x3ba>
 800f07e:	4b1a      	ldr	r3, [pc, #104]	@ (800f0e8 <__gethex+0x41c>)
 800f080:	4602      	mov	r2, r0
 800f082:	2184      	movs	r1, #132	@ 0x84
 800f084:	e6c5      	b.n	800ee12 <__gethex+0x146>
 800f086:	6922      	ldr	r2, [r4, #16]
 800f088:	3202      	adds	r2, #2
 800f08a:	f104 010c 	add.w	r1, r4, #12
 800f08e:	0092      	lsls	r2, r2, #2
 800f090:	300c      	adds	r0, #12
 800f092:	f7fe fed8 	bl	800de46 <memcpy>
 800f096:	4621      	mov	r1, r4
 800f098:	9801      	ldr	r0, [sp, #4]
 800f09a:	f000 f93b 	bl	800f314 <_Bfree>
 800f09e:	464c      	mov	r4, r9
 800f0a0:	6923      	ldr	r3, [r4, #16]
 800f0a2:	1c5a      	adds	r2, r3, #1
 800f0a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f0a8:	6122      	str	r2, [r4, #16]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	615a      	str	r2, [r3, #20]
 800f0ae:	e7be      	b.n	800f02e <__gethex+0x362>
 800f0b0:	6922      	ldr	r2, [r4, #16]
 800f0b2:	455a      	cmp	r2, fp
 800f0b4:	dd0b      	ble.n	800f0ce <__gethex+0x402>
 800f0b6:	2101      	movs	r1, #1
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f7ff fd9f 	bl	800ebfc <rshift>
 800f0be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0c2:	3701      	adds	r7, #1
 800f0c4:	42bb      	cmp	r3, r7
 800f0c6:	f6ff aee0 	blt.w	800ee8a <__gethex+0x1be>
 800f0ca:	2501      	movs	r5, #1
 800f0cc:	e7c2      	b.n	800f054 <__gethex+0x388>
 800f0ce:	f016 061f 	ands.w	r6, r6, #31
 800f0d2:	d0fa      	beq.n	800f0ca <__gethex+0x3fe>
 800f0d4:	4453      	add	r3, sl
 800f0d6:	f1c6 0620 	rsb	r6, r6, #32
 800f0da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f0de:	f000 f9cb 	bl	800f478 <__hi0bits>
 800f0e2:	42b0      	cmp	r0, r6
 800f0e4:	dbe7      	blt.n	800f0b6 <__gethex+0x3ea>
 800f0e6:	e7f0      	b.n	800f0ca <__gethex+0x3fe>
 800f0e8:	08010544 	.word	0x08010544

0800f0ec <L_shift>:
 800f0ec:	f1c2 0208 	rsb	r2, r2, #8
 800f0f0:	0092      	lsls	r2, r2, #2
 800f0f2:	b570      	push	{r4, r5, r6, lr}
 800f0f4:	f1c2 0620 	rsb	r6, r2, #32
 800f0f8:	6843      	ldr	r3, [r0, #4]
 800f0fa:	6804      	ldr	r4, [r0, #0]
 800f0fc:	fa03 f506 	lsl.w	r5, r3, r6
 800f100:	432c      	orrs	r4, r5
 800f102:	40d3      	lsrs	r3, r2
 800f104:	6004      	str	r4, [r0, #0]
 800f106:	f840 3f04 	str.w	r3, [r0, #4]!
 800f10a:	4288      	cmp	r0, r1
 800f10c:	d3f4      	bcc.n	800f0f8 <L_shift+0xc>
 800f10e:	bd70      	pop	{r4, r5, r6, pc}

0800f110 <__match>:
 800f110:	b530      	push	{r4, r5, lr}
 800f112:	6803      	ldr	r3, [r0, #0]
 800f114:	3301      	adds	r3, #1
 800f116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f11a:	b914      	cbnz	r4, 800f122 <__match+0x12>
 800f11c:	6003      	str	r3, [r0, #0]
 800f11e:	2001      	movs	r0, #1
 800f120:	bd30      	pop	{r4, r5, pc}
 800f122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f126:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f12a:	2d19      	cmp	r5, #25
 800f12c:	bf98      	it	ls
 800f12e:	3220      	addls	r2, #32
 800f130:	42a2      	cmp	r2, r4
 800f132:	d0f0      	beq.n	800f116 <__match+0x6>
 800f134:	2000      	movs	r0, #0
 800f136:	e7f3      	b.n	800f120 <__match+0x10>

0800f138 <__hexnan>:
 800f138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13c:	680b      	ldr	r3, [r1, #0]
 800f13e:	6801      	ldr	r1, [r0, #0]
 800f140:	115e      	asrs	r6, r3, #5
 800f142:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f146:	f013 031f 	ands.w	r3, r3, #31
 800f14a:	b087      	sub	sp, #28
 800f14c:	bf18      	it	ne
 800f14e:	3604      	addne	r6, #4
 800f150:	2500      	movs	r5, #0
 800f152:	1f37      	subs	r7, r6, #4
 800f154:	4682      	mov	sl, r0
 800f156:	4690      	mov	r8, r2
 800f158:	9301      	str	r3, [sp, #4]
 800f15a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f15e:	46b9      	mov	r9, r7
 800f160:	463c      	mov	r4, r7
 800f162:	9502      	str	r5, [sp, #8]
 800f164:	46ab      	mov	fp, r5
 800f166:	784a      	ldrb	r2, [r1, #1]
 800f168:	1c4b      	adds	r3, r1, #1
 800f16a:	9303      	str	r3, [sp, #12]
 800f16c:	b342      	cbz	r2, 800f1c0 <__hexnan+0x88>
 800f16e:	4610      	mov	r0, r2
 800f170:	9105      	str	r1, [sp, #20]
 800f172:	9204      	str	r2, [sp, #16]
 800f174:	f7ff fd94 	bl	800eca0 <__hexdig_fun>
 800f178:	2800      	cmp	r0, #0
 800f17a:	d151      	bne.n	800f220 <__hexnan+0xe8>
 800f17c:	9a04      	ldr	r2, [sp, #16]
 800f17e:	9905      	ldr	r1, [sp, #20]
 800f180:	2a20      	cmp	r2, #32
 800f182:	d818      	bhi.n	800f1b6 <__hexnan+0x7e>
 800f184:	9b02      	ldr	r3, [sp, #8]
 800f186:	459b      	cmp	fp, r3
 800f188:	dd13      	ble.n	800f1b2 <__hexnan+0x7a>
 800f18a:	454c      	cmp	r4, r9
 800f18c:	d206      	bcs.n	800f19c <__hexnan+0x64>
 800f18e:	2d07      	cmp	r5, #7
 800f190:	dc04      	bgt.n	800f19c <__hexnan+0x64>
 800f192:	462a      	mov	r2, r5
 800f194:	4649      	mov	r1, r9
 800f196:	4620      	mov	r0, r4
 800f198:	f7ff ffa8 	bl	800f0ec <L_shift>
 800f19c:	4544      	cmp	r4, r8
 800f19e:	d952      	bls.n	800f246 <__hexnan+0x10e>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	f1a4 0904 	sub.w	r9, r4, #4
 800f1a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1aa:	f8cd b008 	str.w	fp, [sp, #8]
 800f1ae:	464c      	mov	r4, r9
 800f1b0:	461d      	mov	r5, r3
 800f1b2:	9903      	ldr	r1, [sp, #12]
 800f1b4:	e7d7      	b.n	800f166 <__hexnan+0x2e>
 800f1b6:	2a29      	cmp	r2, #41	@ 0x29
 800f1b8:	d157      	bne.n	800f26a <__hexnan+0x132>
 800f1ba:	3102      	adds	r1, #2
 800f1bc:	f8ca 1000 	str.w	r1, [sl]
 800f1c0:	f1bb 0f00 	cmp.w	fp, #0
 800f1c4:	d051      	beq.n	800f26a <__hexnan+0x132>
 800f1c6:	454c      	cmp	r4, r9
 800f1c8:	d206      	bcs.n	800f1d8 <__hexnan+0xa0>
 800f1ca:	2d07      	cmp	r5, #7
 800f1cc:	dc04      	bgt.n	800f1d8 <__hexnan+0xa0>
 800f1ce:	462a      	mov	r2, r5
 800f1d0:	4649      	mov	r1, r9
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f7ff ff8a 	bl	800f0ec <L_shift>
 800f1d8:	4544      	cmp	r4, r8
 800f1da:	d936      	bls.n	800f24a <__hexnan+0x112>
 800f1dc:	f1a8 0204 	sub.w	r2, r8, #4
 800f1e0:	4623      	mov	r3, r4
 800f1e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f1e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f1ea:	429f      	cmp	r7, r3
 800f1ec:	d2f9      	bcs.n	800f1e2 <__hexnan+0xaa>
 800f1ee:	1b3b      	subs	r3, r7, r4
 800f1f0:	f023 0303 	bic.w	r3, r3, #3
 800f1f4:	3304      	adds	r3, #4
 800f1f6:	3401      	adds	r4, #1
 800f1f8:	3e03      	subs	r6, #3
 800f1fa:	42b4      	cmp	r4, r6
 800f1fc:	bf88      	it	hi
 800f1fe:	2304      	movhi	r3, #4
 800f200:	4443      	add	r3, r8
 800f202:	2200      	movs	r2, #0
 800f204:	f843 2b04 	str.w	r2, [r3], #4
 800f208:	429f      	cmp	r7, r3
 800f20a:	d2fb      	bcs.n	800f204 <__hexnan+0xcc>
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	b91b      	cbnz	r3, 800f218 <__hexnan+0xe0>
 800f210:	4547      	cmp	r7, r8
 800f212:	d128      	bne.n	800f266 <__hexnan+0x12e>
 800f214:	2301      	movs	r3, #1
 800f216:	603b      	str	r3, [r7, #0]
 800f218:	2005      	movs	r0, #5
 800f21a:	b007      	add	sp, #28
 800f21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f220:	3501      	adds	r5, #1
 800f222:	2d08      	cmp	r5, #8
 800f224:	f10b 0b01 	add.w	fp, fp, #1
 800f228:	dd06      	ble.n	800f238 <__hexnan+0x100>
 800f22a:	4544      	cmp	r4, r8
 800f22c:	d9c1      	bls.n	800f1b2 <__hexnan+0x7a>
 800f22e:	2300      	movs	r3, #0
 800f230:	f844 3c04 	str.w	r3, [r4, #-4]
 800f234:	2501      	movs	r5, #1
 800f236:	3c04      	subs	r4, #4
 800f238:	6822      	ldr	r2, [r4, #0]
 800f23a:	f000 000f 	and.w	r0, r0, #15
 800f23e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f242:	6020      	str	r0, [r4, #0]
 800f244:	e7b5      	b.n	800f1b2 <__hexnan+0x7a>
 800f246:	2508      	movs	r5, #8
 800f248:	e7b3      	b.n	800f1b2 <__hexnan+0x7a>
 800f24a:	9b01      	ldr	r3, [sp, #4]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d0dd      	beq.n	800f20c <__hexnan+0xd4>
 800f250:	f1c3 0320 	rsb	r3, r3, #32
 800f254:	f04f 32ff 	mov.w	r2, #4294967295
 800f258:	40da      	lsrs	r2, r3
 800f25a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f25e:	4013      	ands	r3, r2
 800f260:	f846 3c04 	str.w	r3, [r6, #-4]
 800f264:	e7d2      	b.n	800f20c <__hexnan+0xd4>
 800f266:	3f04      	subs	r7, #4
 800f268:	e7d0      	b.n	800f20c <__hexnan+0xd4>
 800f26a:	2004      	movs	r0, #4
 800f26c:	e7d5      	b.n	800f21a <__hexnan+0xe2>

0800f26e <__ascii_mbtowc>:
 800f26e:	b082      	sub	sp, #8
 800f270:	b901      	cbnz	r1, 800f274 <__ascii_mbtowc+0x6>
 800f272:	a901      	add	r1, sp, #4
 800f274:	b142      	cbz	r2, 800f288 <__ascii_mbtowc+0x1a>
 800f276:	b14b      	cbz	r3, 800f28c <__ascii_mbtowc+0x1e>
 800f278:	7813      	ldrb	r3, [r2, #0]
 800f27a:	600b      	str	r3, [r1, #0]
 800f27c:	7812      	ldrb	r2, [r2, #0]
 800f27e:	1e10      	subs	r0, r2, #0
 800f280:	bf18      	it	ne
 800f282:	2001      	movne	r0, #1
 800f284:	b002      	add	sp, #8
 800f286:	4770      	bx	lr
 800f288:	4610      	mov	r0, r2
 800f28a:	e7fb      	b.n	800f284 <__ascii_mbtowc+0x16>
 800f28c:	f06f 0001 	mvn.w	r0, #1
 800f290:	e7f8      	b.n	800f284 <__ascii_mbtowc+0x16>
	...

0800f294 <_Balloc>:
 800f294:	b570      	push	{r4, r5, r6, lr}
 800f296:	69c6      	ldr	r6, [r0, #28]
 800f298:	4604      	mov	r4, r0
 800f29a:	460d      	mov	r5, r1
 800f29c:	b976      	cbnz	r6, 800f2bc <_Balloc+0x28>
 800f29e:	2010      	movs	r0, #16
 800f2a0:	f7fc ffee 	bl	800c280 <malloc>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	61e0      	str	r0, [r4, #28]
 800f2a8:	b920      	cbnz	r0, 800f2b4 <_Balloc+0x20>
 800f2aa:	4b18      	ldr	r3, [pc, #96]	@ (800f30c <_Balloc+0x78>)
 800f2ac:	4818      	ldr	r0, [pc, #96]	@ (800f310 <_Balloc+0x7c>)
 800f2ae:	216b      	movs	r1, #107	@ 0x6b
 800f2b0:	f7fe fde2 	bl	800de78 <__assert_func>
 800f2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2b8:	6006      	str	r6, [r0, #0]
 800f2ba:	60c6      	str	r6, [r0, #12]
 800f2bc:	69e6      	ldr	r6, [r4, #28]
 800f2be:	68f3      	ldr	r3, [r6, #12]
 800f2c0:	b183      	cbz	r3, 800f2e4 <_Balloc+0x50>
 800f2c2:	69e3      	ldr	r3, [r4, #28]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2ca:	b9b8      	cbnz	r0, 800f2fc <_Balloc+0x68>
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	fa01 f605 	lsl.w	r6, r1, r5
 800f2d2:	1d72      	adds	r2, r6, #5
 800f2d4:	0092      	lsls	r2, r2, #2
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f000 ff2d 	bl	8010136 <_calloc_r>
 800f2dc:	b160      	cbz	r0, 800f2f8 <_Balloc+0x64>
 800f2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f2e2:	e00e      	b.n	800f302 <_Balloc+0x6e>
 800f2e4:	2221      	movs	r2, #33	@ 0x21
 800f2e6:	2104      	movs	r1, #4
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f000 ff24 	bl	8010136 <_calloc_r>
 800f2ee:	69e3      	ldr	r3, [r4, #28]
 800f2f0:	60f0      	str	r0, [r6, #12]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d1e4      	bne.n	800f2c2 <_Balloc+0x2e>
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	6802      	ldr	r2, [r0, #0]
 800f2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f302:	2300      	movs	r3, #0
 800f304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f308:	e7f7      	b.n	800f2fa <_Balloc+0x66>
 800f30a:	bf00      	nop
 800f30c:	0801042a 	.word	0x0801042a
 800f310:	080105b5 	.word	0x080105b5

0800f314 <_Bfree>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	69c6      	ldr	r6, [r0, #28]
 800f318:	4605      	mov	r5, r0
 800f31a:	460c      	mov	r4, r1
 800f31c:	b976      	cbnz	r6, 800f33c <_Bfree+0x28>
 800f31e:	2010      	movs	r0, #16
 800f320:	f7fc ffae 	bl	800c280 <malloc>
 800f324:	4602      	mov	r2, r0
 800f326:	61e8      	str	r0, [r5, #28]
 800f328:	b920      	cbnz	r0, 800f334 <_Bfree+0x20>
 800f32a:	4b09      	ldr	r3, [pc, #36]	@ (800f350 <_Bfree+0x3c>)
 800f32c:	4809      	ldr	r0, [pc, #36]	@ (800f354 <_Bfree+0x40>)
 800f32e:	218f      	movs	r1, #143	@ 0x8f
 800f330:	f7fe fda2 	bl	800de78 <__assert_func>
 800f334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f338:	6006      	str	r6, [r0, #0]
 800f33a:	60c6      	str	r6, [r0, #12]
 800f33c:	b13c      	cbz	r4, 800f34e <_Bfree+0x3a>
 800f33e:	69eb      	ldr	r3, [r5, #28]
 800f340:	6862      	ldr	r2, [r4, #4]
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f348:	6021      	str	r1, [r4, #0]
 800f34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f34e:	bd70      	pop	{r4, r5, r6, pc}
 800f350:	0801042a 	.word	0x0801042a
 800f354:	080105b5 	.word	0x080105b5

0800f358 <__multadd>:
 800f358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f35c:	690d      	ldr	r5, [r1, #16]
 800f35e:	4607      	mov	r7, r0
 800f360:	460c      	mov	r4, r1
 800f362:	461e      	mov	r6, r3
 800f364:	f101 0c14 	add.w	ip, r1, #20
 800f368:	2000      	movs	r0, #0
 800f36a:	f8dc 3000 	ldr.w	r3, [ip]
 800f36e:	b299      	uxth	r1, r3
 800f370:	fb02 6101 	mla	r1, r2, r1, r6
 800f374:	0c1e      	lsrs	r6, r3, #16
 800f376:	0c0b      	lsrs	r3, r1, #16
 800f378:	fb02 3306 	mla	r3, r2, r6, r3
 800f37c:	b289      	uxth	r1, r1
 800f37e:	3001      	adds	r0, #1
 800f380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f384:	4285      	cmp	r5, r0
 800f386:	f84c 1b04 	str.w	r1, [ip], #4
 800f38a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f38e:	dcec      	bgt.n	800f36a <__multadd+0x12>
 800f390:	b30e      	cbz	r6, 800f3d6 <__multadd+0x7e>
 800f392:	68a3      	ldr	r3, [r4, #8]
 800f394:	42ab      	cmp	r3, r5
 800f396:	dc19      	bgt.n	800f3cc <__multadd+0x74>
 800f398:	6861      	ldr	r1, [r4, #4]
 800f39a:	4638      	mov	r0, r7
 800f39c:	3101      	adds	r1, #1
 800f39e:	f7ff ff79 	bl	800f294 <_Balloc>
 800f3a2:	4680      	mov	r8, r0
 800f3a4:	b928      	cbnz	r0, 800f3b2 <__multadd+0x5a>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	4b0c      	ldr	r3, [pc, #48]	@ (800f3dc <__multadd+0x84>)
 800f3aa:	480d      	ldr	r0, [pc, #52]	@ (800f3e0 <__multadd+0x88>)
 800f3ac:	21ba      	movs	r1, #186	@ 0xba
 800f3ae:	f7fe fd63 	bl	800de78 <__assert_func>
 800f3b2:	6922      	ldr	r2, [r4, #16]
 800f3b4:	3202      	adds	r2, #2
 800f3b6:	f104 010c 	add.w	r1, r4, #12
 800f3ba:	0092      	lsls	r2, r2, #2
 800f3bc:	300c      	adds	r0, #12
 800f3be:	f7fe fd42 	bl	800de46 <memcpy>
 800f3c2:	4621      	mov	r1, r4
 800f3c4:	4638      	mov	r0, r7
 800f3c6:	f7ff ffa5 	bl	800f314 <_Bfree>
 800f3ca:	4644      	mov	r4, r8
 800f3cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f3d0:	3501      	adds	r5, #1
 800f3d2:	615e      	str	r6, [r3, #20]
 800f3d4:	6125      	str	r5, [r4, #16]
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3dc:	08010544 	.word	0x08010544
 800f3e0:	080105b5 	.word	0x080105b5

0800f3e4 <__s2b>:
 800f3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e8:	460c      	mov	r4, r1
 800f3ea:	4615      	mov	r5, r2
 800f3ec:	461f      	mov	r7, r3
 800f3ee:	2209      	movs	r2, #9
 800f3f0:	3308      	adds	r3, #8
 800f3f2:	4606      	mov	r6, r0
 800f3f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	db09      	blt.n	800f414 <__s2b+0x30>
 800f400:	4630      	mov	r0, r6
 800f402:	f7ff ff47 	bl	800f294 <_Balloc>
 800f406:	b940      	cbnz	r0, 800f41a <__s2b+0x36>
 800f408:	4602      	mov	r2, r0
 800f40a:	4b19      	ldr	r3, [pc, #100]	@ (800f470 <__s2b+0x8c>)
 800f40c:	4819      	ldr	r0, [pc, #100]	@ (800f474 <__s2b+0x90>)
 800f40e:	21d3      	movs	r1, #211	@ 0xd3
 800f410:	f7fe fd32 	bl	800de78 <__assert_func>
 800f414:	0052      	lsls	r2, r2, #1
 800f416:	3101      	adds	r1, #1
 800f418:	e7f0      	b.n	800f3fc <__s2b+0x18>
 800f41a:	9b08      	ldr	r3, [sp, #32]
 800f41c:	6143      	str	r3, [r0, #20]
 800f41e:	2d09      	cmp	r5, #9
 800f420:	f04f 0301 	mov.w	r3, #1
 800f424:	6103      	str	r3, [r0, #16]
 800f426:	dd16      	ble.n	800f456 <__s2b+0x72>
 800f428:	f104 0909 	add.w	r9, r4, #9
 800f42c:	46c8      	mov	r8, r9
 800f42e:	442c      	add	r4, r5
 800f430:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f434:	4601      	mov	r1, r0
 800f436:	3b30      	subs	r3, #48	@ 0x30
 800f438:	220a      	movs	r2, #10
 800f43a:	4630      	mov	r0, r6
 800f43c:	f7ff ff8c 	bl	800f358 <__multadd>
 800f440:	45a0      	cmp	r8, r4
 800f442:	d1f5      	bne.n	800f430 <__s2b+0x4c>
 800f444:	f1a5 0408 	sub.w	r4, r5, #8
 800f448:	444c      	add	r4, r9
 800f44a:	1b2d      	subs	r5, r5, r4
 800f44c:	1963      	adds	r3, r4, r5
 800f44e:	42bb      	cmp	r3, r7
 800f450:	db04      	blt.n	800f45c <__s2b+0x78>
 800f452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f456:	340a      	adds	r4, #10
 800f458:	2509      	movs	r5, #9
 800f45a:	e7f6      	b.n	800f44a <__s2b+0x66>
 800f45c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f460:	4601      	mov	r1, r0
 800f462:	3b30      	subs	r3, #48	@ 0x30
 800f464:	220a      	movs	r2, #10
 800f466:	4630      	mov	r0, r6
 800f468:	f7ff ff76 	bl	800f358 <__multadd>
 800f46c:	e7ee      	b.n	800f44c <__s2b+0x68>
 800f46e:	bf00      	nop
 800f470:	08010544 	.word	0x08010544
 800f474:	080105b5 	.word	0x080105b5

0800f478 <__hi0bits>:
 800f478:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f47c:	4603      	mov	r3, r0
 800f47e:	bf36      	itet	cc
 800f480:	0403      	lslcc	r3, r0, #16
 800f482:	2000      	movcs	r0, #0
 800f484:	2010      	movcc	r0, #16
 800f486:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f48a:	bf3c      	itt	cc
 800f48c:	021b      	lslcc	r3, r3, #8
 800f48e:	3008      	addcc	r0, #8
 800f490:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f494:	bf3c      	itt	cc
 800f496:	011b      	lslcc	r3, r3, #4
 800f498:	3004      	addcc	r0, #4
 800f49a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f49e:	bf3c      	itt	cc
 800f4a0:	009b      	lslcc	r3, r3, #2
 800f4a2:	3002      	addcc	r0, #2
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	db05      	blt.n	800f4b4 <__hi0bits+0x3c>
 800f4a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f4ac:	f100 0001 	add.w	r0, r0, #1
 800f4b0:	bf08      	it	eq
 800f4b2:	2020      	moveq	r0, #32
 800f4b4:	4770      	bx	lr

0800f4b6 <__lo0bits>:
 800f4b6:	6803      	ldr	r3, [r0, #0]
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	f013 0007 	ands.w	r0, r3, #7
 800f4be:	d00b      	beq.n	800f4d8 <__lo0bits+0x22>
 800f4c0:	07d9      	lsls	r1, r3, #31
 800f4c2:	d421      	bmi.n	800f508 <__lo0bits+0x52>
 800f4c4:	0798      	lsls	r0, r3, #30
 800f4c6:	bf49      	itett	mi
 800f4c8:	085b      	lsrmi	r3, r3, #1
 800f4ca:	089b      	lsrpl	r3, r3, #2
 800f4cc:	2001      	movmi	r0, #1
 800f4ce:	6013      	strmi	r3, [r2, #0]
 800f4d0:	bf5c      	itt	pl
 800f4d2:	6013      	strpl	r3, [r2, #0]
 800f4d4:	2002      	movpl	r0, #2
 800f4d6:	4770      	bx	lr
 800f4d8:	b299      	uxth	r1, r3
 800f4da:	b909      	cbnz	r1, 800f4e0 <__lo0bits+0x2a>
 800f4dc:	0c1b      	lsrs	r3, r3, #16
 800f4de:	2010      	movs	r0, #16
 800f4e0:	b2d9      	uxtb	r1, r3
 800f4e2:	b909      	cbnz	r1, 800f4e8 <__lo0bits+0x32>
 800f4e4:	3008      	adds	r0, #8
 800f4e6:	0a1b      	lsrs	r3, r3, #8
 800f4e8:	0719      	lsls	r1, r3, #28
 800f4ea:	bf04      	itt	eq
 800f4ec:	091b      	lsreq	r3, r3, #4
 800f4ee:	3004      	addeq	r0, #4
 800f4f0:	0799      	lsls	r1, r3, #30
 800f4f2:	bf04      	itt	eq
 800f4f4:	089b      	lsreq	r3, r3, #2
 800f4f6:	3002      	addeq	r0, #2
 800f4f8:	07d9      	lsls	r1, r3, #31
 800f4fa:	d403      	bmi.n	800f504 <__lo0bits+0x4e>
 800f4fc:	085b      	lsrs	r3, r3, #1
 800f4fe:	f100 0001 	add.w	r0, r0, #1
 800f502:	d003      	beq.n	800f50c <__lo0bits+0x56>
 800f504:	6013      	str	r3, [r2, #0]
 800f506:	4770      	bx	lr
 800f508:	2000      	movs	r0, #0
 800f50a:	4770      	bx	lr
 800f50c:	2020      	movs	r0, #32
 800f50e:	4770      	bx	lr

0800f510 <__i2b>:
 800f510:	b510      	push	{r4, lr}
 800f512:	460c      	mov	r4, r1
 800f514:	2101      	movs	r1, #1
 800f516:	f7ff febd 	bl	800f294 <_Balloc>
 800f51a:	4602      	mov	r2, r0
 800f51c:	b928      	cbnz	r0, 800f52a <__i2b+0x1a>
 800f51e:	4b05      	ldr	r3, [pc, #20]	@ (800f534 <__i2b+0x24>)
 800f520:	4805      	ldr	r0, [pc, #20]	@ (800f538 <__i2b+0x28>)
 800f522:	f240 1145 	movw	r1, #325	@ 0x145
 800f526:	f7fe fca7 	bl	800de78 <__assert_func>
 800f52a:	2301      	movs	r3, #1
 800f52c:	6144      	str	r4, [r0, #20]
 800f52e:	6103      	str	r3, [r0, #16]
 800f530:	bd10      	pop	{r4, pc}
 800f532:	bf00      	nop
 800f534:	08010544 	.word	0x08010544
 800f538:	080105b5 	.word	0x080105b5

0800f53c <__multiply>:
 800f53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f540:	4617      	mov	r7, r2
 800f542:	690a      	ldr	r2, [r1, #16]
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	429a      	cmp	r2, r3
 800f548:	bfa8      	it	ge
 800f54a:	463b      	movge	r3, r7
 800f54c:	4689      	mov	r9, r1
 800f54e:	bfa4      	itt	ge
 800f550:	460f      	movge	r7, r1
 800f552:	4699      	movge	r9, r3
 800f554:	693d      	ldr	r5, [r7, #16]
 800f556:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	6879      	ldr	r1, [r7, #4]
 800f55e:	eb05 060a 	add.w	r6, r5, sl
 800f562:	42b3      	cmp	r3, r6
 800f564:	b085      	sub	sp, #20
 800f566:	bfb8      	it	lt
 800f568:	3101      	addlt	r1, #1
 800f56a:	f7ff fe93 	bl	800f294 <_Balloc>
 800f56e:	b930      	cbnz	r0, 800f57e <__multiply+0x42>
 800f570:	4602      	mov	r2, r0
 800f572:	4b41      	ldr	r3, [pc, #260]	@ (800f678 <__multiply+0x13c>)
 800f574:	4841      	ldr	r0, [pc, #260]	@ (800f67c <__multiply+0x140>)
 800f576:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f57a:	f7fe fc7d 	bl	800de78 <__assert_func>
 800f57e:	f100 0414 	add.w	r4, r0, #20
 800f582:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f586:	4623      	mov	r3, r4
 800f588:	2200      	movs	r2, #0
 800f58a:	4573      	cmp	r3, lr
 800f58c:	d320      	bcc.n	800f5d0 <__multiply+0x94>
 800f58e:	f107 0814 	add.w	r8, r7, #20
 800f592:	f109 0114 	add.w	r1, r9, #20
 800f596:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f59a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f59e:	9302      	str	r3, [sp, #8]
 800f5a0:	1beb      	subs	r3, r5, r7
 800f5a2:	3b15      	subs	r3, #21
 800f5a4:	f023 0303 	bic.w	r3, r3, #3
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	3715      	adds	r7, #21
 800f5ac:	42bd      	cmp	r5, r7
 800f5ae:	bf38      	it	cc
 800f5b0:	2304      	movcc	r3, #4
 800f5b2:	9301      	str	r3, [sp, #4]
 800f5b4:	9b02      	ldr	r3, [sp, #8]
 800f5b6:	9103      	str	r1, [sp, #12]
 800f5b8:	428b      	cmp	r3, r1
 800f5ba:	d80c      	bhi.n	800f5d6 <__multiply+0x9a>
 800f5bc:	2e00      	cmp	r6, #0
 800f5be:	dd03      	ble.n	800f5c8 <__multiply+0x8c>
 800f5c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d055      	beq.n	800f674 <__multiply+0x138>
 800f5c8:	6106      	str	r6, [r0, #16]
 800f5ca:	b005      	add	sp, #20
 800f5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d0:	f843 2b04 	str.w	r2, [r3], #4
 800f5d4:	e7d9      	b.n	800f58a <__multiply+0x4e>
 800f5d6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f5da:	f1ba 0f00 	cmp.w	sl, #0
 800f5de:	d01f      	beq.n	800f620 <__multiply+0xe4>
 800f5e0:	46c4      	mov	ip, r8
 800f5e2:	46a1      	mov	r9, r4
 800f5e4:	2700      	movs	r7, #0
 800f5e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f5ea:	f8d9 3000 	ldr.w	r3, [r9]
 800f5ee:	fa1f fb82 	uxth.w	fp, r2
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800f5f8:	443b      	add	r3, r7
 800f5fa:	f8d9 7000 	ldr.w	r7, [r9]
 800f5fe:	0c12      	lsrs	r2, r2, #16
 800f600:	0c3f      	lsrs	r7, r7, #16
 800f602:	fb0a 7202 	mla	r2, sl, r2, r7
 800f606:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f610:	4565      	cmp	r5, ip
 800f612:	f849 3b04 	str.w	r3, [r9], #4
 800f616:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f61a:	d8e4      	bhi.n	800f5e6 <__multiply+0xaa>
 800f61c:	9b01      	ldr	r3, [sp, #4]
 800f61e:	50e7      	str	r7, [r4, r3]
 800f620:	9b03      	ldr	r3, [sp, #12]
 800f622:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f626:	3104      	adds	r1, #4
 800f628:	f1b9 0f00 	cmp.w	r9, #0
 800f62c:	d020      	beq.n	800f670 <__multiply+0x134>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	4647      	mov	r7, r8
 800f632:	46a4      	mov	ip, r4
 800f634:	f04f 0a00 	mov.w	sl, #0
 800f638:	f8b7 b000 	ldrh.w	fp, [r7]
 800f63c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f640:	fb09 220b 	mla	r2, r9, fp, r2
 800f644:	4452      	add	r2, sl
 800f646:	b29b      	uxth	r3, r3
 800f648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f64c:	f84c 3b04 	str.w	r3, [ip], #4
 800f650:	f857 3b04 	ldr.w	r3, [r7], #4
 800f654:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f658:	f8bc 3000 	ldrh.w	r3, [ip]
 800f65c:	fb09 330a 	mla	r3, r9, sl, r3
 800f660:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f664:	42bd      	cmp	r5, r7
 800f666:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f66a:	d8e5      	bhi.n	800f638 <__multiply+0xfc>
 800f66c:	9a01      	ldr	r2, [sp, #4]
 800f66e:	50a3      	str	r3, [r4, r2]
 800f670:	3404      	adds	r4, #4
 800f672:	e79f      	b.n	800f5b4 <__multiply+0x78>
 800f674:	3e01      	subs	r6, #1
 800f676:	e7a1      	b.n	800f5bc <__multiply+0x80>
 800f678:	08010544 	.word	0x08010544
 800f67c:	080105b5 	.word	0x080105b5

0800f680 <__pow5mult>:
 800f680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f684:	4615      	mov	r5, r2
 800f686:	f012 0203 	ands.w	r2, r2, #3
 800f68a:	4607      	mov	r7, r0
 800f68c:	460e      	mov	r6, r1
 800f68e:	d007      	beq.n	800f6a0 <__pow5mult+0x20>
 800f690:	4c25      	ldr	r4, [pc, #148]	@ (800f728 <__pow5mult+0xa8>)
 800f692:	3a01      	subs	r2, #1
 800f694:	2300      	movs	r3, #0
 800f696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f69a:	f7ff fe5d 	bl	800f358 <__multadd>
 800f69e:	4606      	mov	r6, r0
 800f6a0:	10ad      	asrs	r5, r5, #2
 800f6a2:	d03d      	beq.n	800f720 <__pow5mult+0xa0>
 800f6a4:	69fc      	ldr	r4, [r7, #28]
 800f6a6:	b97c      	cbnz	r4, 800f6c8 <__pow5mult+0x48>
 800f6a8:	2010      	movs	r0, #16
 800f6aa:	f7fc fde9 	bl	800c280 <malloc>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	61f8      	str	r0, [r7, #28]
 800f6b2:	b928      	cbnz	r0, 800f6c0 <__pow5mult+0x40>
 800f6b4:	4b1d      	ldr	r3, [pc, #116]	@ (800f72c <__pow5mult+0xac>)
 800f6b6:	481e      	ldr	r0, [pc, #120]	@ (800f730 <__pow5mult+0xb0>)
 800f6b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f6bc:	f7fe fbdc 	bl	800de78 <__assert_func>
 800f6c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6c4:	6004      	str	r4, [r0, #0]
 800f6c6:	60c4      	str	r4, [r0, #12]
 800f6c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f6cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6d0:	b94c      	cbnz	r4, 800f6e6 <__pow5mult+0x66>
 800f6d2:	f240 2171 	movw	r1, #625	@ 0x271
 800f6d6:	4638      	mov	r0, r7
 800f6d8:	f7ff ff1a 	bl	800f510 <__i2b>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	f8c8 0008 	str.w	r0, [r8, #8]
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	6003      	str	r3, [r0, #0]
 800f6e6:	f04f 0900 	mov.w	r9, #0
 800f6ea:	07eb      	lsls	r3, r5, #31
 800f6ec:	d50a      	bpl.n	800f704 <__pow5mult+0x84>
 800f6ee:	4631      	mov	r1, r6
 800f6f0:	4622      	mov	r2, r4
 800f6f2:	4638      	mov	r0, r7
 800f6f4:	f7ff ff22 	bl	800f53c <__multiply>
 800f6f8:	4631      	mov	r1, r6
 800f6fa:	4680      	mov	r8, r0
 800f6fc:	4638      	mov	r0, r7
 800f6fe:	f7ff fe09 	bl	800f314 <_Bfree>
 800f702:	4646      	mov	r6, r8
 800f704:	106d      	asrs	r5, r5, #1
 800f706:	d00b      	beq.n	800f720 <__pow5mult+0xa0>
 800f708:	6820      	ldr	r0, [r4, #0]
 800f70a:	b938      	cbnz	r0, 800f71c <__pow5mult+0x9c>
 800f70c:	4622      	mov	r2, r4
 800f70e:	4621      	mov	r1, r4
 800f710:	4638      	mov	r0, r7
 800f712:	f7ff ff13 	bl	800f53c <__multiply>
 800f716:	6020      	str	r0, [r4, #0]
 800f718:	f8c0 9000 	str.w	r9, [r0]
 800f71c:	4604      	mov	r4, r0
 800f71e:	e7e4      	b.n	800f6ea <__pow5mult+0x6a>
 800f720:	4630      	mov	r0, r6
 800f722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f726:	bf00      	nop
 800f728:	08010774 	.word	0x08010774
 800f72c:	0801042a 	.word	0x0801042a
 800f730:	080105b5 	.word	0x080105b5

0800f734 <__lshift>:
 800f734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f738:	460c      	mov	r4, r1
 800f73a:	6849      	ldr	r1, [r1, #4]
 800f73c:	6923      	ldr	r3, [r4, #16]
 800f73e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f742:	68a3      	ldr	r3, [r4, #8]
 800f744:	4607      	mov	r7, r0
 800f746:	4691      	mov	r9, r2
 800f748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f74c:	f108 0601 	add.w	r6, r8, #1
 800f750:	42b3      	cmp	r3, r6
 800f752:	db0b      	blt.n	800f76c <__lshift+0x38>
 800f754:	4638      	mov	r0, r7
 800f756:	f7ff fd9d 	bl	800f294 <_Balloc>
 800f75a:	4605      	mov	r5, r0
 800f75c:	b948      	cbnz	r0, 800f772 <__lshift+0x3e>
 800f75e:	4602      	mov	r2, r0
 800f760:	4b28      	ldr	r3, [pc, #160]	@ (800f804 <__lshift+0xd0>)
 800f762:	4829      	ldr	r0, [pc, #164]	@ (800f808 <__lshift+0xd4>)
 800f764:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f768:	f7fe fb86 	bl	800de78 <__assert_func>
 800f76c:	3101      	adds	r1, #1
 800f76e:	005b      	lsls	r3, r3, #1
 800f770:	e7ee      	b.n	800f750 <__lshift+0x1c>
 800f772:	2300      	movs	r3, #0
 800f774:	f100 0114 	add.w	r1, r0, #20
 800f778:	f100 0210 	add.w	r2, r0, #16
 800f77c:	4618      	mov	r0, r3
 800f77e:	4553      	cmp	r3, sl
 800f780:	db33      	blt.n	800f7ea <__lshift+0xb6>
 800f782:	6920      	ldr	r0, [r4, #16]
 800f784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f788:	f104 0314 	add.w	r3, r4, #20
 800f78c:	f019 091f 	ands.w	r9, r9, #31
 800f790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f794:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f798:	d02b      	beq.n	800f7f2 <__lshift+0xbe>
 800f79a:	f1c9 0e20 	rsb	lr, r9, #32
 800f79e:	468a      	mov	sl, r1
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	6818      	ldr	r0, [r3, #0]
 800f7a4:	fa00 f009 	lsl.w	r0, r0, r9
 800f7a8:	4310      	orrs	r0, r2
 800f7aa:	f84a 0b04 	str.w	r0, [sl], #4
 800f7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7b2:	459c      	cmp	ip, r3
 800f7b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f7b8:	d8f3      	bhi.n	800f7a2 <__lshift+0x6e>
 800f7ba:	ebac 0304 	sub.w	r3, ip, r4
 800f7be:	3b15      	subs	r3, #21
 800f7c0:	f023 0303 	bic.w	r3, r3, #3
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	f104 0015 	add.w	r0, r4, #21
 800f7ca:	4560      	cmp	r0, ip
 800f7cc:	bf88      	it	hi
 800f7ce:	2304      	movhi	r3, #4
 800f7d0:	50ca      	str	r2, [r1, r3]
 800f7d2:	b10a      	cbz	r2, 800f7d8 <__lshift+0xa4>
 800f7d4:	f108 0602 	add.w	r6, r8, #2
 800f7d8:	3e01      	subs	r6, #1
 800f7da:	4638      	mov	r0, r7
 800f7dc:	612e      	str	r6, [r5, #16]
 800f7de:	4621      	mov	r1, r4
 800f7e0:	f7ff fd98 	bl	800f314 <_Bfree>
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	e7c5      	b.n	800f77e <__lshift+0x4a>
 800f7f2:	3904      	subs	r1, #4
 800f7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7fc:	459c      	cmp	ip, r3
 800f7fe:	d8f9      	bhi.n	800f7f4 <__lshift+0xc0>
 800f800:	e7ea      	b.n	800f7d8 <__lshift+0xa4>
 800f802:	bf00      	nop
 800f804:	08010544 	.word	0x08010544
 800f808:	080105b5 	.word	0x080105b5

0800f80c <__mcmp>:
 800f80c:	690a      	ldr	r2, [r1, #16]
 800f80e:	4603      	mov	r3, r0
 800f810:	6900      	ldr	r0, [r0, #16]
 800f812:	1a80      	subs	r0, r0, r2
 800f814:	b530      	push	{r4, r5, lr}
 800f816:	d10e      	bne.n	800f836 <__mcmp+0x2a>
 800f818:	3314      	adds	r3, #20
 800f81a:	3114      	adds	r1, #20
 800f81c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f820:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f824:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f828:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f82c:	4295      	cmp	r5, r2
 800f82e:	d003      	beq.n	800f838 <__mcmp+0x2c>
 800f830:	d205      	bcs.n	800f83e <__mcmp+0x32>
 800f832:	f04f 30ff 	mov.w	r0, #4294967295
 800f836:	bd30      	pop	{r4, r5, pc}
 800f838:	42a3      	cmp	r3, r4
 800f83a:	d3f3      	bcc.n	800f824 <__mcmp+0x18>
 800f83c:	e7fb      	b.n	800f836 <__mcmp+0x2a>
 800f83e:	2001      	movs	r0, #1
 800f840:	e7f9      	b.n	800f836 <__mcmp+0x2a>
	...

0800f844 <__mdiff>:
 800f844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f848:	4689      	mov	r9, r1
 800f84a:	4606      	mov	r6, r0
 800f84c:	4611      	mov	r1, r2
 800f84e:	4648      	mov	r0, r9
 800f850:	4614      	mov	r4, r2
 800f852:	f7ff ffdb 	bl	800f80c <__mcmp>
 800f856:	1e05      	subs	r5, r0, #0
 800f858:	d112      	bne.n	800f880 <__mdiff+0x3c>
 800f85a:	4629      	mov	r1, r5
 800f85c:	4630      	mov	r0, r6
 800f85e:	f7ff fd19 	bl	800f294 <_Balloc>
 800f862:	4602      	mov	r2, r0
 800f864:	b928      	cbnz	r0, 800f872 <__mdiff+0x2e>
 800f866:	4b3f      	ldr	r3, [pc, #252]	@ (800f964 <__mdiff+0x120>)
 800f868:	f240 2137 	movw	r1, #567	@ 0x237
 800f86c:	483e      	ldr	r0, [pc, #248]	@ (800f968 <__mdiff+0x124>)
 800f86e:	f7fe fb03 	bl	800de78 <__assert_func>
 800f872:	2301      	movs	r3, #1
 800f874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f878:	4610      	mov	r0, r2
 800f87a:	b003      	add	sp, #12
 800f87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f880:	bfbc      	itt	lt
 800f882:	464b      	movlt	r3, r9
 800f884:	46a1      	movlt	r9, r4
 800f886:	4630      	mov	r0, r6
 800f888:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f88c:	bfba      	itte	lt
 800f88e:	461c      	movlt	r4, r3
 800f890:	2501      	movlt	r5, #1
 800f892:	2500      	movge	r5, #0
 800f894:	f7ff fcfe 	bl	800f294 <_Balloc>
 800f898:	4602      	mov	r2, r0
 800f89a:	b918      	cbnz	r0, 800f8a4 <__mdiff+0x60>
 800f89c:	4b31      	ldr	r3, [pc, #196]	@ (800f964 <__mdiff+0x120>)
 800f89e:	f240 2145 	movw	r1, #581	@ 0x245
 800f8a2:	e7e3      	b.n	800f86c <__mdiff+0x28>
 800f8a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f8a8:	6926      	ldr	r6, [r4, #16]
 800f8aa:	60c5      	str	r5, [r0, #12]
 800f8ac:	f109 0310 	add.w	r3, r9, #16
 800f8b0:	f109 0514 	add.w	r5, r9, #20
 800f8b4:	f104 0e14 	add.w	lr, r4, #20
 800f8b8:	f100 0b14 	add.w	fp, r0, #20
 800f8bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f8c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f8c4:	9301      	str	r3, [sp, #4]
 800f8c6:	46d9      	mov	r9, fp
 800f8c8:	f04f 0c00 	mov.w	ip, #0
 800f8cc:	9b01      	ldr	r3, [sp, #4]
 800f8ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f8d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f8d6:	9301      	str	r3, [sp, #4]
 800f8d8:	fa1f f38a 	uxth.w	r3, sl
 800f8dc:	4619      	mov	r1, r3
 800f8de:	b283      	uxth	r3, r0
 800f8e0:	1acb      	subs	r3, r1, r3
 800f8e2:	0c00      	lsrs	r0, r0, #16
 800f8e4:	4463      	add	r3, ip
 800f8e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f8ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f8f4:	4576      	cmp	r6, lr
 800f8f6:	f849 3b04 	str.w	r3, [r9], #4
 800f8fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f8fe:	d8e5      	bhi.n	800f8cc <__mdiff+0x88>
 800f900:	1b33      	subs	r3, r6, r4
 800f902:	3b15      	subs	r3, #21
 800f904:	f023 0303 	bic.w	r3, r3, #3
 800f908:	3415      	adds	r4, #21
 800f90a:	3304      	adds	r3, #4
 800f90c:	42a6      	cmp	r6, r4
 800f90e:	bf38      	it	cc
 800f910:	2304      	movcc	r3, #4
 800f912:	441d      	add	r5, r3
 800f914:	445b      	add	r3, fp
 800f916:	461e      	mov	r6, r3
 800f918:	462c      	mov	r4, r5
 800f91a:	4544      	cmp	r4, r8
 800f91c:	d30e      	bcc.n	800f93c <__mdiff+0xf8>
 800f91e:	f108 0103 	add.w	r1, r8, #3
 800f922:	1b49      	subs	r1, r1, r5
 800f924:	f021 0103 	bic.w	r1, r1, #3
 800f928:	3d03      	subs	r5, #3
 800f92a:	45a8      	cmp	r8, r5
 800f92c:	bf38      	it	cc
 800f92e:	2100      	movcc	r1, #0
 800f930:	440b      	add	r3, r1
 800f932:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f936:	b191      	cbz	r1, 800f95e <__mdiff+0x11a>
 800f938:	6117      	str	r7, [r2, #16]
 800f93a:	e79d      	b.n	800f878 <__mdiff+0x34>
 800f93c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f940:	46e6      	mov	lr, ip
 800f942:	0c08      	lsrs	r0, r1, #16
 800f944:	fa1c fc81 	uxtah	ip, ip, r1
 800f948:	4471      	add	r1, lr
 800f94a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f94e:	b289      	uxth	r1, r1
 800f950:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f954:	f846 1b04 	str.w	r1, [r6], #4
 800f958:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f95c:	e7dd      	b.n	800f91a <__mdiff+0xd6>
 800f95e:	3f01      	subs	r7, #1
 800f960:	e7e7      	b.n	800f932 <__mdiff+0xee>
 800f962:	bf00      	nop
 800f964:	08010544 	.word	0x08010544
 800f968:	080105b5 	.word	0x080105b5

0800f96c <__ulp>:
 800f96c:	b082      	sub	sp, #8
 800f96e:	ed8d 0b00 	vstr	d0, [sp]
 800f972:	9a01      	ldr	r2, [sp, #4]
 800f974:	4b0f      	ldr	r3, [pc, #60]	@ (800f9b4 <__ulp+0x48>)
 800f976:	4013      	ands	r3, r2
 800f978:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	dc08      	bgt.n	800f992 <__ulp+0x26>
 800f980:	425b      	negs	r3, r3
 800f982:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f986:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f98a:	da04      	bge.n	800f996 <__ulp+0x2a>
 800f98c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f990:	4113      	asrs	r3, r2
 800f992:	2200      	movs	r2, #0
 800f994:	e008      	b.n	800f9a8 <__ulp+0x3c>
 800f996:	f1a2 0314 	sub.w	r3, r2, #20
 800f99a:	2b1e      	cmp	r3, #30
 800f99c:	bfda      	itte	le
 800f99e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f9a2:	40da      	lsrle	r2, r3
 800f9a4:	2201      	movgt	r2, #1
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	4610      	mov	r0, r2
 800f9ac:	ec41 0b10 	vmov	d0, r0, r1
 800f9b0:	b002      	add	sp, #8
 800f9b2:	4770      	bx	lr
 800f9b4:	7ff00000 	.word	0x7ff00000

0800f9b8 <__b2d>:
 800f9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9bc:	6906      	ldr	r6, [r0, #16]
 800f9be:	f100 0814 	add.w	r8, r0, #20
 800f9c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f9c6:	1f37      	subs	r7, r6, #4
 800f9c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	f7ff fd53 	bl	800f478 <__hi0bits>
 800f9d2:	f1c0 0320 	rsb	r3, r0, #32
 800f9d6:	280a      	cmp	r0, #10
 800f9d8:	600b      	str	r3, [r1, #0]
 800f9da:	491b      	ldr	r1, [pc, #108]	@ (800fa48 <__b2d+0x90>)
 800f9dc:	dc15      	bgt.n	800fa0a <__b2d+0x52>
 800f9de:	f1c0 0c0b 	rsb	ip, r0, #11
 800f9e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800f9e6:	45b8      	cmp	r8, r7
 800f9e8:	ea43 0501 	orr.w	r5, r3, r1
 800f9ec:	bf34      	ite	cc
 800f9ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f9f2:	2300      	movcs	r3, #0
 800f9f4:	3015      	adds	r0, #21
 800f9f6:	fa02 f000 	lsl.w	r0, r2, r0
 800f9fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800f9fe:	4303      	orrs	r3, r0
 800fa00:	461c      	mov	r4, r3
 800fa02:	ec45 4b10 	vmov	d0, r4, r5
 800fa06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa0a:	45b8      	cmp	r8, r7
 800fa0c:	bf3a      	itte	cc
 800fa0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa12:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa16:	2300      	movcs	r3, #0
 800fa18:	380b      	subs	r0, #11
 800fa1a:	d012      	beq.n	800fa42 <__b2d+0x8a>
 800fa1c:	f1c0 0120 	rsb	r1, r0, #32
 800fa20:	fa23 f401 	lsr.w	r4, r3, r1
 800fa24:	4082      	lsls	r2, r0
 800fa26:	4322      	orrs	r2, r4
 800fa28:	4547      	cmp	r7, r8
 800fa2a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fa2e:	bf8c      	ite	hi
 800fa30:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fa34:	2200      	movls	r2, #0
 800fa36:	4083      	lsls	r3, r0
 800fa38:	40ca      	lsrs	r2, r1
 800fa3a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	e7de      	b.n	800fa00 <__b2d+0x48>
 800fa42:	ea42 0501 	orr.w	r5, r2, r1
 800fa46:	e7db      	b.n	800fa00 <__b2d+0x48>
 800fa48:	3ff00000 	.word	0x3ff00000

0800fa4c <__d2b>:
 800fa4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa50:	460f      	mov	r7, r1
 800fa52:	2101      	movs	r1, #1
 800fa54:	ec59 8b10 	vmov	r8, r9, d0
 800fa58:	4616      	mov	r6, r2
 800fa5a:	f7ff fc1b 	bl	800f294 <_Balloc>
 800fa5e:	4604      	mov	r4, r0
 800fa60:	b930      	cbnz	r0, 800fa70 <__d2b+0x24>
 800fa62:	4602      	mov	r2, r0
 800fa64:	4b23      	ldr	r3, [pc, #140]	@ (800faf4 <__d2b+0xa8>)
 800fa66:	4824      	ldr	r0, [pc, #144]	@ (800faf8 <__d2b+0xac>)
 800fa68:	f240 310f 	movw	r1, #783	@ 0x30f
 800fa6c:	f7fe fa04 	bl	800de78 <__assert_func>
 800fa70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fa74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa78:	b10d      	cbz	r5, 800fa7e <__d2b+0x32>
 800fa7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	f1b8 0300 	subs.w	r3, r8, #0
 800fa84:	d023      	beq.n	800face <__d2b+0x82>
 800fa86:	4668      	mov	r0, sp
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	f7ff fd14 	bl	800f4b6 <__lo0bits>
 800fa8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fa92:	b1d0      	cbz	r0, 800faca <__d2b+0x7e>
 800fa94:	f1c0 0320 	rsb	r3, r0, #32
 800fa98:	fa02 f303 	lsl.w	r3, r2, r3
 800fa9c:	430b      	orrs	r3, r1
 800fa9e:	40c2      	lsrs	r2, r0
 800faa0:	6163      	str	r3, [r4, #20]
 800faa2:	9201      	str	r2, [sp, #4]
 800faa4:	9b01      	ldr	r3, [sp, #4]
 800faa6:	61a3      	str	r3, [r4, #24]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	bf0c      	ite	eq
 800faac:	2201      	moveq	r2, #1
 800faae:	2202      	movne	r2, #2
 800fab0:	6122      	str	r2, [r4, #16]
 800fab2:	b1a5      	cbz	r5, 800fade <__d2b+0x92>
 800fab4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fab8:	4405      	add	r5, r0
 800faba:	603d      	str	r5, [r7, #0]
 800fabc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fac0:	6030      	str	r0, [r6, #0]
 800fac2:	4620      	mov	r0, r4
 800fac4:	b003      	add	sp, #12
 800fac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faca:	6161      	str	r1, [r4, #20]
 800facc:	e7ea      	b.n	800faa4 <__d2b+0x58>
 800face:	a801      	add	r0, sp, #4
 800fad0:	f7ff fcf1 	bl	800f4b6 <__lo0bits>
 800fad4:	9b01      	ldr	r3, [sp, #4]
 800fad6:	6163      	str	r3, [r4, #20]
 800fad8:	3020      	adds	r0, #32
 800fada:	2201      	movs	r2, #1
 800fadc:	e7e8      	b.n	800fab0 <__d2b+0x64>
 800fade:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fae2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fae6:	6038      	str	r0, [r7, #0]
 800fae8:	6918      	ldr	r0, [r3, #16]
 800faea:	f7ff fcc5 	bl	800f478 <__hi0bits>
 800faee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800faf2:	e7e5      	b.n	800fac0 <__d2b+0x74>
 800faf4:	08010544 	.word	0x08010544
 800faf8:	080105b5 	.word	0x080105b5

0800fafc <__ratio>:
 800fafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb00:	b085      	sub	sp, #20
 800fb02:	e9cd 1000 	strd	r1, r0, [sp]
 800fb06:	a902      	add	r1, sp, #8
 800fb08:	f7ff ff56 	bl	800f9b8 <__b2d>
 800fb0c:	9800      	ldr	r0, [sp, #0]
 800fb0e:	a903      	add	r1, sp, #12
 800fb10:	ec55 4b10 	vmov	r4, r5, d0
 800fb14:	f7ff ff50 	bl	800f9b8 <__b2d>
 800fb18:	9b01      	ldr	r3, [sp, #4]
 800fb1a:	6919      	ldr	r1, [r3, #16]
 800fb1c:	9b00      	ldr	r3, [sp, #0]
 800fb1e:	691b      	ldr	r3, [r3, #16]
 800fb20:	1ac9      	subs	r1, r1, r3
 800fb22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fb26:	1a9b      	subs	r3, r3, r2
 800fb28:	ec5b ab10 	vmov	sl, fp, d0
 800fb2c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	bfce      	itee	gt
 800fb34:	462a      	movgt	r2, r5
 800fb36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb3a:	465a      	movle	r2, fp
 800fb3c:	462f      	mov	r7, r5
 800fb3e:	46d9      	mov	r9, fp
 800fb40:	bfcc      	ite	gt
 800fb42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb46:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fb4a:	464b      	mov	r3, r9
 800fb4c:	4652      	mov	r2, sl
 800fb4e:	4620      	mov	r0, r4
 800fb50:	4639      	mov	r1, r7
 800fb52:	f7f0 fe8b 	bl	800086c <__aeabi_ddiv>
 800fb56:	ec41 0b10 	vmov	d0, r0, r1
 800fb5a:	b005      	add	sp, #20
 800fb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb60 <__copybits>:
 800fb60:	3901      	subs	r1, #1
 800fb62:	b570      	push	{r4, r5, r6, lr}
 800fb64:	1149      	asrs	r1, r1, #5
 800fb66:	6914      	ldr	r4, [r2, #16]
 800fb68:	3101      	adds	r1, #1
 800fb6a:	f102 0314 	add.w	r3, r2, #20
 800fb6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fb72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb76:	1f05      	subs	r5, r0, #4
 800fb78:	42a3      	cmp	r3, r4
 800fb7a:	d30c      	bcc.n	800fb96 <__copybits+0x36>
 800fb7c:	1aa3      	subs	r3, r4, r2
 800fb7e:	3b11      	subs	r3, #17
 800fb80:	f023 0303 	bic.w	r3, r3, #3
 800fb84:	3211      	adds	r2, #17
 800fb86:	42a2      	cmp	r2, r4
 800fb88:	bf88      	it	hi
 800fb8a:	2300      	movhi	r3, #0
 800fb8c:	4418      	add	r0, r3
 800fb8e:	2300      	movs	r3, #0
 800fb90:	4288      	cmp	r0, r1
 800fb92:	d305      	bcc.n	800fba0 <__copybits+0x40>
 800fb94:	bd70      	pop	{r4, r5, r6, pc}
 800fb96:	f853 6b04 	ldr.w	r6, [r3], #4
 800fb9a:	f845 6f04 	str.w	r6, [r5, #4]!
 800fb9e:	e7eb      	b.n	800fb78 <__copybits+0x18>
 800fba0:	f840 3b04 	str.w	r3, [r0], #4
 800fba4:	e7f4      	b.n	800fb90 <__copybits+0x30>

0800fba6 <__any_on>:
 800fba6:	f100 0214 	add.w	r2, r0, #20
 800fbaa:	6900      	ldr	r0, [r0, #16]
 800fbac:	114b      	asrs	r3, r1, #5
 800fbae:	4298      	cmp	r0, r3
 800fbb0:	b510      	push	{r4, lr}
 800fbb2:	db11      	blt.n	800fbd8 <__any_on+0x32>
 800fbb4:	dd0a      	ble.n	800fbcc <__any_on+0x26>
 800fbb6:	f011 011f 	ands.w	r1, r1, #31
 800fbba:	d007      	beq.n	800fbcc <__any_on+0x26>
 800fbbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fbc0:	fa24 f001 	lsr.w	r0, r4, r1
 800fbc4:	fa00 f101 	lsl.w	r1, r0, r1
 800fbc8:	428c      	cmp	r4, r1
 800fbca:	d10b      	bne.n	800fbe4 <__any_on+0x3e>
 800fbcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d803      	bhi.n	800fbdc <__any_on+0x36>
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	bd10      	pop	{r4, pc}
 800fbd8:	4603      	mov	r3, r0
 800fbda:	e7f7      	b.n	800fbcc <__any_on+0x26>
 800fbdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fbe0:	2900      	cmp	r1, #0
 800fbe2:	d0f5      	beq.n	800fbd0 <__any_on+0x2a>
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	e7f6      	b.n	800fbd6 <__any_on+0x30>

0800fbe8 <__ascii_wctomb>:
 800fbe8:	4603      	mov	r3, r0
 800fbea:	4608      	mov	r0, r1
 800fbec:	b141      	cbz	r1, 800fc00 <__ascii_wctomb+0x18>
 800fbee:	2aff      	cmp	r2, #255	@ 0xff
 800fbf0:	d904      	bls.n	800fbfc <__ascii_wctomb+0x14>
 800fbf2:	228a      	movs	r2, #138	@ 0x8a
 800fbf4:	601a      	str	r2, [r3, #0]
 800fbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800fbfa:	4770      	bx	lr
 800fbfc:	700a      	strb	r2, [r1, #0]
 800fbfe:	2001      	movs	r0, #1
 800fc00:	4770      	bx	lr

0800fc02 <__sfputc_r>:
 800fc02:	6893      	ldr	r3, [r2, #8]
 800fc04:	3b01      	subs	r3, #1
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	b410      	push	{r4}
 800fc0a:	6093      	str	r3, [r2, #8]
 800fc0c:	da08      	bge.n	800fc20 <__sfputc_r+0x1e>
 800fc0e:	6994      	ldr	r4, [r2, #24]
 800fc10:	42a3      	cmp	r3, r4
 800fc12:	db01      	blt.n	800fc18 <__sfputc_r+0x16>
 800fc14:	290a      	cmp	r1, #10
 800fc16:	d103      	bne.n	800fc20 <__sfputc_r+0x1e>
 800fc18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc1c:	f000 b9f0 	b.w	8010000 <__swbuf_r>
 800fc20:	6813      	ldr	r3, [r2, #0]
 800fc22:	1c58      	adds	r0, r3, #1
 800fc24:	6010      	str	r0, [r2, #0]
 800fc26:	7019      	strb	r1, [r3, #0]
 800fc28:	4608      	mov	r0, r1
 800fc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <__sfputs_r>:
 800fc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc32:	4606      	mov	r6, r0
 800fc34:	460f      	mov	r7, r1
 800fc36:	4614      	mov	r4, r2
 800fc38:	18d5      	adds	r5, r2, r3
 800fc3a:	42ac      	cmp	r4, r5
 800fc3c:	d101      	bne.n	800fc42 <__sfputs_r+0x12>
 800fc3e:	2000      	movs	r0, #0
 800fc40:	e007      	b.n	800fc52 <__sfputs_r+0x22>
 800fc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc46:	463a      	mov	r2, r7
 800fc48:	4630      	mov	r0, r6
 800fc4a:	f7ff ffda 	bl	800fc02 <__sfputc_r>
 800fc4e:	1c43      	adds	r3, r0, #1
 800fc50:	d1f3      	bne.n	800fc3a <__sfputs_r+0xa>
 800fc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc54 <_vfiprintf_r>:
 800fc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc58:	460d      	mov	r5, r1
 800fc5a:	b09d      	sub	sp, #116	@ 0x74
 800fc5c:	4614      	mov	r4, r2
 800fc5e:	4698      	mov	r8, r3
 800fc60:	4606      	mov	r6, r0
 800fc62:	b118      	cbz	r0, 800fc6c <_vfiprintf_r+0x18>
 800fc64:	6a03      	ldr	r3, [r0, #32]
 800fc66:	b90b      	cbnz	r3, 800fc6c <_vfiprintf_r+0x18>
 800fc68:	f7fd ff34 	bl	800dad4 <__sinit>
 800fc6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc6e:	07d9      	lsls	r1, r3, #31
 800fc70:	d405      	bmi.n	800fc7e <_vfiprintf_r+0x2a>
 800fc72:	89ab      	ldrh	r3, [r5, #12]
 800fc74:	059a      	lsls	r2, r3, #22
 800fc76:	d402      	bmi.n	800fc7e <_vfiprintf_r+0x2a>
 800fc78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc7a:	f7fe f8e2 	bl	800de42 <__retarget_lock_acquire_recursive>
 800fc7e:	89ab      	ldrh	r3, [r5, #12]
 800fc80:	071b      	lsls	r3, r3, #28
 800fc82:	d501      	bpl.n	800fc88 <_vfiprintf_r+0x34>
 800fc84:	692b      	ldr	r3, [r5, #16]
 800fc86:	b99b      	cbnz	r3, 800fcb0 <_vfiprintf_r+0x5c>
 800fc88:	4629      	mov	r1, r5
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	f000 f9f6 	bl	801007c <__swsetup_r>
 800fc90:	b170      	cbz	r0, 800fcb0 <_vfiprintf_r+0x5c>
 800fc92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc94:	07dc      	lsls	r4, r3, #31
 800fc96:	d504      	bpl.n	800fca2 <_vfiprintf_r+0x4e>
 800fc98:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9c:	b01d      	add	sp, #116	@ 0x74
 800fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca2:	89ab      	ldrh	r3, [r5, #12]
 800fca4:	0598      	lsls	r0, r3, #22
 800fca6:	d4f7      	bmi.n	800fc98 <_vfiprintf_r+0x44>
 800fca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcaa:	f7fe f8cb 	bl	800de44 <__retarget_lock_release_recursive>
 800fcae:	e7f3      	b.n	800fc98 <_vfiprintf_r+0x44>
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcb4:	2320      	movs	r3, #32
 800fcb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fcba:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcbe:	2330      	movs	r3, #48	@ 0x30
 800fcc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fe70 <_vfiprintf_r+0x21c>
 800fcc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fcc8:	f04f 0901 	mov.w	r9, #1
 800fccc:	4623      	mov	r3, r4
 800fcce:	469a      	mov	sl, r3
 800fcd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcd4:	b10a      	cbz	r2, 800fcda <_vfiprintf_r+0x86>
 800fcd6:	2a25      	cmp	r2, #37	@ 0x25
 800fcd8:	d1f9      	bne.n	800fcce <_vfiprintf_r+0x7a>
 800fcda:	ebba 0b04 	subs.w	fp, sl, r4
 800fcde:	d00b      	beq.n	800fcf8 <_vfiprintf_r+0xa4>
 800fce0:	465b      	mov	r3, fp
 800fce2:	4622      	mov	r2, r4
 800fce4:	4629      	mov	r1, r5
 800fce6:	4630      	mov	r0, r6
 800fce8:	f7ff ffa2 	bl	800fc30 <__sfputs_r>
 800fcec:	3001      	adds	r0, #1
 800fcee:	f000 80a7 	beq.w	800fe40 <_vfiprintf_r+0x1ec>
 800fcf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fcf4:	445a      	add	r2, fp
 800fcf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800fcf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	f000 809f 	beq.w	800fe40 <_vfiprintf_r+0x1ec>
 800fd02:	2300      	movs	r3, #0
 800fd04:	f04f 32ff 	mov.w	r2, #4294967295
 800fd08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd0c:	f10a 0a01 	add.w	sl, sl, #1
 800fd10:	9304      	str	r3, [sp, #16]
 800fd12:	9307      	str	r3, [sp, #28]
 800fd14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd18:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd1a:	4654      	mov	r4, sl
 800fd1c:	2205      	movs	r2, #5
 800fd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd22:	4853      	ldr	r0, [pc, #332]	@ (800fe70 <_vfiprintf_r+0x21c>)
 800fd24:	f7f0 fa64 	bl	80001f0 <memchr>
 800fd28:	9a04      	ldr	r2, [sp, #16]
 800fd2a:	b9d8      	cbnz	r0, 800fd64 <_vfiprintf_r+0x110>
 800fd2c:	06d1      	lsls	r1, r2, #27
 800fd2e:	bf44      	itt	mi
 800fd30:	2320      	movmi	r3, #32
 800fd32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd36:	0713      	lsls	r3, r2, #28
 800fd38:	bf44      	itt	mi
 800fd3a:	232b      	movmi	r3, #43	@ 0x2b
 800fd3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd40:	f89a 3000 	ldrb.w	r3, [sl]
 800fd44:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd46:	d015      	beq.n	800fd74 <_vfiprintf_r+0x120>
 800fd48:	9a07      	ldr	r2, [sp, #28]
 800fd4a:	4654      	mov	r4, sl
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	f04f 0c0a 	mov.w	ip, #10
 800fd52:	4621      	mov	r1, r4
 800fd54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd58:	3b30      	subs	r3, #48	@ 0x30
 800fd5a:	2b09      	cmp	r3, #9
 800fd5c:	d94b      	bls.n	800fdf6 <_vfiprintf_r+0x1a2>
 800fd5e:	b1b0      	cbz	r0, 800fd8e <_vfiprintf_r+0x13a>
 800fd60:	9207      	str	r2, [sp, #28]
 800fd62:	e014      	b.n	800fd8e <_vfiprintf_r+0x13a>
 800fd64:	eba0 0308 	sub.w	r3, r0, r8
 800fd68:	fa09 f303 	lsl.w	r3, r9, r3
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	9304      	str	r3, [sp, #16]
 800fd70:	46a2      	mov	sl, r4
 800fd72:	e7d2      	b.n	800fd1a <_vfiprintf_r+0xc6>
 800fd74:	9b03      	ldr	r3, [sp, #12]
 800fd76:	1d19      	adds	r1, r3, #4
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	9103      	str	r1, [sp, #12]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	bfbb      	ittet	lt
 800fd80:	425b      	neglt	r3, r3
 800fd82:	f042 0202 	orrlt.w	r2, r2, #2
 800fd86:	9307      	strge	r3, [sp, #28]
 800fd88:	9307      	strlt	r3, [sp, #28]
 800fd8a:	bfb8      	it	lt
 800fd8c:	9204      	strlt	r2, [sp, #16]
 800fd8e:	7823      	ldrb	r3, [r4, #0]
 800fd90:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd92:	d10a      	bne.n	800fdaa <_vfiprintf_r+0x156>
 800fd94:	7863      	ldrb	r3, [r4, #1]
 800fd96:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd98:	d132      	bne.n	800fe00 <_vfiprintf_r+0x1ac>
 800fd9a:	9b03      	ldr	r3, [sp, #12]
 800fd9c:	1d1a      	adds	r2, r3, #4
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	9203      	str	r2, [sp, #12]
 800fda2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fda6:	3402      	adds	r4, #2
 800fda8:	9305      	str	r3, [sp, #20]
 800fdaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fe80 <_vfiprintf_r+0x22c>
 800fdae:	7821      	ldrb	r1, [r4, #0]
 800fdb0:	2203      	movs	r2, #3
 800fdb2:	4650      	mov	r0, sl
 800fdb4:	f7f0 fa1c 	bl	80001f0 <memchr>
 800fdb8:	b138      	cbz	r0, 800fdca <_vfiprintf_r+0x176>
 800fdba:	9b04      	ldr	r3, [sp, #16]
 800fdbc:	eba0 000a 	sub.w	r0, r0, sl
 800fdc0:	2240      	movs	r2, #64	@ 0x40
 800fdc2:	4082      	lsls	r2, r0
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	3401      	adds	r4, #1
 800fdc8:	9304      	str	r3, [sp, #16]
 800fdca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdce:	4829      	ldr	r0, [pc, #164]	@ (800fe74 <_vfiprintf_r+0x220>)
 800fdd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fdd4:	2206      	movs	r2, #6
 800fdd6:	f7f0 fa0b 	bl	80001f0 <memchr>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	d03f      	beq.n	800fe5e <_vfiprintf_r+0x20a>
 800fdde:	4b26      	ldr	r3, [pc, #152]	@ (800fe78 <_vfiprintf_r+0x224>)
 800fde0:	bb1b      	cbnz	r3, 800fe2a <_vfiprintf_r+0x1d6>
 800fde2:	9b03      	ldr	r3, [sp, #12]
 800fde4:	3307      	adds	r3, #7
 800fde6:	f023 0307 	bic.w	r3, r3, #7
 800fdea:	3308      	adds	r3, #8
 800fdec:	9303      	str	r3, [sp, #12]
 800fdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdf0:	443b      	add	r3, r7
 800fdf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdf4:	e76a      	b.n	800fccc <_vfiprintf_r+0x78>
 800fdf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdfa:	460c      	mov	r4, r1
 800fdfc:	2001      	movs	r0, #1
 800fdfe:	e7a8      	b.n	800fd52 <_vfiprintf_r+0xfe>
 800fe00:	2300      	movs	r3, #0
 800fe02:	3401      	adds	r4, #1
 800fe04:	9305      	str	r3, [sp, #20]
 800fe06:	4619      	mov	r1, r3
 800fe08:	f04f 0c0a 	mov.w	ip, #10
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe12:	3a30      	subs	r2, #48	@ 0x30
 800fe14:	2a09      	cmp	r2, #9
 800fe16:	d903      	bls.n	800fe20 <_vfiprintf_r+0x1cc>
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d0c6      	beq.n	800fdaa <_vfiprintf_r+0x156>
 800fe1c:	9105      	str	r1, [sp, #20]
 800fe1e:	e7c4      	b.n	800fdaa <_vfiprintf_r+0x156>
 800fe20:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe24:	4604      	mov	r4, r0
 800fe26:	2301      	movs	r3, #1
 800fe28:	e7f0      	b.n	800fe0c <_vfiprintf_r+0x1b8>
 800fe2a:	ab03      	add	r3, sp, #12
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	462a      	mov	r2, r5
 800fe30:	4b12      	ldr	r3, [pc, #72]	@ (800fe7c <_vfiprintf_r+0x228>)
 800fe32:	a904      	add	r1, sp, #16
 800fe34:	4630      	mov	r0, r6
 800fe36:	f7fd fa0b 	bl	800d250 <_printf_float>
 800fe3a:	4607      	mov	r7, r0
 800fe3c:	1c78      	adds	r0, r7, #1
 800fe3e:	d1d6      	bne.n	800fdee <_vfiprintf_r+0x19a>
 800fe40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe42:	07d9      	lsls	r1, r3, #31
 800fe44:	d405      	bmi.n	800fe52 <_vfiprintf_r+0x1fe>
 800fe46:	89ab      	ldrh	r3, [r5, #12]
 800fe48:	059a      	lsls	r2, r3, #22
 800fe4a:	d402      	bmi.n	800fe52 <_vfiprintf_r+0x1fe>
 800fe4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe4e:	f7fd fff9 	bl	800de44 <__retarget_lock_release_recursive>
 800fe52:	89ab      	ldrh	r3, [r5, #12]
 800fe54:	065b      	lsls	r3, r3, #25
 800fe56:	f53f af1f 	bmi.w	800fc98 <_vfiprintf_r+0x44>
 800fe5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe5c:	e71e      	b.n	800fc9c <_vfiprintf_r+0x48>
 800fe5e:	ab03      	add	r3, sp, #12
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	462a      	mov	r2, r5
 800fe64:	4b05      	ldr	r3, [pc, #20]	@ (800fe7c <_vfiprintf_r+0x228>)
 800fe66:	a904      	add	r1, sp, #16
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f7fd fc89 	bl	800d780 <_printf_i>
 800fe6e:	e7e4      	b.n	800fe3a <_vfiprintf_r+0x1e6>
 800fe70:	0801060e 	.word	0x0801060e
 800fe74:	08010618 	.word	0x08010618
 800fe78:	0800d251 	.word	0x0800d251
 800fe7c:	0800fc31 	.word	0x0800fc31
 800fe80:	08010614 	.word	0x08010614

0800fe84 <__sflush_r>:
 800fe84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8c:	0716      	lsls	r6, r2, #28
 800fe8e:	4605      	mov	r5, r0
 800fe90:	460c      	mov	r4, r1
 800fe92:	d454      	bmi.n	800ff3e <__sflush_r+0xba>
 800fe94:	684b      	ldr	r3, [r1, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	dc02      	bgt.n	800fea0 <__sflush_r+0x1c>
 800fe9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	dd48      	ble.n	800ff32 <__sflush_r+0xae>
 800fea0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fea2:	2e00      	cmp	r6, #0
 800fea4:	d045      	beq.n	800ff32 <__sflush_r+0xae>
 800fea6:	2300      	movs	r3, #0
 800fea8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800feac:	682f      	ldr	r7, [r5, #0]
 800feae:	6a21      	ldr	r1, [r4, #32]
 800feb0:	602b      	str	r3, [r5, #0]
 800feb2:	d030      	beq.n	800ff16 <__sflush_r+0x92>
 800feb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800feb6:	89a3      	ldrh	r3, [r4, #12]
 800feb8:	0759      	lsls	r1, r3, #29
 800feba:	d505      	bpl.n	800fec8 <__sflush_r+0x44>
 800febc:	6863      	ldr	r3, [r4, #4]
 800febe:	1ad2      	subs	r2, r2, r3
 800fec0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fec2:	b10b      	cbz	r3, 800fec8 <__sflush_r+0x44>
 800fec4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fec6:	1ad2      	subs	r2, r2, r3
 800fec8:	2300      	movs	r3, #0
 800feca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fecc:	6a21      	ldr	r1, [r4, #32]
 800fece:	4628      	mov	r0, r5
 800fed0:	47b0      	blx	r6
 800fed2:	1c43      	adds	r3, r0, #1
 800fed4:	89a3      	ldrh	r3, [r4, #12]
 800fed6:	d106      	bne.n	800fee6 <__sflush_r+0x62>
 800fed8:	6829      	ldr	r1, [r5, #0]
 800feda:	291d      	cmp	r1, #29
 800fedc:	d82b      	bhi.n	800ff36 <__sflush_r+0xb2>
 800fede:	4a2a      	ldr	r2, [pc, #168]	@ (800ff88 <__sflush_r+0x104>)
 800fee0:	40ca      	lsrs	r2, r1
 800fee2:	07d6      	lsls	r6, r2, #31
 800fee4:	d527      	bpl.n	800ff36 <__sflush_r+0xb2>
 800fee6:	2200      	movs	r2, #0
 800fee8:	6062      	str	r2, [r4, #4]
 800feea:	04d9      	lsls	r1, r3, #19
 800feec:	6922      	ldr	r2, [r4, #16]
 800feee:	6022      	str	r2, [r4, #0]
 800fef0:	d504      	bpl.n	800fefc <__sflush_r+0x78>
 800fef2:	1c42      	adds	r2, r0, #1
 800fef4:	d101      	bne.n	800fefa <__sflush_r+0x76>
 800fef6:	682b      	ldr	r3, [r5, #0]
 800fef8:	b903      	cbnz	r3, 800fefc <__sflush_r+0x78>
 800fefa:	6560      	str	r0, [r4, #84]	@ 0x54
 800fefc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fefe:	602f      	str	r7, [r5, #0]
 800ff00:	b1b9      	cbz	r1, 800ff32 <__sflush_r+0xae>
 800ff02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff06:	4299      	cmp	r1, r3
 800ff08:	d002      	beq.n	800ff10 <__sflush_r+0x8c>
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f7fe fe2c 	bl	800eb68 <_free_r>
 800ff10:	2300      	movs	r3, #0
 800ff12:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff14:	e00d      	b.n	800ff32 <__sflush_r+0xae>
 800ff16:	2301      	movs	r3, #1
 800ff18:	4628      	mov	r0, r5
 800ff1a:	47b0      	blx	r6
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	1c50      	adds	r0, r2, #1
 800ff20:	d1c9      	bne.n	800feb6 <__sflush_r+0x32>
 800ff22:	682b      	ldr	r3, [r5, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d0c6      	beq.n	800feb6 <__sflush_r+0x32>
 800ff28:	2b1d      	cmp	r3, #29
 800ff2a:	d001      	beq.n	800ff30 <__sflush_r+0xac>
 800ff2c:	2b16      	cmp	r3, #22
 800ff2e:	d11e      	bne.n	800ff6e <__sflush_r+0xea>
 800ff30:	602f      	str	r7, [r5, #0]
 800ff32:	2000      	movs	r0, #0
 800ff34:	e022      	b.n	800ff7c <__sflush_r+0xf8>
 800ff36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff3a:	b21b      	sxth	r3, r3
 800ff3c:	e01b      	b.n	800ff76 <__sflush_r+0xf2>
 800ff3e:	690f      	ldr	r7, [r1, #16]
 800ff40:	2f00      	cmp	r7, #0
 800ff42:	d0f6      	beq.n	800ff32 <__sflush_r+0xae>
 800ff44:	0793      	lsls	r3, r2, #30
 800ff46:	680e      	ldr	r6, [r1, #0]
 800ff48:	bf08      	it	eq
 800ff4a:	694b      	ldreq	r3, [r1, #20]
 800ff4c:	600f      	str	r7, [r1, #0]
 800ff4e:	bf18      	it	ne
 800ff50:	2300      	movne	r3, #0
 800ff52:	eba6 0807 	sub.w	r8, r6, r7
 800ff56:	608b      	str	r3, [r1, #8]
 800ff58:	f1b8 0f00 	cmp.w	r8, #0
 800ff5c:	dde9      	ble.n	800ff32 <__sflush_r+0xae>
 800ff5e:	6a21      	ldr	r1, [r4, #32]
 800ff60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff62:	4643      	mov	r3, r8
 800ff64:	463a      	mov	r2, r7
 800ff66:	4628      	mov	r0, r5
 800ff68:	47b0      	blx	r6
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	dc08      	bgt.n	800ff80 <__sflush_r+0xfc>
 800ff6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff76:	81a3      	strh	r3, [r4, #12]
 800ff78:	f04f 30ff 	mov.w	r0, #4294967295
 800ff7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff80:	4407      	add	r7, r0
 800ff82:	eba8 0800 	sub.w	r8, r8, r0
 800ff86:	e7e7      	b.n	800ff58 <__sflush_r+0xd4>
 800ff88:	20400001 	.word	0x20400001

0800ff8c <_fflush_r>:
 800ff8c:	b538      	push	{r3, r4, r5, lr}
 800ff8e:	690b      	ldr	r3, [r1, #16]
 800ff90:	4605      	mov	r5, r0
 800ff92:	460c      	mov	r4, r1
 800ff94:	b913      	cbnz	r3, 800ff9c <_fflush_r+0x10>
 800ff96:	2500      	movs	r5, #0
 800ff98:	4628      	mov	r0, r5
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
 800ff9c:	b118      	cbz	r0, 800ffa6 <_fflush_r+0x1a>
 800ff9e:	6a03      	ldr	r3, [r0, #32]
 800ffa0:	b90b      	cbnz	r3, 800ffa6 <_fflush_r+0x1a>
 800ffa2:	f7fd fd97 	bl	800dad4 <__sinit>
 800ffa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d0f3      	beq.n	800ff96 <_fflush_r+0xa>
 800ffae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ffb0:	07d0      	lsls	r0, r2, #31
 800ffb2:	d404      	bmi.n	800ffbe <_fflush_r+0x32>
 800ffb4:	0599      	lsls	r1, r3, #22
 800ffb6:	d402      	bmi.n	800ffbe <_fflush_r+0x32>
 800ffb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffba:	f7fd ff42 	bl	800de42 <__retarget_lock_acquire_recursive>
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	4621      	mov	r1, r4
 800ffc2:	f7ff ff5f 	bl	800fe84 <__sflush_r>
 800ffc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ffc8:	07da      	lsls	r2, r3, #31
 800ffca:	4605      	mov	r5, r0
 800ffcc:	d4e4      	bmi.n	800ff98 <_fflush_r+0xc>
 800ffce:	89a3      	ldrh	r3, [r4, #12]
 800ffd0:	059b      	lsls	r3, r3, #22
 800ffd2:	d4e1      	bmi.n	800ff98 <_fflush_r+0xc>
 800ffd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffd6:	f7fd ff35 	bl	800de44 <__retarget_lock_release_recursive>
 800ffda:	e7dd      	b.n	800ff98 <_fflush_r+0xc>

0800ffdc <fiprintf>:
 800ffdc:	b40e      	push	{r1, r2, r3}
 800ffde:	b503      	push	{r0, r1, lr}
 800ffe0:	4601      	mov	r1, r0
 800ffe2:	ab03      	add	r3, sp, #12
 800ffe4:	4805      	ldr	r0, [pc, #20]	@ (800fffc <fiprintf+0x20>)
 800ffe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffea:	6800      	ldr	r0, [r0, #0]
 800ffec:	9301      	str	r3, [sp, #4]
 800ffee:	f7ff fe31 	bl	800fc54 <_vfiprintf_r>
 800fff2:	b002      	add	sp, #8
 800fff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fff8:	b003      	add	sp, #12
 800fffa:	4770      	bx	lr
 800fffc:	20000374 	.word	0x20000374

08010000 <__swbuf_r>:
 8010000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010002:	460e      	mov	r6, r1
 8010004:	4614      	mov	r4, r2
 8010006:	4605      	mov	r5, r0
 8010008:	b118      	cbz	r0, 8010012 <__swbuf_r+0x12>
 801000a:	6a03      	ldr	r3, [r0, #32]
 801000c:	b90b      	cbnz	r3, 8010012 <__swbuf_r+0x12>
 801000e:	f7fd fd61 	bl	800dad4 <__sinit>
 8010012:	69a3      	ldr	r3, [r4, #24]
 8010014:	60a3      	str	r3, [r4, #8]
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	071a      	lsls	r2, r3, #28
 801001a:	d501      	bpl.n	8010020 <__swbuf_r+0x20>
 801001c:	6923      	ldr	r3, [r4, #16]
 801001e:	b943      	cbnz	r3, 8010032 <__swbuf_r+0x32>
 8010020:	4621      	mov	r1, r4
 8010022:	4628      	mov	r0, r5
 8010024:	f000 f82a 	bl	801007c <__swsetup_r>
 8010028:	b118      	cbz	r0, 8010032 <__swbuf_r+0x32>
 801002a:	f04f 37ff 	mov.w	r7, #4294967295
 801002e:	4638      	mov	r0, r7
 8010030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010032:	6823      	ldr	r3, [r4, #0]
 8010034:	6922      	ldr	r2, [r4, #16]
 8010036:	1a98      	subs	r0, r3, r2
 8010038:	6963      	ldr	r3, [r4, #20]
 801003a:	b2f6      	uxtb	r6, r6
 801003c:	4283      	cmp	r3, r0
 801003e:	4637      	mov	r7, r6
 8010040:	dc05      	bgt.n	801004e <__swbuf_r+0x4e>
 8010042:	4621      	mov	r1, r4
 8010044:	4628      	mov	r0, r5
 8010046:	f7ff ffa1 	bl	800ff8c <_fflush_r>
 801004a:	2800      	cmp	r0, #0
 801004c:	d1ed      	bne.n	801002a <__swbuf_r+0x2a>
 801004e:	68a3      	ldr	r3, [r4, #8]
 8010050:	3b01      	subs	r3, #1
 8010052:	60a3      	str	r3, [r4, #8]
 8010054:	6823      	ldr	r3, [r4, #0]
 8010056:	1c5a      	adds	r2, r3, #1
 8010058:	6022      	str	r2, [r4, #0]
 801005a:	701e      	strb	r6, [r3, #0]
 801005c:	6962      	ldr	r2, [r4, #20]
 801005e:	1c43      	adds	r3, r0, #1
 8010060:	429a      	cmp	r2, r3
 8010062:	d004      	beq.n	801006e <__swbuf_r+0x6e>
 8010064:	89a3      	ldrh	r3, [r4, #12]
 8010066:	07db      	lsls	r3, r3, #31
 8010068:	d5e1      	bpl.n	801002e <__swbuf_r+0x2e>
 801006a:	2e0a      	cmp	r6, #10
 801006c:	d1df      	bne.n	801002e <__swbuf_r+0x2e>
 801006e:	4621      	mov	r1, r4
 8010070:	4628      	mov	r0, r5
 8010072:	f7ff ff8b 	bl	800ff8c <_fflush_r>
 8010076:	2800      	cmp	r0, #0
 8010078:	d0d9      	beq.n	801002e <__swbuf_r+0x2e>
 801007a:	e7d6      	b.n	801002a <__swbuf_r+0x2a>

0801007c <__swsetup_r>:
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	4b29      	ldr	r3, [pc, #164]	@ (8010124 <__swsetup_r+0xa8>)
 8010080:	4605      	mov	r5, r0
 8010082:	6818      	ldr	r0, [r3, #0]
 8010084:	460c      	mov	r4, r1
 8010086:	b118      	cbz	r0, 8010090 <__swsetup_r+0x14>
 8010088:	6a03      	ldr	r3, [r0, #32]
 801008a:	b90b      	cbnz	r3, 8010090 <__swsetup_r+0x14>
 801008c:	f7fd fd22 	bl	800dad4 <__sinit>
 8010090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010094:	0719      	lsls	r1, r3, #28
 8010096:	d422      	bmi.n	80100de <__swsetup_r+0x62>
 8010098:	06da      	lsls	r2, r3, #27
 801009a:	d407      	bmi.n	80100ac <__swsetup_r+0x30>
 801009c:	2209      	movs	r2, #9
 801009e:	602a      	str	r2, [r5, #0]
 80100a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100a4:	81a3      	strh	r3, [r4, #12]
 80100a6:	f04f 30ff 	mov.w	r0, #4294967295
 80100aa:	e033      	b.n	8010114 <__swsetup_r+0x98>
 80100ac:	0758      	lsls	r0, r3, #29
 80100ae:	d512      	bpl.n	80100d6 <__swsetup_r+0x5a>
 80100b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80100b2:	b141      	cbz	r1, 80100c6 <__swsetup_r+0x4a>
 80100b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100b8:	4299      	cmp	r1, r3
 80100ba:	d002      	beq.n	80100c2 <__swsetup_r+0x46>
 80100bc:	4628      	mov	r0, r5
 80100be:	f7fe fd53 	bl	800eb68 <_free_r>
 80100c2:	2300      	movs	r3, #0
 80100c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80100c6:	89a3      	ldrh	r3, [r4, #12]
 80100c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80100cc:	81a3      	strh	r3, [r4, #12]
 80100ce:	2300      	movs	r3, #0
 80100d0:	6063      	str	r3, [r4, #4]
 80100d2:	6923      	ldr	r3, [r4, #16]
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	89a3      	ldrh	r3, [r4, #12]
 80100d8:	f043 0308 	orr.w	r3, r3, #8
 80100dc:	81a3      	strh	r3, [r4, #12]
 80100de:	6923      	ldr	r3, [r4, #16]
 80100e0:	b94b      	cbnz	r3, 80100f6 <__swsetup_r+0x7a>
 80100e2:	89a3      	ldrh	r3, [r4, #12]
 80100e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80100e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100ec:	d003      	beq.n	80100f6 <__swsetup_r+0x7a>
 80100ee:	4621      	mov	r1, r4
 80100f0:	4628      	mov	r0, r5
 80100f2:	f000 f85a 	bl	80101aa <__smakebuf_r>
 80100f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100fa:	f013 0201 	ands.w	r2, r3, #1
 80100fe:	d00a      	beq.n	8010116 <__swsetup_r+0x9a>
 8010100:	2200      	movs	r2, #0
 8010102:	60a2      	str	r2, [r4, #8]
 8010104:	6962      	ldr	r2, [r4, #20]
 8010106:	4252      	negs	r2, r2
 8010108:	61a2      	str	r2, [r4, #24]
 801010a:	6922      	ldr	r2, [r4, #16]
 801010c:	b942      	cbnz	r2, 8010120 <__swsetup_r+0xa4>
 801010e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010112:	d1c5      	bne.n	80100a0 <__swsetup_r+0x24>
 8010114:	bd38      	pop	{r3, r4, r5, pc}
 8010116:	0799      	lsls	r1, r3, #30
 8010118:	bf58      	it	pl
 801011a:	6962      	ldrpl	r2, [r4, #20]
 801011c:	60a2      	str	r2, [r4, #8]
 801011e:	e7f4      	b.n	801010a <__swsetup_r+0x8e>
 8010120:	2000      	movs	r0, #0
 8010122:	e7f7      	b.n	8010114 <__swsetup_r+0x98>
 8010124:	20000374 	.word	0x20000374

08010128 <abort>:
 8010128:	b508      	push	{r3, lr}
 801012a:	2006      	movs	r0, #6
 801012c:	f000 f8a2 	bl	8010274 <raise>
 8010130:	2001      	movs	r0, #1
 8010132:	f7f2 fb37 	bl	80027a4 <_exit>

08010136 <_calloc_r>:
 8010136:	b570      	push	{r4, r5, r6, lr}
 8010138:	fba1 5402 	umull	r5, r4, r1, r2
 801013c:	b934      	cbnz	r4, 801014c <_calloc_r+0x16>
 801013e:	4629      	mov	r1, r5
 8010140:	f7fc f8c8 	bl	800c2d4 <_malloc_r>
 8010144:	4606      	mov	r6, r0
 8010146:	b928      	cbnz	r0, 8010154 <_calloc_r+0x1e>
 8010148:	4630      	mov	r0, r6
 801014a:	bd70      	pop	{r4, r5, r6, pc}
 801014c:	220c      	movs	r2, #12
 801014e:	6002      	str	r2, [r0, #0]
 8010150:	2600      	movs	r6, #0
 8010152:	e7f9      	b.n	8010148 <_calloc_r+0x12>
 8010154:	462a      	mov	r2, r5
 8010156:	4621      	mov	r1, r4
 8010158:	f7fd fd47 	bl	800dbea <memset>
 801015c:	e7f4      	b.n	8010148 <_calloc_r+0x12>

0801015e <__swhatbuf_r>:
 801015e:	b570      	push	{r4, r5, r6, lr}
 8010160:	460c      	mov	r4, r1
 8010162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010166:	2900      	cmp	r1, #0
 8010168:	b096      	sub	sp, #88	@ 0x58
 801016a:	4615      	mov	r5, r2
 801016c:	461e      	mov	r6, r3
 801016e:	da0d      	bge.n	801018c <__swhatbuf_r+0x2e>
 8010170:	89a3      	ldrh	r3, [r4, #12]
 8010172:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010176:	f04f 0100 	mov.w	r1, #0
 801017a:	bf14      	ite	ne
 801017c:	2340      	movne	r3, #64	@ 0x40
 801017e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010182:	2000      	movs	r0, #0
 8010184:	6031      	str	r1, [r6, #0]
 8010186:	602b      	str	r3, [r5, #0]
 8010188:	b016      	add	sp, #88	@ 0x58
 801018a:	bd70      	pop	{r4, r5, r6, pc}
 801018c:	466a      	mov	r2, sp
 801018e:	f000 f879 	bl	8010284 <_fstat_r>
 8010192:	2800      	cmp	r0, #0
 8010194:	dbec      	blt.n	8010170 <__swhatbuf_r+0x12>
 8010196:	9901      	ldr	r1, [sp, #4]
 8010198:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801019c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80101a0:	4259      	negs	r1, r3
 80101a2:	4159      	adcs	r1, r3
 80101a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101a8:	e7eb      	b.n	8010182 <__swhatbuf_r+0x24>

080101aa <__smakebuf_r>:
 80101aa:	898b      	ldrh	r3, [r1, #12]
 80101ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101ae:	079d      	lsls	r5, r3, #30
 80101b0:	4606      	mov	r6, r0
 80101b2:	460c      	mov	r4, r1
 80101b4:	d507      	bpl.n	80101c6 <__smakebuf_r+0x1c>
 80101b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80101ba:	6023      	str	r3, [r4, #0]
 80101bc:	6123      	str	r3, [r4, #16]
 80101be:	2301      	movs	r3, #1
 80101c0:	6163      	str	r3, [r4, #20]
 80101c2:	b003      	add	sp, #12
 80101c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101c6:	ab01      	add	r3, sp, #4
 80101c8:	466a      	mov	r2, sp
 80101ca:	f7ff ffc8 	bl	801015e <__swhatbuf_r>
 80101ce:	9f00      	ldr	r7, [sp, #0]
 80101d0:	4605      	mov	r5, r0
 80101d2:	4639      	mov	r1, r7
 80101d4:	4630      	mov	r0, r6
 80101d6:	f7fc f87d 	bl	800c2d4 <_malloc_r>
 80101da:	b948      	cbnz	r0, 80101f0 <__smakebuf_r+0x46>
 80101dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101e0:	059a      	lsls	r2, r3, #22
 80101e2:	d4ee      	bmi.n	80101c2 <__smakebuf_r+0x18>
 80101e4:	f023 0303 	bic.w	r3, r3, #3
 80101e8:	f043 0302 	orr.w	r3, r3, #2
 80101ec:	81a3      	strh	r3, [r4, #12]
 80101ee:	e7e2      	b.n	80101b6 <__smakebuf_r+0xc>
 80101f0:	89a3      	ldrh	r3, [r4, #12]
 80101f2:	6020      	str	r0, [r4, #0]
 80101f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101f8:	81a3      	strh	r3, [r4, #12]
 80101fa:	9b01      	ldr	r3, [sp, #4]
 80101fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010200:	b15b      	cbz	r3, 801021a <__smakebuf_r+0x70>
 8010202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010206:	4630      	mov	r0, r6
 8010208:	f000 f84e 	bl	80102a8 <_isatty_r>
 801020c:	b128      	cbz	r0, 801021a <__smakebuf_r+0x70>
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	f023 0303 	bic.w	r3, r3, #3
 8010214:	f043 0301 	orr.w	r3, r3, #1
 8010218:	81a3      	strh	r3, [r4, #12]
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	431d      	orrs	r5, r3
 801021e:	81a5      	strh	r5, [r4, #12]
 8010220:	e7cf      	b.n	80101c2 <__smakebuf_r+0x18>

08010222 <_raise_r>:
 8010222:	291f      	cmp	r1, #31
 8010224:	b538      	push	{r3, r4, r5, lr}
 8010226:	4605      	mov	r5, r0
 8010228:	460c      	mov	r4, r1
 801022a:	d904      	bls.n	8010236 <_raise_r+0x14>
 801022c:	2316      	movs	r3, #22
 801022e:	6003      	str	r3, [r0, #0]
 8010230:	f04f 30ff 	mov.w	r0, #4294967295
 8010234:	bd38      	pop	{r3, r4, r5, pc}
 8010236:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010238:	b112      	cbz	r2, 8010240 <_raise_r+0x1e>
 801023a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801023e:	b94b      	cbnz	r3, 8010254 <_raise_r+0x32>
 8010240:	4628      	mov	r0, r5
 8010242:	f000 f853 	bl	80102ec <_getpid_r>
 8010246:	4622      	mov	r2, r4
 8010248:	4601      	mov	r1, r0
 801024a:	4628      	mov	r0, r5
 801024c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010250:	f000 b83a 	b.w	80102c8 <_kill_r>
 8010254:	2b01      	cmp	r3, #1
 8010256:	d00a      	beq.n	801026e <_raise_r+0x4c>
 8010258:	1c59      	adds	r1, r3, #1
 801025a:	d103      	bne.n	8010264 <_raise_r+0x42>
 801025c:	2316      	movs	r3, #22
 801025e:	6003      	str	r3, [r0, #0]
 8010260:	2001      	movs	r0, #1
 8010262:	e7e7      	b.n	8010234 <_raise_r+0x12>
 8010264:	2100      	movs	r1, #0
 8010266:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801026a:	4620      	mov	r0, r4
 801026c:	4798      	blx	r3
 801026e:	2000      	movs	r0, #0
 8010270:	e7e0      	b.n	8010234 <_raise_r+0x12>
	...

08010274 <raise>:
 8010274:	4b02      	ldr	r3, [pc, #8]	@ (8010280 <raise+0xc>)
 8010276:	4601      	mov	r1, r0
 8010278:	6818      	ldr	r0, [r3, #0]
 801027a:	f7ff bfd2 	b.w	8010222 <_raise_r>
 801027e:	bf00      	nop
 8010280:	20000374 	.word	0x20000374

08010284 <_fstat_r>:
 8010284:	b538      	push	{r3, r4, r5, lr}
 8010286:	4d07      	ldr	r5, [pc, #28]	@ (80102a4 <_fstat_r+0x20>)
 8010288:	2300      	movs	r3, #0
 801028a:	4604      	mov	r4, r0
 801028c:	4608      	mov	r0, r1
 801028e:	4611      	mov	r1, r2
 8010290:	602b      	str	r3, [r5, #0]
 8010292:	f7f2 fabb 	bl	800280c <_fstat>
 8010296:	1c43      	adds	r3, r0, #1
 8010298:	d102      	bne.n	80102a0 <_fstat_r+0x1c>
 801029a:	682b      	ldr	r3, [r5, #0]
 801029c:	b103      	cbz	r3, 80102a0 <_fstat_r+0x1c>
 801029e:	6023      	str	r3, [r4, #0]
 80102a0:	bd38      	pop	{r3, r4, r5, pc}
 80102a2:	bf00      	nop
 80102a4:	20002824 	.word	0x20002824

080102a8 <_isatty_r>:
 80102a8:	b538      	push	{r3, r4, r5, lr}
 80102aa:	4d06      	ldr	r5, [pc, #24]	@ (80102c4 <_isatty_r+0x1c>)
 80102ac:	2300      	movs	r3, #0
 80102ae:	4604      	mov	r4, r0
 80102b0:	4608      	mov	r0, r1
 80102b2:	602b      	str	r3, [r5, #0]
 80102b4:	f7f2 faba 	bl	800282c <_isatty>
 80102b8:	1c43      	adds	r3, r0, #1
 80102ba:	d102      	bne.n	80102c2 <_isatty_r+0x1a>
 80102bc:	682b      	ldr	r3, [r5, #0]
 80102be:	b103      	cbz	r3, 80102c2 <_isatty_r+0x1a>
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	bd38      	pop	{r3, r4, r5, pc}
 80102c4:	20002824 	.word	0x20002824

080102c8 <_kill_r>:
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	4d07      	ldr	r5, [pc, #28]	@ (80102e8 <_kill_r+0x20>)
 80102cc:	2300      	movs	r3, #0
 80102ce:	4604      	mov	r4, r0
 80102d0:	4608      	mov	r0, r1
 80102d2:	4611      	mov	r1, r2
 80102d4:	602b      	str	r3, [r5, #0]
 80102d6:	f7f2 fa55 	bl	8002784 <_kill>
 80102da:	1c43      	adds	r3, r0, #1
 80102dc:	d102      	bne.n	80102e4 <_kill_r+0x1c>
 80102de:	682b      	ldr	r3, [r5, #0]
 80102e0:	b103      	cbz	r3, 80102e4 <_kill_r+0x1c>
 80102e2:	6023      	str	r3, [r4, #0]
 80102e4:	bd38      	pop	{r3, r4, r5, pc}
 80102e6:	bf00      	nop
 80102e8:	20002824 	.word	0x20002824

080102ec <_getpid_r>:
 80102ec:	f7f2 ba42 	b.w	8002774 <_getpid>

080102f0 <_init>:
 80102f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f2:	bf00      	nop
 80102f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102f6:	bc08      	pop	{r3}
 80102f8:	469e      	mov	lr, r3
 80102fa:	4770      	bx	lr

080102fc <_fini>:
 80102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fe:	bf00      	nop
 8010300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010302:	bc08      	pop	{r3}
 8010304:	469e      	mov	lr, r3
 8010306:	4770      	bx	lr
