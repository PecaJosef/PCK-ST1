
PCK-ST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009710  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009898  08009898  0000a898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009928  08009928  0000b138  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009928  08009928  0000a928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009930  08009930  0000b138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009930  08009930  0000a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009934  08009934  0000a934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  08009938  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed4  20000138  08009a70  0000b138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000200c  08009a70  0000c00c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e309  00000000  00000000  0000b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004241  00000000  00000000  00029471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138e  00000000  00000000  0002eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a951  00000000  00000000  00030386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020912  00000000  00000000  0005acd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f95a6  00000000  00000000  0007b5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174b8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a18  00000000  00000000  00174bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017b5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000138 	.word	0x20000138
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009880 	.word	0x08009880

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000013c 	.word	0x2000013c
 80001c4:	08009880 	.word	0x08009880

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LED_IT_Handeler>:
#include "stm32l4xx_hal.h"
#include "main.h"


void LED_IT_Handeler()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80004f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <LED_IT_Handeler+0x14>)
 80004fe:	f001 f961 	bl	80017c4 <HAL_GPIO_TogglePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	48000800 	.word	0x48000800

0800050c <LED_Tim_Enable>:

void LED_Tim_Enable()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <LED_Tim_Enable+0x10>)
 8000512:	f003 ffbf 	bl	8004494 <HAL_TIM_Base_Start_IT>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200001a8 	.word	0x200001a8

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fde1 	bl	80010ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f83a 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 fa1a 	bl	8000964 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000530:	f000 f886 	bl	8000640 <MX_I2C3_Init>
  MX_UART4_Init();
 8000534:	f000 f986 	bl	8000844 <MX_UART4_Init>
  MX_UART5_Init();
 8000538:	f000 f9b4 	bl	80008a4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800053c:	f000 f9e2 	bl	8000904 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 8000540:	f000 f95a 	bl	80007f8 <MX_TIM17_Init>
  MX_TIM2_Init();
 8000544:	f000 f8bc 	bl	80006c0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000548:	f008 fb38 	bl	8008bbc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800054c:	f000 f906 	bl	800075c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  LED_Tim_Enable();
 8000550:	f7ff ffdc 	bl	800050c <LED_Tim_Enable>
  Stepper_IT_Enable();
 8000554:	f000 fad8 	bl	8000b08 <Stepper_IT_Enable>

  Stepper_Enable(&EL_Axis_motor);
 8000558:	480e      	ldr	r0, [pc, #56]	@ (8000594 <main+0x74>)
 800055a:	f000 fadf 	bl	8000b1c <Stepper_Enable>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Stepper_Move(&EL_Axis_motor, 360.0f, 180.0f, 1);
 800055e:	2101      	movs	r1, #1
 8000560:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000598 <main+0x78>
 8000564:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800059c <main+0x7c>
 8000568:	480a      	ldr	r0, [pc, #40]	@ (8000594 <main+0x74>)
 800056a:	f000 faef 	bl	8000b4c <Stepper_Move>
	  HAL_Delay(3000);
 800056e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000572:	f000 fe2f 	bl	80011d4 <HAL_Delay>
	  Stepper_Move(&EL_Axis_motor, 360.0f, 180.0f, 0);
 8000576:	2100      	movs	r1, #0
 8000578:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8000598 <main+0x78>
 800057c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800059c <main+0x7c>
 8000580:	4804      	ldr	r0, [pc, #16]	@ (8000594 <main+0x74>)
 8000582:	f000 fae3 	bl	8000b4c <Stepper_Move>
	  HAL_Delay(3000);
 8000586:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800058a:	f000 fe23 	bl	80011d4 <HAL_Delay>
	  Stepper_Move(&EL_Axis_motor, 360.0f, 180.0f, 1);
 800058e:	bf00      	nop
 8000590:	e7e5      	b.n	800055e <main+0x3e>
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000
 8000598:	43340000 	.word	0x43340000
 800059c:	43b40000 	.word	0x43b40000

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b096      	sub	sp, #88	@ 0x58
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2244      	movs	r2, #68	@ 0x44
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f009 f93a 	bl	8009828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	463b      	mov	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005c6:	f002 fbed 	bl	8002da4 <HAL_PWREx_ControlVoltageScaling>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d0:	f000 fa66 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	2303      	movs	r3, #3
 80005e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005ea:	2308      	movs	r3, #8
 80005ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fc36 	bl	8002e70 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800060a:	f000 fa49 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2303      	movs	r3, #3
 8000614:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	2103      	movs	r1, #3
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fffe 	bl	8003628 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000632:	f000 fa35 	bl	8000aa0 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3758      	adds	r7, #88	@ 0x58
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000644:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_I2C3_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	@ (80006b8 <MX_I2C3_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_I2C3_Init+0x74>)
 800064c:	4a1b      	ldr	r2, [pc, #108]	@ (80006bc <MX_I2C3_Init+0x7c>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000650:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <MX_I2C3_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <MX_I2C3_Init+0x74>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_I2C3_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <MX_I2C3_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_I2C3_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_I2C3_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_I2C3_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	@ (80006b4 <MX_I2C3_Init+0x74>)
 800067c:	f001 f8bc 	bl	80017f8 <HAL_I2C_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000686:	f000 fa0b 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4809      	ldr	r0, [pc, #36]	@ (80006b4 <MX_I2C3_Init+0x74>)
 800068e:	f001 f94e 	bl	800192e <HAL_I2CEx_ConfigAnalogFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000698:	f000 fa02 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_I2C3_Init+0x74>)
 80006a0:	f001 f990 	bl	80019c4 <HAL_I2CEx_ConfigDigitalFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 f9f9 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000154 	.word	0x20000154
 80006b8:	40005c00 	.word	0x40005c00
 80006bc:	10b17db5 	.word	0x10b17db5

080006c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <MX_TIM2_Init+0x98>)
 80006e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_TIM2_Init+0x98>)
 80006e8:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80006ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_TIM2_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_TIM2_Init+0x98>)
 80006f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_TIM2_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_TIM2_Init+0x98>)
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000708:	4813      	ldr	r0, [pc, #76]	@ (8000758 <MX_TIM2_Init+0x98>)
 800070a:	f003 fe6b 	bl	80043e4 <HAL_TIM_Base_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000714:	f000 f9c4 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	4619      	mov	r1, r3
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <MX_TIM2_Init+0x98>)
 8000726:	f004 f82c 	bl	8004782 <HAL_TIM_ConfigClockSource>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000730:	f000 f9b6 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_TIM2_Init+0x98>)
 8000742:	f004 fa4f 	bl	8004be4 <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800074c:	f000 f9a8 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200001a8 	.word	0x200001a8

0800075c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_TIM3_Init+0x94>)
 800077c:	4a1d      	ldr	r2, [pc, #116]	@ (80007f4 <MX_TIM3_Init+0x98>)
 800077e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_TIM3_Init+0x94>)
 8000782:	223f      	movs	r2, #63	@ 0x3f
 8000784:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_TIM3_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_TIM3_Init+0x94>)
 800078e:	2209      	movs	r2, #9
 8000790:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_TIM3_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_TIM3_Init+0x94>)
 800079a:	2280      	movs	r2, #128	@ 0x80
 800079c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800079e:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <MX_TIM3_Init+0x94>)
 80007a0:	f003 fe20 	bl	80043e4 <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 f979 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <MX_TIM3_Init+0x94>)
 80007bc:	f003 ffe1 	bl	8004782 <HAL_TIM_ConfigClockSource>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f96b 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4806      	ldr	r0, [pc, #24]	@ (80007f0 <MX_TIM3_Init+0x94>)
 80007d8:	f004 fa04 	bl	8004be4 <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007e2:	f000 f95d 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200001f4 	.word	0x200001f4
 80007f4:	40000400 	.word	0x40000400

080007f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_TIM17_Init+0x44>)
 80007fe:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <MX_TIM17_Init+0x48>)
 8000800:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_TIM17_Init+0x44>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_TIM17_Init+0x44>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_TIM17_Init+0x44>)
 8000810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000814:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_TIM17_Init+0x44>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <MX_TIM17_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_TIM17_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_TIM17_Init+0x44>)
 800082a:	f003 fddb 	bl	80043e4 <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000834:	f000 f934 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000240 	.word	0x20000240
 8000840:	40014800 	.word	0x40014800

08000844 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_UART4_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_UART4_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_UART4_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_UART4_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_UART4_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_UART4_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_UART4_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_UART4_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_UART4_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_UART4_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_UART4_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_UART4_Init+0x58>)
 8000888:	f004 fa52 	bl	8004d30 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f905 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000028c 	.word	0x2000028c
 80008a0:	40004c00 	.word	0x40004c00

080008a4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_UART5_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	@ (8000900 <MX_UART5_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <MX_UART5_Init+0x58>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_UART5_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_UART5_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_UART5_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_UART5_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_UART5_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_UART5_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_UART5_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_UART5_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_UART5_Init+0x58>)
 80008e8:	f004 fa22 	bl	8004d30 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 f8d5 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000314 	.word	0x20000314
 8000900:	40005000 	.word	0x40005000

08000904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_USART1_UART_Init+0x58>)
 800090a:	4a15      	ldr	r2, [pc, #84]	@ (8000960 <MX_USART1_UART_Init+0x5c>)
 800090c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090e:	4b13      	ldr	r3, [pc, #76]	@ (800095c <MX_USART1_UART_Init+0x58>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_USART1_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_USART1_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_USART1_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_USART1_UART_Init+0x58>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <MX_USART1_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_USART1_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <MX_USART1_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_USART1_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_USART1_UART_Init+0x58>)
 8000948:	f004 f9f2 	bl	8004d30 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 f8a5 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000039c 	.word	0x2000039c
 8000960:	40013800 	.word	0x40013800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	4b46      	ldr	r3, [pc, #280]	@ (8000a94 <MX_GPIO_Init+0x130>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a45      	ldr	r2, [pc, #276]	@ (8000a94 <MX_GPIO_Init+0x130>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b43      	ldr	r3, [pc, #268]	@ (8000a94 <MX_GPIO_Init+0x130>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b40      	ldr	r3, [pc, #256]	@ (8000a94 <MX_GPIO_Init+0x130>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	4a3f      	ldr	r2, [pc, #252]	@ (8000a94 <MX_GPIO_Init+0x130>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a39      	ldr	r2, [pc, #228]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b37      	ldr	r3, [pc, #220]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b34      	ldr	r3, [pc, #208]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a33      	ldr	r2, [pc, #204]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b2e      	ldr	r3, [pc, #184]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a2d      	ldr	r2, [pc, #180]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a94 <MX_GPIO_Init+0x130>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 80009f2:	2200      	movs	r2, #0
 80009f4:	f24c 01e0 	movw	r1, #49376	@ 0xc0e0
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f000 feca 	bl	8001794 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8000a00:	2200      	movs	r2, #0
 8000a02:	f240 4137 	movw	r1, #1079	@ 0x437
 8000a06:	4824      	ldr	r0, [pc, #144]	@ (8000a98 <MX_GPIO_Init+0x134>)
 8000a08:	f000 fec4 	bl	8001794 <HAL_GPIO_WritePin>
                          |LED_USB_Pin|LED_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEC_EN_Pin|DEC_DIR_Pin|DEC_STEP_Pin|LED2_Pin
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 615c 	mov.w	r1, #3520	@ 0xdc0
 8000a12:	4822      	ldr	r0, [pc, #136]	@ (8000a9c <MX_GPIO_Init+0x138>)
 8000a14:	f000 febe 	bl	8001794 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : AZ_EN_Pin AZ_DIR_Pin AZ_STEP_Pin LED4_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8000a18:	f24c 03e0 	movw	r3, #49376	@ 0xc0e0
 8000a1c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a34:	f000 fd04 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_SLEEP_n_Pin EL_EN_Pin EL_DIR_Pin EL_STEP_Pin
                           LED_USB_Pin LED_DC_Pin */
  GPIO_InitStruct.Pin = STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8000a38:	f240 4337 	movw	r3, #1079	@ 0x437
 8000a3c:	617b      	str	r3, [r7, #20]
                          |LED_USB_Pin|LED_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4811      	ldr	r0, [pc, #68]	@ (8000a98 <MX_GPIO_Init+0x134>)
 8000a52:	f000 fcf5 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEC_EN_Pin DEC_DIR_Pin DEC_STEP_Pin LED2_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = DEC_EN_Pin|DEC_DIR_Pin|DEC_STEP_Pin|LED2_Pin
 8000a56:	f44f 635c 	mov.w	r3, #3520	@ 0xdc0
 8000a5a:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <MX_GPIO_Init+0x138>)
 8000a70:	f000 fce6 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_STATE_Pin */
  GPIO_InitStruct.Pin = PWR_STATE_Pin;
 8000a74:	2308      	movs	r3, #8
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_STATE_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0x134>)
 8000a88:	f000 fcda 	bl	8001440 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	48000800 	.word	0x48000800

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <Stepper_IT_Handeler>:
	.enabled = false,
};


void Stepper_IT_Handeler()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    if (EL_Axis_motor.enabled)
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d023      	beq.n	8000b02 <Stepper_IT_Handeler+0x56>
    {
        if (EL_Axis_motor.Steps_remaining == 0)
 8000aba:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d104      	bne.n	8000acc <Stepper_IT_Handeler+0x20>
        {
            EL_Axis_motor.enabled= false;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            return;
 8000aca:	e01a      	b.n	8000b02 <Stepper_IT_Handeler+0x56>
        }
        if (EL_Axis_motor.Tick_counter == 0)
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d111      	bne.n	8000af8 <Stepper_IT_Handeler+0x4c>
        {
            // Generate one step pulse
            HAL_GPIO_TogglePin(EL_Axis_motor.STEP_Port, EL_Axis_motor.STEP_Pin);
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000ada:	8892      	ldrh	r2, [r2, #4]
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fe70 	bl	80017c4 <HAL_GPIO_TogglePin>

            EL_Axis_motor.Steps_remaining--;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	4a06      	ldr	r2, [pc, #24]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000aec:	6193      	str	r3, [r2, #24]
            EL_Axis_motor.Tick_counter = EL_Axis_motor.Step_interval_ticks;
 8000aee:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000af4:	6213      	str	r3, [r2, #32]
 8000af6:	e004      	b.n	8000b02 <Stepper_IT_Handeler+0x56>
        }
        else
        {
            EL_Axis_motor.Tick_counter--;
 8000af8:	4b02      	ldr	r3, [pc, #8]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a01      	ldr	r2, [pc, #4]	@ (8000b04 <Stepper_IT_Handeler+0x58>)
 8000b00:	6213      	str	r3, [r2, #32]
        }
    }
	//HAL_GPIO_TogglePin(EL_STEP_GPIO_Port, EL_STEP_Pin);

}
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000

08000b08 <Stepper_IT_Enable>:

void Stepper_IT_Enable()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <Stepper_IT_Enable+0x10>)
 8000b0e:	f003 fcc1 	bl	8004494 <HAL_TIM_Base_Start_IT>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200001f4 	.word	0x200001f4

08000b1c <Stepper_Enable>:

void Stepper_Enable(Stepper_motor *Axis)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Axis->EN_Port,Axis->EN_Pin, GPIO_PIN_SET);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6898      	ldr	r0, [r3, #8]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	899b      	ldrh	r3, [r3, #12]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f000 fe30 	bl	8001794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_n_GPIO_Port,STEP_SLEEP_n_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2101      	movs	r1, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <Stepper_Enable+0x2c>)
 8000b3a:	f000 fe2b 	bl	8001794 <HAL_GPIO_WritePin>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	48000400 	.word	0x48000400

08000b4c <Stepper_Move>:

void Stepper_Move(Stepper_motor *Axis, float angle, float speed, bool direction) //Speed is in deg/s
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b58:	edc7 0a01 	vstr	s1, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
	if (!Axis || speed <= 0.0f)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d038      	beq.n	8000bd8 <Stepper_Move+0x8c>
 8000b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b72:	d931      	bls.n	8000bd8 <Stepper_Move+0x8c>
	        return;

	//Steps calculation
	Axis->Steps_remaining = (uint32_t)(2*angle*Axis->Steps_per_deg); //Times two because of toggle STEP pin -> twice lower steps
 8000b74:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b78:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b8a:	ee17 2a90 	vmov	r2, s15
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	619a      	str	r2, [r3, #24]
	//Steps per second calculation
	Axis->Step_interval_ticks = (uint32_t)(STEPPER_TIMER_FREQ/(2*speed*Axis->Steps_per_deg));
 8000b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b96:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ba4:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000be0 <Stepper_Move+0x94>
 8000ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bb0:	ee17 2a90 	vmov	r2, s15
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	61da      	str	r2, [r3, #28]
	Axis->Tick_counter = 0;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
	Axis->enabled = true;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	HAL_GPIO_WritePin(Axis->DIR_Port, Axis->DIR_Pin, direction);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6918      	ldr	r0, [r3, #16]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	8a9b      	ldrh	r3, [r3, #20]
 8000bce:	78fa      	ldrb	r2, [r7, #3]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f000 fddf 	bl	8001794 <HAL_GPIO_WritePin>
 8000bd6:	e000      	b.n	8000bda <Stepper_Move+0x8e>
	        return;
 8000bd8:	bf00      	nop
}
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	47c35000 	.word	0x47c35000

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2288      	movs	r2, #136	@ 0x88
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f008 fdeb 	bl	8009828 <memset>
  if(hi2c->Instance==I2C3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <HAL_I2C_MspInit+0xb0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d13b      	bne.n	8000cd4 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c60:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fefe 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c76:	f7ff ff13 	bl	8000aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_I2C_MspInit+0xb4>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ce0 <HAL_I2C_MspInit+0xb4>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_I2C_MspInit+0xb4>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c92:	2303      	movs	r3, #3
 8000c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000caa:	2304      	movs	r3, #4
 8000cac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480b      	ldr	r0, [pc, #44]	@ (8000ce4 <HAL_I2C_MspInit+0xb8>)
 8000cb8:	f000 fbc2 	bl	8001440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_I2C_MspInit+0xb4>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc0:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <HAL_I2C_MspInit+0xb4>)
 8000cc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <HAL_I2C_MspInit+0xb4>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ccc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000cd4:	bf00      	nop
 8000cd6:	37b0      	adds	r7, #176	@ 0xb0
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40005c00 	.word	0x40005c00
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48000800 	.word	0x48000800

08000ce8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf8:	d114      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfe:	4a21      	ldr	r2, [pc, #132]	@ (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2101      	movs	r1, #1
 8000d16:	201c      	movs	r0, #28
 8000d18:	f000 fb5b 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d1c:	201c      	movs	r0, #28
 8000d1e:	f000 fb74 	bl	800140a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d22:	e02a      	b.n	8000d7a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <HAL_TIM_Base_MspInit+0xa0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d114      	bne.n	8000d58 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	4a14      	ldr	r2, [pc, #80]	@ (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201d      	movs	r0, #29
 8000d4c:	f000 fb41 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d50:	201d      	movs	r0, #29
 8000d52:	f000 fb5a 	bl	800140a <HAL_NVIC_EnableIRQ>
}
 8000d56:	e010      	b.n	8000d7a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM17)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <HAL_TIM_Base_MspInit+0xa4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10b      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d66:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d6e:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <HAL_TIM_Base_MspInit+0x9c>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40000400 	.word	0x40000400
 8000d8c:	40014800 	.word	0x40014800

08000d90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0b0      	sub	sp, #192	@ 0xc0
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dac:	2288      	movs	r2, #136	@ 0x88
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f008 fd39 	bl	8009828 <memset>
  if(huart->Instance==UART4)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a74      	ldr	r2, [pc, #464]	@ (8000f8c <HAL_UART_MspInit+0x1fc>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d13c      	bne.n	8000e3a <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fe4d 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd8:	f7ff fe62 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	4a6b      	ldr	r2, [pc, #428]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000de2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000de8:	4b69      	ldr	r3, [pc, #420]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b66      	ldr	r3, [pc, #408]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	4a65      	ldr	r2, [pc, #404]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e00:	4b63      	ldr	r3, [pc, #396]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e24:	2308      	movs	r3, #8
 8000e26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e34:	f000 fb04 	bl	8001440 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e38:	e0a4      	b.n	8000f84 <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==UART5)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a55      	ldr	r2, [pc, #340]	@ (8000f94 <HAL_UART_MspInit+0x204>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d15d      	bne.n	8000f00 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000e44:	2310      	movs	r3, #16
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 fe0b 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000e5c:	f7ff fe20 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e60:	4b4b      	ldr	r3, [pc, #300]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e64:	4a4a      	ldr	r2, [pc, #296]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6c:	4b48      	ldr	r3, [pc, #288]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b45      	ldr	r3, [pc, #276]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7c:	4a44      	ldr	r2, [pc, #272]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e84:	4b42      	ldr	r3, [pc, #264]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e90:	4b3f      	ldr	r3, [pc, #252]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	4a3e      	ldr	r2, [pc, #248]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4832      	ldr	r0, [pc, #200]	@ (8000f98 <HAL_UART_MspInit+0x208>)
 8000ed0:	f000 fab6 	bl	8001440 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000eec:	2308      	movs	r3, #8
 8000eee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4828      	ldr	r0, [pc, #160]	@ (8000f9c <HAL_UART_MspInit+0x20c>)
 8000efa:	f000 faa1 	bl	8001440 <HAL_GPIO_Init>
}
 8000efe:	e041      	b.n	8000f84 <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==USART1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a26      	ldr	r2, [pc, #152]	@ (8000fa0 <HAL_UART_MspInit+0x210>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d13c      	bne.n	8000f84 <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 fda8 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000f22:	f7ff fdbd 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2a:	4a19      	ldr	r2, [pc, #100]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	4a13      	ldr	r2, [pc, #76]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_UART_MspInit+0x200>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f70:	2307      	movs	r3, #7
 8000f72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f80:	f000 fa5e 	bl	8001440 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	37c0      	adds	r7, #192	@ 0xc0
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004c00 	.word	0x40004c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40005000 	.word	0x40005000
 8000f98:	48000800 	.word	0x48000800
 8000f9c:	48000c00 	.word	0x48000c00
 8000fa0:	40013800 	.word	0x40013800

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <NMI_Handler+0x4>

08000fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffa:	f000 f8cb 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <TIM2_IRQHandler+0x10>)
 800100a:	f003 fab3 	bl	8004574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001a8 	.word	0x200001a8

08001018 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <TIM3_IRQHandler+0x10>)
 800101e:	f003 faa9 	bl	8004574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001f4 	.word	0x200001f4

0800102c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <OTG_FS_IRQHandler+0x10>)
 8001032:	f000 fe51 	bl	8001cd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20001908 	.word	0x20001908

08001040 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <HAL_TIM_PeriodElapsedCallback>:
#include "stepper.h"
#include "main.h"
#include "stm32l4xx_hal.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001074:	d102      	bne.n	800107c <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  //LEDs timer
	  LED_IT_Handeler();
 8001076:	f7ff fa3d 	bl	80004f4 <LED_IT_Handeler>
  {
	  //Stepper timer
	  Stepper_IT_Handeler();
  }

}
 800107a:	e006      	b.n	800108a <HAL_TIM_PeriodElapsedCallback+0x26>
  else if(htim->Instance == TIM3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_TIM_PeriodElapsedCallback+0x26>
	  Stepper_IT_Handeler();
 8001086:	f7ff fd11 	bl	8000aac <Stepper_IT_Handeler>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40000400 	.word	0x40000400

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800109c:	f7ff ffd0 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	@ (80010d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	@ (80010e4 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f008 fbb7 	bl	8009838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff fa29 	bl	8000520 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 80010dc:	08009938 	.word	0x08009938
  ldr r2, =_sbss
 80010e0:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80010e4:	2000200c 	.word	0x2000200c

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>

080010ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f961 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	200f      	movs	r0, #15
 80010fc:	f000 f80e 	bl	800111c <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	e001      	b.n	8001110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800110c:	f7ff fd6a 	bl	8000be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001110:	79fb      	ldrb	r3, [r7, #7]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <HAL_InitTick+0x6c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d023      	beq.n	8001178 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <HAL_InitTick+0x70>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <HAL_InitTick+0x6c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f96d 	bl	8001426 <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10f      	bne.n	8001172 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d809      	bhi.n	800116c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f937 	bl	80013d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001164:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <HAL_InitTick+0x74>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e007      	b.n	800117c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e004      	b.n	800117c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e001      	b.n	800117c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000034 	.word	0x20000034
 800118c:	2000002c 	.word	0x2000002c
 8001190:	20000030 	.word	0x20000030

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000034 	.word	0x20000034
 80011b8:	20000424 	.word	0x20000424

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000424 	.word	0x20000424

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000034 	.word	0x20000034

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	@ (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	@ (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e17f      	b.n	8001750 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8171 	beq.w	800174a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d005      	beq.n	8001480 <HAL_GPIO_Init+0x40>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d130      	bne.n	80014e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b6:	2201      	movs	r2, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f003 0201 	and.w	r2, r3, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d118      	bne.n	8001520 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	08db      	lsrs	r3, r3, #3
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b03      	cmp	r3, #3
 800152a:	d017      	beq.n	800155c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d123      	bne.n	80015b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	6939      	ldr	r1, [r7, #16]
 80015ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80ac 	beq.w	800174a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001770 <HAL_GPIO_Init+0x330>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001770 <HAL_GPIO_Init+0x330>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80015fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001770 <HAL_GPIO_Init+0x330>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800160a:	4a5a      	ldr	r2, [pc, #360]	@ (8001774 <HAL_GPIO_Init+0x334>)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3302      	adds	r3, #2
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	220f      	movs	r2, #15
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001634:	d025      	beq.n	8001682 <HAL_GPIO_Init+0x242>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4f      	ldr	r2, [pc, #316]	@ (8001778 <HAL_GPIO_Init+0x338>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01f      	beq.n	800167e <HAL_GPIO_Init+0x23e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4e      	ldr	r2, [pc, #312]	@ (800177c <HAL_GPIO_Init+0x33c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d019      	beq.n	800167a <HAL_GPIO_Init+0x23a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4d      	ldr	r2, [pc, #308]	@ (8001780 <HAL_GPIO_Init+0x340>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0x236>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4c      	ldr	r2, [pc, #304]	@ (8001784 <HAL_GPIO_Init+0x344>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00d      	beq.n	8001672 <HAL_GPIO_Init+0x232>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4b      	ldr	r2, [pc, #300]	@ (8001788 <HAL_GPIO_Init+0x348>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x22e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4a      	ldr	r2, [pc, #296]	@ (800178c <HAL_GPIO_Init+0x34c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_GPIO_Init+0x22a>
 8001666:	2306      	movs	r3, #6
 8001668:	e00c      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800166a:	2307      	movs	r3, #7
 800166c:	e00a      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800166e:	2305      	movs	r3, #5
 8001670:	e008      	b.n	8001684 <HAL_GPIO_Init+0x244>
 8001672:	2304      	movs	r3, #4
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x244>
 8001676:	2303      	movs	r3, #3
 8001678:	e004      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800167a:	2302      	movs	r3, #2
 800167c:	e002      	b.n	8001684 <HAL_GPIO_Init+0x244>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x244>
 8001682:	2300      	movs	r3, #0
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	f002 0203 	and.w	r2, r2, #3
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	4093      	lsls	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001694:	4937      	ldr	r1, [pc, #220]	@ (8001774 <HAL_GPIO_Init+0x334>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001790 <HAL_GPIO_Init+0x350>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c6:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <HAL_GPIO_Init+0x350>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016cc:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <HAL_GPIO_Init+0x350>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f0:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <HAL_GPIO_Init+0x350>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016f6:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <HAL_GPIO_Init+0x350>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800171a:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <HAL_GPIO_Init+0x350>)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_GPIO_Init+0x350>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001744:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <HAL_GPIO_Init+0x350>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	f47f ae78 	bne.w	8001450 <HAL_GPIO_Init+0x10>
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	48000400 	.word	0x48000400
 800177c:	48000800 	.word	0x48000800
 8001780:	48000c00 	.word	0x48000c00
 8001784:	48001000 	.word	0x48001000
 8001788:	48001400 	.word	0x48001400
 800178c:	48001800 	.word	0x48001800
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	041a      	lsls	r2, r3, #16
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43d9      	mvns	r1, r3
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	400b      	ands	r3, r1
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e08d      	b.n	8001926 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fa04 	bl	8000c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2224      	movs	r2, #36	@ 0x24
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001848:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001858:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	e006      	b.n	8001880 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800187e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d108      	bne.n	800189a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	e007      	b.n	80018aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69d9      	ldr	r1, [r3, #28]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b20      	cmp	r3, #32
 8001942:	d138      	bne.n	80019b6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800194e:	2302      	movs	r3, #2
 8001950:	e032      	b.n	80019b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2224      	movs	r2, #36	@ 0x24
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001980:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2220      	movs	r2, #32
 80019a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019b6:	2302      	movs	r3, #2
  }
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	d139      	bne.n	8001a4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e033      	b.n	8001a50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	@ 0x24
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e101      	b.n	8001c72 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f007 fa8c 	bl	8008fa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 ff43 	bl	8005926 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7c1a      	ldrb	r2, [r3, #16]
 8001aa8:	f88d 2000 	strb.w	r2, [sp]
 8001aac:	3304      	adds	r3, #4
 8001aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab0:	f003 fe5f 	bl	8005772 <USB_CoreInit>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0d5      	b.n	8001c72 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 ff3b 	bl	8005948 <USB_SetCurrentMode>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0c6      	b.n	8001c72 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e04a      	b.n	8001b80 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3315      	adds	r3, #21
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3314      	adds	r3, #20
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	b298      	uxth	r0, r3
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	332e      	adds	r3, #46	@ 0x2e
 8001b26:	4602      	mov	r2, r0
 8001b28:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	3318      	adds	r3, #24
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	331c      	adds	r3, #28
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	3320      	adds	r3, #32
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	3324      	adds	r3, #36	@ 0x24
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d3af      	bcc.n	8001aea <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	e044      	b.n	8001c1a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b90:	7bfa      	ldrb	r2, [r7, #15]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	3301      	adds	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	791b      	ldrb	r3, [r3, #4]
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d3b5      	bcc.n	8001b90 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7c1a      	ldrb	r2, [r3, #16]
 8001c2c:	f88d 2000 	strb.w	r2, [sp]
 8001c30:	3304      	adds	r3, #4
 8001c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c34:	f003 fed4 	bl	80059e0 <USB_DevInit>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e013      	b.n	8001c72 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7b1b      	ldrb	r3, [r3, #12]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f001 f86d 	bl	8002d40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fe8b 	bl	8006986 <USB_DevDisconnect>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_Start+0x1c>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e01c      	b.n	8001cd0 <HAL_PCD_Start+0x56>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7b5b      	ldrb	r3, [r3, #13]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d105      	bne.n	8001cb2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001caa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fe24 	bl	8005904 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 fe3f 	bl	8006944 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b08d      	sub	sp, #52	@ 0x34
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fefd 	bl	8006aee <USB_GetMode>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 8481 	bne.w	80025fe <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 fe61 	bl	80069c8 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8477 	beq.w	80025fc <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 fe4e 	bl	80069c8 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d107      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f002 0202 	and.w	r2, r2, #2
 8001d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 fe3c 	bl	80069c8 <USB_ReadInterrupts>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d161      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0210 	bic.w	r2, r2, #16
 8001d68:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f003 020f 	and.w	r2, r3, #15
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	3304      	adds	r3, #4
 8001d88:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001d90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d94:	d124      	bne.n	8001de0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d035      	beq.n	8001e0e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	6a38      	ldr	r0, [r7, #32]
 8001db6:	f004 fc73 	bl	80066a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dc6:	441a      	add	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dd8:	441a      	add	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	615a      	str	r2, [r3, #20]
 8001dde:	e016      	b.n	8001e0e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001de6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001dea:	d110      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001df2:	2208      	movs	r2, #8
 8001df4:	4619      	mov	r1, r3
 8001df6:	6a38      	ldr	r0, [r7, #32]
 8001df8:	f004 fc52 	bl	80066a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e08:	441a      	add	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0210 	orr.w	r2, r2, #16
 8001e1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 fdd0 	bl	80069c8 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001e32:	f040 80a7 	bne.w	8001f84 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 fdd5 	bl	80069ee <USB_ReadDevAllOutEpInterrupt>
 8001e44:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001e46:	e099      	b.n	8001f7c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 808e 	beq.w	8001f70 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 fdf9 	bl	8006a56 <USB_ReadDevOutEPInterrupt>
 8001e64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00c      	beq.n	8001e8a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2301      	movs	r3, #1
 8001e80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fe81 	bl	8002b8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00c      	beq.n	8001eae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ea6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 febd 	bl	8002c28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d030      	beq.n	8001f36 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d109      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	78db      	ldrb	r3, [r3, #3]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d108      	bne.n	8001f24 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2200      	movs	r2, #0
 8001f16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f007 f992 	bl	8009248 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f30:	461a      	mov	r2, r3
 8001f32:	2302      	movs	r3, #2
 8001f34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2320      	movs	r3, #32
 8001f50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	3301      	adds	r3, #1
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f47f af62 	bne.w	8001e48 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fd1d 	bl	80069c8 <USB_ReadInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f98:	f040 80a4 	bne.w	80020e4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 fd3e 	bl	8006a22 <USB_ReadDevAllInEpInterrupt>
 8001fa6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001fac:	e096      	b.n	80020dc <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 808b 	beq.w	80020d0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 fd64 	bl	8006a92 <USB_ReadDevInEPInterrupt>
 8001fca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	2201      	movs	r2, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69f9      	ldr	r1, [r7, #28]
 8001ff2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002006:	461a      	mov	r2, r3
 8002008:	2301      	movs	r3, #1
 800200a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4619      	mov	r1, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f007 f883 	bl	800911e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800202e:	461a      	mov	r2, r3
 8002030:	2308      	movs	r3, #8
 8002032:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800204a:	461a      	mov	r2, r3
 800204c:	2310      	movs	r3, #16
 800204e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002066:	461a      	mov	r2, r3
 8002068:	2340      	movs	r3, #64	@ 0x40
 800206a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d023      	beq.n	80020be <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002076:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002078:	6a38      	ldr	r0, [r7, #32]
 800207a:	f003 fdf9 	bl	8005c70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800207e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3310      	adds	r3, #16
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	78db      	ldrb	r3, [r3, #3]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d108      	bne.n	80020ac <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2200      	movs	r2, #0
 800209e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f007 f8e0 	bl	800926c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020b8:	461a      	mov	r2, r3
 80020ba:	2302      	movs	r3, #2
 80020bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fcd6 	bl	8002a7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	3301      	adds	r3, #1
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f47f af65 	bne.w	8001fae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f004 fc6d 	bl	80069c8 <USB_ReadInterrupts>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020f8:	d122      	bne.n	8002140 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002114:	2b01      	cmp	r3, #1
 8002116:	d108      	bne.n	800212a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002120:	2100      	movs	r1, #0
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f007 fb14 	bl	8009750 <HAL_PCDEx_LPM_Callback>
 8002128:	e002      	b.n	8002130 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f007 f864 	bl	80091f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800213e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f004 fc3f 	bl	80069c8 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002154:	d112      	bne.n	800217c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f007 f820 	bl	80091ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800217a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f004 fc21 	bl	80069c8 <USB_ReadInterrupts>
 8002186:	4603      	mov	r3, r0
 8002188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800218c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002190:	d121      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80021a0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80021c6:	2101      	movs	r1, #1
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f007 fac1 	bl	8009750 <HAL_PCDEx_LPM_Callback>
 80021ce:	e002      	b.n	80021d6 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f006 ffeb 	bl	80091ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 fbf4 	bl	80069c8 <USB_ReadInterrupts>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ea:	f040 80b6 	bne.w	800235a <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2110      	movs	r1, #16
 8002208:	4618      	mov	r0, r3
 800220a:	f003 fd31 	bl	8005c70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002212:	e046      	b.n	80022a2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002220:	461a      	mov	r2, r3
 8002222:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002226:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002238:	0151      	lsls	r1, r2, #5
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	440a      	add	r2, r1
 800223e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002242:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002246:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002254:	461a      	mov	r2, r3
 8002256:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800225a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800225c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800226c:	0151      	lsls	r1, r2, #5
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	440a      	add	r2, r1
 8002272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002276:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800227a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800227c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800228c:	0151      	lsls	r1, r2, #5
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	440a      	add	r2, r1
 8002292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002296:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800229a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229e:	3301      	adds	r3, #1
 80022a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	791b      	ldrb	r3, [r3, #4]
 80022a6:	461a      	mov	r2, r3
 80022a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d3b2      	bcc.n	8002214 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022bc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80022c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7bdb      	ldrb	r3, [r3, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022da:	f043 030b 	orr.w	r3, r3, #11
 80022de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022f0:	f043 030b 	orr.w	r3, r3, #11
 80022f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f6:	e015      	b.n	8002324 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002306:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800230a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800230e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800231e:	f043 030b 	orr.w	r3, r3, #11
 8002322:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002332:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002336:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f004 fc03 	bl	8006b50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f004 fb32 	bl	80069c8 <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800236e:	d123      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f004 fbc8 	bl	8006b0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fcef 	bl	8005d62 <USB_GetDevSpeed>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681c      	ldr	r4, [r3, #0]
 8002390:	f001 fad4 	bl	800393c <HAL_RCC_GetHCLKFreq>
 8002394:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800239a:	461a      	mov	r2, r3
 800239c:	4620      	mov	r0, r4
 800239e:	f003 fa15 	bl	80057cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f006 fee3 	bl	800916e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80023b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 fb03 	bl	80069c8 <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d10a      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f006 fec0 	bl	8009152 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f002 0208 	and.w	r2, r2, #8
 80023e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 faee 	bl	80069c8 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f2:	2b80      	cmp	r3, #128	@ 0x80
 80023f4:	d123      	bne.n	800243e <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002402:	2301      	movs	r3, #1
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
 8002406:	e014      	b.n	8002432 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 faf7 	bl	8002a1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	3301      	adds	r3, #1
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	791b      	ldrb	r3, [r3, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	4293      	cmp	r3, r2
 800243c:	d3e4      	bcc.n	8002408 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f004 fac0 	bl	80069c8 <USB_ReadInterrupts>
 8002448:	4603      	mov	r3, r0
 800244a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002452:	d13c      	bne.n	80024ce <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002454:	2301      	movs	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
 8002458:	e02b      	b.n	80024b2 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3318      	adds	r3, #24
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d115      	bne.n	80024ac <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002480:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002482:	2b00      	cmp	r3, #0
 8002484:	da12      	bge.n	80024ac <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3317      	adds	r3, #23
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fab7 	bl	8002a1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	3301      	adds	r3, #1
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	791b      	ldrb	r3, [r3, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d3cd      	bcc.n	800245a <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80024cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 fa78 	bl	80069c8 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024e2:	d156      	bne.n	8002592 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024e4:	2301      	movs	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e8:	e045      	b.n	8002576 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d12e      	bne.n	8002570 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002512:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002514:	2b00      	cmp	r3, #0
 8002516:	da2b      	bge.n	8002570 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002524:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002528:	429a      	cmp	r2, r3
 800252a:	d121      	bne.n	8002570 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002568:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800256c:	6053      	str	r3, [r2, #4]
            break;
 800256e:	e008      	b.n	8002582 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	3301      	adds	r3, #1
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	791b      	ldrb	r3, [r3, #4]
 800257a:	461a      	mov	r2, r3
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	4293      	cmp	r3, r2
 8002580:	d3b3      	bcc.n	80024ea <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f004 fa16 	bl	80069c8 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a6:	d10a      	bne.n	80025be <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f006 fe71 	bl	8009290 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80025bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 fa00 	bl	80069c8 <USB_ReadInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d115      	bne.n	80025fe <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f006 fe61 	bl	80092ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e000      	b.n	80025fe <HAL_PCD_IRQHandler+0x926>
      return;
 80025fc:	bf00      	nop
    }
  }
}
 80025fe:	3734      	adds	r7, #52	@ 0x34
 8002600:	46bd      	mov	sp, r7
 8002602:	bd90      	pop	{r4, r7, pc}

08002604 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_PCD_SetAddress+0x1a>
 800261a:	2302      	movs	r3, #2
 800261c:	e012      	b.n	8002644 <HAL_PCD_SetAddress+0x40>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f004 f95f 	bl	80068f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	4608      	mov	r0, r1
 8002656:	4611      	mov	r1, r2
 8002658:	461a      	mov	r2, r3
 800265a:	4603      	mov	r3, r0
 800265c:	70fb      	strb	r3, [r7, #3]
 800265e:	460b      	mov	r3, r1
 8002660:	803b      	strh	r3, [r7, #0]
 8002662:	4613      	mov	r3, r2
 8002664:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800266a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	da0f      	bge.n	8002692 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	3310      	adds	r3, #16
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	3304      	adds	r3, #4
 8002688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	705a      	strb	r2, [r3, #1]
 8002690:	e00f      	b.n	80026b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	3304      	adds	r3, #4
 80026aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80026be:	883b      	ldrh	r3, [r7, #0]
 80026c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	78ba      	ldrb	r2, [r7, #2]
 80026cc:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d004      	beq.n	80026e0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026e0:	78bb      	ldrb	r3, [r7, #2]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d102      	bne.n	80026ec <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_PCD_EP_Open+0xae>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e00e      	b.n	8002718 <HAL_PCD_EP_Open+0xcc>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68f9      	ldr	r1, [r7, #12]
 8002708:	4618      	mov	r0, r3
 800270a:	f003 fb49 	bl	8005da0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002716:	7afb      	ldrb	r3, [r7, #11]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800272c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002730:	2b00      	cmp	r3, #0
 8002732:	da0f      	bge.n	8002754 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	3310      	adds	r3, #16
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	705a      	strb	r2, [r3, #1]
 8002752:	e00f      	b.n	8002774 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	f003 020f 	and.w	r2, r3, #15
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_PCD_EP_Close+0x6e>
 800278a:	2302      	movs	r3, #2
 800278c:	e00e      	b.n	80027ac <HAL_PCD_EP_Close+0x8c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68f9      	ldr	r1, [r7, #12]
 800279c:	4618      	mov	r0, r3
 800279e:	f003 fb87 	bl	8005eb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	460b      	mov	r3, r1
 80027c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	f003 020f 	and.w	r2, r3, #15
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4413      	add	r3, r2
 80027da:	3304      	adds	r3, #4
 80027dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2200      	movs	r2, #0
 80027f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027f6:	7afb      	ldrb	r3, [r7, #11]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6979      	ldr	r1, [r7, #20]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 fc2d 	bl	8006068 <USB_EPStartXfer>

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 020f 	and.w	r2, r3, #15
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	460b      	mov	r3, r1
 8002856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002858:	7afb      	ldrb	r3, [r7, #11]
 800285a:	f003 020f 	and.w	r2, r3, #15
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	3310      	adds	r3, #16
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2201      	movs	r2, #1
 8002886:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	b2da      	uxtb	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6979      	ldr	r1, [r7, #20]
 800289a:	4618      	mov	r0, r3
 800289c:	f003 fbe4 	bl	8006068 <USB_EPStartXfer>

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	7912      	ldrb	r2, [r2, #4]
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e04e      	b.n	8002966 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da0f      	bge.n	80028f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	f003 020f 	and.w	r2, r3, #15
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	3310      	adds	r3, #16
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	3304      	adds	r3, #4
 80028e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	705a      	strb	r2, [r3, #1]
 80028ee:	e00d      	b.n	800290c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_PCD_EP_SetStall+0x82>
 8002928:	2302      	movs	r3, #2
 800292a:	e01c      	b.n	8002966 <HAL_PCD_EP_SetStall+0xbc>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68f9      	ldr	r1, [r7, #12]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 ff08 	bl	8006750 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	2b00      	cmp	r3, #0
 8002948:	d108      	bne.n	800295c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f004 f8fa 	bl	8006b50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	7912      	ldrb	r2, [r2, #4]
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e042      	b.n	8002a12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800298c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002990:	2b00      	cmp	r3, #0
 8002992:	da0f      	bge.n	80029b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	3310      	adds	r3, #16
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	705a      	strb	r2, [r3, #1]
 80029b2:	e00f      	b.n	80029d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	f003 020f 	and.w	r2, r3, #15
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_PCD_EP_ClrStall+0x86>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e00e      	b.n	8002a12 <HAL_PCD_EP_ClrStall+0xa4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 ff12 	bl	800682c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da0c      	bge.n	8002a48 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3310      	adds	r3, #16
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	e00c      	b.n	8002a62 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 020f 	and.w	r2, r3, #15
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3304      	adds	r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68f9      	ldr	r1, [r7, #12]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 fd35 	bl	80064d8 <USB_EPStopXfer>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a72:	7afb      	ldrb	r3, [r7, #11]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d901      	bls.n	8002ab4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e067      	b.n	8002b84 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d902      	bls.n	8002ad0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	3303      	adds	r3, #3
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ad8:	e026      	b.n	8002b28 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d902      	bls.n	8002af6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3303      	adds	r3, #3
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	68d9      	ldr	r1, [r3, #12]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	6978      	ldr	r0, [r7, #20]
 8002b0c:	f003 fd8e 	bl	800662c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	441a      	add	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	441a      	add	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d809      	bhi.n	8002b52 <PCD_WriteEmptyTxFifo+0xd6>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d203      	bcs.n	8002b52 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1c3      	bne.n	8002ada <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d811      	bhi.n	8002b82 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	2201      	movs	r2, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	6939      	ldr	r1, [r7, #16]
 8002b7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b7e:	4013      	ands	r3, r2
 8002b80:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	333c      	adds	r3, #60	@ 0x3c
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a19      	ldr	r2, [pc, #100]	@ (8002c24 <PCD_EP_OutXfrComplete_int+0x98>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d124      	bne.n	8002c0c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bde:	6093      	str	r3, [r2, #8]
 8002be0:	e01a      	b.n	8002c18 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	4619      	mov	r1, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f006 fa6f 	bl	80090e8 <HAL_PCD_DataOutStageCallback>
 8002c0a:	e005      	b.n	8002c18 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f006 fa68 	bl	80090e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	4f54310a 	.word	0x4f54310a

08002c28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	333c      	adds	r3, #60	@ 0x3c
 8002c40:	3304      	adds	r3, #4
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4a0c      	ldr	r2, [pc, #48]	@ (8002c8c <PCD_EP_OutSetupPacket_int+0x64>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d90e      	bls.n	8002c7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d009      	beq.n	8002c7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c74:	461a      	mov	r2, r3
 8002c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f006 fa21 	bl	80090c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	4f54300a 	.word	0x4f54300a

08002c90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d107      	bne.n	8002cbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cae:	883b      	ldrh	r3, [r7, #0]
 8002cb0:	0419      	lsls	r1, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cbc:	e028      	b.n	8002d10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4413      	add	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	e00d      	b.n	8002cee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	3340      	adds	r3, #64	@ 0x40
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	3301      	adds	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d3ec      	bcc.n	8002cd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002cf8:	883b      	ldrh	r3, [r7, #0]
 8002cfa:	0418      	lsls	r0, r3, #16
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	4302      	orrs	r2, r0
 8002d08:	3340      	adds	r3, #64	@ 0x40
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	f043 0303 	orr.w	r3, r3, #3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d8c:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40007000 	.word	0x40007000

08002da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002db2:	d130      	bne.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002db4:	4b23      	ldr	r3, [pc, #140]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc0:	d038      	beq.n	8002e34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc2:	4b20      	ldr	r3, [pc, #128]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dca:	4a1e      	ldr	r2, [pc, #120]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2232      	movs	r2, #50	@ 0x32
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9b      	lsrs	r3, r3, #18
 8002de4:	3301      	adds	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002de8:	e002      	b.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df0:	4b14      	ldr	r3, [pc, #80]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dfc:	d102      	bne.n	8002e04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f2      	bne.n	8002dea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e04:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e10:	d110      	bne.n	8002e34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e00f      	b.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e16:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e22:	d007      	beq.n	8002e34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e24:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e2c:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40007000 	.word	0x40007000
 8002e48:	2000002c 	.word	0x2000002c
 8002e4c:	431bde83 	.word	0x431bde83

08002e50 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e5e:	6053      	str	r3, [r2, #4]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40007000 	.word	0x40007000

08002e70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e3ca      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e82:	4b97      	ldr	r3, [pc, #604]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e8c:	4b94      	ldr	r3, [pc, #592]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80e4 	beq.w	800306c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_RCC_OscConfig+0x4a>
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	f040 808b 	bne.w	8002fc8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f040 8087 	bne.w	8002fc8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eba:	4b89      	ldr	r3, [pc, #548]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x62>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e3a2      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	4b82      	ldr	r3, [pc, #520]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_RCC_OscConfig+0x7c>
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_OscConfig+0x88>
 8002eec:	4b7c      	ldr	r3, [pc, #496]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d223      	bcs.n	8002f44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fd53 	bl	80039ac <RCC_SetFlashLatencyFromMSIRange>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e383      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f10:	4b73      	ldr	r3, [pc, #460]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a72      	ldr	r2, [pc, #456]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f16:	f043 0308 	orr.w	r3, r3, #8
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b70      	ldr	r3, [pc, #448]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	496d      	ldr	r1, [pc, #436]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	4968      	ldr	r1, [pc, #416]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
 8002f42:	e025      	b.n	8002f90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f44:	4b66      	ldr	r3, [pc, #408]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a65      	ldr	r2, [pc, #404]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f4a:	f043 0308 	orr.w	r3, r3, #8
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b63      	ldr	r3, [pc, #396]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4960      	ldr	r1, [pc, #384]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f62:	4b5f      	ldr	r3, [pc, #380]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	495b      	ldr	r1, [pc, #364]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fd13 	bl	80039ac <RCC_SetFlashLatencyFromMSIRange>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e343      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f90:	f000 fc4a 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b52      	ldr	r3, [pc, #328]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	4950      	ldr	r1, [pc, #320]	@ (80030e4 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fac:	4a4e      	ldr	r2, [pc, #312]	@ (80030e8 <HAL_RCC_OscConfig+0x278>)
 8002fae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80030ec <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe f8b1 	bl	800111c <HAL_InitTick>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d052      	beq.n	800306a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	e327      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d032      	beq.n	8003036 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fd0:	4b43      	ldr	r3, [pc, #268]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a42      	ldr	r2, [pc, #264]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f8ee 	bl	80011bc <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe4:	f7fe f8ea 	bl	80011bc <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e310      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003002:	4b37      	ldr	r3, [pc, #220]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a36      	ldr	r2, [pc, #216]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b34      	ldr	r3, [pc, #208]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4931      	ldr	r1, [pc, #196]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003020:	4b2f      	ldr	r3, [pc, #188]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	492c      	ldr	r1, [pc, #176]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	e01a      	b.n	800306c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003036:	4b2a      	ldr	r3, [pc, #168]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a29      	ldr	r2, [pc, #164]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003042:	f7fe f8bb 	bl	80011bc <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800304a:	f7fe f8b7 	bl	80011bc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e2dd      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800305c:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x1da>
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800306a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d074      	beq.n	8003162 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b08      	cmp	r3, #8
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x21a>
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d10e      	bne.n	80030a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d10b      	bne.n	80030a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308a:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d064      	beq.n	8003160 <HAL_RCC_OscConfig+0x2f0>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d160      	bne.n	8003160 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e2ba      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x24a>
 80030ac:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0b      	ldr	r2, [pc, #44]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	e026      	b.n	8003108 <HAL_RCC_OscConfig+0x298>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030c2:	d115      	bne.n	80030f0 <HAL_RCC_OscConfig+0x280>
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a05      	ldr	r2, [pc, #20]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 80030ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a02      	ldr	r2, [pc, #8]	@ (80030e0 <HAL_RCC_OscConfig+0x270>)
 80030d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	e014      	b.n	8003108 <HAL_RCC_OscConfig+0x298>
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	080098e0 	.word	0x080098e0
 80030e8:	2000002c 	.word	0x2000002c
 80030ec:	20000030 	.word	0x20000030
 80030f0:	4ba0      	ldr	r3, [pc, #640]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a9f      	ldr	r2, [pc, #636]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b9d      	ldr	r3, [pc, #628]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a9c      	ldr	r2, [pc, #624]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe f854 	bl	80011bc <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe f850 	bl	80011bc <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	@ 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e276      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312a:	4b92      	ldr	r3, [pc, #584]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x2a8>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe f840 	bl	80011bc <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe f83c 	bl	80011bc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	@ 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e262      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003152:	4b88      	ldr	r3, [pc, #544]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x2d0>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d060      	beq.n	8003230 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d005      	beq.n	8003180 <HAL_RCC_OscConfig+0x310>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d119      	bne.n	80031ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d116      	bne.n	80031ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003180:	4b7c      	ldr	r3, [pc, #496]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_OscConfig+0x328>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e23f      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003198:	4b76      	ldr	r3, [pc, #472]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	4973      	ldr	r1, [pc, #460]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ac:	e040      	b.n	8003230 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d023      	beq.n	80031fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7fd fffb 	bl	80011bc <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ca:	f7fd fff7 	bl	80011bc <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e21d      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031dc:	4b65      	ldr	r3, [pc, #404]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e8:	4b62      	ldr	r3, [pc, #392]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	495f      	ldr	r1, [pc, #380]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
 80031fc:	e018      	b.n	8003230 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a5c      	ldr	r2, [pc, #368]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fd ffd7 	bl	80011bc <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003212:	f7fd ffd3 	bl	80011bc <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1f9      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003224:	4b53      	ldr	r3, [pc, #332]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d03c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01c      	beq.n	800327e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003244:	4b4b      	ldr	r3, [pc, #300]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800324a:	4a4a      	ldr	r2, [pc, #296]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd ffb2 	bl	80011bc <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fd ffae 	bl	80011bc <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e1d4      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800326e:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003270:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ef      	beq.n	800325c <HAL_RCC_OscConfig+0x3ec>
 800327c:	e01b      	b.n	80032b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327e:	4b3d      	ldr	r3, [pc, #244]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003284:	4a3b      	ldr	r2, [pc, #236]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fd ff95 	bl	80011bc <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7fd ff91 	bl	80011bc <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e1b7      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a8:	4b32      	ldr	r3, [pc, #200]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ef      	bne.n	8003296 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80a6 	beq.w	8003410 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10d      	bne.n	80032f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	4b27      	ldr	r3, [pc, #156]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	4a26      	ldr	r2, [pc, #152]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032de:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e0:	4b24      	ldr	r3, [pc, #144]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f0:	4b21      	ldr	r3, [pc, #132]	@ (8003378 <HAL_RCC_OscConfig+0x508>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d118      	bne.n	800332e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <HAL_RCC_OscConfig+0x508>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1d      	ldr	r2, [pc, #116]	@ (8003378 <HAL_RCC_OscConfig+0x508>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003306:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003308:	f7fd ff58 	bl	80011bc <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003310:	f7fd ff54 	bl	80011bc <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e17a      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003322:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <HAL_RCC_OscConfig+0x508>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d108      	bne.n	8003348 <HAL_RCC_OscConfig+0x4d8>
 8003336:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333c:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003346:	e029      	b.n	800339c <HAL_RCC_OscConfig+0x52c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d115      	bne.n	800337c <HAL_RCC_OscConfig+0x50c>
 8003350:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003356:	4a07      	ldr	r2, [pc, #28]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003360:	4b04      	ldr	r3, [pc, #16]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003366:	4a03      	ldr	r2, [pc, #12]	@ (8003374 <HAL_RCC_OscConfig+0x504>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003370:	e014      	b.n	800339c <HAL_RCC_OscConfig+0x52c>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	40007000 	.word	0x40007000
 800337c:	4b9c      	ldr	r3, [pc, #624]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	4a9b      	ldr	r2, [pc, #620]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800338c:	4b98      	ldr	r3, [pc, #608]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	4a97      	ldr	r2, [pc, #604]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003394:	f023 0304 	bic.w	r3, r3, #4
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d016      	beq.n	80033d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fd ff0a 	bl	80011bc <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fd ff06 	bl	80011bc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e12a      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c2:	4b8b      	ldr	r3, [pc, #556]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ed      	beq.n	80033ac <HAL_RCC_OscConfig+0x53c>
 80033d0:	e015      	b.n	80033fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fd fef3 	bl	80011bc <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fd feef 	bl	80011bc <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e113      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033f0:	4b7f      	ldr	r3, [pc, #508]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ed      	bne.n	80033da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033fe:	7ffb      	ldrb	r3, [r7, #31]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003404:	4b7a      	ldr	r3, [pc, #488]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003408:	4a79      	ldr	r2, [pc, #484]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 800340a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800340e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80fe 	beq.w	8003616 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	2b02      	cmp	r3, #2
 8003420:	f040 80d0 	bne.w	80035c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003424:	4b72      	ldr	r3, [pc, #456]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	429a      	cmp	r2, r3
 8003436:	d130      	bne.n	800349a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	3b01      	subs	r3, #1
 8003444:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d127      	bne.n	800349a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003454:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d11f      	bne.n	800349a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003464:	2a07      	cmp	r2, #7
 8003466:	bf14      	ite	ne
 8003468:	2201      	movne	r2, #1
 800346a:	2200      	moveq	r2, #0
 800346c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800346e:	4293      	cmp	r3, r2
 8003470:	d113      	bne.n	800349a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d109      	bne.n	800349a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d06e      	beq.n	8003578 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b0c      	cmp	r3, #12
 800349e:	d069      	beq.n	8003574 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034a0:	4b53      	ldr	r3, [pc, #332]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034ac:	4b50      	ldr	r3, [pc, #320]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0ad      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034bc:	4b4c      	ldr	r3, [pc, #304]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a4b      	ldr	r2, [pc, #300]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80034c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034c8:	f7fd fe78 	bl	80011bc <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fd fe74 	bl	80011bc <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e09a      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e2:	4b43      	ldr	r3, [pc, #268]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ee:	4b40      	ldr	r3, [pc, #256]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	4b40      	ldr	r3, [pc, #256]	@ (80035f4 <HAL_RCC_OscConfig+0x784>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034fe:	3a01      	subs	r2, #1
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	4311      	orrs	r1, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003508:	0212      	lsls	r2, r2, #8
 800350a:	4311      	orrs	r1, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003510:	0852      	lsrs	r2, r2, #1
 8003512:	3a01      	subs	r2, #1
 8003514:	0552      	lsls	r2, r2, #21
 8003516:	4311      	orrs	r1, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800351c:	0852      	lsrs	r2, r2, #1
 800351e:	3a01      	subs	r2, #1
 8003520:	0652      	lsls	r2, r2, #25
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003528:	0912      	lsrs	r2, r2, #4
 800352a:	0452      	lsls	r2, r2, #17
 800352c:	430a      	orrs	r2, r1
 800352e:	4930      	ldr	r1, [pc, #192]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003530:	4313      	orrs	r3, r2
 8003532:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003534:	4b2e      	ldr	r3, [pc, #184]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2d      	ldr	r2, [pc, #180]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800353e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003540:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a2a      	ldr	r2, [pc, #168]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800354c:	f7fd fe36 	bl	80011bc <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd fe32 	bl	80011bc <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e058      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003566:	4b22      	ldr	r3, [pc, #136]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003572:	e050      	b.n	8003616 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e04f      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003578:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d148      	bne.n	8003616 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003584:	4b1a      	ldr	r3, [pc, #104]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a19      	ldr	r2, [pc, #100]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 800358a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800358e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003590:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a16      	ldr	r2, [pc, #88]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800359a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800359c:	f7fd fe0e 	bl	80011bc <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fd fe0a 	bl	80011bc <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e030      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b6:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x734>
 80035c2:	e028      	b.n	8003616 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	d023      	beq.n	8003612 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a08      	ldr	r2, [pc, #32]	@ (80035f0 <HAL_RCC_OscConfig+0x780>)
 80035d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fd fdf1 	bl	80011bc <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035dc:	e00c      	b.n	80035f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035de:	f7fd fded 	bl	80011bc <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d905      	bls.n	80035f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e013      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
 80035f0:	40021000 	.word	0x40021000
 80035f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <HAL_RCC_OscConfig+0x7b0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ec      	bne.n	80035de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003604:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_RCC_OscConfig+0x7b0>)
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	4905      	ldr	r1, [pc, #20]	@ (8003620 <HAL_RCC_OscConfig+0x7b0>)
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_RCC_OscConfig+0x7b4>)
 800360c:	4013      	ands	r3, r2
 800360e:	60cb      	str	r3, [r1, #12]
 8003610:	e001      	b.n	8003616 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	feeefffc 	.word	0xfeeefffc

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0e7      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b75      	ldr	r3, [pc, #468]	@ (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d910      	bls.n	800366c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b72      	ldr	r3, [pc, #456]	@ (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 0207 	bic.w	r2, r3, #7
 8003652:	4970      	ldr	r1, [pc, #448]	@ (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b6e      	ldr	r3, [pc, #440]	@ (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0cf      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d010      	beq.n	800369a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	4b66      	ldr	r3, [pc, #408]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003684:	429a      	cmp	r2, r3
 8003686:	d908      	bls.n	800369a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b63      	ldr	r3, [pc, #396]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4960      	ldr	r1, [pc, #384]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d04c      	beq.n	8003740 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d121      	bne.n	80036fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0a6      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036c6:	4b54      	ldr	r3, [pc, #336]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d115      	bne.n	80036fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e09a      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036de:	4b4e      	ldr	r3, [pc, #312]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e08e      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e086      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036fe:	4b46      	ldr	r3, [pc, #280]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4943      	ldr	r1, [pc, #268]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003710:	f7fd fd54 	bl	80011bc <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	e00a      	b.n	800372e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7fd fd50 	bl	80011bc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e06e      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	4b3a      	ldr	r3, [pc, #232]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 020c 	and.w	r2, r3, #12
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	429a      	cmp	r2, r3
 800373e:	d1eb      	bne.n	8003718 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d010      	beq.n	800376e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	4b31      	ldr	r3, [pc, #196]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003758:	429a      	cmp	r2, r3
 800375a:	d208      	bcs.n	800376e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b2e      	ldr	r3, [pc, #184]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	492b      	ldr	r1, [pc, #172]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800376e:	4b29      	ldr	r3, [pc, #164]	@ (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d210      	bcs.n	800379e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377c:	4b25      	ldr	r3, [pc, #148]	@ (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 0207 	bic.w	r2, r3, #7
 8003784:	4923      	ldr	r1, [pc, #140]	@ (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378c:	4b21      	ldr	r3, [pc, #132]	@ (8003814 <HAL_RCC_ClockConfig+0x1ec>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d001      	beq.n	800379e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e036      	b.n	800380c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	4918      	ldr	r1, [pc, #96]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d009      	beq.n	80037dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c8:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4910      	ldr	r1, [pc, #64]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037dc:	f000 f824 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	490b      	ldr	r1, [pc, #44]	@ (800381c <HAL_RCC_ClockConfig+0x1f4>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
 80037f8:	4a09      	ldr	r2, [pc, #36]	@ (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80037fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_RCC_ClockConfig+0x1fc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd fc8b 	bl	800111c <HAL_InitTick>
 8003806:	4603      	mov	r3, r0
 8003808:	72fb      	strb	r3, [r7, #11]

  return status;
 800380a:	7afb      	ldrb	r3, [r7, #11]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40022000 	.word	0x40022000
 8003818:	40021000 	.word	0x40021000
 800381c:	080098e0 	.word	0x080098e0
 8003820:	2000002c 	.word	0x2000002c
 8003824:	20000030 	.word	0x20000030

08003828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	@ 0x24
 800382c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003836:	4b3e      	ldr	r3, [pc, #248]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003840:	4b3b      	ldr	r3, [pc, #236]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x34>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d121      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d11e      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800385c:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d107      	bne.n	8003878 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003868:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 800386a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e005      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003878:	4b2d      	ldr	r3, [pc, #180]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003884:	4a2b      	ldr	r2, [pc, #172]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d102      	bne.n	80038a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x110>)
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e004      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038ac:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	d134      	bne.n	8003920 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0xa6>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d003      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0xac>
 80038cc:	e005      	b.n	80038da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x110>)
 80038d0:	617b      	str	r3, [r7, #20]
      break;
 80038d2:	e005      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038d4:	4b18      	ldr	r3, [pc, #96]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x110>)
 80038d6:	617b      	str	r3, [r7, #20]
      break;
 80038d8:	e002      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	617b      	str	r3, [r7, #20]
      break;
 80038de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e0:	4b13      	ldr	r3, [pc, #76]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	3301      	adds	r3, #1
 80038ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ee:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	fb03 f202 	mul.w	r2, r3, r2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003906:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x108>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	0e5b      	lsrs	r3, r3, #25
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	3301      	adds	r3, #1
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003920:	69bb      	ldr	r3, [r7, #24]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	@ 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	080098f8 	.word	0x080098f8
 8003938:	00f42400 	.word	0x00f42400

0800393c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003940:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <HAL_RCC_GetHCLKFreq+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	2000002c 	.word	0x2000002c

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003958:	f7ff fff0 	bl	800393c <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4904      	ldr	r1, [pc, #16]	@ (800397c <HAL_RCC_GetPCLK1Freq+0x28>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	080098f0 	.word	0x080098f0

08003980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003984:	f7ff ffda 	bl	800393c <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	0adb      	lsrs	r3, r3, #11
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4904      	ldr	r1, [pc, #16]	@ (80039a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	080098f0 	.word	0x080098f0

080039ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039c4:	f7ff f9e0 	bl	8002d88 <HAL_PWREx_GetVoltageRange>
 80039c8:	6178      	str	r0, [r7, #20]
 80039ca:	e014      	b.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	4b25      	ldr	r3, [pc, #148]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d8:	4b22      	ldr	r3, [pc, #136]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039e4:	f7ff f9d0 	bl	8002d88 <HAL_PWREx_GetVoltageRange>
 80039e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039fc:	d10b      	bne.n	8003a16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b80      	cmp	r3, #128	@ 0x80
 8003a02:	d919      	bls.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a08:	d902      	bls.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e013      	b.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a10:	2301      	movs	r3, #1
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	e010      	b.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b80      	cmp	r3, #128	@ 0x80
 8003a1a:	d902      	bls.n	8003a22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e00a      	b.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b80      	cmp	r3, #128	@ 0x80
 8003a26:	d102      	bne.n	8003a2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a28:	2302      	movs	r3, #2
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e004      	b.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b70      	cmp	r3, #112	@ 0x70
 8003a32:	d101      	bne.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a34:	2301      	movs	r3, #1
 8003a36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 0207 	bic.w	r2, r3, #7
 8003a40:	4909      	ldr	r1, [pc, #36]	@ (8003a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a48:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d001      	beq.n	8003a5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40022000 	.word	0x40022000

08003a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a74:	2300      	movs	r3, #0
 8003a76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a78:	2300      	movs	r3, #0
 8003a7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d041      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a90:	d02a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a96:	d824      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a9c:	d008      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aa2:	d81e      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aac:	d010      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003aae:	e018      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ab0:	4b86      	ldr	r3, [pc, #536]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a85      	ldr	r2, [pc, #532]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003abc:	e015      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fabb 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ace:	e00c      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3320      	adds	r3, #32
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fba6 	bl	8004228 <RCCEx_PLLSAI2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae0:	e003      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ae6:	e000      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af0:	4b76      	ldr	r3, [pc, #472]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003afe:	4973      	ldr	r1, [pc, #460]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b06:	e001      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d041      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b20:	d02a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b26:	d824      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b32:	d81e      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b3c:	d010      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b3e:	e018      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b40:	4b62      	ldr	r3, [pc, #392]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a61      	ldr	r2, [pc, #388]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b4c:	e015      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fa73 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b5e:	e00c      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3320      	adds	r3, #32
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fb5e 	bl	8004228 <RCCEx_PLLSAI2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	74fb      	strb	r3, [r7, #19]
      break;
 8003b76:	e000      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b80:	4b52      	ldr	r3, [pc, #328]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b8e:	494f      	ldr	r1, [pc, #316]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b96:	e001      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80a0 	beq.w	8003cea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bae:	4b47      	ldr	r3, [pc, #284]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	4a40      	ldr	r2, [pc, #256]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3a      	ldr	r2, [pc, #232]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bec:	f7fd fae6 	bl	80011bc <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf2:	e009      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fd fae2 	bl	80011bc <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d902      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	74fb      	strb	r3, [r7, #19]
        break;
 8003c06:	e005      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c08:	4b31      	ldr	r3, [pc, #196]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ef      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d15c      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01f      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d019      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c38:	4b24      	ldr	r3, [pc, #144]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c44:	4b21      	ldr	r3, [pc, #132]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4a:	4a20      	ldr	r2, [pc, #128]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c64:	4a19      	ldr	r2, [pc, #100]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7fd faa1 	bl	80011bc <HAL_GetTick>
 8003c7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd fa9d 	bl	80011bc <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d902      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	74fb      	strb	r3, [r7, #19]
            break;
 8003c94:	e006      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ec      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003caa:	4b08      	ldr	r3, [pc, #32]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cba:	4904      	ldr	r1, [pc, #16]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cc2:	e009      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd8:	7c7b      	ldrb	r3, [r7, #17]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cde:	4b9e      	ldr	r3, [pc, #632]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	4a9d      	ldr	r2, [pc, #628]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf6:	4b98      	ldr	r3, [pc, #608]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfc:	f023 0203 	bic.w	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	4994      	ldr	r1, [pc, #592]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d18:	4b8f      	ldr	r3, [pc, #572]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	f023 020c 	bic.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d26:	498c      	ldr	r1, [pc, #560]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d3a:	4b87      	ldr	r3, [pc, #540]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	4983      	ldr	r1, [pc, #524]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	497b      	ldr	r1, [pc, #492]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d7e:	4b76      	ldr	r3, [pc, #472]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8c:	4972      	ldr	r1, [pc, #456]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da0:	4b6d      	ldr	r3, [pc, #436]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dae:	496a      	ldr	r1, [pc, #424]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dc2:	4b65      	ldr	r3, [pc, #404]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	4961      	ldr	r1, [pc, #388]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003de4:	4b5c      	ldr	r3, [pc, #368]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df2:	4959      	ldr	r1, [pc, #356]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e06:	4b54      	ldr	r3, [pc, #336]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e14:	4950      	ldr	r1, [pc, #320]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e28:	4b4b      	ldr	r3, [pc, #300]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e36:	4948      	ldr	r1, [pc, #288]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e4a:	4b43      	ldr	r3, [pc, #268]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e58:	493f      	ldr	r1, [pc, #252]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d028      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e7a:	4937      	ldr	r1, [pc, #220]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b32      	ldr	r3, [pc, #200]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a31      	ldr	r2, [pc, #196]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]
 8003e98:	e011      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ea2:	d10c      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f8c8 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d028      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eca:	4b23      	ldr	r3, [pc, #140]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed8:	491f      	ldr	r1, [pc, #124]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eea:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	4a1a      	ldr	r2, [pc, #104]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ef4:	60d3      	str	r3, [r2, #12]
 8003ef6:	e011      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3304      	adds	r3, #4
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f899 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d02b      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f28:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f36:	4908      	ldr	r1, [pc, #32]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f46:	d109      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f48:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a02      	ldr	r2, [pc, #8]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f52:	60d3      	str	r3, [r2, #12]
 8003f54:	e014      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 f867 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02f      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f9a:	4928      	ldr	r1, [pc, #160]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003faa:	d10d      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f844 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d014      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	74bb      	strb	r3, [r7, #18]
 8003fc6:	e011      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3320      	adds	r3, #32
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f925 	bl	8004228 <RCCEx_PLLSAI2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ff8:	4b10      	ldr	r3, [pc, #64]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004006:	490d      	ldr	r1, [pc, #52]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800401a:	4b08      	ldr	r3, [pc, #32]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800402a:	4904      	ldr	r1, [pc, #16]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004032:	7cbb      	ldrb	r3, [r7, #18]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40021000 	.word	0x40021000

08004040 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800404e:	4b75      	ldr	r3, [pc, #468]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d018      	beq.n	800408c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800405a:	4b72      	ldr	r3, [pc, #456]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0203 	and.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d10d      	bne.n	8004086 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
       ||
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004072:	4b6c      	ldr	r3, [pc, #432]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
       ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d047      	beq.n	8004116 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
 800408a:	e044      	b.n	8004116 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d018      	beq.n	80040c6 <RCCEx_PLLSAI1_Config+0x86>
 8004094:	2b03      	cmp	r3, #3
 8004096:	d825      	bhi.n	80040e4 <RCCEx_PLLSAI1_Config+0xa4>
 8004098:	2b01      	cmp	r3, #1
 800409a:	d002      	beq.n	80040a2 <RCCEx_PLLSAI1_Config+0x62>
 800409c:	2b02      	cmp	r3, #2
 800409e:	d009      	beq.n	80040b4 <RCCEx_PLLSAI1_Config+0x74>
 80040a0:	e020      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040a2:	4b60      	ldr	r3, [pc, #384]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11d      	bne.n	80040ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b2:	e01a      	b.n	80040ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d116      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c4:	e013      	b.n	80040ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040c6:	4b57      	ldr	r3, [pc, #348]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040d2:	4b54      	ldr	r3, [pc, #336]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040e2:	e006      	b.n	80040f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e004      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ea:	bf00      	nop
 80040ec:	e002      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10d      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6819      	ldr	r1, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	3b01      	subs	r3, #1
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	430b      	orrs	r3, r1
 8004110:	4944      	ldr	r1, [pc, #272]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d17d      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800411c:	4b41      	ldr	r3, [pc, #260]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a40      	ldr	r2, [pc, #256]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7fd f848 	bl	80011bc <HAL_GetTick>
 800412c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800412e:	e009      	b.n	8004144 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004130:	f7fd f844 	bl	80011bc <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d902      	bls.n	8004144 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	73fb      	strb	r3, [r7, #15]
        break;
 8004142:	e005      	b.n	8004150 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004144:	4b37      	ldr	r3, [pc, #220]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ef      	bne.n	8004130 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d160      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d111      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800415c:	4b31      	ldr	r3, [pc, #196]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6892      	ldr	r2, [r2, #8]
 800416c:	0211      	lsls	r1, r2, #8
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68d2      	ldr	r2, [r2, #12]
 8004172:	0912      	lsrs	r2, r2, #4
 8004174:	0452      	lsls	r2, r2, #17
 8004176:	430a      	orrs	r2, r1
 8004178:	492a      	ldr	r1, [pc, #168]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	610b      	str	r3, [r1, #16]
 800417e:	e027      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d112      	bne.n	80041ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004186:	4b27      	ldr	r3, [pc, #156]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800418e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6892      	ldr	r2, [r2, #8]
 8004196:	0211      	lsls	r1, r2, #8
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6912      	ldr	r2, [r2, #16]
 800419c:	0852      	lsrs	r2, r2, #1
 800419e:	3a01      	subs	r2, #1
 80041a0:	0552      	lsls	r2, r2, #21
 80041a2:	430a      	orrs	r2, r1
 80041a4:	491f      	ldr	r1, [pc, #124]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	610b      	str	r3, [r1, #16]
 80041aa:	e011      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6892      	ldr	r2, [r2, #8]
 80041bc:	0211      	lsls	r1, r2, #8
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6952      	ldr	r2, [r2, #20]
 80041c2:	0852      	lsrs	r2, r2, #1
 80041c4:	3a01      	subs	r2, #1
 80041c6:	0652      	lsls	r2, r2, #25
 80041c8:	430a      	orrs	r2, r1
 80041ca:	4916      	ldr	r1, [pc, #88]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041d0:	4b14      	ldr	r3, [pc, #80]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a13      	ldr	r2, [pc, #76]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fc ffee 	bl	80011bc <HAL_GetTick>
 80041e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041e2:	e009      	b.n	80041f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041e4:	f7fc ffea 	bl	80011bc <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d902      	bls.n	80041f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	73fb      	strb	r3, [r7, #15]
          break;
 80041f6:	e005      	b.n	8004204 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0ef      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	4904      	ldr	r1, [pc, #16]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004214:	4313      	orrs	r3, r2
 8004216:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000

08004228 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004236:	4b6a      	ldr	r3, [pc, #424]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d018      	beq.n	8004274 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004242:	4b67      	ldr	r3, [pc, #412]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0203 	and.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d10d      	bne.n	800426e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
       ||
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800425a:	4b61      	ldr	r3, [pc, #388]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
       ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d047      	beq.n	80042fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
 8004272:	e044      	b.n	80042fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d018      	beq.n	80042ae <RCCEx_PLLSAI2_Config+0x86>
 800427c:	2b03      	cmp	r3, #3
 800427e:	d825      	bhi.n	80042cc <RCCEx_PLLSAI2_Config+0xa4>
 8004280:	2b01      	cmp	r3, #1
 8004282:	d002      	beq.n	800428a <RCCEx_PLLSAI2_Config+0x62>
 8004284:	2b02      	cmp	r3, #2
 8004286:	d009      	beq.n	800429c <RCCEx_PLLSAI2_Config+0x74>
 8004288:	e020      	b.n	80042cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800428a:	4b55      	ldr	r3, [pc, #340]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d11d      	bne.n	80042d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429a:	e01a      	b.n	80042d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800429c:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d116      	bne.n	80042d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ac:	e013      	b.n	80042d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042ae:	4b4c      	ldr	r3, [pc, #304]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ba:	4b49      	ldr	r3, [pc, #292]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042ca:	e006      	b.n	80042da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
      break;
 80042d0:	e004      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042da:	bf00      	nop
    }

    if(status == HAL_OK)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042e2:	4b3f      	ldr	r3, [pc, #252]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6819      	ldr	r1, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	430b      	orrs	r3, r1
 80042f8:	4939      	ldr	r1, [pc, #228]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d167      	bne.n	80043d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004304:	4b36      	ldr	r3, [pc, #216]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a35      	ldr	r2, [pc, #212]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800430e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fc ff54 	bl	80011bc <HAL_GetTick>
 8004314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004316:	e009      	b.n	800432c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004318:	f7fc ff50 	bl	80011bc <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d902      	bls.n	800432c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	73fb      	strb	r3, [r7, #15]
        break;
 800432a:	e005      	b.n	8004338 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800432c:	4b2c      	ldr	r3, [pc, #176]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1ef      	bne.n	8004318 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d14a      	bne.n	80043d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d111      	bne.n	8004368 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004344:	4b26      	ldr	r3, [pc, #152]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800434c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6892      	ldr	r2, [r2, #8]
 8004354:	0211      	lsls	r1, r2, #8
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68d2      	ldr	r2, [r2, #12]
 800435a:	0912      	lsrs	r2, r2, #4
 800435c:	0452      	lsls	r2, r2, #17
 800435e:	430a      	orrs	r2, r1
 8004360:	491f      	ldr	r1, [pc, #124]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	614b      	str	r3, [r1, #20]
 8004366:	e011      	b.n	800438c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004370:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6892      	ldr	r2, [r2, #8]
 8004378:	0211      	lsls	r1, r2, #8
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6912      	ldr	r2, [r2, #16]
 800437e:	0852      	lsrs	r2, r2, #1
 8004380:	3a01      	subs	r2, #1
 8004382:	0652      	lsls	r2, r2, #25
 8004384:	430a      	orrs	r2, r1
 8004386:	4916      	ldr	r1, [pc, #88]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004388:	4313      	orrs	r3, r2
 800438a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800438c:	4b14      	ldr	r3, [pc, #80]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004396:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fc ff10 	bl	80011bc <HAL_GetTick>
 800439c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800439e:	e009      	b.n	80043b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043a0:	f7fc ff0c 	bl	80011bc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d902      	bls.n	80043b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	73fb      	strb	r3, [r7, #15]
          break;
 80043b2:	e005      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ef      	beq.n	80043a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043c6:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4904      	ldr	r1, [pc, #16]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000

080043e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e049      	b.n	800448a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fc6c 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fa9e 	bl	8004964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d001      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e04f      	b.n	800454c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a23      	ldr	r2, [pc, #140]	@ (8004558 <HAL_TIM_Base_Start_IT+0xc4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01d      	beq.n	800450a <HAL_TIM_Base_Start_IT+0x76>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d6:	d018      	beq.n	800450a <HAL_TIM_Base_Start_IT+0x76>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1f      	ldr	r2, [pc, #124]	@ (800455c <HAL_TIM_Base_Start_IT+0xc8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_TIM_Base_Start_IT+0x76>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004560 <HAL_TIM_Base_Start_IT+0xcc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00e      	beq.n	800450a <HAL_TIM_Base_Start_IT+0x76>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004564 <HAL_TIM_Base_Start_IT+0xd0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_TIM_Base_Start_IT+0x76>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004568 <HAL_TIM_Base_Start_IT+0xd4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_TIM_Base_Start_IT+0x76>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a19      	ldr	r2, [pc, #100]	@ (800456c <HAL_TIM_Base_Start_IT+0xd8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d115      	bne.n	8004536 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	4b17      	ldr	r3, [pc, #92]	@ (8004570 <HAL_TIM_Base_Start_IT+0xdc>)
 8004512:	4013      	ands	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b06      	cmp	r3, #6
 800451a:	d015      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0xb4>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004522:	d011      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004534:	e008      	b.n	8004548 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e000      	b.n	800454a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004548:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40014000 	.word	0x40014000
 8004570:	00010007 	.word	0x00010007

08004574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d020      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01b      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0202 	mvn.w	r2, #2
 80045a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9b2 	bl	8004928 <HAL_TIM_IC_CaptureCallback>
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f9a4 	bl	8004914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f9b5 	bl	800493c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d020      	beq.n	8004624 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01b      	beq.n	8004624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0204 	mvn.w	r2, #4
 80045f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f98c 	bl	8004928 <HAL_TIM_IC_CaptureCallback>
 8004610:	e005      	b.n	800461e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f97e 	bl	8004914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f98f 	bl	800493c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d020      	beq.n	8004670 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01b      	beq.n	8004670 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0208 	mvn.w	r2, #8
 8004640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2204      	movs	r2, #4
 8004646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f966 	bl	8004928 <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f958 	bl	8004914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f969 	bl	800493c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	d020      	beq.n	80046bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0210 	mvn.w	r2, #16
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2208      	movs	r2, #8
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f940 	bl	8004928 <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f932 	bl	8004914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f943 	bl	800493c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00c      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0201 	mvn.w	r2, #1
 80046d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fcc2 	bl	8001064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00c      	beq.n	800470e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fafd 	bl	8004d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00c      	beq.n	8004732 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800472a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 faf5 	bl	8004d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00c      	beq.n	8004756 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800474e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f8fd 	bl	8004950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00c      	beq.n	800477a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f06f 0220 	mvn.w	r2, #32
 8004772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fabd 	bl	8004cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_TIM_ConfigClockSource+0x1c>
 800479a:	2302      	movs	r3, #2
 800479c:	e0b6      	b.n	800490c <HAL_TIM_ConfigClockSource+0x18a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047bc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047da:	d03e      	beq.n	800485a <HAL_TIM_ConfigClockSource+0xd8>
 80047dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047e0:	f200 8087 	bhi.w	80048f2 <HAL_TIM_ConfigClockSource+0x170>
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e8:	f000 8086 	beq.w	80048f8 <HAL_TIM_ConfigClockSource+0x176>
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f0:	d87f      	bhi.n	80048f2 <HAL_TIM_ConfigClockSource+0x170>
 80047f2:	2b70      	cmp	r3, #112	@ 0x70
 80047f4:	d01a      	beq.n	800482c <HAL_TIM_ConfigClockSource+0xaa>
 80047f6:	2b70      	cmp	r3, #112	@ 0x70
 80047f8:	d87b      	bhi.n	80048f2 <HAL_TIM_ConfigClockSource+0x170>
 80047fa:	2b60      	cmp	r3, #96	@ 0x60
 80047fc:	d050      	beq.n	80048a0 <HAL_TIM_ConfigClockSource+0x11e>
 80047fe:	2b60      	cmp	r3, #96	@ 0x60
 8004800:	d877      	bhi.n	80048f2 <HAL_TIM_ConfigClockSource+0x170>
 8004802:	2b50      	cmp	r3, #80	@ 0x50
 8004804:	d03c      	beq.n	8004880 <HAL_TIM_ConfigClockSource+0xfe>
 8004806:	2b50      	cmp	r3, #80	@ 0x50
 8004808:	d873      	bhi.n	80048f2 <HAL_TIM_ConfigClockSource+0x170>
 800480a:	2b40      	cmp	r3, #64	@ 0x40
 800480c:	d058      	beq.n	80048c0 <HAL_TIM_ConfigClockSource+0x13e>
 800480e:	2b40      	cmp	r3, #64	@ 0x40
 8004810:	d86f      	bhi.n	80048f2 <HAL_TIM_ConfigClockSource+0x170>
 8004812:	2b30      	cmp	r3, #48	@ 0x30
 8004814:	d064      	beq.n	80048e0 <HAL_TIM_ConfigClockSource+0x15e>
 8004816:	2b30      	cmp	r3, #48	@ 0x30
 8004818:	d86b      	bhi.n	80048f2 <HAL_TIM_ConfigClockSource+0x170>
 800481a:	2b20      	cmp	r3, #32
 800481c:	d060      	beq.n	80048e0 <HAL_TIM_ConfigClockSource+0x15e>
 800481e:	2b20      	cmp	r3, #32
 8004820:	d867      	bhi.n	80048f2 <HAL_TIM_ConfigClockSource+0x170>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d05c      	beq.n	80048e0 <HAL_TIM_ConfigClockSource+0x15e>
 8004826:	2b10      	cmp	r3, #16
 8004828:	d05a      	beq.n	80048e0 <HAL_TIM_ConfigClockSource+0x15e>
 800482a:	e062      	b.n	80048f2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800483c:	f000 f9b2 	bl	8004ba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800484e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	609a      	str	r2, [r3, #8]
      break;
 8004858:	e04f      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800486a:	f000 f99b 	bl	8004ba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800487c:	609a      	str	r2, [r3, #8]
      break;
 800487e:	e03c      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800488c:	461a      	mov	r2, r3
 800488e:	f000 f90f 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2150      	movs	r1, #80	@ 0x50
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f968 	bl	8004b6e <TIM_ITRx_SetConfig>
      break;
 800489e:	e02c      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ac:	461a      	mov	r2, r3
 80048ae:	f000 f92e 	bl	8004b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2160      	movs	r1, #96	@ 0x60
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f958 	bl	8004b6e <TIM_ITRx_SetConfig>
      break;
 80048be:	e01c      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048cc:	461a      	mov	r2, r3
 80048ce:	f000 f8ef 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2140      	movs	r1, #64	@ 0x40
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f948 	bl	8004b6e <TIM_ITRx_SetConfig>
      break;
 80048de:	e00c      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f000 f93f 	bl	8004b6e <TIM_ITRx_SetConfig>
      break;
 80048f0:	e003      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
      break;
 80048f6:	e000      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a46      	ldr	r2, [pc, #280]	@ (8004a90 <TIM_Base_SetConfig+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004982:	d00f      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a43      	ldr	r2, [pc, #268]	@ (8004a94 <TIM_Base_SetConfig+0x130>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a42      	ldr	r2, [pc, #264]	@ (8004a98 <TIM_Base_SetConfig+0x134>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a41      	ldr	r2, [pc, #260]	@ (8004a9c <TIM_Base_SetConfig+0x138>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a40      	ldr	r2, [pc, #256]	@ (8004aa0 <TIM_Base_SetConfig+0x13c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d108      	bne.n	80049b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a35      	ldr	r2, [pc, #212]	@ (8004a90 <TIM_Base_SetConfig+0x12c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01f      	beq.n	80049fe <TIM_Base_SetConfig+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c4:	d01b      	beq.n	80049fe <TIM_Base_SetConfig+0x9a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a32      	ldr	r2, [pc, #200]	@ (8004a94 <TIM_Base_SetConfig+0x130>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d017      	beq.n	80049fe <TIM_Base_SetConfig+0x9a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a31      	ldr	r2, [pc, #196]	@ (8004a98 <TIM_Base_SetConfig+0x134>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <TIM_Base_SetConfig+0x9a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a30      	ldr	r2, [pc, #192]	@ (8004a9c <TIM_Base_SetConfig+0x138>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00f      	beq.n	80049fe <TIM_Base_SetConfig+0x9a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa0 <TIM_Base_SetConfig+0x13c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00b      	beq.n	80049fe <TIM_Base_SetConfig+0x9a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2e      	ldr	r2, [pc, #184]	@ (8004aa4 <TIM_Base_SetConfig+0x140>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d007      	beq.n	80049fe <TIM_Base_SetConfig+0x9a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a2d      	ldr	r2, [pc, #180]	@ (8004aa8 <TIM_Base_SetConfig+0x144>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d003      	beq.n	80049fe <TIM_Base_SetConfig+0x9a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a2c      	ldr	r2, [pc, #176]	@ (8004aac <TIM_Base_SetConfig+0x148>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d108      	bne.n	8004a10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a16      	ldr	r2, [pc, #88]	@ (8004a90 <TIM_Base_SetConfig+0x12c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00f      	beq.n	8004a5c <TIM_Base_SetConfig+0xf8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	@ (8004aa0 <TIM_Base_SetConfig+0x13c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00b      	beq.n	8004a5c <TIM_Base_SetConfig+0xf8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a17      	ldr	r2, [pc, #92]	@ (8004aa4 <TIM_Base_SetConfig+0x140>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d007      	beq.n	8004a5c <TIM_Base_SetConfig+0xf8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	@ (8004aa8 <TIM_Base_SetConfig+0x144>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <TIM_Base_SetConfig+0xf8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a15      	ldr	r2, [pc, #84]	@ (8004aac <TIM_Base_SetConfig+0x148>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d103      	bne.n	8004a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d105      	bne.n	8004a82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f023 0201 	bic.w	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	611a      	str	r2, [r3, #16]
  }
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800
 8004a9c:	40000c00 	.word	0x40000c00
 8004aa0:	40013400 	.word	0x40013400
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40014400 	.word	0x40014400
 8004aac:	40014800 	.word	0x40014800

08004ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0201 	bic.w	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f023 030a 	bic.w	r3, r3, #10
 8004aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b087      	sub	sp, #28
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f023 0210 	bic.w	r2, r3, #16
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	031b      	lsls	r3, r3, #12
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f043 0307 	orr.w	r3, r3, #7
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	021a      	lsls	r2, r3, #8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	609a      	str	r2, [r3, #8]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e068      	b.n	8004cce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a2e      	ldr	r2, [pc, #184]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d108      	bne.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01d      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6e:	d018      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00e      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a18      	ldr	r2, [pc, #96]	@ (8004cec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a13      	ldr	r2, [pc, #76]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a14      	ldr	r2, [pc, #80]	@ (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d10c      	bne.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40014000 	.word	0x40014000

08004cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e040      	b.n	8004dc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc f81c 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2224      	movs	r2, #36	@ 0x24
 8004d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fae0 	bl	800533c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f825 	bl	8004dcc <UART_SetConfig>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e01b      	b.n	8004dc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fb5f 	bl	8005480 <UART_CheckIdleState>
 8004dc2:	4603      	mov	r3, r0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd0:	b08a      	sub	sp, #40	@ 0x28
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4ba4      	ldr	r3, [pc, #656]	@ (800508c <UART_SetConfig+0x2c0>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a99      	ldr	r2, [pc, #612]	@ (8005090 <UART_SetConfig+0x2c4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e34:	4313      	orrs	r3, r2
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a90      	ldr	r2, [pc, #576]	@ (8005094 <UART_SetConfig+0x2c8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d126      	bne.n	8004ea4 <UART_SetConfig+0xd8>
 8004e56:	4b90      	ldr	r3, [pc, #576]	@ (8005098 <UART_SetConfig+0x2cc>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d81b      	bhi.n	8004e9c <UART_SetConfig+0xd0>
 8004e64:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <UART_SetConfig+0xa0>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e7d 	.word	0x08004e7d
 8004e70:	08004e8d 	.word	0x08004e8d
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e95 	.word	0x08004e95
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e116      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004e84:	2302      	movs	r3, #2
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e112      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e10e      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e10a      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e106      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a7c      	ldr	r2, [pc, #496]	@ (800509c <UART_SetConfig+0x2d0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d138      	bne.n	8004f20 <UART_SetConfig+0x154>
 8004eae:	4b7a      	ldr	r3, [pc, #488]	@ (8005098 <UART_SetConfig+0x2cc>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d82d      	bhi.n	8004f18 <UART_SetConfig+0x14c>
 8004ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec4 <UART_SetConfig+0xf8>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004f19 	.word	0x08004f19
 8004ecc:	08004f19 	.word	0x08004f19
 8004ed0:	08004f19 	.word	0x08004f19
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	08004f19 	.word	0x08004f19
 8004edc:	08004f19 	.word	0x08004f19
 8004ee0:	08004f19 	.word	0x08004f19
 8004ee4:	08004f01 	.word	0x08004f01
 8004ee8:	08004f19 	.word	0x08004f19
 8004eec:	08004f19 	.word	0x08004f19
 8004ef0:	08004f19 	.word	0x08004f19
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efe:	e0d8      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f00:	2302      	movs	r3, #2
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f06:	e0d4      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e0d0      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e0cc      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e0c8      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a5e      	ldr	r2, [pc, #376]	@ (80050a0 <UART_SetConfig+0x2d4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d125      	bne.n	8004f76 <UART_SetConfig+0x1aa>
 8004f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005098 <UART_SetConfig+0x2cc>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f34:	2b30      	cmp	r3, #48	@ 0x30
 8004f36:	d016      	beq.n	8004f66 <UART_SetConfig+0x19a>
 8004f38:	2b30      	cmp	r3, #48	@ 0x30
 8004f3a:	d818      	bhi.n	8004f6e <UART_SetConfig+0x1a2>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d00a      	beq.n	8004f56 <UART_SetConfig+0x18a>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d814      	bhi.n	8004f6e <UART_SetConfig+0x1a2>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <UART_SetConfig+0x182>
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d008      	beq.n	8004f5e <UART_SetConfig+0x192>
 8004f4c:	e00f      	b.n	8004f6e <UART_SetConfig+0x1a2>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f54:	e0ad      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f56:	2302      	movs	r3, #2
 8004f58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5c:	e0a9      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f5e:	2304      	movs	r3, #4
 8004f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f64:	e0a5      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f66:	2308      	movs	r3, #8
 8004f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6c:	e0a1      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f6e:	2310      	movs	r3, #16
 8004f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f74:	e09d      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a4a      	ldr	r2, [pc, #296]	@ (80050a4 <UART_SetConfig+0x2d8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d125      	bne.n	8004fcc <UART_SetConfig+0x200>
 8004f80:	4b45      	ldr	r3, [pc, #276]	@ (8005098 <UART_SetConfig+0x2cc>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f8c:	d016      	beq.n	8004fbc <UART_SetConfig+0x1f0>
 8004f8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f90:	d818      	bhi.n	8004fc4 <UART_SetConfig+0x1f8>
 8004f92:	2b80      	cmp	r3, #128	@ 0x80
 8004f94:	d00a      	beq.n	8004fac <UART_SetConfig+0x1e0>
 8004f96:	2b80      	cmp	r3, #128	@ 0x80
 8004f98:	d814      	bhi.n	8004fc4 <UART_SetConfig+0x1f8>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <UART_SetConfig+0x1d8>
 8004f9e:	2b40      	cmp	r3, #64	@ 0x40
 8004fa0:	d008      	beq.n	8004fb4 <UART_SetConfig+0x1e8>
 8004fa2:	e00f      	b.n	8004fc4 <UART_SetConfig+0x1f8>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004faa:	e082      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004fac:	2302      	movs	r3, #2
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb2:	e07e      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fba:	e07a      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc2:	e076      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fca:	e072      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a35      	ldr	r2, [pc, #212]	@ (80050a8 <UART_SetConfig+0x2dc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d12a      	bne.n	800502c <UART_SetConfig+0x260>
 8004fd6:	4b30      	ldr	r3, [pc, #192]	@ (8005098 <UART_SetConfig+0x2cc>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe4:	d01a      	beq.n	800501c <UART_SetConfig+0x250>
 8004fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fea:	d81b      	bhi.n	8005024 <UART_SetConfig+0x258>
 8004fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff0:	d00c      	beq.n	800500c <UART_SetConfig+0x240>
 8004ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff6:	d815      	bhi.n	8005024 <UART_SetConfig+0x258>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <UART_SetConfig+0x238>
 8004ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005000:	d008      	beq.n	8005014 <UART_SetConfig+0x248>
 8005002:	e00f      	b.n	8005024 <UART_SetConfig+0x258>
 8005004:	2300      	movs	r3, #0
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500a:	e052      	b.n	80050b2 <UART_SetConfig+0x2e6>
 800500c:	2302      	movs	r3, #2
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005012:	e04e      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8005014:	2304      	movs	r3, #4
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501a:	e04a      	b.n	80050b2 <UART_SetConfig+0x2e6>
 800501c:	2308      	movs	r3, #8
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005022:	e046      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8005024:	2310      	movs	r3, #16
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e042      	b.n	80050b2 <UART_SetConfig+0x2e6>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <UART_SetConfig+0x2c4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d13a      	bne.n	80050ac <UART_SetConfig+0x2e0>
 8005036:	4b18      	ldr	r3, [pc, #96]	@ (8005098 <UART_SetConfig+0x2cc>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005040:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005044:	d01a      	beq.n	800507c <UART_SetConfig+0x2b0>
 8005046:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800504a:	d81b      	bhi.n	8005084 <UART_SetConfig+0x2b8>
 800504c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005050:	d00c      	beq.n	800506c <UART_SetConfig+0x2a0>
 8005052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005056:	d815      	bhi.n	8005084 <UART_SetConfig+0x2b8>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <UART_SetConfig+0x298>
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005060:	d008      	beq.n	8005074 <UART_SetConfig+0x2a8>
 8005062:	e00f      	b.n	8005084 <UART_SetConfig+0x2b8>
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506a:	e022      	b.n	80050b2 <UART_SetConfig+0x2e6>
 800506c:	2302      	movs	r3, #2
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005072:	e01e      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507a:	e01a      	b.n	80050b2 <UART_SetConfig+0x2e6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e016      	b.n	80050b2 <UART_SetConfig+0x2e6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e012      	b.n	80050b2 <UART_SetConfig+0x2e6>
 800508c:	efff69f3 	.word	0xefff69f3
 8005090:	40008000 	.word	0x40008000
 8005094:	40013800 	.word	0x40013800
 8005098:	40021000 	.word	0x40021000
 800509c:	40004400 	.word	0x40004400
 80050a0:	40004800 	.word	0x40004800
 80050a4:	40004c00 	.word	0x40004c00
 80050a8:	40005000 	.word	0x40005000
 80050ac:	2310      	movs	r3, #16
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a9f      	ldr	r2, [pc, #636]	@ (8005334 <UART_SetConfig+0x568>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d17a      	bne.n	80051b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d824      	bhi.n	800510e <UART_SetConfig+0x342>
 80050c4:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <UART_SetConfig+0x300>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	0800510f 	.word	0x0800510f
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	0800510f 	.word	0x0800510f
 80050dc:	080050ff 	.word	0x080050ff
 80050e0:	0800510f 	.word	0x0800510f
 80050e4:	0800510f 	.word	0x0800510f
 80050e8:	0800510f 	.word	0x0800510f
 80050ec:	08005107 	.word	0x08005107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7fe fc30 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 80050f4:	61f8      	str	r0, [r7, #28]
        break;
 80050f6:	e010      	b.n	800511a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005338 <UART_SetConfig+0x56c>)
 80050fa:	61fb      	str	r3, [r7, #28]
        break;
 80050fc:	e00d      	b.n	800511a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fe:	f7fe fb93 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 8005102:	61f8      	str	r0, [r7, #28]
        break;
 8005104:	e009      	b.n	800511a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800510a:	61fb      	str	r3, [r7, #28]
        break;
 800510c:	e005      	b.n	800511a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005118:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80fb 	beq.w	8005318 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	429a      	cmp	r2, r3
 8005130:	d305      	bcc.n	800513e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	429a      	cmp	r2, r3
 800513c:	d903      	bls.n	8005146 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005144:	e0e8      	b.n	8005318 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2200      	movs	r2, #0
 800514a:	461c      	mov	r4, r3
 800514c:	4615      	mov	r5, r2
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	022b      	lsls	r3, r5, #8
 8005158:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800515c:	0222      	lsls	r2, r4, #8
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	6849      	ldr	r1, [r1, #4]
 8005162:	0849      	lsrs	r1, r1, #1
 8005164:	2000      	movs	r0, #0
 8005166:	4688      	mov	r8, r1
 8005168:	4681      	mov	r9, r0
 800516a:	eb12 0a08 	adds.w	sl, r2, r8
 800516e:	eb43 0b09 	adc.w	fp, r3, r9
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005180:	4650      	mov	r0, sl
 8005182:	4659      	mov	r1, fp
 8005184:	f7fb f820 	bl	80001c8 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4613      	mov	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005196:	d308      	bcc.n	80051aa <UART_SetConfig+0x3de>
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800519e:	d204      	bcs.n	80051aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	60da      	str	r2, [r3, #12]
 80051a8:	e0b6      	b.n	8005318 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051b0:	e0b2      	b.n	8005318 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ba:	d15e      	bne.n	800527a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d828      	bhi.n	8005216 <UART_SetConfig+0x44a>
 80051c4:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <UART_SetConfig+0x400>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	080051f9 	.word	0x080051f9
 80051d4:	08005201 	.word	0x08005201
 80051d8:	08005217 	.word	0x08005217
 80051dc:	08005207 	.word	0x08005207
 80051e0:	08005217 	.word	0x08005217
 80051e4:	08005217 	.word	0x08005217
 80051e8:	08005217 	.word	0x08005217
 80051ec:	0800520f 	.word	0x0800520f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fe fbb0 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 80051f4:	61f8      	str	r0, [r7, #28]
        break;
 80051f6:	e014      	b.n	8005222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fe fbc2 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 80051fc:	61f8      	str	r0, [r7, #28]
        break;
 80051fe:	e010      	b.n	8005222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005200:	4b4d      	ldr	r3, [pc, #308]	@ (8005338 <UART_SetConfig+0x56c>)
 8005202:	61fb      	str	r3, [r7, #28]
        break;
 8005204:	e00d      	b.n	8005222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005206:	f7fe fb0f 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 800520a:	61f8      	str	r0, [r7, #28]
        break;
 800520c:	e009      	b.n	8005222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005212:	61fb      	str	r3, [r7, #28]
        break;
 8005214:	e005      	b.n	8005222 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d077      	beq.n	8005318 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	005a      	lsls	r2, r3, #1
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	441a      	add	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b0f      	cmp	r3, #15
 8005242:	d916      	bls.n	8005272 <UART_SetConfig+0x4a6>
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800524a:	d212      	bcs.n	8005272 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f023 030f 	bic.w	r3, r3, #15
 8005254:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	b29b      	uxth	r3, r3
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	b29a      	uxth	r2, r3
 8005262:	8afb      	ldrh	r3, [r7, #22]
 8005264:	4313      	orrs	r3, r2
 8005266:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	8afa      	ldrh	r2, [r7, #22]
 800526e:	60da      	str	r2, [r3, #12]
 8005270:	e052      	b.n	8005318 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005278:	e04e      	b.n	8005318 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800527a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800527e:	2b08      	cmp	r3, #8
 8005280:	d827      	bhi.n	80052d2 <UART_SetConfig+0x506>
 8005282:	a201      	add	r2, pc, #4	@ (adr r2, 8005288 <UART_SetConfig+0x4bc>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	080052d3 	.word	0x080052d3
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052d3 	.word	0x080052d3
 80052a0:	080052d3 	.word	0x080052d3
 80052a4:	080052d3 	.word	0x080052d3
 80052a8:	080052cb 	.word	0x080052cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ac:	f7fe fb52 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 80052b0:	61f8      	str	r0, [r7, #28]
        break;
 80052b2:	e014      	b.n	80052de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7fe fb64 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 80052b8:	61f8      	str	r0, [r7, #28]
        break;
 80052ba:	e010      	b.n	80052de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005338 <UART_SetConfig+0x56c>)
 80052be:	61fb      	str	r3, [r7, #28]
        break;
 80052c0:	e00d      	b.n	80052de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fe fab1 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80052c6:	61f8      	str	r0, [r7, #28]
        break;
 80052c8:	e009      	b.n	80052de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ce:	61fb      	str	r3, [r7, #28]
        break;
 80052d0:	e005      	b.n	80052de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052dc:	bf00      	nop
    }

    if (pclk != 0U)
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d019      	beq.n	8005318 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	085a      	lsrs	r2, r3, #1
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	441a      	add	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d909      	bls.n	8005312 <UART_SetConfig+0x546>
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005304:	d205      	bcs.n	8005312 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60da      	str	r2, [r3, #12]
 8005310:	e002      	b.n	8005318 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005324:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005328:	4618      	mov	r0, r3
 800532a:	3728      	adds	r7, #40	@ 0x28
 800532c:	46bd      	mov	sp, r7
 800532e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005332:	bf00      	nop
 8005334:	40008000 	.word	0x40008000
 8005338:	00f42400 	.word	0x00f42400

0800533c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01a      	beq.n	8005452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800543a:	d10a      	bne.n	8005452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b098      	sub	sp, #96	@ 0x60
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005490:	f7fb fe94 	bl	80011bc <HAL_GetTick>
 8005494:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d12e      	bne.n	8005502 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ac:	2200      	movs	r2, #0
 80054ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f88c 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d021      	beq.n	8005502 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e6      	bne.n	80054be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e062      	b.n	80055c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b04      	cmp	r3, #4
 800550e:	d149      	bne.n	80055a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005518:	2200      	movs	r2, #0
 800551a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f856 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d03c      	beq.n	80055a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	623b      	str	r3, [r7, #32]
   return(result);
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800553e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005548:	633b      	str	r3, [r7, #48]	@ 0x30
 800554a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800554e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3308      	adds	r3, #8
 8005562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	60fb      	str	r3, [r7, #12]
   return(result);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800557c:	61fa      	str	r2, [r7, #28]
 800557e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	69b9      	ldr	r1, [r7, #24]
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	617b      	str	r3, [r7, #20]
   return(result);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e011      	b.n	80055c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3758      	adds	r7, #88	@ 0x58
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e0:	e04f      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d04b      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7fb fde7 	bl	80011bc <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <UART_WaitOnFlagUntilTimeout+0x30>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e04e      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d037      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b80      	cmp	r3, #128	@ 0x80
 8005616:	d034      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b40      	cmp	r3, #64	@ 0x40
 800561c:	d031      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b08      	cmp	r3, #8
 800562a:	d110      	bne.n	800564e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2208      	movs	r2, #8
 8005632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f838 	bl	80056aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2208      	movs	r2, #8
 800563e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e029      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800565c:	d111      	bne.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f81e 	bl	80056aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e00f      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4013      	ands	r3, r2
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	bf0c      	ite	eq
 8005692:	2301      	moveq	r3, #1
 8005694:	2300      	movne	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	429a      	cmp	r2, r3
 800569e:	d0a0      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b095      	sub	sp, #84	@ 0x54
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3308      	adds	r3, #8
 80056ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005704:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800570a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e5      	bne.n	80056e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571c:	2b01      	cmp	r3, #1
 800571e:	d118      	bne.n	8005752 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	60bb      	str	r3, [r7, #8]
   return(result);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f023 0310 	bic.w	r3, r3, #16
 8005734:	647b      	str	r3, [r7, #68]	@ 0x44
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6979      	ldr	r1, [r7, #20]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	613b      	str	r3, [r7, #16]
   return(result);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e6      	bne.n	8005720 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005766:	bf00      	nop
 8005768:	3754      	adds	r7, #84	@ 0x54
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005772:	b084      	sub	sp, #16
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	f107 001c 	add.w	r0, r7, #28
 8005780:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f001 fa25 	bl	8006be0 <USB_CoreReset>
 8005796:	4603      	mov	r3, r0
 8005798:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800579a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80057ae:	e005      	b.n	80057bc <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057c8:	b004      	add	sp, #16
 80057ca:	4770      	bx	lr

080057cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d165      	bne.n	80058ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a3e      	ldr	r2, [pc, #248]	@ (80058dc <USB_SetTurnaroundTime+0x110>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d906      	bls.n	80057f6 <USB_SetTurnaroundTime+0x2a>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a3d      	ldr	r2, [pc, #244]	@ (80058e0 <USB_SetTurnaroundTime+0x114>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d202      	bcs.n	80057f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057f0:	230f      	movs	r3, #15
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e05c      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4a39      	ldr	r2, [pc, #228]	@ (80058e0 <USB_SetTurnaroundTime+0x114>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d306      	bcc.n	800580c <USB_SetTurnaroundTime+0x40>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4a38      	ldr	r2, [pc, #224]	@ (80058e4 <USB_SetTurnaroundTime+0x118>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d202      	bcs.n	800580c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005806:	230e      	movs	r3, #14
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	e051      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4a35      	ldr	r2, [pc, #212]	@ (80058e4 <USB_SetTurnaroundTime+0x118>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d306      	bcc.n	8005822 <USB_SetTurnaroundTime+0x56>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4a34      	ldr	r2, [pc, #208]	@ (80058e8 <USB_SetTurnaroundTime+0x11c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d202      	bcs.n	8005822 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800581c:	230d      	movs	r3, #13
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e046      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4a30      	ldr	r2, [pc, #192]	@ (80058e8 <USB_SetTurnaroundTime+0x11c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d306      	bcc.n	8005838 <USB_SetTurnaroundTime+0x6c>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4a2f      	ldr	r2, [pc, #188]	@ (80058ec <USB_SetTurnaroundTime+0x120>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d802      	bhi.n	8005838 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005832:	230c      	movs	r3, #12
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e03b      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4a2c      	ldr	r2, [pc, #176]	@ (80058ec <USB_SetTurnaroundTime+0x120>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d906      	bls.n	800584e <USB_SetTurnaroundTime+0x82>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4a2b      	ldr	r2, [pc, #172]	@ (80058f0 <USB_SetTurnaroundTime+0x124>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d802      	bhi.n	800584e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005848:	230b      	movs	r3, #11
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e030      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4a27      	ldr	r2, [pc, #156]	@ (80058f0 <USB_SetTurnaroundTime+0x124>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d906      	bls.n	8005864 <USB_SetTurnaroundTime+0x98>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a26      	ldr	r2, [pc, #152]	@ (80058f4 <USB_SetTurnaroundTime+0x128>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d802      	bhi.n	8005864 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800585e:	230a      	movs	r3, #10
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e025      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4a23      	ldr	r2, [pc, #140]	@ (80058f4 <USB_SetTurnaroundTime+0x128>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d906      	bls.n	800587a <USB_SetTurnaroundTime+0xae>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a22      	ldr	r2, [pc, #136]	@ (80058f8 <USB_SetTurnaroundTime+0x12c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d202      	bcs.n	800587a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005874:	2309      	movs	r3, #9
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e01a      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4a1e      	ldr	r2, [pc, #120]	@ (80058f8 <USB_SetTurnaroundTime+0x12c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d306      	bcc.n	8005890 <USB_SetTurnaroundTime+0xc4>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4a1d      	ldr	r2, [pc, #116]	@ (80058fc <USB_SetTurnaroundTime+0x130>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d802      	bhi.n	8005890 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800588a:	2308      	movs	r3, #8
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e00f      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a1a      	ldr	r2, [pc, #104]	@ (80058fc <USB_SetTurnaroundTime+0x130>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d906      	bls.n	80058a6 <USB_SetTurnaroundTime+0xda>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a19      	ldr	r2, [pc, #100]	@ (8005900 <USB_SetTurnaroundTime+0x134>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d202      	bcs.n	80058a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058a0:	2307      	movs	r3, #7
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e004      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058a6:	2306      	movs	r3, #6
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	e001      	b.n	80058b0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058ac:	2309      	movs	r3, #9
 80058ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	029b      	lsls	r3, r3, #10
 80058c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80058c8:	431a      	orrs	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	00d8acbf 	.word	0x00d8acbf
 80058e0:	00e4e1c0 	.word	0x00e4e1c0
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	01067380 	.word	0x01067380
 80058ec:	011a499f 	.word	0x011a499f
 80058f0:	01312cff 	.word	0x01312cff
 80058f4:	014ca43f 	.word	0x014ca43f
 80058f8:	016e3600 	.word	0x016e3600
 80058fc:	01a6ab1f 	.word	0x01a6ab1f
 8005900:	01e84800 	.word	0x01e84800

08005904 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f043 0201 	orr.w	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f023 0201 	bic.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d115      	bne.n	8005996 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005976:	200a      	movs	r0, #10
 8005978:	f7fb fc2c 	bl	80011d4 <HAL_Delay>
      ms += 10U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	330a      	adds	r3, #10
 8005980:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 f8b3 	bl	8006aee <USB_GetMode>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d01e      	beq.n	80059cc <USB_SetCurrentMode+0x84>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2bc7      	cmp	r3, #199	@ 0xc7
 8005992:	d9f0      	bls.n	8005976 <USB_SetCurrentMode+0x2e>
 8005994:	e01a      	b.n	80059cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d115      	bne.n	80059c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059a8:	200a      	movs	r0, #10
 80059aa:	f7fb fc13 	bl	80011d4 <HAL_Delay>
      ms += 10U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	330a      	adds	r3, #10
 80059b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f89a 	bl	8006aee <USB_GetMode>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <USB_SetCurrentMode+0x84>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80059c4:	d9f0      	bls.n	80059a8 <USB_SetCurrentMode+0x60>
 80059c6:	e001      	b.n	80059cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e005      	b.n	80059d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80059d0:	d101      	bne.n	80059d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e0:	b084      	sub	sp, #16
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b086      	sub	sp, #24
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e009      	b.n	8005a14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	3340      	adds	r3, #64	@ 0x40
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3301      	adds	r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b0e      	cmp	r3, #14
 8005a18:	d9f2      	bls.n	8005a00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d11c      	bne.n	8005a5c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a30:	f043 0302 	orr.w	r3, r3, #2
 8005a34:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e005      	b.n	8005a68 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a6e:	461a      	mov	r2, r3
 8005a70:	2300      	movs	r3, #0
 8005a72:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a74:	2103      	movs	r1, #3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f95a 	bl	8005d30 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a7c:	2110      	movs	r1, #16
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8f6 	bl	8005c70 <USB_FlushTxFifo>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f920 	bl	8005cd4 <USB_FlushRxFifo>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abc:	461a      	mov	r2, r3
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	e043      	b.n	8005b50 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ada:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ade:	d118      	bne.n	8005b12 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af2:	461a      	mov	r2, r3
 8005af4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	e013      	b.n	8005b24 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e008      	b.n	8005b24 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2300      	movs	r3, #0
 8005b22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b30:	461a      	mov	r2, r3
 8005b32:	2300      	movs	r3, #0
 8005b34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b42:	461a      	mov	r2, r3
 8005b44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b54:	461a      	mov	r2, r3
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d3b5      	bcc.n	8005ac8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	e043      	b.n	8005bea <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b78:	d118      	bne.n	8005bac <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	e013      	b.n	8005bbe <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	e008      	b.n	8005bbe <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2300      	movs	r3, #0
 8005bbc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bca:	461a      	mov	r2, r3
 8005bcc:	2300      	movs	r3, #0
 8005bce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005be2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	3301      	adds	r3, #1
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bee:	461a      	mov	r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d3b5      	bcc.n	8005b62 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c08:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f043 0210 	orr.w	r2, r3, #16
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	4b10      	ldr	r3, [pc, #64]	@ (8005c6c <USB_DevInit+0x28c>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f043 0208 	orr.w	r2, r3, #8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c54:	f043 0304 	orr.w	r3, r3, #4
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c68:	b004      	add	sp, #16
 8005c6a:	4770      	bx	lr
 8005c6c:	803c3800 	.word	0x803c3800

08005c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c8a:	d901      	bls.n	8005c90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e01b      	b.n	8005cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	daf2      	bge.n	8005c7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	019b      	lsls	r3, r3, #6
 8005ca0:	f043 0220 	orr.w	r2, r3, #32
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cb4:	d901      	bls.n	8005cba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e006      	b.n	8005cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d0f0      	beq.n	8005ca8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cec:	d901      	bls.n	8005cf2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e018      	b.n	8005d24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	daf2      	bge.n	8005ce0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2210      	movs	r2, #16
 8005d02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3301      	adds	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d10:	d901      	bls.n	8005d16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e006      	b.n	8005d24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d0f0      	beq.n	8005d04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	68f9      	ldr	r1, [r7, #12]
 8005d4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d50:	4313      	orrs	r3, r2
 8005d52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b087      	sub	sp, #28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 0306 	and.w	r3, r3, #6
 8005d7a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d002      	beq.n	8005d88 <USB_GetDevSpeed+0x26>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b06      	cmp	r3, #6
 8005d86:	d102      	bne.n	8005d8e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	75fb      	strb	r3, [r7, #23]
 8005d8c:	e001      	b.n	8005d92 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005d8e:	230f      	movs	r3, #15
 8005d90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d13a      	bne.n	8005e32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	68f9      	ldr	r1, [r7, #12]
 8005dd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d155      	bne.n	8005ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	791b      	ldrb	r3, [r3, #4]
 8005e0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	059b      	lsls	r3, r3, #22
 8005e16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	e036      	b.n	8005ea0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	2101      	movs	r1, #1
 8005e44:	fa01 f303 	lsl.w	r3, r1, r3
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d11a      	bne.n	8005ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	791b      	ldrb	r3, [r3, #4]
 8005e84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e86:	430b      	orrs	r3, r1
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d161      	bne.n	8005f90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ee2:	d11f      	bne.n	8005f24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005efe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	68f9      	ldr	r1, [r7, #12]
 8005f40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f44:	4013      	ands	r3, r2
 8005f46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	2101      	movs	r1, #1
 8005f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f68:	4013      	ands	r3, r2
 8005f6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	0159      	lsls	r1, r3, #5
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	440b      	add	r3, r1
 8005f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f86:	4619      	mov	r1, r3
 8005f88:	4b35      	ldr	r3, [pc, #212]	@ (8006060 <USB_DeactivateEndpoint+0x1b0>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]
 8005f8e:	e060      	b.n	8006052 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa6:	d11f      	bne.n	8005fe8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	43db      	mvns	r3, r3
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006008:	4013      	ands	r3, r2
 800600a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	2101      	movs	r1, #1
 800601e:	fa01 f303 	lsl.w	r3, r1, r3
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	43db      	mvns	r3, r3
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800602c:	4013      	ands	r3, r2
 800602e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	0159      	lsls	r1, r3, #5
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	440b      	add	r3, r1
 8006046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604a:	4619      	mov	r1, r3
 800604c:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <USB_DeactivateEndpoint+0x1b4>)
 800604e:	4013      	ands	r3, r2
 8006050:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	ec337800 	.word	0xec337800
 8006064:	eff37800 	.word	0xeff37800

08006068 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b01      	cmp	r3, #1
 8006082:	f040 812d 	bne.w	80062e0 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d132      	bne.n	80060f4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060a8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060ac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ec:	0cdb      	lsrs	r3, r3, #19
 80060ee:	04db      	lsls	r3, r3, #19
 80060f0:	6113      	str	r3, [r2, #16]
 80060f2:	e097      	b.n	8006224 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800610e:	0cdb      	lsrs	r3, r3, #19
 8006110:	04db      	lsls	r3, r3, #19
 8006112:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800612e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006132:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006136:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d11a      	bne.n	8006174 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	d903      	bls.n	8006152 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800616c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006170:	6113      	str	r3, [r2, #16]
 8006172:	e044      	b.n	80061fe <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	4413      	add	r3, r2
 800617e:	1e5a      	subs	r2, r3, #1
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	89fb      	ldrh	r3, [r7, #14]
 800619a:	04d9      	lsls	r1, r3, #19
 800619c:	4b8f      	ldr	r3, [pc, #572]	@ (80063dc <USB_EPStartXfer+0x374>)
 800619e:	400b      	ands	r3, r1
 80061a0:	6939      	ldr	r1, [r7, #16]
 80061a2:	0148      	lsls	r0, r1, #5
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	4401      	add	r1, r0
 80061a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	791b      	ldrb	r3, [r3, #4]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d122      	bne.n	80061fe <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061d2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80061d6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	89fb      	ldrh	r3, [r7, #14]
 80061e8:	075b      	lsls	r3, r3, #29
 80061ea:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80061ee:	6939      	ldr	r1, [r7, #16]
 80061f0:	0148      	lsls	r0, r1, #5
 80061f2:	6979      	ldr	r1, [r7, #20]
 80061f4:	4401      	add	r1, r0
 80061f6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061fa:	4313      	orrs	r3, r2
 80061fc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006214:	6939      	ldr	r1, [r7, #16]
 8006216:	0148      	lsls	r0, r1, #5
 8006218:	6979      	ldr	r1, [r7, #20]
 800621a:	4401      	add	r1, r0
 800621c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006220:	4313      	orrs	r3, r2
 8006222:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	440a      	add	r2, r1
 800623a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800623e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006242:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	791b      	ldrb	r3, [r3, #4]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d015      	beq.n	8006278 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 813a 	beq.w	80064ca <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800625c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	2101      	movs	r1, #1
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	6979      	ldr	r1, [r7, #20]
 800626e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006272:	4313      	orrs	r3, r2
 8006274:	634b      	str	r3, [r1, #52]	@ 0x34
 8006276:	e128      	b.n	80064ca <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d110      	bne.n	80062aa <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	e00f      	b.n	80062ca <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c8:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68d9      	ldr	r1, [r3, #12]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781a      	ldrb	r2, [r3, #0]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f9a7 	bl	800662c <USB_WritePacket>
 80062de:	e0f4      	b.n	80064ca <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062fa:	0cdb      	lsrs	r3, r3, #19
 80062fc:	04db      	lsls	r3, r3, #19
 80062fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800631a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800631e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006322:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d12f      	bne.n	800638a <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006358:	6939      	ldr	r1, [r7, #16]
 800635a:	0148      	lsls	r0, r1, #5
 800635c:	6979      	ldr	r1, [r7, #20]
 800635e:	4401      	add	r1, r0
 8006360:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006364:	4313      	orrs	r3, r2
 8006366:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006382:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006386:	6113      	str	r3, [r2, #16]
 8006388:	e062      	b.n	8006450 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d126      	bne.n	80063e0 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a8:	6939      	ldr	r1, [r7, #16]
 80063aa:	0148      	lsls	r0, r1, #5
 80063ac:	6979      	ldr	r1, [r7, #20]
 80063ae:	4401      	add	r1, r0
 80063b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063b4:	4313      	orrs	r3, r2
 80063b6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063d6:	6113      	str	r3, [r2, #16]
 80063d8:	e03a      	b.n	8006450 <USB_EPStartXfer+0x3e8>
 80063da:	bf00      	nop
 80063dc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	4413      	add	r3, r2
 80063ea:	1e5a      	subs	r2, r3, #1
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	89fa      	ldrh	r2, [r7, #14]
 80063fc:	fb03 f202 	mul.w	r2, r3, r2
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	89fb      	ldrh	r3, [r7, #14]
 8006414:	04d9      	lsls	r1, r3, #19
 8006416:	4b2f      	ldr	r3, [pc, #188]	@ (80064d4 <USB_EPStartXfer+0x46c>)
 8006418:	400b      	ands	r3, r1
 800641a:	6939      	ldr	r1, [r7, #16]
 800641c:	0148      	lsls	r0, r1, #5
 800641e:	6979      	ldr	r1, [r7, #20]
 8006420:	4401      	add	r1, r0
 8006422:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006426:	4313      	orrs	r3, r2
 8006428:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006440:	6939      	ldr	r1, [r7, #16]
 8006442:	0148      	lsls	r0, r1, #5
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	4401      	add	r1, r0
 8006448:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800644c:	4313      	orrs	r3, r2
 800644e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	791b      	ldrb	r3, [r3, #4]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d128      	bne.n	80064aa <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d110      	bne.n	800648a <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006482:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	e00f      	b.n	80064aa <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064a8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	1ff80000 	.word	0x1ff80000

080064d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d14a      	bne.n	800658c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800650a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800650e:	f040 8086 	bne.w	800661e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006530:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006534:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	7812      	ldrb	r2, [r2, #0]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006554:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006558:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006566:	4293      	cmp	r3, r2
 8006568:	d902      	bls.n	8006570 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
          break;
 800656e:	e056      	b.n	800661e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006584:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006588:	d0e7      	beq.n	800655a <USB_EPStopXfer+0x82>
 800658a:	e048      	b.n	800661e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065a4:	d13b      	bne.n	800661e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	7812      	ldrb	r2, [r2, #0]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	7812      	ldrb	r2, [r2, #0]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d902      	bls.n	8006604 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	75fb      	strb	r3, [r7, #23]
          break;
 8006602:	e00c      	b.n	800661e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800661c:	d0e7      	beq.n	80065ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800661e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800662c:	b480      	push	{r7}
 800662e:	b089      	sub	sp, #36	@ 0x24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	4611      	mov	r1, r2
 8006638:	461a      	mov	r2, r3
 800663a:	460b      	mov	r3, r1
 800663c:	71fb      	strb	r3, [r7, #7]
 800663e:	4613      	mov	r3, r2
 8006640:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800664a:	88bb      	ldrh	r3, [r7, #4]
 800664c:	3303      	adds	r3, #3
 800664e:	089b      	lsrs	r3, r3, #2
 8006650:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006652:	2300      	movs	r3, #0
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e018      	b.n	800668a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	031a      	lsls	r2, r3, #12
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	4413      	add	r3, r2
 8006660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006664:	461a      	mov	r2, r3
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	3301      	adds	r3, #1
 8006670:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3301      	adds	r3, #1
 8006676:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3301      	adds	r3, #1
 800667c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	3301      	adds	r3, #1
 8006682:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	3301      	adds	r3, #1
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d3e2      	bcc.n	8006658 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3724      	adds	r7, #36	@ 0x24
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b08b      	sub	sp, #44	@ 0x2c
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	089b      	lsrs	r3, r3, #2
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	623b      	str	r3, [r7, #32]
 80066ca:	e014      	b.n	80066f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	3301      	adds	r3, #1
 80066dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	3301      	adds	r3, #1
 80066e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	3301      	adds	r3, #1
 80066e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	3301      	adds	r3, #1
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	3301      	adds	r3, #1
 80066f4:	623b      	str	r3, [r7, #32]
 80066f6:	6a3a      	ldr	r2, [r7, #32]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d3e6      	bcc.n	80066cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80066fe:	8bfb      	ldrh	r3, [r7, #30]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01e      	beq.n	8006742 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670e:	461a      	mov	r2, r3
 8006710:	f107 0310 	add.w	r3, r7, #16
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	fa22 f303 	lsr.w	r3, r2, r3
 8006724:	b2da      	uxtb	r2, r3
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	701a      	strb	r2, [r3, #0]
      i++;
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	3301      	adds	r3, #1
 800672e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	3301      	adds	r3, #1
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006736:	8bfb      	ldrh	r3, [r7, #30]
 8006738:	3b01      	subs	r3, #1
 800673a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800673c:	8bfb      	ldrh	r3, [r7, #30]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1ea      	bne.n	8006718 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006744:	4618      	mov	r0, r3
 8006746:	372c      	adds	r7, #44	@ 0x2c
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d12c      	bne.n	80067c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	db12      	blt.n	80067a4 <USB_EPSetStall+0x54>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00f      	beq.n	80067a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	0151      	lsls	r1, r2, #5
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	440a      	add	r2, r1
 800679a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800679e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	e02b      	b.n	800681e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	db12      	blt.n	80067fe <USB_EPSetStall+0xae>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00f      	beq.n	80067fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	440a      	add	r2, r1
 8006814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800681c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d128      	bne.n	800689a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	440a      	add	r2, r1
 800685e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006862:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006866:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	791b      	ldrb	r3, [r3, #4]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d003      	beq.n	8006878 <USB_EPClearStall+0x4c>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	791b      	ldrb	r3, [r3, #4]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d138      	bne.n	80068ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	e027      	b.n	80068ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	791b      	ldrb	r3, [r3, #4]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d003      	beq.n	80068ca <USB_EPClearStall+0x9e>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	791b      	ldrb	r3, [r3, #4]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d10f      	bne.n	80068ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006916:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800691a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800692c:	68f9      	ldr	r1, [r7, #12]
 800692e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006932:	4313      	orrs	r3, r2
 8006934:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800695e:	f023 0303 	bic.w	r3, r3, #3
 8006962:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006972:	f023 0302 	bic.w	r3, r3, #2
 8006976:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069a0:	f023 0303 	bic.w	r3, r3, #3
 80069a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069b4:	f043 0302 	orr.w	r3, r3, #2
 80069b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4013      	ands	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069e0:	68fb      	ldr	r3, [r7, #12]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	0c1b      	lsrs	r3, r3, #16
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	4013      	ands	r3, r2
 8006a44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	b29b      	uxth	r3, r3
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4013      	ands	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a84:	68bb      	ldr	r3, [r7, #8]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b087      	sub	sp, #28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac2:	01db      	lsls	r3, r3, #7
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4013      	ands	r3, r2
 8006ade:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f003 0301 	and.w	r3, r3, #1
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b28:	f023 0307 	bic.w	r3, r3, #7
 8006b2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	333c      	adds	r3, #60	@ 0x3c
 8006b62:	3304      	adds	r3, #4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006bdc <USB_EP0_OutStart+0x8c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d90a      	bls.n	8006b86 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b80:	d101      	bne.n	8006b86 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	e024      	b.n	8006bd0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2300      	movs	r3, #0
 8006b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ba0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bb4:	f043 0318 	orr.w	r3, r3, #24
 8006bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bc8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006bcc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	4f54300a 	.word	0x4f54300a

08006be0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bf8:	d901      	bls.n	8006bfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e01b      	b.n	8006c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	daf2      	bge.n	8006bec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f043 0201 	orr.w	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c22:	d901      	bls.n	8006c28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e006      	b.n	8006c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d0f0      	beq.n	8006c16 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c50:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006c54:	f002 fdca 	bl	80097ec <USBD_static_malloc>
 8006c58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32b0      	adds	r2, #176	@ 0xb0
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c70:	2302      	movs	r3, #2
 8006c72:	e0d4      	b.n	8006e1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c74:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f002 fdd4 	bl	8009828 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	32b0      	adds	r2, #176	@ 0xb0
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	32b0      	adds	r2, #176	@ 0xb0
 8006c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	7c1b      	ldrb	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d138      	bne.n	8006d1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006cac:	4b5e      	ldr	r3, [pc, #376]	@ (8006e28 <USBD_CDC_Init+0x1e4>)
 8006cae:	7819      	ldrb	r1, [r3, #0]
 8006cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 fb84 	bl	80093c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8006e28 <USBD_CDC_Init+0x1e4>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 020f 	and.w	r2, r3, #15
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	3324      	adds	r3, #36	@ 0x24
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cd6:	4b55      	ldr	r3, [pc, #340]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006cd8:	7819      	ldrb	r1, [r3, #0]
 8006cda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cde:	2202      	movs	r2, #2
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f002 fb6f 	bl	80093c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ce6:	4b51      	ldr	r3, [pc, #324]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f003 020f 	and.w	r2, r3, #15
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006cfe:	2201      	movs	r2, #1
 8006d00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d02:	4b4b      	ldr	r3, [pc, #300]	@ (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 020f 	and.w	r2, r3, #15
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	3326      	adds	r3, #38	@ 0x26
 8006d18:	2210      	movs	r2, #16
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	e035      	b.n	8006d8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d1e:	4b42      	ldr	r3, [pc, #264]	@ (8006e28 <USBD_CDC_Init+0x1e4>)
 8006d20:	7819      	ldrb	r1, [r3, #0]
 8006d22:	2340      	movs	r3, #64	@ 0x40
 8006d24:	2202      	movs	r2, #2
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f002 fb4c 	bl	80093c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8006e28 <USBD_CDC_Init+0x1e4>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 020f 	and.w	r2, r3, #15
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	3324      	adds	r3, #36	@ 0x24
 8006d42:	2201      	movs	r2, #1
 8006d44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d46:	4b39      	ldr	r3, [pc, #228]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006d48:	7819      	ldrb	r1, [r3, #0]
 8006d4a:	2340      	movs	r3, #64	@ 0x40
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f002 fb38 	bl	80093c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d54:	4b35      	ldr	r3, [pc, #212]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d70:	4b2f      	ldr	r3, [pc, #188]	@ (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f003 020f 	and.w	r2, r3, #15
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3326      	adds	r3, #38	@ 0x26
 8006d86:	2210      	movs	r2, #16
 8006d88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d8a:	4b29      	ldr	r3, [pc, #164]	@ (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d8c:	7819      	ldrb	r1, [r3, #0]
 8006d8e:	2308      	movs	r3, #8
 8006d90:	2203      	movs	r2, #3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f002 fb16 	bl	80093c4 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d98:	4b25      	ldr	r3, [pc, #148]	@ (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 020f 	and.w	r2, r3, #15
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	3324      	adds	r3, #36	@ 0x24
 8006dae:	2201      	movs	r2, #1
 8006db0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	33b0      	adds	r3, #176	@ 0xb0
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006de8:	2302      	movs	r3, #2
 8006dea:	e018      	b.n	8006e1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	7c1b      	ldrb	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006df4:	4b0d      	ldr	r3, [pc, #52]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006df6:	7819      	ldrb	r1, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006dfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f002 fc58 	bl	80096b8 <USBD_LL_PrepareReceive>
 8006e08:	e008      	b.n	8006e1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e0a:	4b08      	ldr	r3, [pc, #32]	@ (8006e2c <USBD_CDC_Init+0x1e8>)
 8006e0c:	7819      	ldrb	r1, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e14:	2340      	movs	r3, #64	@ 0x40
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f002 fc4e 	bl	80096b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	200000bf 	.word	0x200000bf
 8006e2c:	200000c0 	.word	0x200000c0
 8006e30:	200000c1 	.word	0x200000c1

08006e34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006e40:	4b3a      	ldr	r3, [pc, #232]	@ (8006f2c <USBD_CDC_DeInit+0xf8>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f002 fafa 	bl	8009440 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006e4c:	4b37      	ldr	r3, [pc, #220]	@ (8006f2c <USBD_CDC_DeInit+0xf8>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3324      	adds	r3, #36	@ 0x24
 8006e62:	2200      	movs	r2, #0
 8006e64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006e66:	4b32      	ldr	r3, [pc, #200]	@ (8006f30 <USBD_CDC_DeInit+0xfc>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f002 fae7 	bl	8009440 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006e72:	4b2f      	ldr	r3, [pc, #188]	@ (8006f30 <USBD_CDC_DeInit+0xfc>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f003 020f 	and.w	r2, r3, #15
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e8e:	4b29      	ldr	r3, [pc, #164]	@ (8006f34 <USBD_CDC_DeInit+0x100>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f002 fad3 	bl	8009440 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e9a:	4b26      	ldr	r3, [pc, #152]	@ (8006f34 <USBD_CDC_DeInit+0x100>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	f003 020f 	and.w	r2, r3, #15
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	3324      	adds	r3, #36	@ 0x24
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8006f34 <USBD_CDC_DeInit+0x100>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3326      	adds	r3, #38	@ 0x26
 8006eca:	2200      	movs	r2, #0
 8006ecc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	32b0      	adds	r2, #176	@ 0xb0
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01f      	beq.n	8006f20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	33b0      	adds	r3, #176	@ 0xb0
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	32b0      	adds	r2, #176	@ 0xb0
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f002 fc80 	bl	8009808 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32b0      	adds	r2, #176	@ 0xb0
 8006f12:	2100      	movs	r1, #0
 8006f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	200000bf 	.word	0x200000bf
 8006f30:	200000c0 	.word	0x200000c0
 8006f34:	200000c1 	.word	0x200000c1

08006f38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	32b0      	adds	r2, #176	@ 0xb0
 8006f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e0bf      	b.n	80070e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d050      	beq.n	8007016 <USBD_CDC_Setup+0xde>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	f040 80af 	bne.w	80070d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	88db      	ldrh	r3, [r3, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d03a      	beq.n	8006ff8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b25b      	sxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	da1b      	bge.n	8006fc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	33b0      	adds	r3, #176	@ 0xb0
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006fa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	88d2      	ldrh	r2, [r2, #6]
 8006fa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88db      	ldrh	r3, [r3, #6]
 8006fae:	2b07      	cmp	r3, #7
 8006fb0:	bf28      	it	cs
 8006fb2:	2307      	movcs	r3, #7
 8006fb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	89fa      	ldrh	r2, [r7, #14]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fd7d 	bl	8008abc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006fc2:	e090      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	785a      	ldrb	r2, [r3, #1]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	88db      	ldrh	r3, [r3, #6]
 8006fd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8006fd4:	d803      	bhi.n	8006fde <USBD_CDC_Setup+0xa6>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	88db      	ldrh	r3, [r3, #6]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	e000      	b.n	8006fe0 <USBD_CDC_Setup+0xa8>
 8006fde:	2240      	movs	r2, #64	@ 0x40
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006fe6:	6939      	ldr	r1, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fd8f 	bl	8008b14 <USBD_CtlPrepareRx>
      break;
 8006ff6:	e076      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	33b0      	adds	r3, #176	@ 0xb0
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	7850      	ldrb	r0, [r2, #1]
 800700e:	2200      	movs	r2, #0
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	4798      	blx	r3
      break;
 8007014:	e067      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b0b      	cmp	r3, #11
 800701c:	d851      	bhi.n	80070c2 <USBD_CDC_Setup+0x18a>
 800701e:	a201      	add	r2, pc, #4	@ (adr r2, 8007024 <USBD_CDC_Setup+0xec>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007055 	.word	0x08007055
 8007028:	080070d1 	.word	0x080070d1
 800702c:	080070c3 	.word	0x080070c3
 8007030:	080070c3 	.word	0x080070c3
 8007034:	080070c3 	.word	0x080070c3
 8007038:	080070c3 	.word	0x080070c3
 800703c:	080070c3 	.word	0x080070c3
 8007040:	080070c3 	.word	0x080070c3
 8007044:	080070c3 	.word	0x080070c3
 8007048:	080070c3 	.word	0x080070c3
 800704c:	0800707f 	.word	0x0800707f
 8007050:	080070a9 	.word	0x080070a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b03      	cmp	r3, #3
 800705e:	d107      	bne.n	8007070 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007060:	f107 030a 	add.w	r3, r7, #10
 8007064:	2202      	movs	r2, #2
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fd27 	bl	8008abc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800706e:	e032      	b.n	80070d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fca5 	bl	80089c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	75fb      	strb	r3, [r7, #23]
          break;
 800707c:	e02b      	b.n	80070d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b03      	cmp	r3, #3
 8007088:	d107      	bne.n	800709a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800708a:	f107 030d 	add.w	r3, r7, #13
 800708e:	2201      	movs	r2, #1
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fd12 	bl	8008abc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007098:	e01d      	b.n	80070d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fc90 	bl	80089c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80070a2:	2303      	movs	r3, #3
 80070a4:	75fb      	strb	r3, [r7, #23]
          break;
 80070a6:	e016      	b.n	80070d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d00f      	beq.n	80070d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fc83 	bl	80089c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070c0:	e008      	b.n	80070d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fc7c 	bl	80089c2 <USBD_CtlError>
          ret = USBD_FAIL;
 80070ca:	2303      	movs	r3, #3
 80070cc:	75fb      	strb	r3, [r7, #23]
          break;
 80070ce:	e002      	b.n	80070d6 <USBD_CDC_Setup+0x19e>
          break;
 80070d0:	bf00      	nop
 80070d2:	e008      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>
          break;
 80070d4:	bf00      	nop
      }
      break;
 80070d6:	e006      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fc71 	bl	80089c2 <USBD_CtlError>
      ret = USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	75fb      	strb	r3, [r7, #23]
      break;
 80070e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007102:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32b0      	adds	r2, #176	@ 0xb0
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007116:	2303      	movs	r3, #3
 8007118:	e065      	b.n	80071e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32b0      	adds	r2, #176	@ 0xb0
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	f003 020f 	and.w	r2, r3, #15
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	3318      	adds	r3, #24
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d02f      	beq.n	80071a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	3318      	adds	r3, #24
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	f003 010f 	and.w	r1, r3, #15
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	460b      	mov	r3, r1
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	440b      	add	r3, r1
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4403      	add	r3, r0
 800716c:	331c      	adds	r3, #28
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	fbb2 f1f3 	udiv	r1, r2, r3
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800717a:	2b00      	cmp	r3, #0
 800717c:	d112      	bne.n	80071a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	f003 020f 	and.w	r2, r3, #15
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	3318      	adds	r3, #24
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007196:	78f9      	ldrb	r1, [r7, #3]
 8007198:	2300      	movs	r3, #0
 800719a:	2200      	movs	r2, #0
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f002 fa53 	bl	8009648 <USBD_LL_Transmit>
 80071a2:	e01f      	b.n	80071e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	33b0      	adds	r3, #176	@ 0xb0
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d010      	beq.n	80071e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	33b0      	adds	r3, #176	@ 0xb0
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	32b0      	adds	r2, #176	@ 0xb0
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32b0      	adds	r2, #176	@ 0xb0
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e01a      	b.n	8007256 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f002 fa7f 	bl	8009728 <USBD_LL_GetRxDataSize>
 800722a:	4602      	mov	r2, r0
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	33b0      	adds	r3, #176	@ 0xb0
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007250:	4611      	mov	r1, r2
 8007252:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	32b0      	adds	r2, #176	@ 0xb0
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800727c:	2303      	movs	r3, #3
 800727e:	e024      	b.n	80072ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	33b0      	adds	r3, #176	@ 0xb0
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d019      	beq.n	80072c8 <USBD_CDC_EP0_RxReady+0x6a>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800729a:	2bff      	cmp	r3, #255	@ 0xff
 800729c:	d014      	beq.n	80072c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	33b0      	adds	r3, #176	@ 0xb0
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80072b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80072be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	22ff      	movs	r2, #255	@ 0xff
 80072c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072dc:	2182      	movs	r1, #130	@ 0x82
 80072de:	4818      	ldr	r0, [pc, #96]	@ (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072e0:	f000 fd0f 	bl	8007d02 <USBD_GetEpDesc>
 80072e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072e6:	2101      	movs	r1, #1
 80072e8:	4815      	ldr	r0, [pc, #84]	@ (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072ea:	f000 fd0a 	bl	8007d02 <USBD_GetEpDesc>
 80072ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072f0:	2181      	movs	r1, #129	@ 0x81
 80072f2:	4813      	ldr	r0, [pc, #76]	@ (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072f4:	f000 fd05 	bl	8007d02 <USBD_GetEpDesc>
 80072f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2210      	movs	r2, #16
 8007304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2200      	movs	r2, #0
 8007310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007314:	711a      	strb	r2, [r3, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007328:	711a      	strb	r2, [r3, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2243      	movs	r2, #67	@ 0x43
 8007332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007334:	4b02      	ldr	r3, [pc, #8]	@ (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	2000007c 	.word	0x2000007c

08007344 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800734c:	2182      	movs	r1, #130	@ 0x82
 800734e:	4818      	ldr	r0, [pc, #96]	@ (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007350:	f000 fcd7 	bl	8007d02 <USBD_GetEpDesc>
 8007354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007356:	2101      	movs	r1, #1
 8007358:	4815      	ldr	r0, [pc, #84]	@ (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800735a:	f000 fcd2 	bl	8007d02 <USBD_GetEpDesc>
 800735e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007360:	2181      	movs	r1, #129	@ 0x81
 8007362:	4813      	ldr	r0, [pc, #76]	@ (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007364:	f000 fccd 	bl	8007d02 <USBD_GetEpDesc>
 8007368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2210      	movs	r2, #16
 8007374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2200      	movs	r2, #0
 8007380:	711a      	strb	r2, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f042 0202 	orr.w	r2, r2, #2
 8007388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	711a      	strb	r2, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f042 0202 	orr.w	r2, r2, #2
 800739c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2243      	movs	r2, #67	@ 0x43
 80073a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073a4:	4b02      	ldr	r3, [pc, #8]	@ (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	2000007c 	.word	0x2000007c

080073b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073bc:	2182      	movs	r1, #130	@ 0x82
 80073be:	4818      	ldr	r0, [pc, #96]	@ (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073c0:	f000 fc9f 	bl	8007d02 <USBD_GetEpDesc>
 80073c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073c6:	2101      	movs	r1, #1
 80073c8:	4815      	ldr	r0, [pc, #84]	@ (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073ca:	f000 fc9a 	bl	8007d02 <USBD_GetEpDesc>
 80073ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073d0:	2181      	movs	r1, #129	@ 0x81
 80073d2:	4813      	ldr	r0, [pc, #76]	@ (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073d4:	f000 fc95 	bl	8007d02 <USBD_GetEpDesc>
 80073d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2210      	movs	r2, #16
 80073e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073f4:	711a      	strb	r2, [r3, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d006      	beq.n	800740e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007408:	711a      	strb	r2, [r3, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2243      	movs	r2, #67	@ 0x43
 8007412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007414:	4b02      	ldr	r3, [pc, #8]	@ (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	2000007c 	.word	0x2000007c

08007424 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	220a      	movs	r2, #10
 8007430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007432:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	20000038 	.word	0x20000038

08007444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e009      	b.n	800746c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	33b0      	adds	r3, #176	@ 0xb0
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	32b0      	adds	r2, #176	@ 0xb0
 800748e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007492:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800749a:	2303      	movs	r3, #3
 800749c:	e008      	b.n	80074b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	32b0      	adds	r2, #176	@ 0xb0
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e004      	b.n	80074ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	32b0      	adds	r2, #176	@ 0xb0
 800750a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	32b0      	adds	r2, #176	@ 0xb0
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007522:	2303      	movs	r3, #3
 8007524:	e018      	b.n	8007558 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7c1b      	ldrb	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800752e:	4b0c      	ldr	r3, [pc, #48]	@ (8007560 <USBD_CDC_ReceivePacket+0x68>)
 8007530:	7819      	ldrb	r1, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f002 f8bb 	bl	80096b8 <USBD_LL_PrepareReceive>
 8007542:	e008      	b.n	8007556 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007544:	4b06      	ldr	r3, [pc, #24]	@ (8007560 <USBD_CDC_ReceivePacket+0x68>)
 8007546:	7819      	ldrb	r1, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800754e:	2340      	movs	r3, #64	@ 0x40
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f002 f8b1 	bl	80096b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	200000c0 	.word	0x200000c0

08007564 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007578:	2303      	movs	r3, #3
 800757a:	e01f      	b.n	80075bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	79fa      	ldrb	r2, [r7, #7]
 80075ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f001 fe89 	bl	80092c8 <USBD_LL_Init>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e025      	b.n	8007628 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	32ae      	adds	r2, #174	@ 0xae
 80075ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00f      	beq.n	8007618 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32ae      	adds	r2, #174	@ 0xae
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007608:	f107 020e 	add.w	r2, r7, #14
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
 8007610:	4602      	mov	r2, r0
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 fe91 	bl	8009360 <USBD_LL_Start>
 800763e:	4603      	mov	r3, r0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007650:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d009      	beq.n	800768c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	78fa      	ldrb	r2, [r7, #3]
 8007682:	4611      	mov	r1, r2
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	78fa      	ldrb	r2, [r7, #3]
 80076b0:	4611      	mov	r1, r2
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80076bc:	2303      	movs	r3, #3
 80076be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 f936 	bl	800894e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80076fe:	f003 031f 	and.w	r3, r3, #31
 8007702:	2b02      	cmp	r3, #2
 8007704:	d01a      	beq.n	800773c <USBD_LL_SetupStage+0x72>
 8007706:	2b02      	cmp	r3, #2
 8007708:	d822      	bhi.n	8007750 <USBD_LL_SetupStage+0x86>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <USBD_LL_SetupStage+0x4a>
 800770e:	2b01      	cmp	r3, #1
 8007710:	d00a      	beq.n	8007728 <USBD_LL_SetupStage+0x5e>
 8007712:	e01d      	b.n	8007750 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fb63 	bl	8007de8 <USBD_StdDevReq>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]
      break;
 8007726:	e020      	b.n	800776a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fbcb 	bl	8007ecc <USBD_StdItfReq>
 8007736:	4603      	mov	r3, r0
 8007738:	73fb      	strb	r3, [r7, #15]
      break;
 800773a:	e016      	b.n	800776a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc2d 	bl	8007fa4 <USBD_StdEPReq>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
      break;
 800774e:	e00c      	b.n	800776a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007756:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fea4 	bl	80094ac <USBD_LL_StallEP>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
      break;
 8007768:	bf00      	nop
  }

  return ret;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	460b      	mov	r3, r1
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d16e      	bne.n	800786a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007792:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800779a:	2b03      	cmp	r3, #3
 800779c:	f040 8098 	bne.w	80078d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d913      	bls.n	80077d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	1ad2      	subs	r2, r2, r3
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	4293      	cmp	r3, r2
 80077c4:	bf28      	it	cs
 80077c6:	4613      	movcs	r3, r2
 80077c8:	461a      	mov	r2, r3
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f001 f9be 	bl	8008b4e <USBD_CtlContinueRx>
 80077d2:	e07d      	b.n	80078d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077da:	f003 031f 	and.w	r3, r3, #31
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d014      	beq.n	800780c <USBD_LL_DataOutStage+0x98>
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d81d      	bhi.n	8007822 <USBD_LL_DataOutStage+0xae>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <USBD_LL_DataOutStage+0x7c>
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d003      	beq.n	80077f6 <USBD_LL_DataOutStage+0x82>
 80077ee:	e018      	b.n	8007822 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	75bb      	strb	r3, [r7, #22]
            break;
 80077f4:	e018      	b.n	8007828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	4619      	mov	r1, r3
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fa64 	bl	8007cce <USBD_CoreFindIF>
 8007806:	4603      	mov	r3, r0
 8007808:	75bb      	strb	r3, [r7, #22]
            break;
 800780a:	e00d      	b.n	8007828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007812:	b2db      	uxtb	r3, r3
 8007814:	4619      	mov	r1, r3
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fa66 	bl	8007ce8 <USBD_CoreFindEP>
 800781c:	4603      	mov	r3, r0
 800781e:	75bb      	strb	r3, [r7, #22]
            break;
 8007820:	e002      	b.n	8007828 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	75bb      	strb	r3, [r7, #22]
            break;
 8007826:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007828:	7dbb      	ldrb	r3, [r7, #22]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d119      	bne.n	8007862 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b03      	cmp	r3, #3
 8007838:	d113      	bne.n	8007862 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800783a:	7dba      	ldrb	r2, [r7, #22]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	32ae      	adds	r2, #174	@ 0xae
 8007840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00b      	beq.n	8007862 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800784a:	7dba      	ldrb	r2, [r7, #22]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007852:	7dba      	ldrb	r2, [r7, #22]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	32ae      	adds	r2, #174	@ 0xae
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f001 f984 	bl	8008b70 <USBD_CtlSendStatus>
 8007868:	e032      	b.n	80078d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800786a:	7afb      	ldrb	r3, [r7, #11]
 800786c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007870:	b2db      	uxtb	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 fa37 	bl	8007ce8 <USBD_CoreFindEP>
 800787a:	4603      	mov	r3, r0
 800787c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800787e:	7dbb      	ldrb	r3, [r7, #22]
 8007880:	2bff      	cmp	r3, #255	@ 0xff
 8007882:	d025      	beq.n	80078d0 <USBD_LL_DataOutStage+0x15c>
 8007884:	7dbb      	ldrb	r3, [r7, #22]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d122      	bne.n	80078d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b03      	cmp	r3, #3
 8007894:	d117      	bne.n	80078c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007896:	7dba      	ldrb	r2, [r7, #22]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	32ae      	adds	r2, #174	@ 0xae
 800789c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00f      	beq.n	80078c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80078a6:	7dba      	ldrb	r2, [r7, #22]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80078ae:	7dba      	ldrb	r2, [r7, #22]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	32ae      	adds	r2, #174	@ 0xae
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	7afa      	ldrb	r2, [r7, #11]
 80078bc:	4611      	mov	r1, r2
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	4798      	blx	r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	e000      	b.n	80078d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b086      	sub	sp, #24
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	460b      	mov	r3, r1
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d16f      	bne.n	80079ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3314      	adds	r3, #20
 80078f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d15a      	bne.n	80079b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	429a      	cmp	r2, r3
 8007908:	d914      	bls.n	8007934 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	461a      	mov	r2, r3
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f001 f8e6 	bl	8008af2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007926:	2300      	movs	r3, #0
 8007928:	2200      	movs	r2, #0
 800792a:	2100      	movs	r1, #0
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f001 fec3 	bl	80096b8 <USBD_LL_PrepareReceive>
 8007932:	e03f      	b.n	80079b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	429a      	cmp	r2, r3
 800793e:	d11c      	bne.n	800797a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007948:	429a      	cmp	r2, r3
 800794a:	d316      	bcc.n	800797a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007956:	429a      	cmp	r2, r3
 8007958:	d20f      	bcs.n	800797a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f001 f8c7 	bl	8008af2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800796c:	2300      	movs	r3, #0
 800796e:	2200      	movs	r2, #0
 8007970:	2100      	movs	r1, #0
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f001 fea0 	bl	80096b8 <USBD_LL_PrepareReceive>
 8007978:	e01c      	b.n	80079b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b03      	cmp	r3, #3
 8007984:	d10f      	bne.n	80079a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079a6:	2180      	movs	r1, #128	@ 0x80
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f001 fd7f 	bl	80094ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f001 f8f1 	bl	8008b96 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d03a      	beq.n	8007a34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7ff fe42 	bl	8007648 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80079cc:	e032      	b.n	8007a34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079ce:	7afb      	ldrb	r3, [r7, #11]
 80079d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	4619      	mov	r1, r3
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f000 f985 	bl	8007ce8 <USBD_CoreFindEP>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	2bff      	cmp	r3, #255	@ 0xff
 80079e6:	d025      	beq.n	8007a34 <USBD_LL_DataInStage+0x15a>
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d122      	bne.n	8007a34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d11c      	bne.n	8007a34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80079fa:	7dfa      	ldrb	r2, [r7, #23]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	32ae      	adds	r2, #174	@ 0xae
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d014      	beq.n	8007a34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a0a:	7dfa      	ldrb	r2, [r7, #23]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a12:	7dfa      	ldrb	r2, [r7, #23]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	32ae      	adds	r2, #174	@ 0xae
 8007a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	7afa      	ldrb	r2, [r7, #11]
 8007a20:	4611      	mov	r1, r2
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	4798      	blx	r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a2a:	7dbb      	ldrb	r3, [r7, #22]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a30:	7dbb      	ldrb	r3, [r7, #22]
 8007a32:	e000      	b.n	8007a36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d014      	beq.n	8007aa4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6852      	ldr	r2, [r2, #4]
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	4611      	mov	r1, r2
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aa4:	2340      	movs	r3, #64	@ 0x40
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 fc8a 	bl	80093c4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2240      	movs	r2, #64	@ 0x40
 8007abc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ac0:	2340      	movs	r3, #64	@ 0x40
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2180      	movs	r1, #128	@ 0x80
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 fc7c 	bl	80093c4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2240      	movs	r2, #64	@ 0x40
 8007ad6:	621a      	str	r2, [r3, #32]

  return ret;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	78fa      	ldrb	r2, [r7, #3]
 8007af2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d006      	beq.n	8007b24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2204      	movs	r2, #4
 8007b28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d106      	bne.n	8007b5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d110      	bne.n	8007ba0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d005      	beq.n	8007ba0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	32ae      	adds	r2, #174	@ 0xae
 8007bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e01c      	b.n	8007c06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d115      	bne.n	8007c04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	32ae      	adds	r2, #174	@ 0xae
 8007be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	32ae      	adds	r2, #174	@ 0xae
 8007bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	460b      	mov	r3, r1
 8007c18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	32ae      	adds	r2, #174	@ 0xae
 8007c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e01c      	b.n	8007c6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d115      	bne.n	8007c68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	32ae      	adds	r2, #174	@ 0xae
 8007c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	32ae      	adds	r2, #174	@ 0xae
 8007c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c60:	78fa      	ldrb	r2, [r7, #3]
 8007c62:	4611      	mov	r1, r2
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00e      	beq.n	8007cc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6852      	ldr	r2, [r2, #4]
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	885b      	ldrh	r3, [r3, #2]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	7812      	ldrb	r2, [r2, #0]
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d91f      	bls.n	8007d68 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d2e:	e013      	b.n	8007d58 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d30:	f107 030a 	add.w	r3, r7, #10
 8007d34:	4619      	mov	r1, r3
 8007d36:	6978      	ldr	r0, [r7, #20]
 8007d38:	f000 f81b 	bl	8007d72 <USBD_GetNextDesc>
 8007d3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	785b      	ldrb	r3, [r3, #1]
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	d108      	bne.n	8007d58 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	789b      	ldrb	r3, [r3, #2]
 8007d4e:	78fa      	ldrb	r2, [r7, #3]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d008      	beq.n	8007d66 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	885b      	ldrh	r3, [r3, #2]
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	897b      	ldrh	r3, [r7, #10]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d8e5      	bhi.n	8007d30 <USBD_GetEpDesc+0x2e>
 8007d64:	e000      	b.n	8007d68 <USBD_GetEpDesc+0x66>
          break;
 8007d66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d68:	693b      	ldr	r3, [r7, #16]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	7812      	ldrb	r2, [r2, #0]
 8007d88:	4413      	add	r3, r2
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4413      	add	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b087      	sub	sp, #28
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007dc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	b21a      	sxth	r2, r3
 8007dd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	b21b      	sxth	r3, r3
 8007dd8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007dda:	89fb      	ldrh	r3, [r7, #14]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dfe:	2b40      	cmp	r3, #64	@ 0x40
 8007e00:	d005      	beq.n	8007e0e <USBD_StdDevReq+0x26>
 8007e02:	2b40      	cmp	r3, #64	@ 0x40
 8007e04:	d857      	bhi.n	8007eb6 <USBD_StdDevReq+0xce>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00f      	beq.n	8007e2a <USBD_StdDevReq+0x42>
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d153      	bne.n	8007eb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	32ae      	adds	r2, #174	@ 0xae
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]
      break;
 8007e28:	e04a      	b.n	8007ec0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b09      	cmp	r3, #9
 8007e30:	d83b      	bhi.n	8007eaa <USBD_StdDevReq+0xc2>
 8007e32:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <USBD_StdDevReq+0x50>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007ea1 	.word	0x08007ea1
 8007e40:	08007eab 	.word	0x08007eab
 8007e44:	08007e97 	.word	0x08007e97
 8007e48:	08007eab 	.word	0x08007eab
 8007e4c:	08007e6b 	.word	0x08007e6b
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007eab 	.word	0x08007eab
 8007e58:	08007e83 	.word	0x08007e83
 8007e5c:	08007e75 	.word	0x08007e75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa3c 	bl	80082e0 <USBD_GetDescriptor>
          break;
 8007e68:	e024      	b.n	8007eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fbcb 	bl	8008608 <USBD_SetAddress>
          break;
 8007e72:	e01f      	b.n	8007eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fc0a 	bl	8008690 <USBD_SetConfig>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
          break;
 8007e80:	e018      	b.n	8007eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fcad 	bl	80087e4 <USBD_GetConfig>
          break;
 8007e8a:	e013      	b.n	8007eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fcde 	bl	8008850 <USBD_GetStatus>
          break;
 8007e94:	e00e      	b.n	8007eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fd0d 	bl	80088b8 <USBD_SetFeature>
          break;
 8007e9e:	e009      	b.n	8007eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fd31 	bl	800890a <USBD_ClrFeature>
          break;
 8007ea8:	e004      	b.n	8007eb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fd88 	bl	80089c2 <USBD_CtlError>
          break;
 8007eb2:	bf00      	nop
      }
      break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fd82 	bl	80089c2 <USBD_CtlError>
      break;
 8007ebe:	bf00      	nop
  }

  return ret;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop

08007ecc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ee2:	2b40      	cmp	r3, #64	@ 0x40
 8007ee4:	d005      	beq.n	8007ef2 <USBD_StdItfReq+0x26>
 8007ee6:	2b40      	cmp	r3, #64	@ 0x40
 8007ee8:	d852      	bhi.n	8007f90 <USBD_StdItfReq+0xc4>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <USBD_StdItfReq+0x26>
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d14e      	bne.n	8007f90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d840      	bhi.n	8007f82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	889b      	ldrh	r3, [r3, #4]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d836      	bhi.n	8007f78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	889b      	ldrh	r3, [r3, #4]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff fedb 	bl	8007cce <USBD_CoreFindIF>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	2bff      	cmp	r3, #255	@ 0xff
 8007f20:	d01d      	beq.n	8007f5e <USBD_StdItfReq+0x92>
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d11a      	bne.n	8007f5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f28:	7bba      	ldrb	r2, [r7, #14]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	32ae      	adds	r2, #174	@ 0xae
 8007f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00f      	beq.n	8007f58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f38:	7bba      	ldrb	r2, [r7, #14]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f40:	7bba      	ldrb	r2, [r7, #14]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	32ae      	adds	r2, #174	@ 0xae
 8007f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f56:	e004      	b.n	8007f62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f5c:	e001      	b.n	8007f62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	88db      	ldrh	r3, [r3, #6]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d110      	bne.n	8007f8c <USBD_StdItfReq+0xc0>
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10d      	bne.n	8007f8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fdfd 	bl	8008b70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f76:	e009      	b.n	8007f8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fd21 	bl	80089c2 <USBD_CtlError>
          break;
 8007f80:	e004      	b.n	8007f8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fd1c 	bl	80089c2 <USBD_CtlError>
          break;
 8007f8a:	e000      	b.n	8007f8e <USBD_StdItfReq+0xc2>
          break;
 8007f8c:	bf00      	nop
      }
      break;
 8007f8e:	e004      	b.n	8007f9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fd15 	bl	80089c2 <USBD_CtlError>
      break;
 8007f98:	bf00      	nop
  }

  return ret;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	889b      	ldrh	r3, [r3, #4]
 8007fb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fc0:	2b40      	cmp	r3, #64	@ 0x40
 8007fc2:	d007      	beq.n	8007fd4 <USBD_StdEPReq+0x30>
 8007fc4:	2b40      	cmp	r3, #64	@ 0x40
 8007fc6:	f200 817f 	bhi.w	80082c8 <USBD_StdEPReq+0x324>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d02a      	beq.n	8008024 <USBD_StdEPReq+0x80>
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	f040 817a 	bne.w	80082c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff fe85 	bl	8007ce8 <USBD_CoreFindEP>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fe2:	7b7b      	ldrb	r3, [r7, #13]
 8007fe4:	2bff      	cmp	r3, #255	@ 0xff
 8007fe6:	f000 8174 	beq.w	80082d2 <USBD_StdEPReq+0x32e>
 8007fea:	7b7b      	ldrb	r3, [r7, #13]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f040 8170 	bne.w	80082d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007ff2:	7b7a      	ldrb	r2, [r7, #13]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ffa:	7b7a      	ldrb	r2, [r7, #13]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	32ae      	adds	r2, #174	@ 0xae
 8008000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 8163 	beq.w	80082d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800800c:	7b7a      	ldrb	r2, [r7, #13]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	32ae      	adds	r2, #174	@ 0xae
 8008012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
 800801e:	4603      	mov	r3, r0
 8008020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008022:	e156      	b.n	80082d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	785b      	ldrb	r3, [r3, #1]
 8008028:	2b03      	cmp	r3, #3
 800802a:	d008      	beq.n	800803e <USBD_StdEPReq+0x9a>
 800802c:	2b03      	cmp	r3, #3
 800802e:	f300 8145 	bgt.w	80082bc <USBD_StdEPReq+0x318>
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 809b 	beq.w	800816e <USBD_StdEPReq+0x1ca>
 8008038:	2b01      	cmp	r3, #1
 800803a:	d03c      	beq.n	80080b6 <USBD_StdEPReq+0x112>
 800803c:	e13e      	b.n	80082bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d002      	beq.n	8008050 <USBD_StdEPReq+0xac>
 800804a:	2b03      	cmp	r3, #3
 800804c:	d016      	beq.n	800807c <USBD_StdEPReq+0xd8>
 800804e:	e02c      	b.n	80080aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00d      	beq.n	8008072 <USBD_StdEPReq+0xce>
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b80      	cmp	r3, #128	@ 0x80
 800805a:	d00a      	beq.n	8008072 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 fa23 	bl	80094ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008066:	2180      	movs	r1, #128	@ 0x80
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 fa1f 	bl	80094ac <USBD_LL_StallEP>
 800806e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008070:	e020      	b.n	80080b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fca4 	bl	80089c2 <USBD_CtlError>
              break;
 800807a:	e01b      	b.n	80080b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	885b      	ldrh	r3, [r3, #2]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10e      	bne.n	80080a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00b      	beq.n	80080a2 <USBD_StdEPReq+0xfe>
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	2b80      	cmp	r3, #128	@ 0x80
 800808e:	d008      	beq.n	80080a2 <USBD_StdEPReq+0xfe>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	88db      	ldrh	r3, [r3, #6]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 fa05 	bl	80094ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fd64 	bl	8008b70 <USBD_CtlSendStatus>

              break;
 80080a8:	e004      	b.n	80080b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fc88 	bl	80089c2 <USBD_CtlError>
              break;
 80080b2:	bf00      	nop
          }
          break;
 80080b4:	e107      	b.n	80082c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d002      	beq.n	80080c8 <USBD_StdEPReq+0x124>
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d016      	beq.n	80080f4 <USBD_StdEPReq+0x150>
 80080c6:	e04b      	b.n	8008160 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00d      	beq.n	80080ea <USBD_StdEPReq+0x146>
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b80      	cmp	r3, #128	@ 0x80
 80080d2:	d00a      	beq.n	80080ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 f9e7 	bl	80094ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080de:	2180      	movs	r1, #128	@ 0x80
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 f9e3 	bl	80094ac <USBD_LL_StallEP>
 80080e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080e8:	e040      	b.n	800816c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fc68 	bl	80089c2 <USBD_CtlError>
              break;
 80080f2:	e03b      	b.n	800816c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	885b      	ldrh	r3, [r3, #2]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d136      	bne.n	800816a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008102:	2b00      	cmp	r3, #0
 8008104:	d004      	beq.n	8008110 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fa04 	bl	8009518 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fd2d 	bl	8008b70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff fde4 	bl	8007ce8 <USBD_CoreFindEP>
 8008120:	4603      	mov	r3, r0
 8008122:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008124:	7b7b      	ldrb	r3, [r7, #13]
 8008126:	2bff      	cmp	r3, #255	@ 0xff
 8008128:	d01f      	beq.n	800816a <USBD_StdEPReq+0x1c6>
 800812a:	7b7b      	ldrb	r3, [r7, #13]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d11c      	bne.n	800816a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008130:	7b7a      	ldrb	r2, [r7, #13]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008138:	7b7a      	ldrb	r2, [r7, #13]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	32ae      	adds	r2, #174	@ 0xae
 800813e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d010      	beq.n	800816a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008148:	7b7a      	ldrb	r2, [r7, #13]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	32ae      	adds	r2, #174	@ 0xae
 800814e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800815e:	e004      	b.n	800816a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fc2d 	bl	80089c2 <USBD_CtlError>
              break;
 8008168:	e000      	b.n	800816c <USBD_StdEPReq+0x1c8>
              break;
 800816a:	bf00      	nop
          }
          break;
 800816c:	e0ab      	b.n	80082c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d002      	beq.n	8008180 <USBD_StdEPReq+0x1dc>
 800817a:	2b03      	cmp	r3, #3
 800817c:	d032      	beq.n	80081e4 <USBD_StdEPReq+0x240>
 800817e:	e097      	b.n	80082b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d007      	beq.n	8008196 <USBD_StdEPReq+0x1f2>
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b80      	cmp	r3, #128	@ 0x80
 800818a:	d004      	beq.n	8008196 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fc17 	bl	80089c2 <USBD_CtlError>
                break;
 8008194:	e091      	b.n	80082ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800819a:	2b00      	cmp	r3, #0
 800819c:	da0b      	bge.n	80081b6 <USBD_StdEPReq+0x212>
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	3310      	adds	r3, #16
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	4413      	add	r3, r2
 80081b2:	3304      	adds	r3, #4
 80081b4:	e00b      	b.n	80081ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	4413      	add	r3, r2
 80081cc:	3304      	adds	r3, #4
 80081ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2202      	movs	r2, #2
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fc6d 	bl	8008abc <USBD_CtlSendData>
              break;
 80081e2:	e06a      	b.n	80082ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	da11      	bge.n	8008210 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	f003 020f 	and.w	r2, r3, #15
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	3324      	adds	r3, #36	@ 0x24
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d117      	bne.n	8008236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fbda 	bl	80089c2 <USBD_CtlError>
                  break;
 800820e:	e054      	b.n	80082ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	f003 020f 	and.w	r2, r3, #15
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	440b      	add	r3, r1
 8008222:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d104      	bne.n	8008236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fbc7 	bl	80089c2 <USBD_CtlError>
                  break;
 8008234:	e041      	b.n	80082ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800823a:	2b00      	cmp	r3, #0
 800823c:	da0b      	bge.n	8008256 <USBD_StdEPReq+0x2b2>
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	3310      	adds	r3, #16
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	4413      	add	r3, r2
 8008252:	3304      	adds	r3, #4
 8008254:	e00b      	b.n	800826e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800825c:	4613      	mov	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	4413      	add	r3, r2
 800826c:	3304      	adds	r3, #4
 800826e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <USBD_StdEPReq+0x2d8>
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	2b80      	cmp	r3, #128	@ 0x80
 800827a:	d103      	bne.n	8008284 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e00e      	b.n	80082a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 f97b 	bl	8009584 <USBD_LL_IsStallEP>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d003      	beq.n	800829c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2201      	movs	r2, #1
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	e002      	b.n	80082a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2202      	movs	r2, #2
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fc07 	bl	8008abc <USBD_CtlSendData>
              break;
 80082ae:	e004      	b.n	80082ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fb85 	bl	80089c2 <USBD_CtlError>
              break;
 80082b8:	bf00      	nop
          }
          break;
 80082ba:	e004      	b.n	80082c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fb7f 	bl	80089c2 <USBD_CtlError>
          break;
 80082c4:	bf00      	nop
      }
      break;
 80082c6:	e005      	b.n	80082d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fb79 	bl	80089c2 <USBD_CtlError>
      break;
 80082d0:	e000      	b.n	80082d4 <USBD_StdEPReq+0x330>
      break;
 80082d2:	bf00      	nop
  }

  return ret;
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	885b      	ldrh	r3, [r3, #2]
 80082fa:	0a1b      	lsrs	r3, r3, #8
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	2b0e      	cmp	r3, #14
 8008302:	f200 8152 	bhi.w	80085aa <USBD_GetDescriptor+0x2ca>
 8008306:	a201      	add	r2, pc, #4	@ (adr r2, 800830c <USBD_GetDescriptor+0x2c>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	0800837d 	.word	0x0800837d
 8008310:	08008395 	.word	0x08008395
 8008314:	080083d5 	.word	0x080083d5
 8008318:	080085ab 	.word	0x080085ab
 800831c:	080085ab 	.word	0x080085ab
 8008320:	0800854b 	.word	0x0800854b
 8008324:	08008577 	.word	0x08008577
 8008328:	080085ab 	.word	0x080085ab
 800832c:	080085ab 	.word	0x080085ab
 8008330:	080085ab 	.word	0x080085ab
 8008334:	080085ab 	.word	0x080085ab
 8008338:	080085ab 	.word	0x080085ab
 800833c:	080085ab 	.word	0x080085ab
 8008340:	080085ab 	.word	0x080085ab
 8008344:	08008349 	.word	0x08008349
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7c12      	ldrb	r2, [r2, #16]
 8008360:	f107 0108 	add.w	r1, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800836a:	e126      	b.n	80085ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fb27 	bl	80089c2 <USBD_CtlError>
        err++;
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	3301      	adds	r3, #1
 8008378:	72fb      	strb	r3, [r7, #11]
      break;
 800837a:	e11e      	b.n	80085ba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	7c12      	ldrb	r2, [r2, #16]
 8008388:	f107 0108 	add.w	r1, r7, #8
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
 8008390:	60f8      	str	r0, [r7, #12]
      break;
 8008392:	e112      	b.n	80085ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	7c1b      	ldrb	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10d      	bne.n	80083b8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a4:	f107 0208 	add.w	r2, r7, #8
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
 80083ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	2202      	movs	r2, #2
 80083b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083b6:	e100      	b.n	80085ba <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c0:	f107 0208 	add.w	r2, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3301      	adds	r3, #1
 80083ce:	2202      	movs	r2, #2
 80083d0:	701a      	strb	r2, [r3, #0]
      break;
 80083d2:	e0f2      	b.n	80085ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	885b      	ldrh	r3, [r3, #2]
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b05      	cmp	r3, #5
 80083dc:	f200 80ac 	bhi.w	8008538 <USBD_GetDescriptor+0x258>
 80083e0:	a201      	add	r2, pc, #4	@ (adr r2, 80083e8 <USBD_GetDescriptor+0x108>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	08008401 	.word	0x08008401
 80083ec:	08008435 	.word	0x08008435
 80083f0:	08008469 	.word	0x08008469
 80083f4:	0800849d 	.word	0x0800849d
 80083f8:	080084d1 	.word	0x080084d1
 80083fc:	08008505 	.word	0x08008505
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7c12      	ldrb	r2, [r2, #16]
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008422:	e091      	b.n	8008548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 facb 	bl	80089c2 <USBD_CtlError>
            err++;
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	3301      	adds	r3, #1
 8008430:	72fb      	strb	r3, [r7, #11]
          break;
 8008432:	e089      	b.n	8008548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7c12      	ldrb	r2, [r2, #16]
 800844c:	f107 0108 	add.w	r1, r7, #8
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
 8008454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008456:	e077      	b.n	8008548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fab1 	bl	80089c2 <USBD_CtlError>
            err++;
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	3301      	adds	r3, #1
 8008464:	72fb      	strb	r3, [r7, #11]
          break;
 8008466:	e06f      	b.n	8008548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	7c12      	ldrb	r2, [r2, #16]
 8008480:	f107 0108 	add.w	r1, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848a:	e05d      	b.n	8008548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa97 	bl	80089c2 <USBD_CtlError>
            err++;
 8008494:	7afb      	ldrb	r3, [r7, #11]
 8008496:	3301      	adds	r3, #1
 8008498:	72fb      	strb	r3, [r7, #11]
          break;
 800849a:	e055      	b.n	8008548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	7c12      	ldrb	r2, [r2, #16]
 80084b4:	f107 0108 	add.w	r1, r7, #8
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084be:	e043      	b.n	8008548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fa7d 	bl	80089c2 <USBD_CtlError>
            err++;
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	3301      	adds	r3, #1
 80084cc:	72fb      	strb	r3, [r7, #11]
          break;
 80084ce:	e03b      	b.n	8008548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	7c12      	ldrb	r2, [r2, #16]
 80084e8:	f107 0108 	add.w	r1, r7, #8
 80084ec:	4610      	mov	r0, r2
 80084ee:	4798      	blx	r3
 80084f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084f2:	e029      	b.n	8008548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fa63 	bl	80089c2 <USBD_CtlError>
            err++;
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	3301      	adds	r3, #1
 8008500:	72fb      	strb	r3, [r7, #11]
          break;
 8008502:	e021      	b.n	8008548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	7c12      	ldrb	r2, [r2, #16]
 800851c:	f107 0108 	add.w	r1, r7, #8
 8008520:	4610      	mov	r0, r2
 8008522:	4798      	blx	r3
 8008524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008526:	e00f      	b.n	8008548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fa49 	bl	80089c2 <USBD_CtlError>
            err++;
 8008530:	7afb      	ldrb	r3, [r7, #11]
 8008532:	3301      	adds	r3, #1
 8008534:	72fb      	strb	r3, [r7, #11]
          break;
 8008536:	e007      	b.n	8008548 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa41 	bl	80089c2 <USBD_CtlError>
          err++;
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	3301      	adds	r3, #1
 8008544:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008546:	bf00      	nop
      }
      break;
 8008548:	e037      	b.n	80085ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	7c1b      	ldrb	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800855a:	f107 0208 	add.w	r2, r7, #8
 800855e:	4610      	mov	r0, r2
 8008560:	4798      	blx	r3
 8008562:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008564:	e029      	b.n	80085ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fa2a 	bl	80089c2 <USBD_CtlError>
        err++;
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	3301      	adds	r3, #1
 8008572:	72fb      	strb	r3, [r7, #11]
      break;
 8008574:	e021      	b.n	80085ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7c1b      	ldrb	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10d      	bne.n	800859a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008586:	f107 0208 	add.w	r2, r7, #8
 800858a:	4610      	mov	r0, r2
 800858c:	4798      	blx	r3
 800858e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3301      	adds	r3, #1
 8008594:	2207      	movs	r2, #7
 8008596:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008598:	e00f      	b.n	80085ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fa10 	bl	80089c2 <USBD_CtlError>
        err++;
 80085a2:	7afb      	ldrb	r3, [r7, #11]
 80085a4:	3301      	adds	r3, #1
 80085a6:	72fb      	strb	r3, [r7, #11]
      break;
 80085a8:	e007      	b.n	80085ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fa08 	bl	80089c2 <USBD_CtlError>
      err++;
 80085b2:	7afb      	ldrb	r3, [r7, #11]
 80085b4:	3301      	adds	r3, #1
 80085b6:	72fb      	strb	r3, [r7, #11]
      break;
 80085b8:	bf00      	nop
  }

  if (err != 0U)
 80085ba:	7afb      	ldrb	r3, [r7, #11]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d11e      	bne.n	80085fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	88db      	ldrh	r3, [r3, #6]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d016      	beq.n	80085f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80085c8:	893b      	ldrh	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00e      	beq.n	80085ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	88da      	ldrh	r2, [r3, #6]
 80085d2:	893b      	ldrh	r3, [r7, #8]
 80085d4:	4293      	cmp	r3, r2
 80085d6:	bf28      	it	cs
 80085d8:	4613      	movcs	r3, r2
 80085da:	b29b      	uxth	r3, r3
 80085dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085de:	893b      	ldrh	r3, [r7, #8]
 80085e0:	461a      	mov	r2, r3
 80085e2:	68f9      	ldr	r1, [r7, #12]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fa69 	bl	8008abc <USBD_CtlSendData>
 80085ea:	e009      	b.n	8008600 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f9e7 	bl	80089c2 <USBD_CtlError>
 80085f4:	e004      	b.n	8008600 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 faba 	bl	8008b70 <USBD_CtlSendStatus>
 80085fc:	e000      	b.n	8008600 <USBD_GetDescriptor+0x320>
    return;
 80085fe:	bf00      	nop
  }
}
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop

08008608 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	889b      	ldrh	r3, [r3, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d131      	bne.n	800867e <USBD_SetAddress+0x76>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	88db      	ldrh	r3, [r3, #6]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d12d      	bne.n	800867e <USBD_SetAddress+0x76>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	885b      	ldrh	r3, [r3, #2]
 8008626:	2b7f      	cmp	r3, #127	@ 0x7f
 8008628:	d829      	bhi.n	800867e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008634:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b03      	cmp	r3, #3
 8008640:	d104      	bne.n	800864c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f9bc 	bl	80089c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800864a:	e01d      	b.n	8008688 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7bfa      	ldrb	r2, [r7, #15]
 8008650:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008654:	7bfb      	ldrb	r3, [r7, #15]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 ffbf 	bl	80095dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fa86 	bl	8008b70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d004      	beq.n	8008674 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2202      	movs	r2, #2
 800866e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008672:	e009      	b.n	8008688 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867c:	e004      	b.n	8008688 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f99e 	bl	80089c2 <USBD_CtlError>
  }
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	885b      	ldrh	r3, [r3, #2]
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	4b4e      	ldr	r3, [pc, #312]	@ (80087e0 <USBD_SetConfig+0x150>)
 80086a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086a8:	4b4d      	ldr	r3, [pc, #308]	@ (80087e0 <USBD_SetConfig+0x150>)
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d905      	bls.n	80086bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f985 	bl	80089c2 <USBD_CtlError>
    return USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e08c      	b.n	80087d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d002      	beq.n	80086ce <USBD_SetConfig+0x3e>
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d029      	beq.n	8008720 <USBD_SetConfig+0x90>
 80086cc:	e075      	b.n	80087ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086ce:	4b44      	ldr	r3, [pc, #272]	@ (80087e0 <USBD_SetConfig+0x150>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d020      	beq.n	8008718 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80086d6:	4b42      	ldr	r3, [pc, #264]	@ (80087e0 <USBD_SetConfig+0x150>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086e0:	4b3f      	ldr	r3, [pc, #252]	@ (80087e0 <USBD_SetConfig+0x150>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fe ffb9 	bl	800765e <USBD_SetClassConfig>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d008      	beq.n	8008708 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f962 	bl	80089c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2202      	movs	r2, #2
 8008702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008706:	e065      	b.n	80087d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fa31 	bl	8008b70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2203      	movs	r2, #3
 8008712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008716:	e05d      	b.n	80087d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fa29 	bl	8008b70 <USBD_CtlSendStatus>
      break;
 800871e:	e059      	b.n	80087d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008720:	4b2f      	ldr	r3, [pc, #188]	@ (80087e0 <USBD_SetConfig+0x150>)
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d112      	bne.n	800874e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008730:	4b2b      	ldr	r3, [pc, #172]	@ (80087e0 <USBD_SetConfig+0x150>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800873a:	4b29      	ldr	r3, [pc, #164]	@ (80087e0 <USBD_SetConfig+0x150>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7fe ffa8 	bl	8007696 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa12 	bl	8008b70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800874c:	e042      	b.n	80087d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800874e:	4b24      	ldr	r3, [pc, #144]	@ (80087e0 <USBD_SetConfig+0x150>)
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	429a      	cmp	r2, r3
 800875a:	d02a      	beq.n	80087b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7fe ff96 	bl	8007696 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800876a:	4b1d      	ldr	r3, [pc, #116]	@ (80087e0 <USBD_SetConfig+0x150>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008774:	4b1a      	ldr	r3, [pc, #104]	@ (80087e0 <USBD_SetConfig+0x150>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7fe ff6f 	bl	800765e <USBD_SetClassConfig>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00f      	beq.n	80087aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f918 	bl	80089c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7fe ff7b 	bl	8007696 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80087a8:	e014      	b.n	80087d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f9e0 	bl	8008b70 <USBD_CtlSendStatus>
      break;
 80087b0:	e010      	b.n	80087d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f9dc 	bl	8008b70 <USBD_CtlSendStatus>
      break;
 80087b8:	e00c      	b.n	80087d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f900 	bl	80089c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087c2:	4b07      	ldr	r3, [pc, #28]	@ (80087e0 <USBD_SetConfig+0x150>)
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7fe ff64 	bl	8007696 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087ce:	2303      	movs	r3, #3
 80087d0:	73fb      	strb	r3, [r7, #15]
      break;
 80087d2:	bf00      	nop
  }

  return ret;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000428 	.word	0x20000428

080087e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	88db      	ldrh	r3, [r3, #6]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d004      	beq.n	8008800 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f8e2 	bl	80089c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087fe:	e023      	b.n	8008848 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	dc02      	bgt.n	8008812 <USBD_GetConfig+0x2e>
 800880c:	2b00      	cmp	r3, #0
 800880e:	dc03      	bgt.n	8008818 <USBD_GetConfig+0x34>
 8008810:	e015      	b.n	800883e <USBD_GetConfig+0x5a>
 8008812:	2b03      	cmp	r3, #3
 8008814:	d00b      	beq.n	800882e <USBD_GetConfig+0x4a>
 8008816:	e012      	b.n	800883e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3308      	adds	r3, #8
 8008822:	2201      	movs	r2, #1
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f948 	bl	8008abc <USBD_CtlSendData>
        break;
 800882c:	e00c      	b.n	8008848 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	3304      	adds	r3, #4
 8008832:	2201      	movs	r2, #1
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f940 	bl	8008abc <USBD_CtlSendData>
        break;
 800883c:	e004      	b.n	8008848 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f8be 	bl	80089c2 <USBD_CtlError>
        break;
 8008846:	bf00      	nop
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008860:	b2db      	uxtb	r3, r3
 8008862:	3b01      	subs	r3, #1
 8008864:	2b02      	cmp	r3, #2
 8008866:	d81e      	bhi.n	80088a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	88db      	ldrh	r3, [r3, #6]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d004      	beq.n	800887a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f8a5 	bl	80089c2 <USBD_CtlError>
        break;
 8008878:	e01a      	b.n	80088b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f043 0202 	orr.w	r2, r3, #2
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	330c      	adds	r3, #12
 800889a:	2202      	movs	r2, #2
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f90c 	bl	8008abc <USBD_CtlSendData>
      break;
 80088a4:	e004      	b.n	80088b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f88a 	bl	80089c2 <USBD_CtlError>
      break;
 80088ae:	bf00      	nop
  }
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d107      	bne.n	80088da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f94c 	bl	8008b70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80088d8:	e013      	b.n	8008902 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	885b      	ldrh	r3, [r3, #2]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d10b      	bne.n	80088fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	889b      	ldrh	r3, [r3, #4]
 80088e6:	0a1b      	lsrs	r3, r3, #8
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f93c 	bl	8008b70 <USBD_CtlSendStatus>
}
 80088f8:	e003      	b.n	8008902 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f860 	bl	80089c2 <USBD_CtlError>
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800891a:	b2db      	uxtb	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	2b02      	cmp	r3, #2
 8008920:	d80b      	bhi.n	800893a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	885b      	ldrh	r3, [r3, #2]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d10c      	bne.n	8008944 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f91c 	bl	8008b70 <USBD_CtlSendStatus>
      }
      break;
 8008938:	e004      	b.n	8008944 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f840 	bl	80089c2 <USBD_CtlError>
      break;
 8008942:	e000      	b.n	8008946 <USBD_ClrFeature+0x3c>
      break;
 8008944:	bf00      	nop
  }
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3301      	adds	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	781a      	ldrb	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3301      	adds	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f7ff fa16 	bl	8007daa <SWAPBYTE>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3301      	adds	r3, #1
 800898a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f7ff fa09 	bl	8007daa <SWAPBYTE>
 8008998:	4603      	mov	r3, r0
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3301      	adds	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7ff f9fc 	bl	8007daa <SWAPBYTE>
 80089b2:	4603      	mov	r3, r0
 80089b4:	461a      	mov	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	80da      	strh	r2, [r3, #6]
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089cc:	2180      	movs	r1, #128	@ 0x80
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fd6c 	bl	80094ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089d4:	2100      	movs	r1, #0
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fd68 	bl	80094ac <USBD_LL_StallEP>
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d042      	beq.n	8008a80 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80089fe:	6938      	ldr	r0, [r7, #16]
 8008a00:	f000 f842 	bl	8008a88 <USBD_GetLen>
 8008a04:	4603      	mov	r3, r0
 8008a06:	3301      	adds	r3, #1
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a0e:	d808      	bhi.n	8008a22 <USBD_GetString+0x3e>
 8008a10:	6938      	ldr	r0, [r7, #16]
 8008a12:	f000 f839 	bl	8008a88 <USBD_GetLen>
 8008a16:	4603      	mov	r3, r0
 8008a18:	3301      	adds	r3, #1
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	e001      	b.n	8008a26 <USBD_GetString+0x42>
 8008a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	4413      	add	r3, r2
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7812      	ldrb	r2, [r2, #0]
 8008a34:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	2203      	movs	r2, #3
 8008a44:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a4c:	e013      	b.n	8008a76 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	4413      	add	r3, r2
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	7812      	ldrb	r2, [r2, #0]
 8008a58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	613b      	str	r3, [r7, #16]
    idx++;
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	3301      	adds	r3, #1
 8008a64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	3301      	adds	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e7      	bne.n	8008a4e <USBD_GetString+0x6a>
 8008a7e:	e000      	b.n	8008a82 <USBD_GetString+0x9e>
    return;
 8008a80:	bf00      	nop
  }
}
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a98:	e005      	b.n	8008aa6 <USBD_GetLen+0x1e>
  {
    len++;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f5      	bne.n	8008a9a <USBD_GetLen+0x12>
  }

  return len;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 fdb0 	bl	8009648 <USBD_LL_Transmit>

  return USBD_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	2100      	movs	r1, #0
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 fd9f 	bl	8009648 <USBD_LL_Transmit>

  return USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2203      	movs	r2, #3
 8008b24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fdba 	bl	80096b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	2100      	movs	r1, #0
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fda9 	bl	80096b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b80:	2300      	movs	r3, #0
 8008b82:	2200      	movs	r2, #0
 8008b84:	2100      	movs	r1, #0
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fd5e 	bl	8009648 <USBD_LL_Transmit>

  return USBD_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2205      	movs	r2, #5
 8008ba2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2100      	movs	r1, #0
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fd83 	bl	80096b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	4912      	ldr	r1, [pc, #72]	@ (8008c0c <MX_USB_DEVICE_Init+0x50>)
 8008bc4:	4812      	ldr	r0, [pc, #72]	@ (8008c10 <MX_USB_DEVICE_Init+0x54>)
 8008bc6:	f7fe fccd 	bl	8007564 <USBD_Init>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bd0:	f7f7 ff66 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bd4:	490f      	ldr	r1, [pc, #60]	@ (8008c14 <MX_USB_DEVICE_Init+0x58>)
 8008bd6:	480e      	ldr	r0, [pc, #56]	@ (8008c10 <MX_USB_DEVICE_Init+0x54>)
 8008bd8:	f7fe fcf4 	bl	80075c4 <USBD_RegisterClass>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008be2:	f7f7 ff5d 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008be6:	490c      	ldr	r1, [pc, #48]	@ (8008c18 <MX_USB_DEVICE_Init+0x5c>)
 8008be8:	4809      	ldr	r0, [pc, #36]	@ (8008c10 <MX_USB_DEVICE_Init+0x54>)
 8008bea:	f7fe fc2b 	bl	8007444 <USBD_CDC_RegisterInterface>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bf4:	f7f7 ff54 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bf8:	4805      	ldr	r0, [pc, #20]	@ (8008c10 <MX_USB_DEVICE_Init+0x54>)
 8008bfa:	f7fe fd19 	bl	8007630 <USBD_Start>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c04:	f7f7 ff4c 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c08:	bf00      	nop
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	200000d8 	.word	0x200000d8
 8008c10:	2000042c 	.word	0x2000042c
 8008c14:	20000044 	.word	0x20000044
 8008c18:	200000c4 	.word	0x200000c4

08008c1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c20:	2200      	movs	r2, #0
 8008c22:	4905      	ldr	r1, [pc, #20]	@ (8008c38 <CDC_Init_FS+0x1c>)
 8008c24:	4805      	ldr	r0, [pc, #20]	@ (8008c3c <CDC_Init_FS+0x20>)
 8008c26:	f7fe fc27 	bl	8007478 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c2a:	4905      	ldr	r1, [pc, #20]	@ (8008c40 <CDC_Init_FS+0x24>)
 8008c2c:	4803      	ldr	r0, [pc, #12]	@ (8008c3c <CDC_Init_FS+0x20>)
 8008c2e:	f7fe fc45 	bl	80074bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000f08 	.word	0x20000f08
 8008c3c:	2000042c 	.word	0x2000042c
 8008c40:	20000708 	.word	0x20000708

08008c44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	71fb      	strb	r3, [r7, #7]
 8008c60:	4613      	mov	r3, r2
 8008c62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	2b23      	cmp	r3, #35	@ 0x23
 8008c68:	d84a      	bhi.n	8008d00 <CDC_Control_FS+0xac>
 8008c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <CDC_Control_FS+0x1c>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008d01 	.word	0x08008d01
 8008c74:	08008d01 	.word	0x08008d01
 8008c78:	08008d01 	.word	0x08008d01
 8008c7c:	08008d01 	.word	0x08008d01
 8008c80:	08008d01 	.word	0x08008d01
 8008c84:	08008d01 	.word	0x08008d01
 8008c88:	08008d01 	.word	0x08008d01
 8008c8c:	08008d01 	.word	0x08008d01
 8008c90:	08008d01 	.word	0x08008d01
 8008c94:	08008d01 	.word	0x08008d01
 8008c98:	08008d01 	.word	0x08008d01
 8008c9c:	08008d01 	.word	0x08008d01
 8008ca0:	08008d01 	.word	0x08008d01
 8008ca4:	08008d01 	.word	0x08008d01
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008d01 	.word	0x08008d01
 8008cb4:	08008d01 	.word	0x08008d01
 8008cb8:	08008d01 	.word	0x08008d01
 8008cbc:	08008d01 	.word	0x08008d01
 8008cc0:	08008d01 	.word	0x08008d01
 8008cc4:	08008d01 	.word	0x08008d01
 8008cc8:	08008d01 	.word	0x08008d01
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d01 	.word	0x08008d01
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	08008d01 	.word	0x08008d01
 8008cdc:	08008d01 	.word	0x08008d01
 8008ce0:	08008d01 	.word	0x08008d01
 8008ce4:	08008d01 	.word	0x08008d01
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d01 	.word	0x08008d01
 8008cf0:	08008d01 	.word	0x08008d01
 8008cf4:	08008d01 	.word	0x08008d01
 8008cf8:	08008d01 	.word	0x08008d01
 8008cfc:	08008d01 	.word	0x08008d01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d00:	bf00      	nop
  }

  return (USBD_OK);
 8008d02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	4805      	ldr	r0, [pc, #20]	@ (8008d34 <CDC_Receive_FS+0x24>)
 8008d1e:	f7fe fbcd 	bl	80074bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d22:	4804      	ldr	r0, [pc, #16]	@ (8008d34 <CDC_Receive_FS+0x24>)
 8008d24:	f7fe fbe8 	bl	80074f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	2000042c 	.word	0x2000042c

08008d38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2212      	movs	r2, #18
 8008d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	@ (8008d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	200000f8 	.word	0x200000f8

08008d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2204      	movs	r2, #4
 8008d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d92:	4b03      	ldr	r3, [pc, #12]	@ (8008da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20000118 	.word	0x20000118

08008da4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	4907      	ldr	r1, [pc, #28]	@ (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dba:	4808      	ldr	r0, [pc, #32]	@ (8008ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8008dbc:	f7ff fe12 	bl	80089e4 <USBD_GetString>
 8008dc0:	e004      	b.n	8008dcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	4904      	ldr	r1, [pc, #16]	@ (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dc6:	4805      	ldr	r0, [pc, #20]	@ (8008ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8008dc8:	f7ff fe0c 	bl	80089e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	@ (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20001708 	.word	0x20001708
 8008ddc:	08009898 	.word	0x08009898

08008de0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	6039      	str	r1, [r7, #0]
 8008dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	4904      	ldr	r1, [pc, #16]	@ (8008e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008df0:	4804      	ldr	r0, [pc, #16]	@ (8008e04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008df2:	f7ff fdf7 	bl	80089e4 <USBD_GetString>
  return USBD_StrDesc;
 8008df6:	4b02      	ldr	r3, [pc, #8]	@ (8008e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20001708 	.word	0x20001708
 8008e04:	080098b0 	.word	0x080098b0

08008e08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6039      	str	r1, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	221a      	movs	r2, #26
 8008e18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e1a:	f000 f855 	bl	8008ec8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e1e:	4b02      	ldr	r3, [pc, #8]	@ (8008e28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	2000011c 	.word	0x2000011c

08008e2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	6039      	str	r1, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d105      	bne.n	8008e4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	4907      	ldr	r1, [pc, #28]	@ (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e42:	4808      	ldr	r0, [pc, #32]	@ (8008e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e44:	f7ff fdce 	bl	80089e4 <USBD_GetString>
 8008e48:	e004      	b.n	8008e54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4904      	ldr	r1, [pc, #16]	@ (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e4e:	4805      	ldr	r0, [pc, #20]	@ (8008e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e50:	f7ff fdc8 	bl	80089e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e54:	4b02      	ldr	r3, [pc, #8]	@ (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20001708 	.word	0x20001708
 8008e64:	080098c4 	.word	0x080098c4

08008e68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	6039      	str	r1, [r7, #0]
 8008e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d105      	bne.n	8008e86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	4907      	ldr	r1, [pc, #28]	@ (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e7e:	4808      	ldr	r0, [pc, #32]	@ (8008ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e80:	f7ff fdb0 	bl	80089e4 <USBD_GetString>
 8008e84:	e004      	b.n	8008e90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	4904      	ldr	r1, [pc, #16]	@ (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e8a:	4805      	ldr	r0, [pc, #20]	@ (8008ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e8c:	f7ff fdaa 	bl	80089e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e90:	4b02      	ldr	r3, [pc, #8]	@ (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20001708 	.word	0x20001708
 8008ea0:	080098d0 	.word	0x080098d0

08008ea4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	220c      	movs	r2, #12
 8008eb4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008eb6:	4b03      	ldr	r3, [pc, #12]	@ (8008ec4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	2000010c 	.word	0x2000010c

08008ec8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ece:	4b0f      	ldr	r3, [pc, #60]	@ (8008f0c <Get_SerialNum+0x44>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8008f10 <Get_SerialNum+0x48>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eda:	4b0e      	ldr	r3, [pc, #56]	@ (8008f14 <Get_SerialNum+0x4c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d009      	beq.n	8008f02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008eee:	2208      	movs	r2, #8
 8008ef0:	4909      	ldr	r1, [pc, #36]	@ (8008f18 <Get_SerialNum+0x50>)
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 f814 	bl	8008f20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ef8:	2204      	movs	r2, #4
 8008efa:	4908      	ldr	r1, [pc, #32]	@ (8008f1c <Get_SerialNum+0x54>)
 8008efc:	68b8      	ldr	r0, [r7, #8]
 8008efe:	f000 f80f 	bl	8008f20 <IntToUnicode>
  }
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	1fff7590 	.word	0x1fff7590
 8008f10:	1fff7594 	.word	0x1fff7594
 8008f14:	1fff7598 	.word	0x1fff7598
 8008f18:	2000011e 	.word	0x2000011e
 8008f1c:	2000012e 	.word	0x2000012e

08008f20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f32:	2300      	movs	r3, #0
 8008f34:	75fb      	strb	r3, [r7, #23]
 8008f36:	e027      	b.n	8008f88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	0f1b      	lsrs	r3, r3, #28
 8008f3c:	2b09      	cmp	r3, #9
 8008f3e:	d80b      	bhi.n	8008f58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	0f1b      	lsrs	r3, r3, #28
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	440b      	add	r3, r1
 8008f50:	3230      	adds	r2, #48	@ 0x30
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e00a      	b.n	8008f6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	0f1b      	lsrs	r3, r3, #28
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	4619      	mov	r1, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	440b      	add	r3, r1
 8008f68:	3237      	adds	r2, #55	@ 0x37
 8008f6a:	b2d2      	uxtb	r2, r2
 8008f6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	011b      	lsls	r3, r3, #4
 8008f72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	3301      	adds	r3, #1
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	3301      	adds	r3, #1
 8008f86:	75fb      	strb	r3, [r7, #23]
 8008f88:	7dfa      	ldrb	r2, [r7, #23]
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d3d3      	bcc.n	8008f38 <IntToUnicode+0x18>
  }
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
	...

08008fa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b0ac      	sub	sp, #176	@ 0xb0
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fa8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	609a      	str	r2, [r3, #8]
 8008fb4:	60da      	str	r2, [r3, #12]
 8008fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008fb8:	f107 0314 	add.w	r3, r7, #20
 8008fbc:	2288      	movs	r2, #136	@ 0x88
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fc31 	bl	8009828 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fce:	d173      	bne.n	80090b8 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008fd4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008fd6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008fda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008fea:	2307      	movs	r3, #7
 8008fec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8008fee:	2304      	movs	r3, #4
 8008ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008ff6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008ffa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008ffc:	f107 0314 	add.w	r3, r7, #20
 8009000:	4618      	mov	r0, r3
 8009002:	f7fa fd33 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800900c:	f7f7 fd48 	bl	8000aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009010:	4b2b      	ldr	r3, [pc, #172]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 8009012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009014:	4a2a      	ldr	r2, [pc, #168]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800901c:	4b28      	ldr	r3, [pc, #160]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 800901e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	613b      	str	r3, [r7, #16]
 8009026:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009028:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800902c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009030:	2302      	movs	r3, #2
 8009032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009036:	2300      	movs	r3, #0
 8009038:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800903c:	2303      	movs	r3, #3
 800903e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009042:	230a      	movs	r3, #10
 8009044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009048:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800904c:	4619      	mov	r1, r3
 800904e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009052:	f7f8 f9f5 	bl	8001440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009056:	4b1a      	ldr	r3, [pc, #104]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 8009058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800905a:	4a19      	ldr	r2, [pc, #100]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 800905c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009062:	4b17      	ldr	r3, [pc, #92]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 8009064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800906e:	4b14      	ldr	r3, [pc, #80]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 8009070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d114      	bne.n	80090a4 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800907a:	4b11      	ldr	r3, [pc, #68]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 800907c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800907e:	4a10      	ldr	r2, [pc, #64]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 8009080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009084:	6593      	str	r3, [r2, #88]	@ 0x58
 8009086:	4b0e      	ldr	r3, [pc, #56]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 8009088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800908a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800908e:	60bb      	str	r3, [r7, #8]
 8009090:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009092:	f7f9 fedd 	bl	8002e50 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009096:	4b0a      	ldr	r3, [pc, #40]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 8009098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800909a:	4a09      	ldr	r2, [pc, #36]	@ (80090c0 <HAL_PCD_MspInit+0x120>)
 800909c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80090a2:	e001      	b.n	80090a8 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80090a4:	f7f9 fed4 	bl	8002e50 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090a8:	2200      	movs	r2, #0
 80090aa:	2100      	movs	r1, #0
 80090ac:	2043      	movs	r0, #67	@ 0x43
 80090ae:	f7f8 f990 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090b2:	2043      	movs	r0, #67	@ 0x43
 80090b4:	f7f8 f9a9 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090b8:	bf00      	nop
 80090ba:	37b0      	adds	r7, #176	@ 0xb0
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	40021000 	.word	0x40021000

080090c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f7fe faf5 	bl	80076ca <USBD_LL_SetupStage>
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80090fa:	78fa      	ldrb	r2, [r7, #3]
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	4613      	mov	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	4619      	mov	r1, r3
 8009112:	f7fe fb2f 	bl	8007774 <USBD_LL_DataOutStage>
}
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	460b      	mov	r3, r1
 8009128:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	4613      	mov	r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	3320      	adds	r3, #32
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	4619      	mov	r1, r3
 8009146:	f7fe fbc8 	bl	80078da <USBD_LL_DataInStage>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fd02 	bl	8007b6a <USBD_LL_SOF>
}
 8009166:	bf00      	nop
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009176:	2301      	movs	r3, #1
 8009178:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	79db      	ldrb	r3, [r3, #7]
 800917e:	2b02      	cmp	r3, #2
 8009180:	d001      	beq.n	8009186 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009182:	f7f7 fc8d 	bl	8000aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800918c:	7bfa      	ldrb	r2, [r7, #15]
 800918e:	4611      	mov	r1, r2
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fca6 	bl	8007ae2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800919c:	4618      	mov	r0, r3
 800919e:	f7fe fc4e 	bl	8007a3e <USBD_LL_Reset>
}
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	6812      	ldr	r2, [r2, #0]
 80091c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fc95 	bl	8007b02 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7adb      	ldrb	r3, [r3, #11]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091e0:	4b04      	ldr	r3, [pc, #16]	@ (80091f4 <HAL_PCD_SuspendCallback+0x48>)
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	4a03      	ldr	r2, [pc, #12]	@ (80091f4 <HAL_PCD_SuspendCallback+0x48>)
 80091e6:	f043 0306 	orr.w	r3, r3, #6
 80091ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	e000ed00 	.word	0xe000ed00

080091f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6812      	ldr	r2, [r2, #0]
 800920e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009212:	f023 0301 	bic.w	r3, r3, #1
 8009216:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7adb      	ldrb	r3, [r3, #11]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009220:	4b08      	ldr	r3, [pc, #32]	@ (8009244 <HAL_PCD_ResumeCallback+0x4c>)
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	4a07      	ldr	r2, [pc, #28]	@ (8009244 <HAL_PCD_ResumeCallback+0x4c>)
 8009226:	f023 0306 	bic.w	r3, r3, #6
 800922a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800922c:	f000 faf6 	bl	800981c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fc7f 	bl	8007b3a <USBD_LL_Resume>
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	e000ed00 	.word	0xe000ed00

08009248 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800925a:	78fa      	ldrb	r2, [r7, #3]
 800925c:	4611      	mov	r1, r2
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe fcd5 	bl	8007c0e <USBD_LL_IsoOUTIncomplete>
}
 8009264:	bf00      	nop
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	4611      	mov	r1, r2
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe fc91 	bl	8007baa <USBD_LL_IsoINIncomplete>
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fce7 	bl	8007c72 <USBD_LL_DevConnected>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fce4 	bl	8007c88 <USBD_LL_DevDisconnected>
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d13c      	bne.n	8009352 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092d8:	4a20      	ldr	r2, [pc, #128]	@ (800935c <USBD_LL_Init+0x94>)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a1e      	ldr	r2, [pc, #120]	@ (800935c <USBD_LL_Init+0x94>)
 80092e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092e8:	4b1c      	ldr	r3, [pc, #112]	@ (800935c <USBD_LL_Init+0x94>)
 80092ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80092ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80092f0:	4b1a      	ldr	r3, [pc, #104]	@ (800935c <USBD_LL_Init+0x94>)
 80092f2:	2206      	movs	r2, #6
 80092f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80092f6:	4b19      	ldr	r3, [pc, #100]	@ (800935c <USBD_LL_Init+0x94>)
 80092f8:	2202      	movs	r2, #2
 80092fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092fc:	4b17      	ldr	r3, [pc, #92]	@ (800935c <USBD_LL_Init+0x94>)
 80092fe:	2202      	movs	r2, #2
 8009300:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009302:	4b16      	ldr	r3, [pc, #88]	@ (800935c <USBD_LL_Init+0x94>)
 8009304:	2200      	movs	r2, #0
 8009306:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009308:	4b14      	ldr	r3, [pc, #80]	@ (800935c <USBD_LL_Init+0x94>)
 800930a:	2200      	movs	r2, #0
 800930c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800930e:	4b13      	ldr	r3, [pc, #76]	@ (800935c <USBD_LL_Init+0x94>)
 8009310:	2200      	movs	r2, #0
 8009312:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009314:	4b11      	ldr	r3, [pc, #68]	@ (800935c <USBD_LL_Init+0x94>)
 8009316:	2200      	movs	r2, #0
 8009318:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800931a:	4b10      	ldr	r3, [pc, #64]	@ (800935c <USBD_LL_Init+0x94>)
 800931c:	2200      	movs	r2, #0
 800931e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009320:	4b0e      	ldr	r3, [pc, #56]	@ (800935c <USBD_LL_Init+0x94>)
 8009322:	2200      	movs	r2, #0
 8009324:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009326:	480d      	ldr	r0, [pc, #52]	@ (800935c <USBD_LL_Init+0x94>)
 8009328:	f7f8 fb98 	bl	8001a5c <HAL_PCD_Init>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009332:	f7f7 fbb5 	bl	8000aa0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009336:	2180      	movs	r1, #128	@ 0x80
 8009338:	4808      	ldr	r0, [pc, #32]	@ (800935c <USBD_LL_Init+0x94>)
 800933a:	f7f9 fcf0 	bl	8002d1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800933e:	2240      	movs	r2, #64	@ 0x40
 8009340:	2100      	movs	r1, #0
 8009342:	4806      	ldr	r0, [pc, #24]	@ (800935c <USBD_LL_Init+0x94>)
 8009344:	f7f9 fca4 	bl	8002c90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009348:	2280      	movs	r2, #128	@ 0x80
 800934a:	2101      	movs	r1, #1
 800934c:	4803      	ldr	r0, [pc, #12]	@ (800935c <USBD_LL_Init+0x94>)
 800934e:	f7f9 fc9f 	bl	8002c90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20001908 	.word	0x20001908

08009360 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009376:	4618      	mov	r0, r3
 8009378:	f7f8 fc7f 	bl	8001c7a <HAL_PCD_Start>
 800937c:	4603      	mov	r3, r0
 800937e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b03      	cmp	r3, #3
 8009384:	d816      	bhi.n	80093b4 <USBD_LL_Start+0x54>
 8009386:	a201      	add	r2, pc, #4	@ (adr r2, 800938c <USBD_LL_Start+0x2c>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	0800939d 	.word	0x0800939d
 8009390:	080093a3 	.word	0x080093a3
 8009394:	080093a9 	.word	0x080093a9
 8009398:	080093af 	.word	0x080093af
    case HAL_OK :
      usb_status = USBD_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
    break;
 80093a0:	e00b      	b.n	80093ba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093a2:	2303      	movs	r3, #3
 80093a4:	73fb      	strb	r3, [r7, #15]
    break;
 80093a6:	e008      	b.n	80093ba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093a8:	2301      	movs	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]
    break;
 80093ac:	e005      	b.n	80093ba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093ae:	2303      	movs	r3, #3
 80093b0:	73fb      	strb	r3, [r7, #15]
    break;
 80093b2:	e002      	b.n	80093ba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80093b4:	2303      	movs	r3, #3
 80093b6:	73fb      	strb	r3, [r7, #15]
    break;
 80093b8:	bf00      	nop
  }
  return usb_status;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	4608      	mov	r0, r1
 80093ce:	4611      	mov	r1, r2
 80093d0:	461a      	mov	r2, r3
 80093d2:	4603      	mov	r3, r0
 80093d4:	70fb      	strb	r3, [r7, #3]
 80093d6:	460b      	mov	r3, r1
 80093d8:	70bb      	strb	r3, [r7, #2]
 80093da:	4613      	mov	r3, r2
 80093dc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093ec:	78bb      	ldrb	r3, [r7, #2]
 80093ee:	883a      	ldrh	r2, [r7, #0]
 80093f0:	78f9      	ldrb	r1, [r7, #3]
 80093f2:	f7f9 f92b 	bl	800264c <HAL_PCD_EP_Open>
 80093f6:	4603      	mov	r3, r0
 80093f8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d817      	bhi.n	8009430 <USBD_LL_OpenEP+0x6c>
 8009400:	a201      	add	r2, pc, #4	@ (adr r2, 8009408 <USBD_LL_OpenEP+0x44>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	08009419 	.word	0x08009419
 800940c:	0800941f 	.word	0x0800941f
 8009410:	08009425 	.word	0x08009425
 8009414:	0800942b 	.word	0x0800942b
    case HAL_OK :
      usb_status = USBD_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
    break;
 800941c:	e00b      	b.n	8009436 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800941e:	2303      	movs	r3, #3
 8009420:	73fb      	strb	r3, [r7, #15]
    break;
 8009422:	e008      	b.n	8009436 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
    break;
 8009428:	e005      	b.n	8009436 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800942a:	2303      	movs	r3, #3
 800942c:	73fb      	strb	r3, [r7, #15]
    break;
 800942e:	e002      	b.n	8009436 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009430:	2303      	movs	r3, #3
 8009432:	73fb      	strb	r3, [r7, #15]
    break;
 8009434:	bf00      	nop
  }
  return usb_status;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7f9 f95e 	bl	8002720 <HAL_PCD_EP_Close>
 8009464:	4603      	mov	r3, r0
 8009466:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b03      	cmp	r3, #3
 800946c:	d816      	bhi.n	800949c <USBD_LL_CloseEP+0x5c>
 800946e:	a201      	add	r2, pc, #4	@ (adr r2, 8009474 <USBD_LL_CloseEP+0x34>)
 8009470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009474:	08009485 	.word	0x08009485
 8009478:	0800948b 	.word	0x0800948b
 800947c:	08009491 	.word	0x08009491
 8009480:	08009497 	.word	0x08009497
    case HAL_OK :
      usb_status = USBD_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]
    break;
 8009488:	e00b      	b.n	80094a2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800948a:	2303      	movs	r3, #3
 800948c:	73fb      	strb	r3, [r7, #15]
    break;
 800948e:	e008      	b.n	80094a2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009490:	2301      	movs	r3, #1
 8009492:	73fb      	strb	r3, [r7, #15]
    break;
 8009494:	e005      	b.n	80094a2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009496:	2303      	movs	r3, #3
 8009498:	73fb      	strb	r3, [r7, #15]
    break;
 800949a:	e002      	b.n	80094a2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	73fb      	strb	r3, [r7, #15]
    break;
 80094a0:	bf00      	nop
  }
  return usb_status;
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094c6:	78fa      	ldrb	r2, [r7, #3]
 80094c8:	4611      	mov	r1, r2
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7f9 f9ed 	bl	80028aa <HAL_PCD_EP_SetStall>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d816      	bhi.n	8009508 <USBD_LL_StallEP+0x5c>
 80094da:	a201      	add	r2, pc, #4	@ (adr r2, 80094e0 <USBD_LL_StallEP+0x34>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	080094f1 	.word	0x080094f1
 80094e4:	080094f7 	.word	0x080094f7
 80094e8:	080094fd 	.word	0x080094fd
 80094ec:	08009503 	.word	0x08009503
    case HAL_OK :
      usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]
    break;
 80094f4:	e00b      	b.n	800950e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094f6:	2303      	movs	r3, #3
 80094f8:	73fb      	strb	r3, [r7, #15]
    break;
 80094fa:	e008      	b.n	800950e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094fc:	2301      	movs	r3, #1
 80094fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009500:	e005      	b.n	800950e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009502:	2303      	movs	r3, #3
 8009504:	73fb      	strb	r3, [r7, #15]
    break;
 8009506:	e002      	b.n	800950e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009508:	2303      	movs	r3, #3
 800950a:	73fb      	strb	r3, [r7, #15]
    break;
 800950c:	bf00      	nop
  }
  return usb_status;
 800950e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009532:	78fa      	ldrb	r2, [r7, #3]
 8009534:	4611      	mov	r1, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f7f9 fa19 	bl	800296e <HAL_PCD_EP_ClrStall>
 800953c:	4603      	mov	r3, r0
 800953e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	2b03      	cmp	r3, #3
 8009544:	d816      	bhi.n	8009574 <USBD_LL_ClearStallEP+0x5c>
 8009546:	a201      	add	r2, pc, #4	@ (adr r2, 800954c <USBD_LL_ClearStallEP+0x34>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	0800955d 	.word	0x0800955d
 8009550:	08009563 	.word	0x08009563
 8009554:	08009569 	.word	0x08009569
 8009558:	0800956f 	.word	0x0800956f
    case HAL_OK :
      usb_status = USBD_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
    break;
 8009560:	e00b      	b.n	800957a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009562:	2303      	movs	r3, #3
 8009564:	73fb      	strb	r3, [r7, #15]
    break;
 8009566:	e008      	b.n	800957a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009568:	2301      	movs	r3, #1
 800956a:	73fb      	strb	r3, [r7, #15]
    break;
 800956c:	e005      	b.n	800957a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800956e:	2303      	movs	r3, #3
 8009570:	73fb      	strb	r3, [r7, #15]
    break;
 8009572:	e002      	b.n	800957a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	73fb      	strb	r3, [r7, #15]
    break;
 8009578:	bf00      	nop
  }
  return usb_status;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009596:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800959c:	2b00      	cmp	r3, #0
 800959e:	da0b      	bge.n	80095b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095a6:	68f9      	ldr	r1, [r7, #12]
 80095a8:	4613      	mov	r3, r2
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	4413      	add	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	3316      	adds	r3, #22
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	e00b      	b.n	80095d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095be:	68f9      	ldr	r1, [r7, #12]
 80095c0:	4613      	mov	r3, r2
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80095ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7f9 f802 	bl	8002604 <HAL_PCD_SetAddress>
 8009600:	4603      	mov	r3, r0
 8009602:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b03      	cmp	r3, #3
 8009608:	d816      	bhi.n	8009638 <USBD_LL_SetUSBAddress+0x5c>
 800960a:	a201      	add	r2, pc, #4	@ (adr r2, 8009610 <USBD_LL_SetUSBAddress+0x34>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	08009621 	.word	0x08009621
 8009614:	08009627 	.word	0x08009627
 8009618:	0800962d 	.word	0x0800962d
 800961c:	08009633 	.word	0x08009633
    case HAL_OK :
      usb_status = USBD_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
    break;
 8009624:	e00b      	b.n	800963e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009626:	2303      	movs	r3, #3
 8009628:	73fb      	strb	r3, [r7, #15]
    break;
 800962a:	e008      	b.n	800963e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800962c:	2301      	movs	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
    break;
 8009630:	e005      	b.n	800963e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009632:	2303      	movs	r3, #3
 8009634:	73fb      	strb	r3, [r7, #15]
    break;
 8009636:	e002      	b.n	800963e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009638:	2303      	movs	r3, #3
 800963a:	73fb      	strb	r3, [r7, #15]
    break;
 800963c:	bf00      	nop
  }
  return usb_status;
 800963e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	607a      	str	r2, [r7, #4]
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	460b      	mov	r3, r1
 8009656:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009666:	7af9      	ldrb	r1, [r7, #11]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	f7f9 f8ec 	bl	8002848 <HAL_PCD_EP_Transmit>
 8009670:	4603      	mov	r3, r0
 8009672:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009674:	7dbb      	ldrb	r3, [r7, #22]
 8009676:	2b03      	cmp	r3, #3
 8009678:	d816      	bhi.n	80096a8 <USBD_LL_Transmit+0x60>
 800967a:	a201      	add	r2, pc, #4	@ (adr r2, 8009680 <USBD_LL_Transmit+0x38>)
 800967c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009680:	08009691 	.word	0x08009691
 8009684:	08009697 	.word	0x08009697
 8009688:	0800969d 	.word	0x0800969d
 800968c:	080096a3 	.word	0x080096a3
    case HAL_OK :
      usb_status = USBD_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	75fb      	strb	r3, [r7, #23]
    break;
 8009694:	e00b      	b.n	80096ae <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009696:	2303      	movs	r3, #3
 8009698:	75fb      	strb	r3, [r7, #23]
    break;
 800969a:	e008      	b.n	80096ae <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800969c:	2301      	movs	r3, #1
 800969e:	75fb      	strb	r3, [r7, #23]
    break;
 80096a0:	e005      	b.n	80096ae <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096a2:	2303      	movs	r3, #3
 80096a4:	75fb      	strb	r3, [r7, #23]
    break;
 80096a6:	e002      	b.n	80096ae <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80096a8:	2303      	movs	r3, #3
 80096aa:	75fb      	strb	r3, [r7, #23]
    break;
 80096ac:	bf00      	nop
  }
  return usb_status;
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	460b      	mov	r3, r1
 80096c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096d6:	7af9      	ldrb	r1, [r7, #11]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	f7f9 f86a 	bl	80027b4 <HAL_PCD_EP_Receive>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80096e4:	7dbb      	ldrb	r3, [r7, #22]
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d816      	bhi.n	8009718 <USBD_LL_PrepareReceive+0x60>
 80096ea:	a201      	add	r2, pc, #4	@ (adr r2, 80096f0 <USBD_LL_PrepareReceive+0x38>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009701 	.word	0x08009701
 80096f4:	08009707 	.word	0x08009707
 80096f8:	0800970d 	.word	0x0800970d
 80096fc:	08009713 	.word	0x08009713
    case HAL_OK :
      usb_status = USBD_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	75fb      	strb	r3, [r7, #23]
    break;
 8009704:	e00b      	b.n	800971e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009706:	2303      	movs	r3, #3
 8009708:	75fb      	strb	r3, [r7, #23]
    break;
 800970a:	e008      	b.n	800971e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800970c:	2301      	movs	r3, #1
 800970e:	75fb      	strb	r3, [r7, #23]
    break;
 8009710:	e005      	b.n	800971e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009712:	2303      	movs	r3, #3
 8009714:	75fb      	strb	r3, [r7, #23]
    break;
 8009716:	e002      	b.n	800971e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009718:	2303      	movs	r3, #3
 800971a:	75fb      	strb	r3, [r7, #23]
    break;
 800971c:	bf00      	nop
  }
  return usb_status;
 800971e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800973a:	78fa      	ldrb	r2, [r7, #3]
 800973c:	4611      	mov	r1, r2
 800973e:	4618      	mov	r0, r3
 8009740:	f7f9 f86a 	bl	8002818 <HAL_PCD_EP_GetRxCount>
 8009744:	4603      	mov	r3, r0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <HAL_PCDEx_LPM_Callback+0x18>
 8009762:	2b01      	cmp	r3, #1
 8009764:	d01f      	beq.n	80097a6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009766:	e03b      	b.n	80097e0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7adb      	ldrb	r3, [r3, #11]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d007      	beq.n	8009780 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009770:	f000 f854 	bl	800981c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009774:	4b1c      	ldr	r3, [pc, #112]	@ (80097e8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	4a1b      	ldr	r2, [pc, #108]	@ (80097e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800977a:	f023 0306 	bic.w	r3, r3, #6
 800977e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	6812      	ldr	r2, [r2, #0]
 800978e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009792:	f023 0301 	bic.w	r3, r3, #1
 8009796:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe f9cb 	bl	8007b3a <USBD_LL_Resume>
    break;
 80097a4:	e01c      	b.n	80097e0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	6812      	ldr	r2, [r2, #0]
 80097b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097b8:	f043 0301 	orr.w	r3, r3, #1
 80097bc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fe f99c 	bl	8007b02 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	7adb      	ldrb	r3, [r3, #11]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097d2:	4b05      	ldr	r3, [pc, #20]	@ (80097e8 <HAL_PCDEx_LPM_Callback+0x98>)
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	4a04      	ldr	r2, [pc, #16]	@ (80097e8 <HAL_PCDEx_LPM_Callback+0x98>)
 80097d8:	f043 0306 	orr.w	r3, r3, #6
 80097dc:	6113      	str	r3, [r2, #16]
    break;
 80097de:	bf00      	nop
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	e000ed00 	.word	0xe000ed00

080097ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097f4:	4b03      	ldr	r3, [pc, #12]	@ (8009804 <USBD_static_malloc+0x18>)
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20001dec 	.word	0x20001dec

08009808 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]

}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009820:	f7f6 febe 	bl	80005a0 <SystemClock_Config>
}
 8009824:	bf00      	nop
 8009826:	bd80      	pop	{r7, pc}

08009828 <memset>:
 8009828:	4402      	add	r2, r0
 800982a:	4603      	mov	r3, r0
 800982c:	4293      	cmp	r3, r2
 800982e:	d100      	bne.n	8009832 <memset+0xa>
 8009830:	4770      	bx	lr
 8009832:	f803 1b01 	strb.w	r1, [r3], #1
 8009836:	e7f9      	b.n	800982c <memset+0x4>

08009838 <__libc_init_array>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4d0d      	ldr	r5, [pc, #52]	@ (8009870 <__libc_init_array+0x38>)
 800983c:	4c0d      	ldr	r4, [pc, #52]	@ (8009874 <__libc_init_array+0x3c>)
 800983e:	1b64      	subs	r4, r4, r5
 8009840:	10a4      	asrs	r4, r4, #2
 8009842:	2600      	movs	r6, #0
 8009844:	42a6      	cmp	r6, r4
 8009846:	d109      	bne.n	800985c <__libc_init_array+0x24>
 8009848:	4d0b      	ldr	r5, [pc, #44]	@ (8009878 <__libc_init_array+0x40>)
 800984a:	4c0c      	ldr	r4, [pc, #48]	@ (800987c <__libc_init_array+0x44>)
 800984c:	f000 f818 	bl	8009880 <_init>
 8009850:	1b64      	subs	r4, r4, r5
 8009852:	10a4      	asrs	r4, r4, #2
 8009854:	2600      	movs	r6, #0
 8009856:	42a6      	cmp	r6, r4
 8009858:	d105      	bne.n	8009866 <__libc_init_array+0x2e>
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009860:	4798      	blx	r3
 8009862:	3601      	adds	r6, #1
 8009864:	e7ee      	b.n	8009844 <__libc_init_array+0xc>
 8009866:	f855 3b04 	ldr.w	r3, [r5], #4
 800986a:	4798      	blx	r3
 800986c:	3601      	adds	r6, #1
 800986e:	e7f2      	b.n	8009856 <__libc_init_array+0x1e>
 8009870:	08009930 	.word	0x08009930
 8009874:	08009930 	.word	0x08009930
 8009878:	08009930 	.word	0x08009930
 800987c:	08009934 	.word	0x08009934

08009880 <_init>:
 8009880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009882:	bf00      	nop
 8009884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009886:	bc08      	pop	{r3}
 8009888:	469e      	mov	lr, r3
 800988a:	4770      	bx	lr

0800988c <_fini>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	bf00      	nop
 8009890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009892:	bc08      	pop	{r3}
 8009894:	469e      	mov	lr, r3
 8009896:	4770      	bx	lr
