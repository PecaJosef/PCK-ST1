
PCK-ST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800b254  0800b254  0000c254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2e4  0800b2e4  0000d190  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b2e4  0800b2e4  0000c2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2ec  0800b2ec  0000d190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2ec  0800b2ec  0000c2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2f0  0800b2f0  0000c2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  0800b2f4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002094  20000190  0800b484  0000d190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002224  0800b484  0000d224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f557  00000000  00000000  0000d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044b4  00000000  00000000  0002c717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  00030bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000144f  00000000  00000000  00032600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7b7  00000000  00000000  00033a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022144  00000000  00000000  0005e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f99e7  00000000  00000000  0008034a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179d31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dfc  00000000  00000000  00179d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00180b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b23c 	.word	0x0800b23c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	0800b23c 	.word	0x0800b23c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LED_IT_Handeler>:
#include "stm32l4xx_hal.h"
#include "main.h"


void LED_IT_Handeler()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80004f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <LED_IT_Handeler+0x14>)
 80004fe:	f001 fe77 	bl	80021f0 <HAL_GPIO_TogglePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	48000800 	.word	0x48000800

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 f999 	bl	8001846 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f83e 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fc40 	bl	8000d9c <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 fc18 	bl	8000d50 <MX_DMA_Init>
  MX_I2C3_Init();
 8000520:	f000 f888 	bl	8000634 <MX_I2C3_Init>
  MX_UART4_Init();
 8000524:	f000 fb84 	bl	8000c30 <MX_UART4_Init>
  MX_UART5_Init();
 8000528:	f000 fbb2 	bl	8000c90 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800052c:	f000 fbe0 	bl	8000cf0 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 8000530:	f000 fb58 	bl	8000be4 <MX_TIM17_Init>
  MX_USB_DEVICE_Init();
 8000534:	f00a f820 	bl	800a578 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000538:	f000 f9b8 	bl	80008ac <MX_TIM3_Init>
  MX_TIM4_Init();
 800053c:	f000 fa04 	bl	8000948 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000540:	f000 fa52 	bl	80009e8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000544:	f000 faa0 	bl	8000a88 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000548:	f000 f8b4 	bl	80006b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800054c:	f000 f95e 	bl	800080c <MX_TIM2_Init>


  //LED_Tim_Enable();
  //Stepper_IT_Enable();

  Stepper_nSleep(GPIO_PIN_SET);
 8000550:	2001      	movs	r0, #1
 8000552:	f000 fd87 	bl	8001064 <Stepper_nSleep>
  //Stepper_Enable(&EL_Axis_motor);
  //Stepper_Enable(&AZ_Axis_motor);
  Stepper_Enable(&RA_Axis_motor);
 8000556:	480d      	ldr	r0, [pc, #52]	@ (800058c <main+0x80>)
 8000558:	f000 fce6 	bl	8000f28 <Stepper_Enable>


	  //Stepper_Move(&EL_Axis_motor, 5.0f, 10.0f, 0);
	  //Stepper_Move(&AZ_Axis_motor, 90.0f, 20.0f, 0);
	  //Stepper_Move(&RA_Axis_motor, 90.0f, 10.0f, 0);
	  Stepper_Move_RA(90.0f, 2.0f, 0);
 800055c:	2000      	movs	r0, #0
 800055e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000562:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000590 <main+0x84>
 8000566:	f000 fcef 	bl	8000f48 <Stepper_Move_RA>
	  //HAL_Delay(500);
	  //printf("TIM2 CNT: %lu\r\n", __HAL_TIM_GET_COUNTER(&htim2));
	  HAL_Delay(50000);
 800056a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800056e:	f001 f9df 	bl	8001930 <HAL_Delay>
	  //Stepper_Move(&EL_Axis_motor, 5.0f, 10.0f, 1);
	  //Stepper_Move(&AZ_Axis_motor, 90.0f, 20.0f, 1);
	  //Stepper_Move(&RA_Axis_motor, 90.0f, 10.0f, 1);
	  Stepper_Move_RA(90.0f, 2.0f, 1);
 8000572:	2001      	movs	r0, #1
 8000574:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000578:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8000590 <main+0x84>
 800057c:	f000 fce4 	bl	8000f48 <Stepper_Move_RA>
	  HAL_Delay(50000);
 8000580:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000584:	f001 f9d4 	bl	8001930 <HAL_Delay>
	  Stepper_Move_RA(90.0f, 2.0f, 0);
 8000588:	bf00      	nop
 800058a:	e7e7      	b.n	800055c <main+0x50>
 800058c:	20000058 	.word	0x20000058
 8000590:	42b40000 	.word	0x42b40000

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b096      	sub	sp, #88	@ 0x58
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2244      	movs	r2, #68	@ 0x44
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f00a fe1e 	bl	800b1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ba:	f003 f909 	bl	80037d0 <HAL_PWREx_ControlVoltageScaling>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c4:	f000 fc88 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	2303      	movs	r3, #3
 80005d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005de:	2308      	movs	r3, #8
 80005e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e2:	2307      	movs	r3, #7
 80005e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f952 	bl	800389c <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005fe:	f000 fc6b 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2303      	movs	r3, #3
 8000608:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	2103      	movs	r1, #3
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fd1a 	bl	8004054 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000626:	f000 fc57 	bl	8000ed8 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3758      	adds	r7, #88	@ 0x58
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000638:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_I2C3_Init+0x74>)
 800063a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ac <MX_I2C3_Init+0x78>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 800063e:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <MX_I2C3_Init+0x74>)
 8000640:	4a1b      	ldr	r2, [pc, #108]	@ (80006b0 <MX_I2C3_Init+0x7c>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <MX_I2C3_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <MX_I2C3_Init+0x74>)
 800064c:	2201      	movs	r2, #1
 800064e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <MX_I2C3_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000656:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <MX_I2C3_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_I2C3_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_I2C3_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_I2C3_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800066e:	480e      	ldr	r0, [pc, #56]	@ (80006a8 <MX_I2C3_Init+0x74>)
 8000670:	f001 fdd8 	bl	8002224 <HAL_I2C_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800067a:	f000 fc2d 	bl	8000ed8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067e:	2100      	movs	r1, #0
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <MX_I2C3_Init+0x74>)
 8000682:	f001 fe6a 	bl	800235a <HAL_I2CEx_ConfigAnalogFilter>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800068c:	f000 fc24 	bl	8000ed8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000690:	2100      	movs	r1, #0
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <MX_I2C3_Init+0x74>)
 8000694:	f001 feac 	bl	80023f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800069e:	f000 fc1b 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200001ac 	.word	0x200001ac
 80006ac:	40005c00 	.word	0x40005c00
 80006b0:	10b17db5 	.word	0x10b17db5

080006b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09a      	sub	sp, #104	@ 0x68
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]
 80006e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	222c      	movs	r2, #44	@ 0x2c
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00a fd78 	bl	800b1e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f4:	4b43      	ldr	r3, [pc, #268]	@ (8000804 <MX_TIM1_Init+0x150>)
 80006f6:	4a44      	ldr	r2, [pc, #272]	@ (8000808 <MX_TIM1_Init+0x154>)
 80006f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80006fa:	4b42      	ldr	r3, [pc, #264]	@ (8000804 <MX_TIM1_Init+0x150>)
 80006fc:	221f      	movs	r2, #31
 80006fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000700:	4b40      	ldr	r3, [pc, #256]	@ (8000804 <MX_TIM1_Init+0x150>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 8000706:	4b3f      	ldr	r3, [pc, #252]	@ (8000804 <MX_TIM1_Init+0x150>)
 8000708:	2213      	movs	r2, #19
 800070a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b3d      	ldr	r3, [pc, #244]	@ (8000804 <MX_TIM1_Init+0x150>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000712:	4b3c      	ldr	r3, [pc, #240]	@ (8000804 <MX_TIM1_Init+0x150>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b3a      	ldr	r3, [pc, #232]	@ (8000804 <MX_TIM1_Init+0x150>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800071e:	4839      	ldr	r0, [pc, #228]	@ (8000804 <MX_TIM1_Init+0x150>)
 8000720:	f004 fb76 	bl	8004e10 <HAL_TIM_Base_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800072a:	f000 fbd5 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000732:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000734:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000738:	4619      	mov	r1, r3
 800073a:	4832      	ldr	r0, [pc, #200]	@ (8000804 <MX_TIM1_Init+0x150>)
 800073c:	f004 ff72 	bl	8005624 <HAL_TIM_ConfigClockSource>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000746:	f000 fbc7 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800074a:	482e      	ldr	r0, [pc, #184]	@ (8000804 <MX_TIM1_Init+0x150>)
 800074c:	f004 fc57 	bl	8004ffe <HAL_TIM_PWM_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000756:	f000 fbbf 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800075a:	2320      	movs	r3, #32
 800075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800075e:	2300      	movs	r3, #0
 8000760:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000766:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800076a:	4619      	mov	r1, r3
 800076c:	4825      	ldr	r0, [pc, #148]	@ (8000804 <MX_TIM1_Init+0x150>)
 800076e:	f005 fe73 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000778:	f000 fbae 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077c:	2360      	movs	r3, #96	@ 0x60
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 10;
 8000780:	230a      	movs	r3, #10
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000784:	2300      	movs	r3, #0
 8000786:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000788:	2308      	movs	r3, #8
 800078a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000798:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800079c:	2204      	movs	r2, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4818      	ldr	r0, [pc, #96]	@ (8000804 <MX_TIM1_Init+0x150>)
 80007a2:	f004 fe2b 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80007ac:	f000 fb94 	bl	8000ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	4807      	ldr	r0, [pc, #28]	@ (8000804 <MX_TIM1_Init+0x150>)
 80007e6:	f005 febf 	bl	8006568 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80007f0:	f000 fb72 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <MX_TIM1_Init+0x150>)
 80007f6:	f000 fd75 	bl	80012e4 <HAL_TIM_MspPostInit>

}
 80007fa:	bf00      	nop
 80007fc:	3768      	adds	r7, #104	@ 0x68
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000200 	.word	0x20000200
 8000808:	40012c00 	.word	0x40012c00

0800080c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800082c:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <MX_TIM2_Init+0x9c>)
 800082e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000832:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000834:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <MX_TIM2_Init+0x9c>)
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_TIM2_Init+0x9c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000840:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <MX_TIM2_Init+0x9c>)
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <MX_TIM2_Init+0x9c>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <MX_TIM2_Init+0x9c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000854:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <MX_TIM2_Init+0x9c>)
 8000856:	f004 fadb 	bl	8004e10 <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000860:	f000 fb3a 	bl	8000ed8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000864:	2307      	movs	r3, #7
 8000866:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <MX_TIM2_Init+0x9c>)
 8000874:	f004 ff9f 	bl	80057b6 <HAL_TIM_SlaveConfigSynchro>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800087e:	f000 fb2b 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <MX_TIM2_Init+0x9c>)
 8000890:	f005 fde2 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800089a:	f000 fb1d 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000024c 	.word	0x2000024c

080008ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <MX_TIM3_Init+0x94>)
 80008cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000944 <MX_TIM3_Init+0x98>)
 80008ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <MX_TIM3_Init+0x94>)
 80008d2:	223f      	movs	r2, #63	@ 0x3f
 80008d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_TIM3_Init+0x94>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80008dc:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_TIM3_Init+0x94>)
 80008de:	2209      	movs	r2, #9
 80008e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_TIM3_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_TIM3_Init+0x94>)
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ee:	4814      	ldr	r0, [pc, #80]	@ (8000940 <MX_TIM3_Init+0x94>)
 80008f0:	f004 fa8e 	bl	8004e10 <HAL_TIM_Base_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 faed 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	480d      	ldr	r0, [pc, #52]	@ (8000940 <MX_TIM3_Init+0x94>)
 800090c:	f004 fe8a 	bl	8005624 <HAL_TIM_ConfigClockSource>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000916:	f000 fadf 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_TIM3_Init+0x94>)
 8000928:	f005 fd96 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000932:	f000 fad1 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000298 	.word	0x20000298
 8000944:	40000400 	.word	0x40000400

08000948 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MX_TIM4_Init+0x98>)
 8000968:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <MX_TIM4_Init+0x9c>)
 800096a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_TIM4_Init+0x98>)
 800096e:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000972:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_TIM4_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <MX_TIM4_Init+0x98>)
 800097c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000980:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_TIM4_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_TIM4_Init+0x98>)
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800098e:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <MX_TIM4_Init+0x98>)
 8000990:	f004 fa3e 	bl	8004e10 <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800099a:	f000 fa9d 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_TIM4_Init+0x98>)
 80009ac:	f004 fe3a 	bl	8005624 <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80009b6:	f000 fa8f 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <MX_TIM4_Init+0x98>)
 80009c8:	f005 fd46 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80009d2:	f000 fa81 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3720      	adds	r7, #32
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200002e4 	.word	0x200002e4
 80009e4:	40000800 	.word	0x40000800

080009e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	463b      	mov	r3, r7
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_TIM5_Init+0x98>)
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a84 <MX_TIM5_Init+0x9c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <MX_TIM5_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_TIM5_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <MX_TIM5_Init+0x98>)
 8000a1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_TIM5_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_TIM5_Init+0x98>)
 8000a2a:	2280      	movs	r2, #128	@ 0x80
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a2e:	4814      	ldr	r0, [pc, #80]	@ (8000a80 <MX_TIM5_Init+0x98>)
 8000a30:	f004 f9ee 	bl	8004e10 <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000a3a:	f000 fa4d 	bl	8000ed8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000a42:	2330      	movs	r3, #48	@ 0x30
 8000a44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <MX_TIM5_Init+0x98>)
 8000a4e:	f004 feb2 	bl	80057b6 <HAL_TIM_SlaveConfigSynchro>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000a58:	f000 fa3e 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_TIM5_Init+0x98>)
 8000a6a:	f005 fcf5 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a74:	f000 fa30 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000330 	.word	0x20000330
 8000a84:	40000c00 	.word	0x40000c00

08000a88 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09a      	sub	sp, #104	@ 0x68
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	222c      	movs	r2, #44	@ 0x2c
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f00a fb8e 	bl	800b1e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ac8:	4b44      	ldr	r3, [pc, #272]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000aca:	4a45      	ldr	r2, [pc, #276]	@ (8000be0 <MX_TIM8_Init+0x158>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8000ace:	4b43      	ldr	r3, [pc, #268]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000ad0:	221f      	movs	r2, #31
 8000ad2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b41      	ldr	r3, [pc, #260]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8000ada:	4b40      	ldr	r3, [pc, #256]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000adc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ae0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b3b      	ldr	r3, [pc, #236]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000af4:	4839      	ldr	r0, [pc, #228]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000af6:	f004 f98b 	bl	8004e10 <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000b00:	f000 f9ea 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b08:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4832      	ldr	r0, [pc, #200]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000b12:	f004 fd87 	bl	8005624 <HAL_TIM_ConfigClockSource>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000b1c:	f000 f9dc 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b20:	482e      	ldr	r0, [pc, #184]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000b22:	f004 fa6c 	bl	8004ffe <HAL_TIM_PWM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000b2c:	f000 f9d4 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b30:	2320      	movs	r3, #32
 8000b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b40:	4619      	mov	r1, r3
 8000b42:	4826      	ldr	r0, [pc, #152]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000b44:	f005 fc88 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000b4e:	f000 f9c3 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b52:	2360      	movs	r3, #96	@ 0x60
 8000b54:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 8000b56:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b74:	2208      	movs	r2, #8
 8000b76:	4619      	mov	r1, r3
 8000b78:	4818      	ldr	r0, [pc, #96]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000b7a:	f004 fc3f 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8000b84:	f000 f9a8 	bl	8000ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4807      	ldr	r0, [pc, #28]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000bbe:	f005 fcd3 	bl	8006568 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000bc8:	f000 f986 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000bcc:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <MX_TIM8_Init+0x154>)
 8000bce:	f000 fb89 	bl	80012e4 <HAL_TIM_MspPostInit>

}
 8000bd2:	bf00      	nop
 8000bd4:	3768      	adds	r7, #104	@ 0x68
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000037c 	.word	0x2000037c
 8000be0:	40013400 	.word	0x40013400

08000be4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_TIM17_Init+0x44>)
 8000bea:	4a10      	ldr	r2, [pc, #64]	@ (8000c2c <MX_TIM17_Init+0x48>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_TIM17_Init+0x44>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_TIM17_Init+0x44>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <MX_TIM17_Init+0x44>)
 8000bfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c00:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_TIM17_Init+0x44>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <MX_TIM17_Init+0x44>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_TIM17_Init+0x44>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <MX_TIM17_Init+0x44>)
 8000c16:	f004 f8fb 	bl	8004e10 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000c20:	f000 f95a 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200003c8 	.word	0x200003c8
 8000c2c:	40014800 	.word	0x40014800

08000c30 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c36:	4a15      	ldr	r2, [pc, #84]	@ (8000c8c <MX_UART4_Init+0x5c>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_UART4_Init+0x58>)
 8000c74:	f005 fd39 	bl	80066ea <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f92b 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000414 	.word	0x20000414
 8000c8c:	40004c00 	.word	0x40004c00

08000c90 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000c96:	4a15      	ldr	r2, [pc, #84]	@ (8000cec <MX_UART5_Init+0x5c>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_UART5_Init+0x58>)
 8000cd4:	f005 fd09 	bl	80066ea <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000cde:	f000 f8fb 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000049c 	.word	0x2000049c
 8000cec:	40005000 	.word	0x40005000

08000cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000cf6:	4a15      	ldr	r2, [pc, #84]	@ (8000d4c <MX_USART1_UART_Init+0x5c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d34:	f005 fcd9 	bl	80066ea <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 f8cb 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000524 	.word	0x20000524
 8000d4c:	40013800 	.word	0x40013800

08000d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_DMA_Init+0x48>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <MX_DMA_Init+0x48>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <MX_DMA_Init+0x48>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	200e      	movs	r0, #14
 8000d74:	f000 fedb 	bl	8001b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d78:	200e      	movs	r0, #14
 8000d7a:	f000 fef4 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	200f      	movs	r0, #15
 8000d84:	f000 fed3 	bl	8001b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d88:	200f      	movs	r0, #15
 8000d8a:	f000 feec 	bl	8001b66 <HAL_NVIC_EnableIRQ>

}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b46      	ldr	r3, [pc, #280]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a45      	ldr	r2, [pc, #276]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b43      	ldr	r3, [pc, #268]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	4b40      	ldr	r3, [pc, #256]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	4a3f      	ldr	r2, [pc, #252]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	4a39      	ldr	r2, [pc, #228]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b34      	ldr	r3, [pc, #208]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	4a33      	ldr	r2, [pc, #204]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e06:	4b31      	ldr	r3, [pc, #196]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e16:	4a2d      	ldr	r2, [pc, #180]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ecc <MX_GPIO_Init+0x130>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWR_BTN_LED_Pin|DEC_EN_Pin|DEC_DIR_Pin|LED2_Pin
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5133 	mov.w	r1, #11456	@ 0x2cc0
 8000e30:	4827      	ldr	r0, [pc, #156]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000e32:	f001 f9c5 	bl	80021c0 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8000e36:	2200      	movs	r2, #0
 8000e38:	f24c 01e0 	movw	r1, #49376	@ 0xc0e0
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e40:	f001 f9be 	bl	80021c0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8000e44:	2200      	movs	r2, #0
 8000e46:	f243 4137 	movw	r1, #13367	@ 0x3437
 8000e4a:	4822      	ldr	r0, [pc, #136]	@ (8000ed4 <MX_GPIO_Init+0x138>)
 8000e4c:	f001 f9b8 	bl	80021c0 <HAL_GPIO_WritePin>
                          |RA_EN_Pin|RA_DIR_Pin|LED_USB_Pin|LED_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PWR_BTN_LED_Pin DEC_EN_Pin DEC_DIR_Pin LED2_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = PWR_BTN_LED_Pin|DEC_EN_Pin|DEC_DIR_Pin|LED2_Pin
 8000e50:	f44f 5333 	mov.w	r3, #11456	@ 0x2cc0
 8000e54:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4819      	ldr	r0, [pc, #100]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000e6a:	f000 ffff 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : AZ_EN_Pin AZ_DIR_Pin AZ_STEP_Pin LED4_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8000e6e:	f24c 03e0 	movw	r3, #49376	@ 0xc0e0
 8000e72:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e8a:	f000 ffef 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_SLEEP_n_Pin EL_EN_Pin EL_DIR_Pin EL_STEP_Pin
                           RA_EN_Pin RA_DIR_Pin LED_USB_Pin LED_DC_Pin */
  GPIO_InitStruct.Pin = STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8000e8e:	f243 4337 	movw	r3, #13367	@ 0x3437
 8000e92:	617b      	str	r3, [r7, #20]
                          |RA_EN_Pin|RA_DIR_Pin|LED_USB_Pin|LED_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <MX_GPIO_Init+0x138>)
 8000ea8:	f000 ffe0 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_STATE_Pin */
  GPIO_InitStruct.Pin = PWR_STATE_Pin;
 8000eac:	2308      	movs	r3, #8
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_STATE_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_GPIO_Init+0x138>)
 8000ec0:	f000 ffd4 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	@ 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000800 	.word	0x48000800
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <Error_Handler+0x8>

08000ee4 <Stepper_IT_Handeler>:
	.enabled = false,
};


void Stepper_IT_Handeler()
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    if (EL_Axis_motor.enabled)
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <Stepper_IT_Handeler+0x38>)
 8000eea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <Stepper_IT_Handeler+0x14>
    {
    	STEP_Generating(&EL_Axis_motor);
 8000ef2:	480a      	ldr	r0, [pc, #40]	@ (8000f1c <Stepper_IT_Handeler+0x38>)
 8000ef4:	f000 f88a 	bl	800100c <STEP_Generating>
    }


    if (AZ_Axis_motor.enabled)
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <Stepper_IT_Handeler+0x3c>)
 8000efa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <Stepper_IT_Handeler+0x24>
    {
        STEP_Generating(&AZ_Axis_motor);
 8000f02:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <Stepper_IT_Handeler+0x3c>)
 8000f04:	f000 f882 	bl	800100c <STEP_Generating>
    }

    if (RA_Axis_motor.enabled)
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <Stepper_IT_Handeler+0x40>)
 8000f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <Stepper_IT_Handeler+0x34>
	{
		STEP_Generating(&RA_Axis_motor);
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <Stepper_IT_Handeler+0x40>)
 8000f14:	f000 f87a 	bl	800100c <STEP_Generating>
    if (DEC_Axis_motor.enabled)
    {
    	STEP_Generating(&DEC_Axis_motor);
    }
*/
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	2000002c 	.word	0x2000002c
 8000f24:	20000058 	.word	0x20000058

08000f28 <Stepper_Enable>:
{
	HAL_TIM_Base_Start_IT(&htim3);
}

void Stepper_Enable(Stepper_motor *Axis)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Axis->EN_Port,Axis->EN_Pin, GPIO_PIN_SET);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6898      	ldr	r0, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	899b      	ldrh	r3, [r3, #12]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f001 f940 	bl	80021c0 <HAL_GPIO_WritePin>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Stepper_Move_RA>:
    HAL_TIM_Base_Start_IT(&htim5);
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
}

void Stepper_Move_RA(float angle, float speed, bool dir)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f52:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	uint32_t steps = (uint32_t)(angle*RA_STEP_PER_DEG);
 8000f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f5e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000ff8 <Stepper_Move_RA+0xb0>
 8000f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f6a:	ee17 3a90 	vmov	r3, s15
 8000f6e:	61fb      	str	r3, [r7, #28]

	uint32_t arr = (uint32_t)(STEPPER_TIMER_HI_FREQ / (speed*RA_STEP_PER_DEG));
 8000f70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f74:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000ff8 <Stepper_Move_RA+0xb0>
 8000f78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f7c:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000ffc <Stepper_Move_RA+0xb4>
 8000f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f88:	ee17 3a90 	vmov	r3, s15
 8000f8c:	61bb      	str	r3, [r7, #24]
    uint32_t ccr = arr / 2;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	085b      	lsrs	r3, r3, #1
 8000f92:	617b      	str	r3, [r7, #20]

    // DIR
    HAL_GPIO_WritePin(RA_DIR_GPIO_Port, RA_DIR_Pin, dir);
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f9c:	4818      	ldr	r0, [pc, #96]	@ (8001000 <Stepper_Move_RA+0xb8>)
 8000f9e:	f001 f90f 	bl	80021c0 <HAL_GPIO_WritePin>

    // Set TIM8 frequency
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr-1);
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <Stepper_Move_RA+0xbc>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	3a01      	subs	r2, #1
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	4a14      	ldr	r2, [pc, #80]	@ (8001004 <Stepper_Move_RA+0xbc>)
 8000fb2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ccr);
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <Stepper_Move_RA+0xbc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	639a      	str	r2, [r3, #56]	@ 0x38

    // Set TIM5 target steps
    __HAL_TIM_SET_AUTORELOAD(&htim2, steps - 1);
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <Stepper_Move_RA+0xc0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <Stepper_Move_RA+0xc0>)
 8000fcc:	60d3      	str	r3, [r2, #12]

    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <Stepper_Move_RA+0xc0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <Stepper_Move_RA+0xc0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f06f 0201 	mvn.w	r2, #1
 8000fde:	611a      	str	r2, [r3, #16]

    // Start TIM5 (slave counter) and TIM8 (pulse generator)
    HAL_TIM_Base_Start_IT(&htim2);
 8000fe0:	4809      	ldr	r0, [pc, #36]	@ (8001008 <Stepper_Move_RA+0xc0>)
 8000fe2:	f003 ff6d 	bl	8004ec0 <HAL_TIM_Base_Start_IT>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	4806      	ldr	r0, [pc, #24]	@ (8001004 <Stepper_Move_RA+0xbc>)
 8000fea:	f005 f91d 	bl	8006228 <HAL_TIMEx_PWMN_Start>
}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	478ae38e 	.word	0x478ae38e
 8000ffc:	49f42400 	.word	0x49f42400
 8001000:	48000400 	.word	0x48000400
 8001004:	20000200 	.word	0x20000200
 8001008:	2000024c 	.word	0x2000024c

0800100c <STEP_Generating>:

void STEP_Generating(Stepper_motor *Axis)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	if (Axis->Steps_remaining == 0)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <STEP_Generating+0x1a>
	        {
				Axis->enabled= false;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	            return;
 8001024:	e01a      	b.n	800105c <STEP_Generating+0x50>
	        }
	        if (Axis->Tick_counter == 0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d111      	bne.n	8001052 <STEP_Generating+0x46>
	        {
	            // Generate one step pulse
	            HAL_GPIO_TogglePin(Axis->STEP_Port, Axis->STEP_Pin);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	4619      	mov	r1, r3
 8001038:	4610      	mov	r0, r2
 800103a:	f001 f8d9 	bl	80021f0 <HAL_GPIO_TogglePin>

	            Axis->Steps_remaining--;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	1e5a      	subs	r2, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
	            Axis->Tick_counter = Axis->Step_interval_ticks;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69da      	ldr	r2, [r3, #28]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	621a      	str	r2, [r3, #32]
 8001050:	e004      	b.n	800105c <STEP_Generating+0x50>
	        }
	        else
	        {
	        	Axis->Tick_counter--;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	621a      	str	r2, [r3, #32]
	        }
}
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <Stepper_nSleep>:


void Stepper_nSleep(bool n_sleep)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(STEP_SLEEP_n_GPIO_Port,STEP_SLEEP_n_Pin, n_sleep); //1 = enabled
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	461a      	mov	r2, r3
 8001072:	2101      	movs	r1, #1
 8001074:	4803      	ldr	r0, [pc, #12]	@ (8001084 <Stepper_nSleep+0x20>)
 8001076:	f001 f8a3 	bl	80021c0 <HAL_GPIO_WritePin>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	48000400 	.word	0x48000400

08001088 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_MspInit+0x44>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001092:	4a0e      	ldr	r2, [pc, #56]	@ (80010cc <HAL_MspInit+0x44>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6613      	str	r3, [r2, #96]	@ 0x60
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <HAL_MspInit+0x44>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <HAL_MspInit+0x44>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010aa:	4a08      	ldr	r2, [pc, #32]	@ (80010cc <HAL_MspInit+0x44>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_MspInit+0x44>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ac      	sub	sp, #176	@ 0xb0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2288      	movs	r2, #136	@ 0x88
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00a f877 	bl	800b1e4 <memset>
  if(hi2c->Instance==I2C3)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	@ (8001180 <HAL_I2C_MspInit+0xb0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d13b      	bne.n	8001178 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001100:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001104:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001106:	2300      	movs	r3, #0
 8001108:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4618      	mov	r0, r3
 8001110:	f003 f9c2 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800111a:	f7ff fedd 	bl	8000ed8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001136:	2303      	movs	r3, #3
 8001138:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113c:	2312      	movs	r3, #18
 800113e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800114e:	2304      	movs	r3, #4
 8001150:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001158:	4619      	mov	r1, r3
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <HAL_I2C_MspInit+0xb8>)
 800115c:	f000 fe86 	bl	8001e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 8001162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 8001166:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800116a:	6593      	str	r3, [r2, #88]	@ 0x58
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001178:	bf00      	nop
 800117a:	37b0      	adds	r7, #176	@ 0xb0
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40005c00 	.word	0x40005c00
 8001184:	40021000 	.word	0x40021000
 8001188:	48000800 	.word	0x48000800

0800118c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a4b      	ldr	r2, [pc, #300]	@ (80012c8 <HAL_TIM_Base_MspInit+0x13c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10c      	bne.n	80011b8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800119e:	4b4b      	ldr	r3, [pc, #300]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a2:	4a4a      	ldr	r2, [pc, #296]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80011a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011aa:	4b48      	ldr	r3, [pc, #288]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011b6:	e082      	b.n	80012be <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c0:	d114      	bne.n	80011ec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c2:	4b42      	ldr	r3, [pc, #264]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	4a41      	ldr	r2, [pc, #260]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ce:	4b3f      	ldr	r3, [pc, #252]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	201c      	movs	r0, #28
 80011e0:	f000 fca5 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e4:	201c      	movs	r0, #28
 80011e6:	f000 fcbe 	bl	8001b66 <HAL_NVIC_EnableIRQ>
}
 80011ea:	e068      	b.n	80012be <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM3)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a37      	ldr	r2, [pc, #220]	@ (80012d0 <HAL_TIM_Base_MspInit+0x144>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d114      	bne.n	8001220 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f6:	4b35      	ldr	r3, [pc, #212]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	4a34      	ldr	r2, [pc, #208]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6593      	str	r3, [r2, #88]	@ 0x58
 8001202:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	201d      	movs	r0, #29
 8001214:	f000 fc8b 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001218:	201d      	movs	r0, #29
 800121a:	f000 fca4 	bl	8001b66 <HAL_NVIC_EnableIRQ>
}
 800121e:	e04e      	b.n	80012be <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM4)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a2b      	ldr	r2, [pc, #172]	@ (80012d4 <HAL_TIM_Base_MspInit+0x148>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10c      	bne.n	8001244 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800122a:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	4a27      	ldr	r2, [pc, #156]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6593      	str	r3, [r2, #88]	@ 0x58
 8001236:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	69bb      	ldr	r3, [r7, #24]
}
 8001242:	e03c      	b.n	80012be <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM5)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a23      	ldr	r2, [pc, #140]	@ (80012d8 <HAL_TIM_Base_MspInit+0x14c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d114      	bne.n	8001278 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001252:	4a1e      	ldr	r2, [pc, #120]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6593      	str	r3, [r2, #88]	@ 0x58
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2032      	movs	r0, #50	@ 0x32
 800126c:	f000 fc5f 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001270:	2032      	movs	r0, #50	@ 0x32
 8001272:	f000 fc78 	bl	8001b66 <HAL_NVIC_EnableIRQ>
}
 8001276:	e022      	b.n	80012be <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM8)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <HAL_TIM_Base_MspInit+0x150>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10c      	bne.n	800129c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001286:	4a11      	ldr	r2, [pc, #68]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 8001288:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800128c:	6613      	str	r3, [r2, #96]	@ 0x60
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
}
 800129a:	e010      	b.n	80012be <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM17)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	@ (80012e0 <HAL_TIM_Base_MspInit+0x154>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10b      	bne.n	80012be <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012aa:	4a08      	ldr	r2, [pc, #32]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_TIM_Base_MspInit+0x140>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40012c00 	.word	0x40012c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40000400 	.word	0x40000400
 80012d4:	40000800 	.word	0x40000800
 80012d8:	40000c00 	.word	0x40000c00
 80012dc:	40013400 	.word	0x40013400
 80012e0:	40014800 	.word	0x40014800

080012e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a23      	ldr	r2, [pc, #140]	@ (8001390 <HAL_TIM_MspPostInit+0xac>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d11d      	bne.n	8001342 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <HAL_TIM_MspPostInit+0xb0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	4a22      	ldr	r2, [pc, #136]	@ (8001394 <HAL_TIM_MspPostInit+0xb0>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <HAL_TIM_MspPostInit+0xb0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = RA_STEP_Pin;
 800131e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001330:	2301      	movs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RA_STEP_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4817      	ldr	r0, [pc, #92]	@ (8001398 <HAL_TIM_MspPostInit+0xb4>)
 800133c:	f000 fd96 	bl	8001e6c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001340:	e021      	b.n	8001386 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a15      	ldr	r2, [pc, #84]	@ (800139c <HAL_TIM_MspPostInit+0xb8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d11c      	bne.n	8001386 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <HAL_TIM_MspPostInit+0xb0>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001350:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <HAL_TIM_MspPostInit+0xb0>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <HAL_TIM_MspPostInit+0xb0>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEC_STEP_Pin;
 8001364:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001376:	2303      	movs	r3, #3
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEC_STEP_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <HAL_TIM_MspPostInit+0xbc>)
 8001382:	f000 fd73 	bl	8001e6c <HAL_GPIO_Init>
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	@ 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012c00 	.word	0x40012c00
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400
 800139c:	40013400 	.word	0x40013400
 80013a0:	48000800 	.word	0x48000800

080013a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0b0      	sub	sp, #192	@ 0xc0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c0:	2288      	movs	r2, #136	@ 0x88
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f009 ff0d 	bl	800b1e4 <memset>
  if(huart->Instance==UART4)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a9e      	ldr	r2, [pc, #632]	@ (8001648 <HAL_UART_MspInit+0x2a4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d13c      	bne.n	800144e <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013d4:	2308      	movs	r3, #8
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80013d8:	2300      	movs	r3, #0
 80013da:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 f859 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013ec:	f7ff fd74 	bl	8000ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013f0:	4b96      	ldr	r3, [pc, #600]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 80013f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f4:	4a95      	ldr	r2, [pc, #596]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 80013f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fc:	4b93      	ldr	r3, [pc, #588]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001400:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b90      	ldr	r3, [pc, #576]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140c:	4a8f      	ldr	r2, [pc, #572]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001414:	4b8d      	ldr	r3, [pc, #564]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001438:	2308      	movs	r3, #8
 800143a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001448:	f000 fd10 	bl	8001e6c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800144c:	e0f7      	b.n	800163e <HAL_UART_MspInit+0x29a>
  else if(huart->Instance==UART5)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a7f      	ldr	r2, [pc, #508]	@ (8001650 <HAL_UART_MspInit+0x2ac>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d15d      	bne.n	8001514 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001458:	2310      	movs	r3, #16
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800145c:	2300      	movs	r3, #0
 800145e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001464:	4618      	mov	r0, r3
 8001466:	f003 f817 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001470:	f7ff fd32 	bl	8000ed8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001474:	4b75      	ldr	r3, [pc, #468]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001478:	4a74      	ldr	r2, [pc, #464]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 800147a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800147e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001480:	4b72      	ldr	r3, [pc, #456]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001484:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148c:	4b6f      	ldr	r3, [pc, #444]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001490:	4a6e      	ldr	r2, [pc, #440]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001498:	4b6c      	ldr	r3, [pc, #432]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a4:	4b69      	ldr	r3, [pc, #420]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a8:	4a68      	ldr	r2, [pc, #416]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b0:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014d6:	2308      	movs	r3, #8
 80014d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014e0:	4619      	mov	r1, r3
 80014e2:	485c      	ldr	r0, [pc, #368]	@ (8001654 <HAL_UART_MspInit+0x2b0>)
 80014e4:	f000 fcc2 	bl	8001e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014e8:	2304      	movs	r3, #4
 80014ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001500:	2308      	movs	r3, #8
 8001502:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001506:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800150a:	4619      	mov	r1, r3
 800150c:	4852      	ldr	r0, [pc, #328]	@ (8001658 <HAL_UART_MspInit+0x2b4>)
 800150e:	f000 fcad 	bl	8001e6c <HAL_GPIO_Init>
}
 8001512:	e094      	b.n	800163e <HAL_UART_MspInit+0x29a>
  else if(huart->Instance==USART1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a50      	ldr	r2, [pc, #320]	@ (800165c <HAL_UART_MspInit+0x2b8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	f040 808f 	bne.w	800163e <HAL_UART_MspInit+0x29a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001520:	2301      	movs	r3, #1
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001524:	2300      	movs	r3, #0
 8001526:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152c:	4618      	mov	r0, r3
 800152e:	f002 ffb3 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_UART_MspInit+0x198>
      Error_Handler();
 8001538:	f7ff fcce 	bl	8000ed8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 800153e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001540:	4a42      	ldr	r2, [pc, #264]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001546:	6613      	str	r3, [r2, #96]	@ 0x60
 8001548:	4b40      	ldr	r3, [pc, #256]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 800154a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b3d      	ldr	r3, [pc, #244]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001558:	4a3c      	ldr	r2, [pc, #240]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001560:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <HAL_UART_MspInit+0x2a8>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800156c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001586:	2307      	movs	r3, #7
 8001588:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001596:	f000 fc69 	bl	8001e6c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 800159c:	4a31      	ldr	r2, [pc, #196]	@ (8001664 <HAL_UART_MspInit+0x2c0>)
 800159e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80015a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015a2:	2202      	movs	r2, #2
 80015a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015b4:	2280      	movs	r2, #128	@ 0x80
 80015b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015be:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80015c4:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015ca:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80015d0:	4823      	ldr	r0, [pc, #140]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015d2:	f000 fae3 	bl	8001b9c <HAL_DMA_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x23c>
      Error_Handler();
 80015dc:	f7ff fc7c 	bl	8000ed8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80015e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <HAL_UART_MspInit+0x2bc>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80015ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 80015ee:	4a1f      	ldr	r2, [pc, #124]	@ (800166c <HAL_UART_MspInit+0x2c8>)
 80015f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 80015fa:	2210      	movs	r2, #16
 80015fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 8001606:	2280      	movs	r2, #128	@ 0x80
 8001608:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160a:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001616:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001622:	4811      	ldr	r0, [pc, #68]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 8001624:	f000 faba 	bl	8001b9c <HAL_DMA_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 800162e:	f7ff fc53 	bl	8000ed8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a0c      	ldr	r2, [pc, #48]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 8001636:	671a      	str	r2, [r3, #112]	@ 0x70
 8001638:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <HAL_UART_MspInit+0x2c4>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800163e:	bf00      	nop
 8001640:	37c0      	adds	r7, #192	@ 0xc0
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40004c00 	.word	0x40004c00
 800164c:	40021000 	.word	0x40021000
 8001650:	40005000 	.word	0x40005000
 8001654:	48000800 	.word	0x48000800
 8001658:	48000c00 	.word	0x48000c00
 800165c:	40013800 	.word	0x40013800
 8001660:	200005ac 	.word	0x200005ac
 8001664:	40020058 	.word	0x40020058
 8001668:	200005f4 	.word	0x200005f4
 800166c:	40020044 	.word	0x40020044

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <NMI_Handler+0x4>

08001678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <MemManage_Handler+0x4>

08001688 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <UsageFault_Handler+0x4>

08001698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c6:	f000 f913 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <DMA1_Channel4_IRQHandler+0x10>)
 80016d6:	f000 fb19 	bl	8001d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200005f4 	.word	0x200005f4

080016e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <DMA1_Channel5_IRQHandler+0x10>)
 80016ea:	f000 fb0f 	bl	8001d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200005ac 	.word	0x200005ac

080016f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <TIM2_IRQHandler+0x10>)
 80016fe:	f003 fd75 	bl	80051ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000024c 	.word	0x2000024c

0800170c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <TIM3_IRQHandler+0x10>)
 8001712:	f003 fd6b 	bl	80051ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000298 	.word	0x20000298

08001720 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <TIM5_IRQHandler+0x10>)
 8001726:	f003 fd61 	bl	80051ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000330 	.word	0x20000330

08001734 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <OTG_FS_IRQHandler+0x10>)
 800173a:	f000 ffe3 	bl	8002704 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20001b20 	.word	0x20001b20

08001748 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <HAL_TIM_PeriodElapsedCallback>:
#include "stm32l4xx_hal.h"

#include "usbd_cdc_if.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a16      	ldr	r2, [pc, #88]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  //LEDs timer
	  LED_IT_Handeler();
 800177e:	f7fe feb9 	bl	80004f4 <LED_IT_Handeler>
  }
  if(htim->Instance == TIM2)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800178a:	d10b      	bne.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0x38>
    {
  	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800178c:	2104      	movs	r1, #4
 800178e:	4812      	ldr	r0, [pc, #72]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001790:	f004 fe04 	bl	800639c <HAL_TIMEx_PWMN_Stop>
  	  HAL_TIM_Base_Stop_IT(&htim2);
 8001794:	4811      	ldr	r0, [pc, #68]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001796:	f003 fc03 	bl	8004fa0 <HAL_TIM_Base_Stop_IT>
  	  HAL_GPIO_TogglePin(PWR_BTN_LED_GPIO_Port, PWR_BTN_LED_Pin);
 800179a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800179e:	4810      	ldr	r0, [pc, #64]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017a0:	f000 fd26 	bl	80021f0 <HAL_GPIO_TogglePin>
    }
  if(htim->Instance == TIM3)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_TIM_PeriodElapsedCallback+0x46>
  {
	  //Stepper timer
	  Stepper_IT_Handeler();
 80017ae:	f7ff fb99 	bl	8000ee4 <Stepper_IT_Handeler>
  }
  if (htim->Instance == TIM5)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a0c      	ldr	r2, [pc, #48]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d106      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
	  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 80017bc:	2108      	movs	r1, #8
 80017be:	480b      	ldr	r0, [pc, #44]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017c0:	f003 fc7e 	bl	80050c0 <HAL_TIM_PWM_Stop>
	  HAL_TIM_Base_Stop_IT(&htim5);
 80017c4:	480a      	ldr	r0, [pc, #40]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017c6:	f003 fbeb 	bl	8004fa0 <HAL_TIM_Base_Stop_IT>
  }


}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40000800 	.word	0x40000800
 80017d8:	20000200 	.word	0x20000200
 80017dc:	2000024c 	.word	0x2000024c
 80017e0:	48000800 	.word	0x48000800
 80017e4:	40000400 	.word	0x40000400
 80017e8:	40000c00 	.word	0x40000c00
 80017ec:	2000037c 	.word	0x2000037c
 80017f0:	20000330 	.word	0x20000330

080017f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800182c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f8:	f7ff ffa6 	bl	8001748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	@ (8001830 <LoopForever+0x6>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	@ (8001834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <LoopForever+0xe>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	@ (8001840 <LoopForever+0x16>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001822:	f009 fce7 	bl	800b1f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001826:	f7fe fe71 	bl	800050c <main>

0800182a <LoopForever>:

LoopForever:
    b LoopForever
 800182a:	e7fe      	b.n	800182a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800182c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001838:	0800b2f4 	.word	0x0800b2f4
  ldr r2, =_sbss
 800183c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001840:	20002224 	.word	0x20002224

08001844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC1_2_IRQHandler>

08001846 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f961 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001856:	200f      	movs	r0, #15
 8001858:	f000 f80e 	bl	8001878 <HAL_InitTick>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	e001      	b.n	800186c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001868:	f7ff fc0e 	bl	8001088 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800186c:	79fb      	ldrb	r3, [r7, #7]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001884:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <HAL_InitTick+0x6c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d023      	beq.n	80018d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <HAL_InitTick+0x70>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <HAL_InitTick+0x6c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f96d 	bl	8001b82 <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10f      	bne.n	80018ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d809      	bhi.n	80018c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f937 	bl	8001b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <HAL_InitTick+0x74>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e007      	b.n	80018d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e004      	b.n	80018d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	e001      	b.n	80018d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000008c 	.word	0x2000008c
 80018e8:	20000084 	.word	0x20000084
 80018ec:	20000088 	.word	0x20000088

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000008c 	.word	0x2000008c
 8001914:	2000063c 	.word	0x2000063c

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000063c 	.word	0x2000063c

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000008c 	.word	0x2000008c

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	@ (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	@ (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	@ (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	@ 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ae4:	d301      	bcc.n	8001aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <SysTick_Config+0x40>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af2:	210f      	movs	r1, #15
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f7ff ff8e 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <SysTick_Config+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <SysTick_Config+0x40>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff29 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b40:	f7ff ff3e 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f7ff ff8e 	bl	8001a6c <NVIC_EncodePriority>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff5d 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff31 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffa2 	bl	8001ad4 <SysTick_Config>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e098      	b.n	8001ce0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cec <HAL_DMA_Init+0x150>)
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d80f      	bhi.n	8001bda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf0 <HAL_DMA_Init+0x154>)
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf4 <HAL_DMA_Init+0x158>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	009a      	lsls	r2, r3, #2
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a48      	ldr	r2, [pc, #288]	@ (8001cf8 <HAL_DMA_Init+0x15c>)
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bd8:	e00e      	b.n	8001bf8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b46      	ldr	r3, [pc, #280]	@ (8001cfc <HAL_DMA_Init+0x160>)
 8001be2:	4413      	add	r3, r2
 8001be4:	4a43      	ldr	r2, [pc, #268]	@ (8001cf4 <HAL_DMA_Init+0x158>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	009a      	lsls	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a42      	ldr	r2, [pc, #264]	@ (8001d00 <HAL_DMA_Init+0x164>)
 8001bf6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c52:	d039      	beq.n	8001cc8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	4a27      	ldr	r2, [pc, #156]	@ (8001cf8 <HAL_DMA_Init+0x15c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d11a      	bne.n	8001c94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c5e:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <HAL_DMA_Init+0x168>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f003 031c 	and.w	r3, r3, #28
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4924      	ldr	r1, [pc, #144]	@ (8001d04 <HAL_DMA_Init+0x168>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c78:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <HAL_DMA_Init+0x168>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c84:	f003 031c 	and.w	r3, r3, #28
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	491d      	ldr	r1, [pc, #116]	@ (8001d04 <HAL_DMA_Init+0x168>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
 8001c92:	e019      	b.n	8001cc8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c94:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <HAL_DMA_Init+0x16c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9c:	f003 031c 	and.w	r3, r3, #28
 8001ca0:	210f      	movs	r1, #15
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4917      	ldr	r1, [pc, #92]	@ (8001d08 <HAL_DMA_Init+0x16c>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HAL_DMA_Init+0x16c>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f003 031c 	and.w	r3, r3, #28
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	4911      	ldr	r1, [pc, #68]	@ (8001d08 <HAL_DMA_Init+0x16c>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40020407 	.word	0x40020407
 8001cf0:	bffdfff8 	.word	0xbffdfff8
 8001cf4:	cccccccd 	.word	0xcccccccd
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	bffdfbf8 	.word	0xbffdfbf8
 8001d00:	40020400 	.word	0x40020400
 8001d04:	400200a8 	.word	0x400200a8
 8001d08:	400204a8 	.word	0x400204a8

08001d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d28:	f003 031c 	and.w	r3, r3, #28
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d026      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x7a>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d021      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0204 	bic.w	r2, r2, #4
 8001d5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	f003 021c 	and.w	r2, r3, #28
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d071      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d84:	e06c      	b.n	8001e60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f003 031c 	and.w	r3, r3, #28
 8001d8e:	2202      	movs	r2, #2
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d02e      	beq.n	8001df8 <HAL_DMA_IRQHandler+0xec>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d029      	beq.n	8001df8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10b      	bne.n	8001dca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 020a 	bic.w	r2, r2, #10
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	f003 021c 	and.w	r2, r3, #28
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d038      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001df6:	e033      	b.n	8001e60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	f003 031c 	and.w	r3, r3, #28
 8001e00:	2208      	movs	r2, #8
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d02a      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x156>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d025      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 020e 	bic.w	r2, r2, #14
 8001e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f003 021c 	and.w	r2, r3, #28
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
}
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	e17f      	b.n	800217c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8171 	beq.w	8002176 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d005      	beq.n	8001eac <HAL_GPIO_Init+0x40>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d130      	bne.n	8001f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	f003 0201 	and.w	r2, r3, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d118      	bne.n	8001f4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f20:	2201      	movs	r2, #1
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	08db      	lsrs	r3, r3, #3
 8001f36:	f003 0201 	and.w	r2, r3, #1
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d017      	beq.n	8001f88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d123      	bne.n	8001fdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	08da      	lsrs	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3208      	adds	r2, #8
 8001f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	08da      	lsrs	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3208      	adds	r2, #8
 8001fd6:	6939      	ldr	r1, [r7, #16]
 8001fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80ac 	beq.w	8002176 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	4b5f      	ldr	r3, [pc, #380]	@ (800219c <HAL_GPIO_Init+0x330>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002022:	4a5e      	ldr	r2, [pc, #376]	@ (800219c <HAL_GPIO_Init+0x330>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6613      	str	r3, [r2, #96]	@ 0x60
 800202a:	4b5c      	ldr	r3, [pc, #368]	@ (800219c <HAL_GPIO_Init+0x330>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002036:	4a5a      	ldr	r2, [pc, #360]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002060:	d025      	beq.n	80020ae <HAL_GPIO_Init+0x242>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4f      	ldr	r2, [pc, #316]	@ (80021a4 <HAL_GPIO_Init+0x338>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01f      	beq.n	80020aa <HAL_GPIO_Init+0x23e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4e      	ldr	r2, [pc, #312]	@ (80021a8 <HAL_GPIO_Init+0x33c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x23a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4d      	ldr	r2, [pc, #308]	@ (80021ac <HAL_GPIO_Init+0x340>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x236>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4c      	ldr	r2, [pc, #304]	@ (80021b0 <HAL_GPIO_Init+0x344>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x232>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4b      	ldr	r2, [pc, #300]	@ (80021b4 <HAL_GPIO_Init+0x348>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x22e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4a      	ldr	r2, [pc, #296]	@ (80021b8 <HAL_GPIO_Init+0x34c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x22a>
 8002092:	2306      	movs	r3, #6
 8002094:	e00c      	b.n	80020b0 <HAL_GPIO_Init+0x244>
 8002096:	2307      	movs	r3, #7
 8002098:	e00a      	b.n	80020b0 <HAL_GPIO_Init+0x244>
 800209a:	2305      	movs	r3, #5
 800209c:	e008      	b.n	80020b0 <HAL_GPIO_Init+0x244>
 800209e:	2304      	movs	r3, #4
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x244>
 80020a2:	2303      	movs	r3, #3
 80020a4:	e004      	b.n	80020b0 <HAL_GPIO_Init+0x244>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e002      	b.n	80020b0 <HAL_GPIO_Init+0x244>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x244>
 80020ae:	2300      	movs	r3, #0
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	f002 0203 	and.w	r2, r2, #3
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4093      	lsls	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020c0:	4937      	ldr	r1, [pc, #220]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ce:	4b3b      	ldr	r3, [pc, #236]	@ (80021bc <HAL_GPIO_Init+0x350>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020f2:	4a32      	ldr	r2, [pc, #200]	@ (80021bc <HAL_GPIO_Init+0x350>)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020f8:	4b30      	ldr	r3, [pc, #192]	@ (80021bc <HAL_GPIO_Init+0x350>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <HAL_GPIO_Init+0x350>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002122:	4b26      	ldr	r3, [pc, #152]	@ (80021bc <HAL_GPIO_Init+0x350>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002146:	4a1d      	ldr	r2, [pc, #116]	@ (80021bc <HAL_GPIO_Init+0x350>)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800214c:	4b1b      	ldr	r3, [pc, #108]	@ (80021bc <HAL_GPIO_Init+0x350>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002170:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <HAL_GPIO_Init+0x350>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	f47f ae78 	bne.w	8001e7c <HAL_GPIO_Init+0x10>
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010000 	.word	0x40010000
 80021a4:	48000400 	.word	0x48000400
 80021a8:	48000800 	.word	0x48000800
 80021ac:	48000c00 	.word	0x48000c00
 80021b0:	48001000 	.word	0x48001000
 80021b4:	48001400 	.word	0x48001400
 80021b8:	48001800 	.word	0x48001800
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43d9      	mvns	r1, r3
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	400b      	ands	r3, r1
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e08d      	b.n	8002352 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe ff40 	bl	80010d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2224      	movs	r2, #36	@ 0x24
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002274:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002284:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e006      	b.n	80022ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80022aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d108      	bne.n	80022c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	e007      	b.n	80022d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69d9      	ldr	r1, [r3, #28]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1a      	ldr	r2, [r3, #32]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b20      	cmp	r3, #32
 800236e:	d138      	bne.n	80023e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800237a:	2302      	movs	r3, #2
 800237c:	e032      	b.n	80023e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2224      	movs	r2, #36	@ 0x24
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
  }
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b20      	cmp	r3, #32
 8002404:	d139      	bne.n	800247a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002410:	2302      	movs	r3, #2
 8002412:	e033      	b.n	800247c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2224      	movs	r2, #36	@ 0x24
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002442:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800247a:	2302      	movs	r3, #2
  }
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e101      	b.n	800269e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f008 fa54 	bl	800a95c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2203      	movs	r2, #3
 80024b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 ff0b 	bl	80072e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7c1a      	ldrb	r2, [r3, #16]
 80024d4:	f88d 2000 	strb.w	r2, [sp]
 80024d8:	3304      	adds	r3, #4
 80024da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024dc:	f004 fe27 	bl	800712e <USB_CoreInit>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2202      	movs	r2, #2
 80024ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0d5      	b.n	800269e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f004 ff03 	bl	8007304 <USB_SetCurrentMode>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0c6      	b.n	800269e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e04a      	b.n	80025ac <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	3315      	adds	r3, #21
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3314      	adds	r3, #20
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	b298      	uxth	r0, r3
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	332e      	adds	r3, #46	@ 0x2e
 8002552:	4602      	mov	r2, r0
 8002554:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3318      	adds	r3, #24
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	331c      	adds	r3, #28
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3320      	adds	r3, #32
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	3324      	adds	r3, #36	@ 0x24
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	3301      	adds	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	791b      	ldrb	r3, [r3, #4]
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d3af      	bcc.n	8002516 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e044      	b.n	8002646 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	3301      	adds	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	791b      	ldrb	r3, [r3, #4]
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	429a      	cmp	r2, r3
 800264e:	d3b5      	bcc.n	80025bc <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7c1a      	ldrb	r2, [r3, #16]
 8002658:	f88d 2000 	strb.w	r2, [sp]
 800265c:	3304      	adds	r3, #4
 800265e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002660:	f004 fe9c 	bl	800739c <USB_DevInit>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e013      	b.n	800269e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7b1b      	ldrb	r3, [r3, #12]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d102      	bne.n	8002692 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f001 f86d 	bl	800376c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f005 fe53 	bl	8008342 <USB_DevDisconnect>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_PCD_Start+0x1c>
 80026be:	2302      	movs	r3, #2
 80026c0:	e01c      	b.n	80026fc <HAL_PCD_Start+0x56>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7b5b      	ldrb	r3, [r3, #13]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fdec 	bl	80072c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f005 fe07 	bl	8008300 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b08d      	sub	sp, #52	@ 0x34
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fec5 	bl	80084aa <USB_GetMode>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 8481 	bne.w	800302a <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f005 fe29 	bl	8008384 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8477 	beq.w	8003028 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f005 fe16 	bl	8008384 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d107      	bne.n	8002772 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 0202 	and.w	r2, r2, #2
 8002770:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f005 fe04 	bl	8008384 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b10      	cmp	r3, #16
 8002784:	d161      	bne.n	800284a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0210 	bic.w	r2, r2, #16
 8002794:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f003 020f 	and.w	r2, r3, #15
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	3304      	adds	r3, #4
 80027b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80027bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027c0:	d124      	bne.n	800280c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d035      	beq.n	800283a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027dc:	b29b      	uxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	6a38      	ldr	r0, [r7, #32]
 80027e2:	f005 fc3b 	bl	800805c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f2:	441a      	add	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002804:	441a      	add	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	615a      	str	r2, [r3, #20]
 800280a:	e016      	b.n	800283a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002812:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002816:	d110      	bne.n	800283a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800281e:	2208      	movs	r2, #8
 8002820:	4619      	mov	r1, r3
 8002822:	6a38      	ldr	r0, [r7, #32]
 8002824:	f005 fc1a 	bl	800805c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002834:	441a      	add	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0210 	orr.w	r2, r2, #16
 8002848:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f005 fd98 	bl	8008384 <USB_ReadInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800285a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800285e:	f040 80a7 	bne.w	80029b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f005 fd9d 	bl	80083aa <USB_ReadDevAllOutEpInterrupt>
 8002870:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002872:	e099      	b.n	80029a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 808e 	beq.w	800299c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f005 fdc1 	bl	8008412 <USB_ReadDevOutEPInterrupt>
 8002890:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00c      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028a8:	461a      	mov	r2, r3
 80028aa:	2301      	movs	r3, #1
 80028ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fe81 	bl	80035b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00c      	beq.n	80028da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028cc:	461a      	mov	r2, r3
 80028ce:	2308      	movs	r3, #8
 80028d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 febd 	bl	8003654 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f0:	461a      	mov	r2, r3
 80028f2:	2310      	movs	r3, #16
 80028f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d030      	beq.n	8002962 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002908:	2b80      	cmp	r3, #128	@ 0x80
 800290a:	d109      	bne.n	8002920 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800291a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800291e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	78db      	ldrb	r3, [r3, #3]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f008 f95a 	bl	800ac04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800295c:	461a      	mov	r2, r3
 800295e:	2302      	movs	r3, #2
 8002960:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002978:	461a      	mov	r2, r3
 800297a:	2320      	movs	r3, #32
 800297c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800299a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	3301      	adds	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f47f af62 	bne.w	8002874 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f005 fce5 	bl	8008384 <USB_ReadInterrupts>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029c4:	f040 80a4 	bne.w	8002b10 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f005 fd06 	bl	80083de <USB_ReadDevAllInEpInterrupt>
 80029d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029d8:	e096      	b.n	8002b08 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 808b 	beq.w	8002afc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fd2c 	bl	800844e <USB_ReadDevInEPInterrupt>
 80029f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	2201      	movs	r2, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69f9      	ldr	r1, [r7, #28]
 8002a1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a22:	4013      	ands	r3, r2
 8002a24:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a32:	461a      	mov	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f008 f84b 	bl	800aada <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a76:	461a      	mov	r2, r3
 8002a78:	2310      	movs	r3, #16
 8002a7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a92:	461a      	mov	r2, r3
 8002a94:	2340      	movs	r3, #64	@ 0x40
 8002a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d023      	beq.n	8002aea <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aa4:	6a38      	ldr	r0, [r7, #32]
 8002aa6:	f004 fdc1 	bl	800762c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	3310      	adds	r3, #16
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	3304      	adds	r3, #4
 8002abc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	78db      	ldrb	r3, [r3, #3]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d108      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f008 f8a8 	bl	800ac28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002af4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fcd6 	bl	80034a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	3301      	adds	r3, #1
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f47f af65 	bne.w	80029da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f005 fc35 	bl	8008384 <USB_ReadInterrupts>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b24:	d122      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d108      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f008 fadc 	bl	800b10c <HAL_PCDEx_LPM_Callback>
 8002b54:	e002      	b.n	8002b5c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f008 f82c 	bl	800abb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f005 fc07 	bl	8008384 <USB_ReadInterrupts>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b80:	d112      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f007 ffe8 	bl	800ab68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f005 fbe9 	bl	8008384 <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bbc:	d121      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002bcc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d111      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f008 fa89 	bl	800b10c <HAL_PCDEx_LPM_Callback>
 8002bfa:	e002      	b.n	8002c02 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f007 ffb3 	bl	800ab68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 fbbc 	bl	8008384 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c16:	f040 80b6 	bne.w	8002d86 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2110      	movs	r1, #16
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 fcf9 	bl	800762c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c3e:	e046      	b.n	8002cce <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c64:	0151      	lsls	r1, r2, #5
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	440a      	add	r2, r1
 8002c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c80:	461a      	mov	r2, r3
 8002c82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c98:	0151      	lsls	r1, r2, #5
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ca2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ca6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb8:	0151      	lsls	r1, r2, #5
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cc6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cca:	3301      	adds	r3, #1
 8002ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	791b      	ldrb	r3, [r3, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d3b2      	bcc.n	8002c40 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7bdb      	ldrb	r3, [r3, #15]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d06:	f043 030b 	orr.w	r3, r3, #11
 8002d0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d1c:	f043 030b 	orr.w	r3, r3, #11
 8002d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d22:	e015      	b.n	8002d50 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d36:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d4a:	f043 030b 	orr.w	r3, r3, #11
 8002d4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f005 fbcb 	bl	800850c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f005 fafa 	bl	8008384 <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d9a:	d123      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f005 fb90 	bl	80084c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f004 fcb7 	bl	800771e <USB_GetDevSpeed>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681c      	ldr	r4, [r3, #0]
 8002dbc:	f001 fad4 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f004 f9dd 	bl	8007188 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f007 feab 	bl	800ab2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f005 facb 	bl	8008384 <USB_ReadInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d10a      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f007 fe88 	bl	800ab0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f002 0208 	and.w	r2, r2, #8
 8002e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f005 fab6 	bl	8008384 <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	2b80      	cmp	r3, #128	@ 0x80
 8002e20:	d123      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e2e:	2301      	movs	r3, #1
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e32:	e014      	b.n	8002e5e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 faf7 	bl	8003446 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	791b      	ldrb	r3, [r3, #4]
 8002e62:	461a      	mov	r2, r3
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d3e4      	bcc.n	8002e34 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 fa88 	bl	8008384 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e7e:	d13c      	bne.n	8002efa <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e80:	2301      	movs	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e84:	e02b      	b.n	8002ede <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d115      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da12      	bge.n	8002ed8 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3317      	adds	r3, #23
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fab7 	bl	8003446 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	3301      	adds	r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	791b      	ldrb	r3, [r3, #4]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d3cd      	bcc.n	8002e86 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f005 fa40 	bl	8008384 <USB_ReadInterrupts>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f0e:	d156      	bne.n	8002fbe <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f10:	2301      	movs	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f14:	e045      	b.n	8002fa2 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d12e      	bne.n	8002f9c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f3e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	da2b      	bge.n	8002f9c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f50:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d121      	bne.n	8002f9c <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f98:	6053      	str	r3, [r2, #4]
            break;
 8002f9a:	e008      	b.n	8002fae <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	791b      	ldrb	r3, [r3, #4]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d3b3      	bcc.n	8002f16 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f005 f9de 	bl	8008384 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd2:	d10a      	bne.n	8002fea <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f007 fe39 	bl	800ac4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f005 f9c8 	bl	8008384 <USB_ReadInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d115      	bne.n	800302a <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f007 fe29 	bl	800ac68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	e000      	b.n	800302a <HAL_PCD_IRQHandler+0x926>
      return;
 8003028:	bf00      	nop
    }
  }
}
 800302a:	3734      	adds	r7, #52	@ 0x34
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}

08003030 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_PCD_SetAddress+0x1a>
 8003046:	2302      	movs	r3, #2
 8003048:	e012      	b.n	8003070 <HAL_PCD_SetAddress+0x40>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f005 f927 	bl	80082b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	4603      	mov	r3, r0
 8003088:	70fb      	strb	r3, [r7, #3]
 800308a:	460b      	mov	r3, r1
 800308c:	803b      	strh	r3, [r7, #0]
 800308e:	4613      	mov	r3, r2
 8003090:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0f      	bge.n	80030be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	3310      	adds	r3, #16
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	705a      	strb	r2, [r3, #1]
 80030bc:	e00f      	b.n	80030de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030ea:	883b      	ldrh	r3, [r7, #0]
 80030ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	78ba      	ldrb	r2, [r7, #2]
 80030f8:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800310c:	78bb      	ldrb	r3, [r7, #2]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d102      	bne.n	8003118 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_PCD_EP_Open+0xae>
 8003122:	2302      	movs	r3, #2
 8003124:	e00e      	b.n	8003144 <HAL_PCD_EP_Open+0xcc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68f9      	ldr	r1, [r7, #12]
 8003134:	4618      	mov	r0, r3
 8003136:	f004 fb11 	bl	800775c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003142:	7afb      	ldrb	r3, [r7, #11]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	da0f      	bge.n	8003180 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	3310      	adds	r3, #16
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	705a      	strb	r2, [r3, #1]
 800317e:	e00f      	b.n	80031a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_PCD_EP_Close+0x6e>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e00e      	b.n	80031d8 <HAL_PCD_EP_Close+0x8c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68f9      	ldr	r1, [r7, #12]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 fb4f 	bl	800786c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	460b      	mov	r3, r1
 80031ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	f003 020f 	and.w	r2, r3, #15
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	3304      	adds	r3, #4
 8003208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2200      	movs	r2, #0
 8003220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003222:	7afb      	ldrb	r3, [r7, #11]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	b2da      	uxtb	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fbf5 	bl	8007a24 <USB_EPStartXfer>

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003284:	7afb      	ldrb	r3, [r7, #11]
 8003286:	f003 020f 	and.w	r2, r3, #15
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	3310      	adds	r3, #16
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	3304      	adds	r3, #4
 800329a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2200      	movs	r2, #0
 80032ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2201      	movs	r2, #1
 80032b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b4:	7afb      	ldrb	r3, [r7, #11]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6979      	ldr	r1, [r7, #20]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f004 fbac 	bl	8007a24 <USB_EPStartXfer>

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	7912      	ldrb	r2, [r2, #4]
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e04e      	b.n	8003392 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da0f      	bge.n	800331c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 020f 	and.w	r2, r3, #15
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	3310      	adds	r3, #16
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4413      	add	r3, r2
 8003310:	3304      	adds	r3, #4
 8003312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	705a      	strb	r2, [r3, #1]
 800331a:	e00d      	b.n	8003338 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_PCD_EP_SetStall+0x82>
 8003354:	2302      	movs	r3, #2
 8003356:	e01c      	b.n	8003392 <HAL_PCD_EP_SetStall+0xbc>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	4618      	mov	r0, r3
 8003368:	f004 fed0 	bl	800810c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	2b00      	cmp	r3, #0
 8003374:	d108      	bne.n	8003388 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f005 f8c2 	bl	800850c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	7912      	ldrb	r2, [r2, #4]
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e042      	b.n	800343e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da0f      	bge.n	80033e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3310      	adds	r3, #16
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	705a      	strb	r2, [r3, #1]
 80033de:	e00f      	b.n	8003400 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_PCD_EP_ClrStall+0x86>
 800341c:	2302      	movs	r3, #2
 800341e:	e00e      	b.n	800343e <HAL_PCD_EP_ClrStall+0xa4>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	4618      	mov	r0, r3
 8003430:	f004 feda 	bl	80081e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	da0c      	bge.n	8003474 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3310      	adds	r3, #16
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e00c      	b.n	800348e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	3304      	adds	r3, #4
 800348c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	4618      	mov	r0, r3
 8003496:	f004 fcfd 	bl	8007e94 <USB_EPStopXfer>
 800349a:	4603      	mov	r3, r0
 800349c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800349e:	7afb      	ldrb	r3, [r7, #11]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	3310      	adds	r3, #16
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	3304      	adds	r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d901      	bls.n	80034e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e067      	b.n	80035b0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d902      	bls.n	80034fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	3303      	adds	r3, #3
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003504:	e026      	b.n	8003554 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3303      	adds	r3, #3
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68d9      	ldr	r1, [r3, #12]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	b29b      	uxth	r3, r3
 8003536:	6978      	ldr	r0, [r7, #20]
 8003538:	f004 fd56 	bl	8007fe8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	441a      	add	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	441a      	add	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	429a      	cmp	r2, r3
 8003568:	d809      	bhi.n	800357e <PCD_WriteEmptyTxFifo+0xd6>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003572:	429a      	cmp	r2, r3
 8003574:	d203      	bcs.n	800357e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1c3      	bne.n	8003506 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	429a      	cmp	r2, r3
 8003588:	d811      	bhi.n	80035ae <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	2201      	movs	r2, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800359e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	6939      	ldr	r1, [r7, #16]
 80035a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035aa:	4013      	ands	r3, r2
 80035ac:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	333c      	adds	r3, #60	@ 0x3c
 80035d0:	3304      	adds	r3, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a19      	ldr	r2, [pc, #100]	@ (8003650 <PCD_EP_OutXfrComplete_int+0x98>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d124      	bne.n	8003638 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003604:	461a      	mov	r2, r3
 8003606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800360a:	6093      	str	r3, [r2, #8]
 800360c:	e01a      	b.n	8003644 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003624:	461a      	mov	r2, r3
 8003626:	2320      	movs	r3, #32
 8003628:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	4619      	mov	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f007 fa37 	bl	800aaa4 <HAL_PCD_DataOutStageCallback>
 8003636:	e005      	b.n	8003644 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f007 fa30 	bl	800aaa4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	4f54310a 	.word	0x4f54310a

08003654 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	333c      	adds	r3, #60	@ 0x3c
 800366c:	3304      	adds	r3, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a0c      	ldr	r2, [pc, #48]	@ (80036b8 <PCD_EP_OutSetupPacket_int+0x64>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d90e      	bls.n	80036a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f007 f9e9 	bl	800aa80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	4f54300a 	.word	0x4f54300a

080036bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
 80036c8:	4613      	mov	r3, r2
 80036ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036da:	883b      	ldrh	r3, [r7, #0]
 80036dc:	0419      	lsls	r1, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e8:	e028      	b.n	800373c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e00d      	b.n	800371a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	3340      	adds	r3, #64	@ 0x40
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4413      	add	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	3301      	adds	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	3b01      	subs	r3, #1
 8003720:	429a      	cmp	r2, r3
 8003722:	d3ec      	bcc.n	80036fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003724:	883b      	ldrh	r3, [r7, #0]
 8003726:	0418      	lsls	r0, r3, #16
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	3b01      	subs	r3, #1
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	4302      	orrs	r2, r0
 8003734:	3340      	adds	r3, #64	@ 0x40
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800379e:	f043 0303 	orr.w	r3, r3, #3
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <HAL_PWREx_GetVoltageRange+0x18>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40007000 	.word	0x40007000

080037d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037de:	d130      	bne.n	8003842 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e0:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ec:	d038      	beq.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ee:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003874 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2232      	movs	r2, #50	@ 0x32
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	4a1b      	ldr	r2, [pc, #108]	@ (8003878 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0c9b      	lsrs	r3, r3, #18
 8003810:	3301      	adds	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003814:	e002      	b.n	800381c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3b01      	subs	r3, #1
 800381a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381c:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003828:	d102      	bne.n	8003830 <HAL_PWREx_ControlVoltageScaling+0x60>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f2      	bne.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003830:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383c:	d110      	bne.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e00f      	b.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003842:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384e:	d007      	beq.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003850:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003858:	4a05      	ldr	r2, [pc, #20]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800385e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40007000 	.word	0x40007000
 8003874:	20000084 	.word	0x20000084
 8003878:	431bde83 	.word	0x431bde83

0800387c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003880:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800388a:	6053      	str	r3, [r2, #4]
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40007000 	.word	0x40007000

0800389c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e3ca      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ae:	4b97      	ldr	r3, [pc, #604]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b8:	4b94      	ldr	r3, [pc, #592]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80e4 	beq.w	8003a98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_RCC_OscConfig+0x4a>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	f040 808b 	bne.w	80039f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 8087 	bne.w	80039f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038e6:	4b89      	ldr	r3, [pc, #548]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_RCC_OscConfig+0x62>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e3a2      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	4b82      	ldr	r3, [pc, #520]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <HAL_RCC_OscConfig+0x7c>
 800390e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003916:	e005      	b.n	8003924 <HAL_RCC_OscConfig+0x88>
 8003918:	4b7c      	ldr	r3, [pc, #496]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 800391a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003924:	4293      	cmp	r3, r2
 8003926:	d223      	bcs.n	8003970 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fd53 	bl	80043d8 <RCC_SetFlashLatencyFromMSIRange>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e383      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800393c:	4b73      	ldr	r3, [pc, #460]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a72      	ldr	r2, [pc, #456]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003942:	f043 0308 	orr.w	r3, r3, #8
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b70      	ldr	r3, [pc, #448]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	496d      	ldr	r1, [pc, #436]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800395a:	4b6c      	ldr	r3, [pc, #432]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	4968      	ldr	r1, [pc, #416]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
 800396e:	e025      	b.n	80039bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003970:	4b66      	ldr	r3, [pc, #408]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a65      	ldr	r2, [pc, #404]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003976:	f043 0308 	orr.w	r3, r3, #8
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b63      	ldr	r3, [pc, #396]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4960      	ldr	r1, [pc, #384]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800398e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	495b      	ldr	r1, [pc, #364]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fd13 	bl	80043d8 <RCC_SetFlashLatencyFromMSIRange>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e343      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039bc:	f000 fc4a 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b52      	ldr	r3, [pc, #328]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	4950      	ldr	r1, [pc, #320]	@ (8003b10 <HAL_RCC_OscConfig+0x274>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
 80039d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003b14 <HAL_RCC_OscConfig+0x278>)
 80039da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003b18 <HAL_RCC_OscConfig+0x27c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd ff49 	bl	8001878 <HAL_InitTick>
 80039e6:	4603      	mov	r3, r0
 80039e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d052      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	e327      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d032      	beq.n	8003a62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039fc:	4b43      	ldr	r3, [pc, #268]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a42      	ldr	r2, [pc, #264]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a08:	f7fd ff86 	bl	8001918 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a10:	f7fd ff82 	bl	8001918 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e310      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a22:	4b3a      	ldr	r3, [pc, #232]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a2e:	4b37      	ldr	r3, [pc, #220]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a36      	ldr	r2, [pc, #216]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a34:	f043 0308 	orr.w	r3, r3, #8
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b34      	ldr	r3, [pc, #208]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4931      	ldr	r1, [pc, #196]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	492c      	ldr	r1, [pc, #176]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	e01a      	b.n	8003a98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a62:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a29      	ldr	r2, [pc, #164]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a6e:	f7fd ff53 	bl	8001918 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a76:	f7fd ff4f 	bl	8001918 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e2dd      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a88:	4b20      	ldr	r3, [pc, #128]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x1da>
 8003a94:	e000      	b.n	8003a98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d074      	beq.n	8003b8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x21a>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d10e      	bne.n	8003ace <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d10b      	bne.n	8003ace <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab6:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d064      	beq.n	8003b8c <HAL_RCC_OscConfig+0x2f0>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d160      	bne.n	8003b8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e2ba      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x24a>
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0b      	ldr	r2, [pc, #44]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e026      	b.n	8003b34 <HAL_RCC_OscConfig+0x298>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aee:	d115      	bne.n	8003b1c <HAL_RCC_OscConfig+0x280>
 8003af0:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a05      	ldr	r2, [pc, #20]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003af6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b03      	ldr	r3, [pc, #12]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a02      	ldr	r2, [pc, #8]	@ (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e014      	b.n	8003b34 <HAL_RCC_OscConfig+0x298>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	0800b29c 	.word	0x0800b29c
 8003b14:	20000084 	.word	0x20000084
 8003b18:	20000088 	.word	0x20000088
 8003b1c:	4ba0      	ldr	r3, [pc, #640]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a9f      	ldr	r2, [pc, #636]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b9d      	ldr	r3, [pc, #628]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a9c      	ldr	r2, [pc, #624]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd feec 	bl	8001918 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fd fee8 	bl	8001918 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	@ 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e276      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b56:	4b92      	ldr	r3, [pc, #584]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x2a8>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fd fed8 	bl	8001918 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fed4 	bl	8001918 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	@ 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e262      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7e:	4b88      	ldr	r3, [pc, #544]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2d0>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d060      	beq.n	8003c5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_OscConfig+0x310>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d119      	bne.n	8003bda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d116      	bne.n	8003bda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bac:	4b7c      	ldr	r3, [pc, #496]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x328>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e23f      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b76      	ldr	r3, [pc, #472]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	4973      	ldr	r1, [pc, #460]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd8:	e040      	b.n	8003c5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d023      	beq.n	8003c2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be2:	4b6f      	ldr	r3, [pc, #444]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6e      	ldr	r2, [pc, #440]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fd fe93 	bl	8001918 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf6:	f7fd fe8f 	bl	8001918 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e21d      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c08:	4b65      	ldr	r3, [pc, #404]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c14:	4b62      	ldr	r3, [pc, #392]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	495f      	ldr	r1, [pc, #380]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
 8003c28:	e018      	b.n	8003c5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fd fe6f 	bl	8001918 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3e:	f7fd fe6b 	bl	8001918 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e1f9      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c50:	4b53      	ldr	r3, [pc, #332]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d03c      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01c      	beq.n	8003caa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c70:	4b4b      	ldr	r3, [pc, #300]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c76:	4a4a      	ldr	r2, [pc, #296]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd fe4a 	bl	8001918 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fd fe46 	bl	8001918 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e1d4      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9a:	4b41      	ldr	r3, [pc, #260]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ef      	beq.n	8003c88 <HAL_RCC_OscConfig+0x3ec>
 8003ca8:	e01b      	b.n	8003ce2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003caa:	4b3d      	ldr	r3, [pc, #244]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb0:	4a3b      	ldr	r2, [pc, #236]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fd fe2d 	bl	8001918 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fd fe29 	bl	8001918 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1b7      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd4:	4b32      	ldr	r3, [pc, #200]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ef      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80a6 	beq.w	8003e3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10d      	bne.n	8003d1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d00:	4b27      	ldr	r3, [pc, #156]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	4a26      	ldr	r2, [pc, #152]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d0c:	4b24      	ldr	r3, [pc, #144]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1c:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <HAL_RCC_OscConfig+0x508>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d118      	bne.n	8003d5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d28:	4b1e      	ldr	r3, [pc, #120]	@ (8003da4 <HAL_RCC_OscConfig+0x508>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003da4 <HAL_RCC_OscConfig+0x508>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d34:	f7fd fdf0 	bl	8001918 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fd fdec 	bl	8001918 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e17a      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	4b15      	ldr	r3, [pc, #84]	@ (8003da4 <HAL_RCC_OscConfig+0x508>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d108      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4d8>
 8003d62:	4b0f      	ldr	r3, [pc, #60]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d68:	4a0d      	ldr	r2, [pc, #52]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d72:	e029      	b.n	8003dc8 <HAL_RCC_OscConfig+0x52c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d115      	bne.n	8003da8 <HAL_RCC_OscConfig+0x50c>
 8003d7c:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d82:	4a07      	ldr	r2, [pc, #28]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d8c:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d92:	4a03      	ldr	r2, [pc, #12]	@ (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d9c:	e014      	b.n	8003dc8 <HAL_RCC_OscConfig+0x52c>
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40007000 	.word	0x40007000
 8003da8:	4b9c      	ldr	r3, [pc, #624]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dae:	4a9b      	ldr	r2, [pc, #620]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003db8:	4b98      	ldr	r3, [pc, #608]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	4a97      	ldr	r2, [pc, #604]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d016      	beq.n	8003dfe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd fda2 	bl	8001918 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fd fd9e 	bl	8001918 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e12a      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dee:	4b8b      	ldr	r3, [pc, #556]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ed      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x53c>
 8003dfc:	e015      	b.n	8003e2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fd fd8b 	bl	8001918 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e04:	e00a      	b.n	8003e1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e06:	f7fd fd87 	bl	8001918 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e113      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e1c:	4b7f      	ldr	r3, [pc, #508]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1ed      	bne.n	8003e06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e2a:	7ffb      	ldrb	r3, [r7, #31]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d105      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e30:	4b7a      	ldr	r3, [pc, #488]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	4a79      	ldr	r2, [pc, #484]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80fe 	beq.w	8004042 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	f040 80d0 	bne.w	8003ff0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e50:	4b72      	ldr	r3, [pc, #456]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0203 	and.w	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d130      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d127      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e80:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d11f      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e90:	2a07      	cmp	r2, #7
 8003e92:	bf14      	ite	ne
 8003e94:	2201      	movne	r2, #1
 8003e96:	2200      	moveq	r2, #0
 8003e98:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d113      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d06e      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d069      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ecc:	4b53      	ldr	r3, [pc, #332]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ed8:	4b50      	ldr	r3, [pc, #320]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0ad      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ee8:	4b4c      	ldr	r3, [pc, #304]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a4b      	ldr	r2, [pc, #300]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ef2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ef4:	f7fd fd10 	bl	8001918 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efc:	f7fd fd0c 	bl	8001918 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e09a      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0e:	4b43      	ldr	r3, [pc, #268]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1a:	4b40      	ldr	r3, [pc, #256]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	4b40      	ldr	r3, [pc, #256]	@ (8004020 <HAL_RCC_OscConfig+0x784>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f2a:	3a01      	subs	r2, #1
 8003f2c:	0112      	lsls	r2, r2, #4
 8003f2e:	4311      	orrs	r1, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f34:	0212      	lsls	r2, r2, #8
 8003f36:	4311      	orrs	r1, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f3c:	0852      	lsrs	r2, r2, #1
 8003f3e:	3a01      	subs	r2, #1
 8003f40:	0552      	lsls	r2, r2, #21
 8003f42:	4311      	orrs	r1, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f48:	0852      	lsrs	r2, r2, #1
 8003f4a:	3a01      	subs	r2, #1
 8003f4c:	0652      	lsls	r2, r2, #25
 8003f4e:	4311      	orrs	r1, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f54:	0912      	lsrs	r2, r2, #4
 8003f56:	0452      	lsls	r2, r2, #17
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	4930      	ldr	r1, [pc, #192]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f60:	4b2e      	ldr	r3, [pc, #184]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2d      	ldr	r2, [pc, #180]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f78:	f7fd fcce 	bl	8001918 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fd fcca 	bl	8001918 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e058      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f92:	4b22      	ldr	r3, [pc, #136]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f9e:	e050      	b.n	8004042 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e04f      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d148      	bne.n	8004042 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a19      	ldr	r2, [pc, #100]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fbc:	4b17      	ldr	r3, [pc, #92]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a16      	ldr	r2, [pc, #88]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fc8:	f7fd fca6 	bl	8001918 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd fca2 	bl	8001918 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e030      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x734>
 8003fee:	e028      	b.n	8004042 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d023      	beq.n	800403e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff6:	4b09      	ldr	r3, [pc, #36]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a08      	ldr	r2, [pc, #32]	@ (800401c <HAL_RCC_OscConfig+0x780>)
 8003ffc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd fc89 	bl	8001918 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004008:	e00c      	b.n	8004024 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400a:	f7fd fc85 	bl	8001918 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d905      	bls.n	8004024 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e013      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
 800401c:	40021000 	.word	0x40021000
 8004020:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004024:	4b09      	ldr	r3, [pc, #36]	@ (800404c <HAL_RCC_OscConfig+0x7b0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ec      	bne.n	800400a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004030:	4b06      	ldr	r3, [pc, #24]	@ (800404c <HAL_RCC_OscConfig+0x7b0>)
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	4905      	ldr	r1, [pc, #20]	@ (800404c <HAL_RCC_OscConfig+0x7b0>)
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_RCC_OscConfig+0x7b4>)
 8004038:	4013      	ands	r3, r2
 800403a:	60cb      	str	r3, [r1, #12]
 800403c:	e001      	b.n	8004042 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000
 8004050:	feeefffc 	.word	0xfeeefffc

08004054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0e7      	b.n	8004238 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b75      	ldr	r3, [pc, #468]	@ (8004240 <HAL_RCC_ClockConfig+0x1ec>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d910      	bls.n	8004098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b72      	ldr	r3, [pc, #456]	@ (8004240 <HAL_RCC_ClockConfig+0x1ec>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 0207 	bic.w	r2, r3, #7
 800407e:	4970      	ldr	r1, [pc, #448]	@ (8004240 <HAL_RCC_ClockConfig+0x1ec>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b6e      	ldr	r3, [pc, #440]	@ (8004240 <HAL_RCC_ClockConfig+0x1ec>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0cf      	b.n	8004238 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d010      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	4b66      	ldr	r3, [pc, #408]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d908      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b4:	4b63      	ldr	r3, [pc, #396]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4960      	ldr	r1, [pc, #384]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d04c      	beq.n	800416c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040da:	4b5a      	ldr	r3, [pc, #360]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d121      	bne.n	800412a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0a6      	b.n	8004238 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f2:	4b54      	ldr	r3, [pc, #336]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d115      	bne.n	800412a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e09a      	b.n	8004238 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800410a:	4b4e      	ldr	r3, [pc, #312]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e08e      	b.n	8004238 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800411a:	4b4a      	ldr	r3, [pc, #296]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e086      	b.n	8004238 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800412a:	4b46      	ldr	r3, [pc, #280]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 0203 	bic.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4943      	ldr	r1, [pc, #268]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413c:	f7fd fbec 	bl	8001918 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	e00a      	b.n	800415a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7fd fbe8 	bl	8001918 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e06e      	b.n	8004238 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	4b3a      	ldr	r3, [pc, #232]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 020c 	and.w	r2, r3, #12
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	429a      	cmp	r2, r3
 800416a:	d1eb      	bne.n	8004144 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d010      	beq.n	800419a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	4b31      	ldr	r3, [pc, #196]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004184:	429a      	cmp	r2, r3
 8004186:	d208      	bcs.n	800419a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004188:	4b2e      	ldr	r3, [pc, #184]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	492b      	ldr	r1, [pc, #172]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800419a:	4b29      	ldr	r3, [pc, #164]	@ (8004240 <HAL_RCC_ClockConfig+0x1ec>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d210      	bcs.n	80041ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a8:	4b25      	ldr	r3, [pc, #148]	@ (8004240 <HAL_RCC_ClockConfig+0x1ec>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 0207 	bic.w	r2, r3, #7
 80041b0:	4923      	ldr	r1, [pc, #140]	@ (8004240 <HAL_RCC_ClockConfig+0x1ec>)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b8:	4b21      	ldr	r3, [pc, #132]	@ (8004240 <HAL_RCC_ClockConfig+0x1ec>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d001      	beq.n	80041ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e036      	b.n	8004238 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	4918      	ldr	r1, [pc, #96]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f4:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4910      	ldr	r1, [pc, #64]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004208:	f000 f824 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	490b      	ldr	r1, [pc, #44]	@ (8004248 <HAL_RCC_ClockConfig+0x1f4>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
 8004224:	4a09      	ldr	r2, [pc, #36]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004226:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004228:	4b09      	ldr	r3, [pc, #36]	@ (8004250 <HAL_RCC_ClockConfig+0x1fc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7fd fb23 	bl	8001878 <HAL_InitTick>
 8004232:	4603      	mov	r3, r0
 8004234:	72fb      	strb	r3, [r7, #11]

  return status;
 8004236:	7afb      	ldrb	r3, [r7, #11]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40022000 	.word	0x40022000
 8004244:	40021000 	.word	0x40021000
 8004248:	0800b29c 	.word	0x0800b29c
 800424c:	20000084 	.word	0x20000084
 8004250:	20000088 	.word	0x20000088

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	@ 0x24
 8004258:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004262:	4b3e      	ldr	r3, [pc, #248]	@ (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800426c:	4b3b      	ldr	r3, [pc, #236]	@ (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x34>
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d121      	bne.n	80042c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d11e      	bne.n	80042c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004288:	4b34      	ldr	r3, [pc, #208]	@ (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004294:	4b31      	ldr	r3, [pc, #196]	@ (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	e005      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042a4:	4b2d      	ldr	r3, [pc, #180]	@ (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d102      	bne.n	80042d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042cc:	4b25      	ldr	r3, [pc, #148]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x110>)
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	e004      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042d8:	4b22      	ldr	r3, [pc, #136]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x110>)
 80042da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	d134      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042e2:	4b1e      	ldr	r3, [pc, #120]	@ (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d003      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0xa6>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d003      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0xac>
 80042f8:	e005      	b.n	8004306 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x110>)
 80042fc:	617b      	str	r3, [r7, #20]
      break;
 80042fe:	e005      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004300:	4b18      	ldr	r3, [pc, #96]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x110>)
 8004302:	617b      	str	r3, [r7, #20]
      break;
 8004304:	e002      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	617b      	str	r3, [r7, #20]
      break;
 800430a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800430c:	4b13      	ldr	r3, [pc, #76]	@ (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	3301      	adds	r3, #1
 8004318:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800431a:	4b10      	ldr	r3, [pc, #64]	@ (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	fb03 f202 	mul.w	r2, r3, r2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	0e5b      	lsrs	r3, r3, #25
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	3301      	adds	r3, #1
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800434c:	69bb      	ldr	r3, [r7, #24]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3724      	adds	r7, #36	@ 0x24
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	0800b2b4 	.word	0x0800b2b4
 8004364:	00f42400 	.word	0x00f42400

08004368 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800436c:	4b03      	ldr	r3, [pc, #12]	@ (800437c <HAL_RCC_GetHCLKFreq+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000084 	.word	0x20000084

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004384:	f7ff fff0 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4904      	ldr	r1, [pc, #16]	@ (80043a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000
 80043a8:	0800b2ac 	.word	0x0800b2ac

080043ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043b0:	f7ff ffda 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b06      	ldr	r3, [pc, #24]	@ (80043d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0adb      	lsrs	r3, r3, #11
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4904      	ldr	r1, [pc, #16]	@ (80043d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	0800b2ac 	.word	0x0800b2ac

080043d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043f0:	f7ff f9e0 	bl	80037b4 <HAL_PWREx_GetVoltageRange>
 80043f4:	6178      	str	r0, [r7, #20]
 80043f6:	e014      	b.n	8004422 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	4b25      	ldr	r3, [pc, #148]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	4a24      	ldr	r2, [pc, #144]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004402:	6593      	str	r3, [r2, #88]	@ 0x58
 8004404:	4b22      	ldr	r3, [pc, #136]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004410:	f7ff f9d0 	bl	80037b4 <HAL_PWREx_GetVoltageRange>
 8004414:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004416:	4b1e      	ldr	r3, [pc, #120]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441a:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004420:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004428:	d10b      	bne.n	8004442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b80      	cmp	r3, #128	@ 0x80
 800442e:	d919      	bls.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2ba0      	cmp	r3, #160	@ 0xa0
 8004434:	d902      	bls.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004436:	2302      	movs	r3, #2
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	e013      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800443c:	2301      	movs	r3, #1
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	e010      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b80      	cmp	r3, #128	@ 0x80
 8004446:	d902      	bls.n	800444e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004448:	2303      	movs	r3, #3
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e00a      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b80      	cmp	r3, #128	@ 0x80
 8004452:	d102      	bne.n	800445a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004454:	2302      	movs	r3, #2
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e004      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b70      	cmp	r3, #112	@ 0x70
 800445e:	d101      	bne.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004460:	2301      	movs	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004464:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 0207 	bic.w	r2, r3, #7
 800446c:	4909      	ldr	r1, [pc, #36]	@ (8004494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004474:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	40022000 	.word	0x40022000

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044a0:	2300      	movs	r3, #0
 80044a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044a4:	2300      	movs	r3, #0
 80044a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d041      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044bc:	d02a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044c2:	d824      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044c8:	d008      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044ce:	d81e      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d8:	d010      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044da:	e018      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044dc:	4b86      	ldr	r3, [pc, #536]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a85      	ldr	r2, [pc, #532]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044e8:	e015      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fabb 	bl	8004a6c <RCCEx_PLLSAI1_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044fa:	e00c      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3320      	adds	r3, #32
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fba6 	bl	8004c54 <RCCEx_PLLSAI2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800450c:	e003      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	74fb      	strb	r3, [r7, #19]
      break;
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800451c:	4b76      	ldr	r3, [pc, #472]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800452a:	4973      	ldr	r1, [pc, #460]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004532:	e001      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d041      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004548:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800454c:	d02a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800454e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004552:	d824      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004554:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004558:	d008      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800455a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800455e:	d81e      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004568:	d010      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800456a:	e018      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800456c:	4b62      	ldr	r3, [pc, #392]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a61      	ldr	r2, [pc, #388]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004576:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004578:	e015      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fa73 	bl	8004a6c <RCCEx_PLLSAI1_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800458a:	e00c      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3320      	adds	r3, #32
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fb5e 	bl	8004c54 <RCCEx_PLLSAI2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800459c:	e003      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	74fb      	strb	r3, [r7, #19]
      break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a6:	7cfb      	ldrb	r3, [r7, #19]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045ac:	4b52      	ldr	r3, [pc, #328]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ba:	494f      	ldr	r1, [pc, #316]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045c2:	e001      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80a0 	beq.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045da:	4b47      	ldr	r3, [pc, #284]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f0:	4b41      	ldr	r3, [pc, #260]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f4:	4a40      	ldr	r2, [pc, #256]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80045fc:	4b3e      	ldr	r3, [pc, #248]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004608:	2301      	movs	r3, #1
 800460a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800460c:	4b3b      	ldr	r3, [pc, #236]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a3a      	ldr	r2, [pc, #232]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004618:	f7fd f97e 	bl	8001918 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800461e:	e009      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004620:	f7fd f97a 	bl	8001918 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	74fb      	strb	r3, [r7, #19]
        break;
 8004632:	e005      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004634:	4b31      	ldr	r3, [pc, #196]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ef      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d15c      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004646:	4b2c      	ldr	r3, [pc, #176]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004650:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01f      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	429a      	cmp	r2, r3
 8004662:	d019      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004664:	4b24      	ldr	r3, [pc, #144]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004670:	4b21      	ldr	r3, [pc, #132]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004676:	4a20      	ldr	r2, [pc, #128]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004680:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	4a1c      	ldr	r2, [pc, #112]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004690:	4a19      	ldr	r2, [pc, #100]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fd f939 	bl	8001918 <HAL_GetTick>
 80046a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a8:	e00b      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fd f935 	bl	8001918 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d902      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	74fb      	strb	r3, [r7, #19]
            break;
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c2:	4b0d      	ldr	r3, [pc, #52]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ec      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d6:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e6:	4904      	ldr	r1, [pc, #16]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046ee:	e009      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
 80046f4:	e006      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004704:	7c7b      	ldrb	r3, [r7, #17]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470a:	4b9e      	ldr	r3, [pc, #632]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470e:	4a9d      	ldr	r2, [pc, #628]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004714:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004722:	4b98      	ldr	r3, [pc, #608]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004728:	f023 0203 	bic.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	4994      	ldr	r1, [pc, #592]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004744:	4b8f      	ldr	r3, [pc, #572]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474a:	f023 020c 	bic.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004752:	498c      	ldr	r1, [pc, #560]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004766:	4b87      	ldr	r3, [pc, #540]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	4983      	ldr	r1, [pc, #524]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004788:	4b7e      	ldr	r3, [pc, #504]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	497b      	ldr	r1, [pc, #492]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047aa:	4b76      	ldr	r3, [pc, #472]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b8:	4972      	ldr	r1, [pc, #456]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047cc:	4b6d      	ldr	r3, [pc, #436]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047da:	496a      	ldr	r1, [pc, #424]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ee:	4b65      	ldr	r3, [pc, #404]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	4961      	ldr	r1, [pc, #388]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004810:	4b5c      	ldr	r3, [pc, #368]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004816:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	4959      	ldr	r1, [pc, #356]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004832:	4b54      	ldr	r3, [pc, #336]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004840:	4950      	ldr	r1, [pc, #320]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004854:	4b4b      	ldr	r3, [pc, #300]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004862:	4948      	ldr	r1, [pc, #288]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004876:	4b43      	ldr	r3, [pc, #268]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004884:	493f      	ldr	r1, [pc, #252]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d028      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004898:	4b3a      	ldr	r3, [pc, #232]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a6:	4937      	ldr	r1, [pc, #220]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048b6:	d106      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b8:	4b32      	ldr	r3, [pc, #200]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a31      	ldr	r2, [pc, #196]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048c2:	60d3      	str	r3, [r2, #12]
 80048c4:	e011      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048ce:	d10c      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	2101      	movs	r1, #1
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f8c8 	bl	8004a6c <RCCEx_PLLSAI1_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d028      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048f6:	4b23      	ldr	r3, [pc, #140]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004904:	491f      	ldr	r1, [pc, #124]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004914:	d106      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004916:	4b1b      	ldr	r3, [pc, #108]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	4a1a      	ldr	r2, [pc, #104]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004920:	60d3      	str	r3, [r2, #12]
 8004922:	e011      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800492c:	d10c      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3304      	adds	r3, #4
 8004932:	2101      	movs	r1, #1
 8004934:	4618      	mov	r0, r3
 8004936:	f000 f899 	bl	8004a6c <RCCEx_PLLSAI1_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d02b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004954:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004962:	4908      	ldr	r1, [pc, #32]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004972:	d109      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004974:	4b03      	ldr	r3, [pc, #12]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a02      	ldr	r2, [pc, #8]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800497e:	60d3      	str	r3, [r2, #12]
 8004980:	e014      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004990:	d10c      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3304      	adds	r3, #4
 8004996:	2101      	movs	r1, #1
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f867 	bl	8004a6c <RCCEx_PLLSAI1_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d02f      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c6:	4928      	ldr	r1, [pc, #160]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049d6:	d10d      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f844 	bl	8004a6c <RCCEx_PLLSAI1_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d014      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	74bb      	strb	r3, [r7, #18]
 80049f2:	e011      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3320      	adds	r3, #32
 8004a02:	2102      	movs	r1, #2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 f925 	bl	8004c54 <RCCEx_PLLSAI2_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a24:	4b10      	ldr	r3, [pc, #64]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a32:	490d      	ldr	r1, [pc, #52]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a46:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a56:	4904      	ldr	r1, [pc, #16]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000

08004a6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a7a:	4b75      	ldr	r3, [pc, #468]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d018      	beq.n	8004ab8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a86:	4b72      	ldr	r3, [pc, #456]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0203 	and.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d10d      	bne.n	8004ab2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
       ||
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
       ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d047      	beq.n	8004b42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
 8004ab6:	e044      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d018      	beq.n	8004af2 <RCCEx_PLLSAI1_Config+0x86>
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d825      	bhi.n	8004b10 <RCCEx_PLLSAI1_Config+0xa4>
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d002      	beq.n	8004ace <RCCEx_PLLSAI1_Config+0x62>
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d009      	beq.n	8004ae0 <RCCEx_PLLSAI1_Config+0x74>
 8004acc:	e020      	b.n	8004b10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ace:	4b60      	ldr	r3, [pc, #384]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11d      	bne.n	8004b16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ade:	e01a      	b.n	8004b16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d116      	bne.n	8004b1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af0:	e013      	b.n	8004b1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004af2:	4b57      	ldr	r3, [pc, #348]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10f      	bne.n	8004b1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004afe:	4b54      	ldr	r3, [pc, #336]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b0e:	e006      	b.n	8004b1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
      break;
 8004b14:	e004      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b16:	bf00      	nop
 8004b18:	e002      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e000      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10d      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b26:	4b4a      	ldr	r3, [pc, #296]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6819      	ldr	r1, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	4944      	ldr	r1, [pc, #272]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d17d      	bne.n	8004c44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b48:	4b41      	ldr	r3, [pc, #260]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a40      	ldr	r2, [pc, #256]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b54:	f7fc fee0 	bl	8001918 <HAL_GetTick>
 8004b58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b5a:	e009      	b.n	8004b70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b5c:	f7fc fedc 	bl	8001918 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d902      	bls.n	8004b70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b6e:	e005      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b70:	4b37      	ldr	r3, [pc, #220]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ef      	bne.n	8004b5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d160      	bne.n	8004c44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d111      	bne.n	8004bac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b88:	4b31      	ldr	r3, [pc, #196]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6892      	ldr	r2, [r2, #8]
 8004b98:	0211      	lsls	r1, r2, #8
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68d2      	ldr	r2, [r2, #12]
 8004b9e:	0912      	lsrs	r2, r2, #4
 8004ba0:	0452      	lsls	r2, r2, #17
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	492a      	ldr	r1, [pc, #168]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	610b      	str	r3, [r1, #16]
 8004baa:	e027      	b.n	8004bfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d112      	bne.n	8004bd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bb2:	4b27      	ldr	r3, [pc, #156]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004bba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6892      	ldr	r2, [r2, #8]
 8004bc2:	0211      	lsls	r1, r2, #8
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6912      	ldr	r2, [r2, #16]
 8004bc8:	0852      	lsrs	r2, r2, #1
 8004bca:	3a01      	subs	r2, #1
 8004bcc:	0552      	lsls	r2, r2, #21
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	491f      	ldr	r1, [pc, #124]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	610b      	str	r3, [r1, #16]
 8004bd6:	e011      	b.n	8004bfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004be0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6892      	ldr	r2, [r2, #8]
 8004be8:	0211      	lsls	r1, r2, #8
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6952      	ldr	r2, [r2, #20]
 8004bee:	0852      	lsrs	r2, r2, #1
 8004bf0:	3a01      	subs	r2, #1
 8004bf2:	0652      	lsls	r2, r2, #25
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	4916      	ldr	r1, [pc, #88]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bfc:	4b14      	ldr	r3, [pc, #80]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a13      	ldr	r2, [pc, #76]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fc fe86 	bl	8001918 <HAL_GetTick>
 8004c0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c0e:	e009      	b.n	8004c24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c10:	f7fc fe82 	bl	8001918 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d902      	bls.n	8004c24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	73fb      	strb	r3, [r7, #15]
          break;
 8004c22:	e005      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c24:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0ef      	beq.n	8004c10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c36:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	4904      	ldr	r1, [pc, #16]	@ (8004c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40021000 	.word	0x40021000

08004c54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c62:	4b6a      	ldr	r3, [pc, #424]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d018      	beq.n	8004ca0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c6e:	4b67      	ldr	r3, [pc, #412]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f003 0203 	and.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d10d      	bne.n	8004c9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
       ||
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c86:	4b61      	ldr	r3, [pc, #388]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
       ||
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d047      	beq.n	8004d2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
 8004c9e:	e044      	b.n	8004d2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d018      	beq.n	8004cda <RCCEx_PLLSAI2_Config+0x86>
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d825      	bhi.n	8004cf8 <RCCEx_PLLSAI2_Config+0xa4>
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d002      	beq.n	8004cb6 <RCCEx_PLLSAI2_Config+0x62>
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d009      	beq.n	8004cc8 <RCCEx_PLLSAI2_Config+0x74>
 8004cb4:	e020      	b.n	8004cf8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cb6:	4b55      	ldr	r3, [pc, #340]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d11d      	bne.n	8004cfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc6:	e01a      	b.n	8004cfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cc8:	4b50      	ldr	r3, [pc, #320]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d116      	bne.n	8004d02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd8:	e013      	b.n	8004d02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cda:	4b4c      	ldr	r3, [pc, #304]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ce6:	4b49      	ldr	r3, [pc, #292]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cf6:	e006      	b.n	8004d06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfc:	e004      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e002      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d02:	bf00      	nop
 8004d04:	e000      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10d      	bne.n	8004d2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	430b      	orrs	r3, r1
 8004d24:	4939      	ldr	r1, [pc, #228]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d167      	bne.n	8004e00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d30:	4b36      	ldr	r3, [pc, #216]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a35      	ldr	r2, [pc, #212]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d3c:	f7fc fdec 	bl	8001918 <HAL_GetTick>
 8004d40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d42:	e009      	b.n	8004d58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d44:	f7fc fde8 	bl	8001918 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d902      	bls.n	8004d58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	73fb      	strb	r3, [r7, #15]
        break;
 8004d56:	e005      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d58:	4b2c      	ldr	r3, [pc, #176]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ef      	bne.n	8004d44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d14a      	bne.n	8004e00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d111      	bne.n	8004d94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d70:	4b26      	ldr	r3, [pc, #152]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6892      	ldr	r2, [r2, #8]
 8004d80:	0211      	lsls	r1, r2, #8
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68d2      	ldr	r2, [r2, #12]
 8004d86:	0912      	lsrs	r2, r2, #4
 8004d88:	0452      	lsls	r2, r2, #17
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	491f      	ldr	r1, [pc, #124]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	614b      	str	r3, [r1, #20]
 8004d92:	e011      	b.n	8004db8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d94:	4b1d      	ldr	r3, [pc, #116]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6892      	ldr	r2, [r2, #8]
 8004da4:	0211      	lsls	r1, r2, #8
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6912      	ldr	r2, [r2, #16]
 8004daa:	0852      	lsrs	r2, r2, #1
 8004dac:	3a01      	subs	r2, #1
 8004dae:	0652      	lsls	r2, r2, #25
 8004db0:	430a      	orrs	r2, r1
 8004db2:	4916      	ldr	r1, [pc, #88]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004db8:	4b14      	ldr	r3, [pc, #80]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a13      	ldr	r2, [pc, #76]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fc fda8 	bl	8001918 <HAL_GetTick>
 8004dc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dca:	e009      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dcc:	f7fc fda4 	bl	8001918 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d902      	bls.n	8004de0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	73fb      	strb	r3, [r7, #15]
          break;
 8004dde:	e005      	b.n	8004dec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004de0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0ef      	beq.n	8004dcc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004df2:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4904      	ldr	r1, [pc, #16]	@ (8004e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000

08004e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e049      	b.n	8004eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc f9a8 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 fd1c 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d001      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e04f      	b.n	8004f78 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a23      	ldr	r2, [pc, #140]	@ (8004f84 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01d      	beq.n	8004f36 <HAL_TIM_Base_Start_IT+0x76>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f02:	d018      	beq.n	8004f36 <HAL_TIM_Base_Start_IT+0x76>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1f      	ldr	r2, [pc, #124]	@ (8004f88 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_TIM_Base_Start_IT+0x76>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1e      	ldr	r2, [pc, #120]	@ (8004f8c <HAL_TIM_Base_Start_IT+0xcc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <HAL_TIM_Base_Start_IT+0x76>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_TIM_Base_Start_IT+0x76>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1b      	ldr	r2, [pc, #108]	@ (8004f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_TIM_Base_Start_IT+0x76>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a19      	ldr	r2, [pc, #100]	@ (8004f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d115      	bne.n	8004f62 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	4b17      	ldr	r3, [pc, #92]	@ (8004f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d015      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0xb4>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4e:	d011      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f60:	e008      	b.n	8004f74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e000      	b.n	8004f76 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	40000800 	.word	0x40000800
 8004f90:	40000c00 	.word	0x40000c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	00010007 	.word	0x00010007

08004fa0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0201 	bic.w	r2, r2, #1
 8004fb6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10f      	bne.n	8004fe8 <HAL_TIM_Base_Stop_IT+0x48>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_Base_Stop_IT+0x48>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e049      	b.n	80050a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f841 	bl	80050ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f000 fc25 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 f883 	bl	80061de <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3e      	ldr	r2, [pc, #248]	@ (80051d8 <HAL_TIM_PWM_Stop+0x118>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_TIM_PWM_Stop+0x4a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a3d      	ldr	r2, [pc, #244]	@ (80051dc <HAL_TIM_PWM_Stop+0x11c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIM_PWM_Stop+0x4a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3b      	ldr	r2, [pc, #236]	@ (80051e0 <HAL_TIM_PWM_Stop+0x120>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIM_PWM_Stop+0x4a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a3a      	ldr	r2, [pc, #232]	@ (80051e4 <HAL_TIM_PWM_Stop+0x124>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIM_PWM_Stop+0x4a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a38      	ldr	r2, [pc, #224]	@ (80051e8 <HAL_TIM_PWM_Stop+0x128>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <HAL_TIM_PWM_Stop+0x4e>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_TIM_PWM_Stop+0x50>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d017      	beq.n	8005144 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6a1a      	ldr	r2, [r3, #32]
 800511a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10f      	bne.n	8005144 <HAL_TIM_PWM_Stop+0x84>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	f240 4344 	movw	r3, #1092	@ 0x444
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_TIM_PWM_Stop+0x84>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005142:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6a1a      	ldr	r2, [r3, #32]
 800514a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10f      	bne.n	8005174 <HAL_TIM_PWM_Stop+0xb4>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	f240 4344 	movw	r3, #1092	@ 0x444
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d107      	bne.n	8005174 <HAL_TIM_PWM_Stop+0xb4>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <HAL_TIM_PWM_Stop+0xc4>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005182:	e023      	b.n	80051cc <HAL_TIM_PWM_Stop+0x10c>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b04      	cmp	r3, #4
 8005188:	d104      	bne.n	8005194 <HAL_TIM_PWM_Stop+0xd4>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005192:	e01b      	b.n	80051cc <HAL_TIM_PWM_Stop+0x10c>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b08      	cmp	r3, #8
 8005198:	d104      	bne.n	80051a4 <HAL_TIM_PWM_Stop+0xe4>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a2:	e013      	b.n	80051cc <HAL_TIM_PWM_Stop+0x10c>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b0c      	cmp	r3, #12
 80051a8:	d104      	bne.n	80051b4 <HAL_TIM_PWM_Stop+0xf4>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b2:	e00b      	b.n	80051cc <HAL_TIM_PWM_Stop+0x10c>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b10      	cmp	r3, #16
 80051b8:	d104      	bne.n	80051c4 <HAL_TIM_PWM_Stop+0x104>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c2:	e003      	b.n	80051cc <HAL_TIM_PWM_Stop+0x10c>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40013400 	.word	0x40013400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800

080051ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d020      	beq.n	8005250 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01b      	beq.n	8005250 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0202 	mvn.w	r2, #2
 8005220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fb09 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 800523c:	e005      	b.n	800524a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fafb 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fb0c 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d020      	beq.n	800529c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01b      	beq.n	800529c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0204 	mvn.w	r2, #4
 800526c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fae3 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fad5 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fae6 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d020      	beq.n	80052e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01b      	beq.n	80052e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0208 	mvn.w	r2, #8
 80052b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2204      	movs	r2, #4
 80052be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fabd 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 faaf 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fac0 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d020      	beq.n	8005334 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01b      	beq.n	8005334 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0210 	mvn.w	r2, #16
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2208      	movs	r2, #8
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fa97 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fa89 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fa9a 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0201 	mvn.w	r2, #1
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc fa0a 	bl	800176c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00c      	beq.n	8005386 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f001 f979 	bl	8006678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00c      	beq.n	80053aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 f971 	bl	800668c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00c      	beq.n	80053ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fa54 	bl	8005876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f06f 0220 	mvn.w	r2, #32
 80053ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 f939 	bl	8006664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005416:	2302      	movs	r3, #2
 8005418:	e0ff      	b.n	800561a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b14      	cmp	r3, #20
 8005426:	f200 80f0 	bhi.w	800560a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800542a:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005485 	.word	0x08005485
 8005434:	0800560b 	.word	0x0800560b
 8005438:	0800560b 	.word	0x0800560b
 800543c:	0800560b 	.word	0x0800560b
 8005440:	080054c5 	.word	0x080054c5
 8005444:	0800560b 	.word	0x0800560b
 8005448:	0800560b 	.word	0x0800560b
 800544c:	0800560b 	.word	0x0800560b
 8005450:	08005507 	.word	0x08005507
 8005454:	0800560b 	.word	0x0800560b
 8005458:	0800560b 	.word	0x0800560b
 800545c:	0800560b 	.word	0x0800560b
 8005460:	08005547 	.word	0x08005547
 8005464:	0800560b 	.word	0x0800560b
 8005468:	0800560b 	.word	0x0800560b
 800546c:	0800560b 	.word	0x0800560b
 8005470:	08005589 	.word	0x08005589
 8005474:	0800560b 	.word	0x0800560b
 8005478:	0800560b 	.word	0x0800560b
 800547c:	0800560b 	.word	0x0800560b
 8005480:	080055c9 	.word	0x080055c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 faa4 	bl	80059d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0208 	orr.w	r2, r2, #8
 800549e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0204 	bic.w	r2, r2, #4
 80054ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6999      	ldr	r1, [r3, #24]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	619a      	str	r2, [r3, #24]
      break;
 80054c2:	e0a5      	b.n	8005610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fb14 	bl	8005af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6999      	ldr	r1, [r3, #24]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	021a      	lsls	r2, r3, #8
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	619a      	str	r2, [r3, #24]
      break;
 8005504:	e084      	b.n	8005610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fb7d 	bl	8005c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0208 	orr.w	r2, r2, #8
 8005520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0204 	bic.w	r2, r2, #4
 8005530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69d9      	ldr	r1, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	61da      	str	r2, [r3, #28]
      break;
 8005544:	e064      	b.n	8005610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fbe5 	bl	8005d1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69d9      	ldr	r1, [r3, #28]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	021a      	lsls	r2, r3, #8
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	61da      	str	r2, [r3, #28]
      break;
 8005586:	e043      	b.n	8005610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fc2e 	bl	8005df0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0208 	orr.w	r2, r2, #8
 80055a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0204 	bic.w	r2, r2, #4
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055c6:	e023      	b.n	8005610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fc72 	bl	8005eb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005608:	e002      	b.n	8005610 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	75fb      	strb	r3, [r7, #23]
      break;
 800560e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005618:	7dfb      	ldrb	r3, [r7, #23]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop

08005624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_TIM_ConfigClockSource+0x1c>
 800563c:	2302      	movs	r3, #2
 800563e:	e0b6      	b.n	80057ae <HAL_TIM_ConfigClockSource+0x18a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800565e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800566a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800567c:	d03e      	beq.n	80056fc <HAL_TIM_ConfigClockSource+0xd8>
 800567e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005682:	f200 8087 	bhi.w	8005794 <HAL_TIM_ConfigClockSource+0x170>
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800568a:	f000 8086 	beq.w	800579a <HAL_TIM_ConfigClockSource+0x176>
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005692:	d87f      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x170>
 8005694:	2b70      	cmp	r3, #112	@ 0x70
 8005696:	d01a      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0xaa>
 8005698:	2b70      	cmp	r3, #112	@ 0x70
 800569a:	d87b      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x170>
 800569c:	2b60      	cmp	r3, #96	@ 0x60
 800569e:	d050      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x11e>
 80056a0:	2b60      	cmp	r3, #96	@ 0x60
 80056a2:	d877      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x170>
 80056a4:	2b50      	cmp	r3, #80	@ 0x50
 80056a6:	d03c      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0xfe>
 80056a8:	2b50      	cmp	r3, #80	@ 0x50
 80056aa:	d873      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x170>
 80056ac:	2b40      	cmp	r3, #64	@ 0x40
 80056ae:	d058      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x13e>
 80056b0:	2b40      	cmp	r3, #64	@ 0x40
 80056b2:	d86f      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x170>
 80056b4:	2b30      	cmp	r3, #48	@ 0x30
 80056b6:	d064      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x15e>
 80056b8:	2b30      	cmp	r3, #48	@ 0x30
 80056ba:	d86b      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x170>
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d060      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x15e>
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d867      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x170>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d05c      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x15e>
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d05a      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x15e>
 80056cc:	e062      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056de:	f000 fd5e 	bl	800619e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	609a      	str	r2, [r3, #8]
      break;
 80056fa:	e04f      	b.n	800579c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800570c:	f000 fd47 	bl	800619e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800571e:	609a      	str	r2, [r3, #8]
      break;
 8005720:	e03c      	b.n	800579c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800572e:	461a      	mov	r2, r3
 8005730:	f000 fcbb 	bl	80060aa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2150      	movs	r1, #80	@ 0x50
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fd14 	bl	8006168 <TIM_ITRx_SetConfig>
      break;
 8005740:	e02c      	b.n	800579c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800574e:	461a      	mov	r2, r3
 8005750:	f000 fcda 	bl	8006108 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2160      	movs	r1, #96	@ 0x60
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fd04 	bl	8006168 <TIM_ITRx_SetConfig>
      break;
 8005760:	e01c      	b.n	800579c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800576e:	461a      	mov	r2, r3
 8005770:	f000 fc9b 	bl	80060aa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2140      	movs	r1, #64	@ 0x40
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fcf4 	bl	8006168 <TIM_ITRx_SetConfig>
      break;
 8005780:	e00c      	b.n	800579c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f000 fceb 	bl	8006168 <TIM_ITRx_SetConfig>
      break;
 8005792:	e003      	b.n	800579c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      break;
 8005798:	e000      	b.n	800579c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800579a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_TIM_SlaveConfigSynchro+0x18>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e031      	b.n	8005832 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fbcf 	bl	8005f84 <TIM_SlaveTimer_SetConfig>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d009      	beq.n	8005800 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e018      	b.n	8005832 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800580e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800581e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a46      	ldr	r2, [pc, #280]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058aa:	d00f      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a43      	ldr	r2, [pc, #268]	@ (80059bc <TIM_Base_SetConfig+0x130>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a42      	ldr	r2, [pc, #264]	@ (80059c0 <TIM_Base_SetConfig+0x134>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a41      	ldr	r2, [pc, #260]	@ (80059c4 <TIM_Base_SetConfig+0x138>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a40      	ldr	r2, [pc, #256]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a35      	ldr	r2, [pc, #212]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01f      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ec:	d01b      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a32      	ldr	r2, [pc, #200]	@ (80059bc <TIM_Base_SetConfig+0x130>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d017      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a31      	ldr	r2, [pc, #196]	@ (80059c0 <TIM_Base_SetConfig+0x134>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a30      	ldr	r2, [pc, #192]	@ (80059c4 <TIM_Base_SetConfig+0x138>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00f      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2f      	ldr	r2, [pc, #188]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00b      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2e      	ldr	r2, [pc, #184]	@ (80059cc <TIM_Base_SetConfig+0x140>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2d      	ldr	r2, [pc, #180]	@ (80059d0 <TIM_Base_SetConfig+0x144>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a2c      	ldr	r2, [pc, #176]	@ (80059d4 <TIM_Base_SetConfig+0x148>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d108      	bne.n	8005938 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800592c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a16      	ldr	r2, [pc, #88]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00f      	beq.n	8005984 <TIM_Base_SetConfig+0xf8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a18      	ldr	r2, [pc, #96]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0xf8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <TIM_Base_SetConfig+0x140>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0xf8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a16      	ldr	r2, [pc, #88]	@ (80059d0 <TIM_Base_SetConfig+0x144>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0xf8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a15      	ldr	r2, [pc, #84]	@ (80059d4 <TIM_Base_SetConfig+0x148>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d103      	bne.n	800598c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d105      	bne.n	80059aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f023 0201 	bic.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	611a      	str	r2, [r3, #16]
  }
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	40013400 	.word	0x40013400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40014400 	.word	0x40014400
 80059d4:	40014800 	.word	0x40014800

080059d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	f023 0201 	bic.w	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f023 0302 	bic.w	r3, r3, #2
 8005a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae4 <TIM_OC1_SetConfig+0x10c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00f      	beq.n	8005a58 <TIM_OC1_SetConfig+0x80>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ae8 <TIM_OC1_SetConfig+0x110>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00b      	beq.n	8005a58 <TIM_OC1_SetConfig+0x80>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a2a      	ldr	r2, [pc, #168]	@ (8005aec <TIM_OC1_SetConfig+0x114>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d007      	beq.n	8005a58 <TIM_OC1_SetConfig+0x80>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a29      	ldr	r2, [pc, #164]	@ (8005af0 <TIM_OC1_SetConfig+0x118>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d003      	beq.n	8005a58 <TIM_OC1_SetConfig+0x80>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a28      	ldr	r2, [pc, #160]	@ (8005af4 <TIM_OC1_SetConfig+0x11c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d10c      	bne.n	8005a72 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f023 0308 	bic.w	r3, r3, #8
 8005a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f023 0304 	bic.w	r3, r3, #4
 8005a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae4 <TIM_OC1_SetConfig+0x10c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00f      	beq.n	8005a9a <TIM_OC1_SetConfig+0xc2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae8 <TIM_OC1_SetConfig+0x110>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00b      	beq.n	8005a9a <TIM_OC1_SetConfig+0xc2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a19      	ldr	r2, [pc, #100]	@ (8005aec <TIM_OC1_SetConfig+0x114>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d007      	beq.n	8005a9a <TIM_OC1_SetConfig+0xc2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a18      	ldr	r2, [pc, #96]	@ (8005af0 <TIM_OC1_SetConfig+0x118>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d003      	beq.n	8005a9a <TIM_OC1_SetConfig+0xc2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a17      	ldr	r2, [pc, #92]	@ (8005af4 <TIM_OC1_SetConfig+0x11c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d111      	bne.n	8005abe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	621a      	str	r2, [r3, #32]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800

08005af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f023 0210 	bic.w	r2, r3, #16
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0320 	bic.w	r3, r3, #32
 8005b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a28      	ldr	r2, [pc, #160]	@ (8005bf8 <TIM_OC2_SetConfig+0x100>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_OC2_SetConfig+0x6c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a27      	ldr	r2, [pc, #156]	@ (8005bfc <TIM_OC2_SetConfig+0x104>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10d      	bne.n	8005b80 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf8 <TIM_OC2_SetConfig+0x100>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00f      	beq.n	8005ba8 <TIM_OC2_SetConfig+0xb0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bfc <TIM_OC2_SetConfig+0x104>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <TIM_OC2_SetConfig+0xb0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1b      	ldr	r2, [pc, #108]	@ (8005c00 <TIM_OC2_SetConfig+0x108>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_OC2_SetConfig+0xb0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8005c04 <TIM_OC2_SetConfig+0x10c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC2_SetConfig+0xb0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a19      	ldr	r2, [pc, #100]	@ (8005c08 <TIM_OC2_SetConfig+0x110>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d113      	bne.n	8005bd0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40012c00 	.word	0x40012c00
 8005bfc:	40013400 	.word	0x40013400
 8005c00:	40014000 	.word	0x40014000
 8005c04:	40014400 	.word	0x40014400
 8005c08:	40014800 	.word	0x40014800

08005c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a27      	ldr	r2, [pc, #156]	@ (8005d08 <TIM_OC3_SetConfig+0xfc>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_OC3_SetConfig+0x6a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a26      	ldr	r2, [pc, #152]	@ (8005d0c <TIM_OC3_SetConfig+0x100>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d10d      	bne.n	8005c92 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1c      	ldr	r2, [pc, #112]	@ (8005d08 <TIM_OC3_SetConfig+0xfc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00f      	beq.n	8005cba <TIM_OC3_SetConfig+0xae>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d0c <TIM_OC3_SetConfig+0x100>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00b      	beq.n	8005cba <TIM_OC3_SetConfig+0xae>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d10 <TIM_OC3_SetConfig+0x104>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d007      	beq.n	8005cba <TIM_OC3_SetConfig+0xae>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a19      	ldr	r2, [pc, #100]	@ (8005d14 <TIM_OC3_SetConfig+0x108>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d003      	beq.n	8005cba <TIM_OC3_SetConfig+0xae>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a18      	ldr	r2, [pc, #96]	@ (8005d18 <TIM_OC3_SetConfig+0x10c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d113      	bne.n	8005ce2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	621a      	str	r2, [r3, #32]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40013400 	.word	0x40013400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40014400 	.word	0x40014400
 8005d18:	40014800 	.word	0x40014800

08005d1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	031b      	lsls	r3, r3, #12
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a18      	ldr	r2, [pc, #96]	@ (8005ddc <TIM_OC4_SetConfig+0xc0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00f      	beq.n	8005da0 <TIM_OC4_SetConfig+0x84>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a17      	ldr	r2, [pc, #92]	@ (8005de0 <TIM_OC4_SetConfig+0xc4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_OC4_SetConfig+0x84>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a16      	ldr	r2, [pc, #88]	@ (8005de4 <TIM_OC4_SetConfig+0xc8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_OC4_SetConfig+0x84>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a15      	ldr	r2, [pc, #84]	@ (8005de8 <TIM_OC4_SetConfig+0xcc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_OC4_SetConfig+0x84>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a14      	ldr	r2, [pc, #80]	@ (8005dec <TIM_OC4_SetConfig+0xd0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d109      	bne.n	8005db4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	019b      	lsls	r3, r3, #6
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40013400 	.word	0x40013400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800

08005df0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	041b      	lsls	r3, r3, #16
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a17      	ldr	r2, [pc, #92]	@ (8005ea4 <TIM_OC5_SetConfig+0xb4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00f      	beq.n	8005e6a <TIM_OC5_SetConfig+0x7a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a16      	ldr	r2, [pc, #88]	@ (8005ea8 <TIM_OC5_SetConfig+0xb8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00b      	beq.n	8005e6a <TIM_OC5_SetConfig+0x7a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a15      	ldr	r2, [pc, #84]	@ (8005eac <TIM_OC5_SetConfig+0xbc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d007      	beq.n	8005e6a <TIM_OC5_SetConfig+0x7a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a14      	ldr	r2, [pc, #80]	@ (8005eb0 <TIM_OC5_SetConfig+0xc0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d003      	beq.n	8005e6a <TIM_OC5_SetConfig+0x7a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a13      	ldr	r2, [pc, #76]	@ (8005eb4 <TIM_OC5_SetConfig+0xc4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d109      	bne.n	8005e7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	621a      	str	r2, [r3, #32]
}
 8005e98:	bf00      	nop
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40013400 	.word	0x40013400
 8005eac:	40014000 	.word	0x40014000
 8005eb0:	40014400 	.word	0x40014400
 8005eb4:	40014800 	.word	0x40014800

08005eb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	051b      	lsls	r3, r3, #20
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a18      	ldr	r2, [pc, #96]	@ (8005f70 <TIM_OC6_SetConfig+0xb8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00f      	beq.n	8005f34 <TIM_OC6_SetConfig+0x7c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a17      	ldr	r2, [pc, #92]	@ (8005f74 <TIM_OC6_SetConfig+0xbc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00b      	beq.n	8005f34 <TIM_OC6_SetConfig+0x7c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a16      	ldr	r2, [pc, #88]	@ (8005f78 <TIM_OC6_SetConfig+0xc0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d007      	beq.n	8005f34 <TIM_OC6_SetConfig+0x7c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a15      	ldr	r2, [pc, #84]	@ (8005f7c <TIM_OC6_SetConfig+0xc4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <TIM_OC6_SetConfig+0x7c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a14      	ldr	r2, [pc, #80]	@ (8005f80 <TIM_OC6_SetConfig+0xc8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d109      	bne.n	8005f48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	029b      	lsls	r3, r3, #10
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	621a      	str	r2, [r3, #32]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800

08005f84 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b70      	cmp	r3, #112	@ 0x70
 8005fd0:	d01a      	beq.n	8006008 <TIM_SlaveTimer_SetConfig+0x84>
 8005fd2:	2b70      	cmp	r3, #112	@ 0x70
 8005fd4:	d860      	bhi.n	8006098 <TIM_SlaveTimer_SetConfig+0x114>
 8005fd6:	2b60      	cmp	r3, #96	@ 0x60
 8005fd8:	d054      	beq.n	8006084 <TIM_SlaveTimer_SetConfig+0x100>
 8005fda:	2b60      	cmp	r3, #96	@ 0x60
 8005fdc:	d85c      	bhi.n	8006098 <TIM_SlaveTimer_SetConfig+0x114>
 8005fde:	2b50      	cmp	r3, #80	@ 0x50
 8005fe0:	d046      	beq.n	8006070 <TIM_SlaveTimer_SetConfig+0xec>
 8005fe2:	2b50      	cmp	r3, #80	@ 0x50
 8005fe4:	d858      	bhi.n	8006098 <TIM_SlaveTimer_SetConfig+0x114>
 8005fe6:	2b40      	cmp	r3, #64	@ 0x40
 8005fe8:	d019      	beq.n	800601e <TIM_SlaveTimer_SetConfig+0x9a>
 8005fea:	2b40      	cmp	r3, #64	@ 0x40
 8005fec:	d854      	bhi.n	8006098 <TIM_SlaveTimer_SetConfig+0x114>
 8005fee:	2b30      	cmp	r3, #48	@ 0x30
 8005ff0:	d055      	beq.n	800609e <TIM_SlaveTimer_SetConfig+0x11a>
 8005ff2:	2b30      	cmp	r3, #48	@ 0x30
 8005ff4:	d850      	bhi.n	8006098 <TIM_SlaveTimer_SetConfig+0x114>
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d051      	beq.n	800609e <TIM_SlaveTimer_SetConfig+0x11a>
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d84c      	bhi.n	8006098 <TIM_SlaveTimer_SetConfig+0x114>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04d      	beq.n	800609e <TIM_SlaveTimer_SetConfig+0x11a>
 8006002:	2b10      	cmp	r3, #16
 8006004:	d04b      	beq.n	800609e <TIM_SlaveTimer_SetConfig+0x11a>
 8006006:	e047      	b.n	8006098 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006018:	f000 f8c1 	bl	800619e <TIM_ETR_SetConfig>
      break;
 800601c:	e040      	b.n	80060a0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b05      	cmp	r3, #5
 8006024:	d101      	bne.n	800602a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e03b      	b.n	80060a2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6a1a      	ldr	r2, [r3, #32]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0201 	bic.w	r2, r2, #1
 8006040:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006050:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	4313      	orrs	r3, r2
 800605c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	621a      	str	r2, [r3, #32]
      break;
 800606e:	e017      	b.n	80060a0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607c:	461a      	mov	r2, r3
 800607e:	f000 f814 	bl	80060aa <TIM_TI1_ConfigInputStage>
      break;
 8006082:	e00d      	b.n	80060a0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006090:	461a      	mov	r2, r3
 8006092:	f000 f839 	bl	8006108 <TIM_TI2_ConfigInputStage>
      break;
 8006096:	e003      	b.n	80060a0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]
      break;
 800609c:	e000      	b.n	80060a0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800609e:	bf00      	nop
  }

  return status;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f023 0201 	bic.w	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 030a 	bic.w	r3, r3, #10
 80060e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	621a      	str	r2, [r3, #32]
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0210 	bic.w	r2, r3, #16
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	031b      	lsls	r3, r3, #12
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006144:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	621a      	str	r2, [r3, #32]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4313      	orrs	r3, r2
 8006186:	f043 0307 	orr.w	r3, r3, #7
 800618a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	609a      	str	r2, [r3, #8]
}
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800619e:	b480      	push	{r7}
 80061a0:	b087      	sub	sp, #28
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	607a      	str	r2, [r7, #4]
 80061aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	021a      	lsls	r2, r3, #8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	609a      	str	r2, [r3, #8]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061de:	b480      	push	{r7}
 80061e0:	b087      	sub	sp, #28
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	2201      	movs	r2, #1
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1a      	ldr	r2, [r3, #32]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	43db      	mvns	r3, r3
 8006200:	401a      	ands	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f003 031f 	and.w	r3, r3, #31
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	fa01 f303 	lsl.w	r3, r1, r3
 8006216:	431a      	orrs	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	621a      	str	r2, [r3, #32]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d109      	bne.n	800624c <HAL_TIMEx_PWMN_Start+0x24>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e022      	b.n	8006292 <HAL_TIMEx_PWMN_Start+0x6a>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d109      	bne.n	8006266 <HAL_TIMEx_PWMN_Start+0x3e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	e015      	b.n	8006292 <HAL_TIMEx_PWMN_Start+0x6a>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d109      	bne.n	8006280 <HAL_TIMEx_PWMN_Start+0x58>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	bf14      	ite	ne
 8006278:	2301      	movne	r3, #1
 800627a:	2300      	moveq	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	e008      	b.n	8006292 <HAL_TIMEx_PWMN_Start+0x6a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e06e      	b.n	8006378 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <HAL_TIMEx_PWMN_Start+0x82>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a8:	e013      	b.n	80062d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d104      	bne.n	80062ba <HAL_TIMEx_PWMN_Start+0x92>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062b8:	e00b      	b.n	80062d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d104      	bne.n	80062ca <HAL_TIMEx_PWMN_Start+0xa2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062c8:	e003      	b.n	80062d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2202      	movs	r2, #2
 80062ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2204      	movs	r2, #4
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 f9e0 	bl	80066a0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a22      	ldr	r2, [pc, #136]	@ (8006380 <HAL_TIMEx_PWMN_Start+0x158>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01d      	beq.n	8006336 <HAL_TIMEx_PWMN_Start+0x10e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006302:	d018      	beq.n	8006336 <HAL_TIMEx_PWMN_Start+0x10e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1e      	ldr	r2, [pc, #120]	@ (8006384 <HAL_TIMEx_PWMN_Start+0x15c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <HAL_TIMEx_PWMN_Start+0x10e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1d      	ldr	r2, [pc, #116]	@ (8006388 <HAL_TIMEx_PWMN_Start+0x160>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_TIMEx_PWMN_Start+0x10e>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1b      	ldr	r2, [pc, #108]	@ (800638c <HAL_TIMEx_PWMN_Start+0x164>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_TIMEx_PWMN_Start+0x10e>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1a      	ldr	r2, [pc, #104]	@ (8006390 <HAL_TIMEx_PWMN_Start+0x168>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_TIMEx_PWMN_Start+0x10e>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a18      	ldr	r2, [pc, #96]	@ (8006394 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d115      	bne.n	8006362 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	4b16      	ldr	r3, [pc, #88]	@ (8006398 <HAL_TIMEx_PWMN_Start+0x170>)
 800633e:	4013      	ands	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b06      	cmp	r3, #6
 8006346:	d015      	beq.n	8006374 <HAL_TIMEx_PWMN_Start+0x14c>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800634e:	d011      	beq.n	8006374 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006360:	e008      	b.n	8006374 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0201 	orr.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e000      	b.n	8006376 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006374:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40012c00 	.word	0x40012c00
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40013400 	.word	0x40013400
 8006394:	40014000 	.word	0x40014000
 8006398:	00010007 	.word	0x00010007

0800639c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2200      	movs	r2, #0
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 f976 	bl	80066a0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6a1a      	ldr	r2, [r3, #32]
 80063ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80063be:	4013      	ands	r3, r2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10f      	bne.n	80063e4 <HAL_TIMEx_PWMN_Stop+0x48>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6a1a      	ldr	r2, [r3, #32]
 80063ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d107      	bne.n	80063e4 <HAL_TIMEx_PWMN_Stop+0x48>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10f      	bne.n	8006414 <HAL_TIMEx_PWMN_Stop+0x78>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6a1a      	ldr	r2, [r3, #32]
 80063fa:	f240 4344 	movw	r3, #1092	@ 0x444
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d107      	bne.n	8006414 <HAL_TIMEx_PWMN_Stop+0x78>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <HAL_TIMEx_PWMN_Stop+0x88>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006422:	e013      	b.n	800644c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b04      	cmp	r3, #4
 8006428:	d104      	bne.n	8006434 <HAL_TIMEx_PWMN_Stop+0x98>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006432:	e00b      	b.n	800644c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b08      	cmp	r3, #8
 8006438:	d104      	bne.n	8006444 <HAL_TIMEx_PWMN_Stop+0xa8>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006442:	e003      	b.n	800644c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800646c:	2302      	movs	r3, #2
 800646e:	e068      	b.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a2e      	ldr	r2, [pc, #184]	@ (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a2d      	ldr	r2, [pc, #180]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d108      	bne.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e2:	d018      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006558 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1a      	ldr	r2, [pc, #104]	@ (800655c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a18      	ldr	r2, [pc, #96]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a13      	ldr	r2, [pc, #76]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a14      	ldr	r2, [pc, #80]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10c      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800651c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4313      	orrs	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40012c00 	.word	0x40012c00
 8006554:	40013400 	.word	0x40013400
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40014000 	.word	0x40014000

08006568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006580:	2302      	movs	r3, #2
 8006582:	e065      	b.n	8006650 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a16      	ldr	r2, [pc, #88]	@ (800665c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a14      	ldr	r2, [pc, #80]	@ (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d115      	bne.n	800663e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	051b      	lsls	r3, r3, #20
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	40012c00 	.word	0x40012c00
 8006660:	40013400 	.word	0x40013400

08006664 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	2204      	movs	r2, #4
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1a      	ldr	r2, [r3, #32]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	43db      	mvns	r3, r3
 80066c2:	401a      	ands	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a1a      	ldr	r2, [r3, #32]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	fa01 f303 	lsl.w	r3, r1, r3
 80066d8:	431a      	orrs	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e040      	b.n	800677e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fa fe49 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2224      	movs	r2, #36	@ 0x24
 8006716:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fae1 	bl	8006cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f826 	bl	8006788 <UART_SetConfig>
 800673c:	4603      	mov	r3, r0
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e01b      	b.n	800677e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006754:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006764:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fb60 	bl	8006e3c <UART_CheckIdleState>
 800677c:	4603      	mov	r3, r0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800678c:	b08a      	sub	sp, #40	@ 0x28
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4ba4      	ldr	r3, [pc, #656]	@ (8006a48 <UART_SetConfig+0x2c0>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	6812      	ldr	r2, [r2, #0]
 80067be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067c0:	430b      	orrs	r3, r1
 80067c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a99      	ldr	r2, [pc, #612]	@ (8006a4c <UART_SetConfig+0x2c4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f0:	4313      	orrs	r3, r2
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006804:	430a      	orrs	r2, r1
 8006806:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a90      	ldr	r2, [pc, #576]	@ (8006a50 <UART_SetConfig+0x2c8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d126      	bne.n	8006860 <UART_SetConfig+0xd8>
 8006812:	4b90      	ldr	r3, [pc, #576]	@ (8006a54 <UART_SetConfig+0x2cc>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	2b03      	cmp	r3, #3
 800681e:	d81b      	bhi.n	8006858 <UART_SetConfig+0xd0>
 8006820:	a201      	add	r2, pc, #4	@ (adr r2, 8006828 <UART_SetConfig+0xa0>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	08006839 	.word	0x08006839
 800682c:	08006849 	.word	0x08006849
 8006830:	08006841 	.word	0x08006841
 8006834:	08006851 	.word	0x08006851
 8006838:	2301      	movs	r3, #1
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683e:	e116      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006840:	2302      	movs	r3, #2
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006846:	e112      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006848:	2304      	movs	r3, #4
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684e:	e10e      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006850:	2308      	movs	r3, #8
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006856:	e10a      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006858:	2310      	movs	r3, #16
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685e:	e106      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a7c      	ldr	r2, [pc, #496]	@ (8006a58 <UART_SetConfig+0x2d0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d138      	bne.n	80068dc <UART_SetConfig+0x154>
 800686a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a54 <UART_SetConfig+0x2cc>)
 800686c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006870:	f003 030c 	and.w	r3, r3, #12
 8006874:	2b0c      	cmp	r3, #12
 8006876:	d82d      	bhi.n	80068d4 <UART_SetConfig+0x14c>
 8006878:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <UART_SetConfig+0xf8>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068d5 	.word	0x080068d5
 8006888:	080068d5 	.word	0x080068d5
 800688c:	080068d5 	.word	0x080068d5
 8006890:	080068c5 	.word	0x080068c5
 8006894:	080068d5 	.word	0x080068d5
 8006898:	080068d5 	.word	0x080068d5
 800689c:	080068d5 	.word	0x080068d5
 80068a0:	080068bd 	.word	0x080068bd
 80068a4:	080068d5 	.word	0x080068d5
 80068a8:	080068d5 	.word	0x080068d5
 80068ac:	080068d5 	.word	0x080068d5
 80068b0:	080068cd 	.word	0x080068cd
 80068b4:	2300      	movs	r3, #0
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ba:	e0d8      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80068bc:	2302      	movs	r3, #2
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068c2:	e0d4      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ca:	e0d0      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d2:	e0cc      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068da:	e0c8      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a5e      	ldr	r2, [pc, #376]	@ (8006a5c <UART_SetConfig+0x2d4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d125      	bne.n	8006932 <UART_SetConfig+0x1aa>
 80068e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a54 <UART_SetConfig+0x2cc>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068f0:	2b30      	cmp	r3, #48	@ 0x30
 80068f2:	d016      	beq.n	8006922 <UART_SetConfig+0x19a>
 80068f4:	2b30      	cmp	r3, #48	@ 0x30
 80068f6:	d818      	bhi.n	800692a <UART_SetConfig+0x1a2>
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d00a      	beq.n	8006912 <UART_SetConfig+0x18a>
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d814      	bhi.n	800692a <UART_SetConfig+0x1a2>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <UART_SetConfig+0x182>
 8006904:	2b10      	cmp	r3, #16
 8006906:	d008      	beq.n	800691a <UART_SetConfig+0x192>
 8006908:	e00f      	b.n	800692a <UART_SetConfig+0x1a2>
 800690a:	2300      	movs	r3, #0
 800690c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006910:	e0ad      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006912:	2302      	movs	r3, #2
 8006914:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006918:	e0a9      	b.n	8006a6e <UART_SetConfig+0x2e6>
 800691a:	2304      	movs	r3, #4
 800691c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006920:	e0a5      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006922:	2308      	movs	r3, #8
 8006924:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006928:	e0a1      	b.n	8006a6e <UART_SetConfig+0x2e6>
 800692a:	2310      	movs	r3, #16
 800692c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006930:	e09d      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a4a      	ldr	r2, [pc, #296]	@ (8006a60 <UART_SetConfig+0x2d8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d125      	bne.n	8006988 <UART_SetConfig+0x200>
 800693c:	4b45      	ldr	r3, [pc, #276]	@ (8006a54 <UART_SetConfig+0x2cc>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006942:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006946:	2bc0      	cmp	r3, #192	@ 0xc0
 8006948:	d016      	beq.n	8006978 <UART_SetConfig+0x1f0>
 800694a:	2bc0      	cmp	r3, #192	@ 0xc0
 800694c:	d818      	bhi.n	8006980 <UART_SetConfig+0x1f8>
 800694e:	2b80      	cmp	r3, #128	@ 0x80
 8006950:	d00a      	beq.n	8006968 <UART_SetConfig+0x1e0>
 8006952:	2b80      	cmp	r3, #128	@ 0x80
 8006954:	d814      	bhi.n	8006980 <UART_SetConfig+0x1f8>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <UART_SetConfig+0x1d8>
 800695a:	2b40      	cmp	r3, #64	@ 0x40
 800695c:	d008      	beq.n	8006970 <UART_SetConfig+0x1e8>
 800695e:	e00f      	b.n	8006980 <UART_SetConfig+0x1f8>
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006966:	e082      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006968:	2302      	movs	r3, #2
 800696a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800696e:	e07e      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006976:	e07a      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800697e:	e076      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006986:	e072      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a35      	ldr	r2, [pc, #212]	@ (8006a64 <UART_SetConfig+0x2dc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d12a      	bne.n	80069e8 <UART_SetConfig+0x260>
 8006992:	4b30      	ldr	r3, [pc, #192]	@ (8006a54 <UART_SetConfig+0x2cc>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800699c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069a0:	d01a      	beq.n	80069d8 <UART_SetConfig+0x250>
 80069a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069a6:	d81b      	bhi.n	80069e0 <UART_SetConfig+0x258>
 80069a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ac:	d00c      	beq.n	80069c8 <UART_SetConfig+0x240>
 80069ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b2:	d815      	bhi.n	80069e0 <UART_SetConfig+0x258>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <UART_SetConfig+0x238>
 80069b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069bc:	d008      	beq.n	80069d0 <UART_SetConfig+0x248>
 80069be:	e00f      	b.n	80069e0 <UART_SetConfig+0x258>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069c6:	e052      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ce:	e04e      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069d6:	e04a      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069de:	e046      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069e6:	e042      	b.n	8006a6e <UART_SetConfig+0x2e6>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a17      	ldr	r2, [pc, #92]	@ (8006a4c <UART_SetConfig+0x2c4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d13a      	bne.n	8006a68 <UART_SetConfig+0x2e0>
 80069f2:	4b18      	ldr	r3, [pc, #96]	@ (8006a54 <UART_SetConfig+0x2cc>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a00:	d01a      	beq.n	8006a38 <UART_SetConfig+0x2b0>
 8006a02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a06:	d81b      	bhi.n	8006a40 <UART_SetConfig+0x2b8>
 8006a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0c:	d00c      	beq.n	8006a28 <UART_SetConfig+0x2a0>
 8006a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a12:	d815      	bhi.n	8006a40 <UART_SetConfig+0x2b8>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <UART_SetConfig+0x298>
 8006a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1c:	d008      	beq.n	8006a30 <UART_SetConfig+0x2a8>
 8006a1e:	e00f      	b.n	8006a40 <UART_SetConfig+0x2b8>
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a26:	e022      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2e:	e01e      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006a30:	2304      	movs	r3, #4
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a36:	e01a      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a3e:	e016      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a46:	e012      	b.n	8006a6e <UART_SetConfig+0x2e6>
 8006a48:	efff69f3 	.word	0xefff69f3
 8006a4c:	40008000 	.word	0x40008000
 8006a50:	40013800 	.word	0x40013800
 8006a54:	40021000 	.word	0x40021000
 8006a58:	40004400 	.word	0x40004400
 8006a5c:	40004800 	.word	0x40004800
 8006a60:	40004c00 	.word	0x40004c00
 8006a64:	40005000 	.word	0x40005000
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a9f      	ldr	r2, [pc, #636]	@ (8006cf0 <UART_SetConfig+0x568>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d17a      	bne.n	8006b6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d824      	bhi.n	8006aca <UART_SetConfig+0x342>
 8006a80:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <UART_SetConfig+0x300>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006aad 	.word	0x08006aad
 8006a8c:	08006acb 	.word	0x08006acb
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006acb 	.word	0x08006acb
 8006a98:	08006abb 	.word	0x08006abb
 8006a9c:	08006acb 	.word	0x08006acb
 8006aa0:	08006acb 	.word	0x08006acb
 8006aa4:	08006acb 	.word	0x08006acb
 8006aa8:	08006ac3 	.word	0x08006ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aac:	f7fd fc68 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8006ab0:	61f8      	str	r0, [r7, #28]
        break;
 8006ab2:	e010      	b.n	8006ad6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab4:	4b8f      	ldr	r3, [pc, #572]	@ (8006cf4 <UART_SetConfig+0x56c>)
 8006ab6:	61fb      	str	r3, [r7, #28]
        break;
 8006ab8:	e00d      	b.n	8006ad6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aba:	f7fd fbcb 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8006abe:	61f8      	str	r0, [r7, #28]
        break;
 8006ac0:	e009      	b.n	8006ad6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac6:	61fb      	str	r3, [r7, #28]
        break;
 8006ac8:	e005      	b.n	8006ad6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ad4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80fb 	beq.w	8006cd4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4413      	add	r3, r2
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d305      	bcc.n	8006afa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d903      	bls.n	8006b02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b00:	e0e8      	b.n	8006cd4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	2200      	movs	r2, #0
 8006b06:	461c      	mov	r4, r3
 8006b08:	4615      	mov	r5, r2
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	022b      	lsls	r3, r5, #8
 8006b14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b18:	0222      	lsls	r2, r4, #8
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	6849      	ldr	r1, [r1, #4]
 8006b1e:	0849      	lsrs	r1, r1, #1
 8006b20:	2000      	movs	r0, #0
 8006b22:	4688      	mov	r8, r1
 8006b24:	4681      	mov	r9, r0
 8006b26:	eb12 0a08 	adds.w	sl, r2, r8
 8006b2a:	eb43 0b09 	adc.w	fp, r3, r9
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	4659      	mov	r1, fp
 8006b40:	f7f9 fb42 	bl	80001c8 <__aeabi_uldivmod>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4613      	mov	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b52:	d308      	bcc.n	8006b66 <UART_SetConfig+0x3de>
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b5a:	d204      	bcs.n	8006b66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	60da      	str	r2, [r3, #12]
 8006b64:	e0b6      	b.n	8006cd4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b6c:	e0b2      	b.n	8006cd4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b76:	d15e      	bne.n	8006c36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d828      	bhi.n	8006bd2 <UART_SetConfig+0x44a>
 8006b80:	a201      	add	r2, pc, #4	@ (adr r2, 8006b88 <UART_SetConfig+0x400>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006bad 	.word	0x08006bad
 8006b8c:	08006bb5 	.word	0x08006bb5
 8006b90:	08006bbd 	.word	0x08006bbd
 8006b94:	08006bd3 	.word	0x08006bd3
 8006b98:	08006bc3 	.word	0x08006bc3
 8006b9c:	08006bd3 	.word	0x08006bd3
 8006ba0:	08006bd3 	.word	0x08006bd3
 8006ba4:	08006bd3 	.word	0x08006bd3
 8006ba8:	08006bcb 	.word	0x08006bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bac:	f7fd fbe8 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8006bb0:	61f8      	str	r0, [r7, #28]
        break;
 8006bb2:	e014      	b.n	8006bde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bb4:	f7fd fbfa 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8006bb8:	61f8      	str	r0, [r7, #28]
        break;
 8006bba:	e010      	b.n	8006bde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8006cf4 <UART_SetConfig+0x56c>)
 8006bbe:	61fb      	str	r3, [r7, #28]
        break;
 8006bc0:	e00d      	b.n	8006bde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc2:	f7fd fb47 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8006bc6:	61f8      	str	r0, [r7, #28]
        break;
 8006bc8:	e009      	b.n	8006bde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bce:	61fb      	str	r3, [r7, #28]
        break;
 8006bd0:	e005      	b.n	8006bde <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006bdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d077      	beq.n	8006cd4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	005a      	lsls	r2, r3, #1
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	085b      	lsrs	r3, r3, #1
 8006bee:	441a      	add	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b0f      	cmp	r3, #15
 8006bfe:	d916      	bls.n	8006c2e <UART_SetConfig+0x4a6>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c06:	d212      	bcs.n	8006c2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f023 030f 	bic.w	r3, r3, #15
 8006c10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	8afb      	ldrh	r3, [r7, #22]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	8afa      	ldrh	r2, [r7, #22]
 8006c2a:	60da      	str	r2, [r3, #12]
 8006c2c:	e052      	b.n	8006cd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c34:	e04e      	b.n	8006cd4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c3a:	2b08      	cmp	r3, #8
 8006c3c:	d827      	bhi.n	8006c8e <UART_SetConfig+0x506>
 8006c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <UART_SetConfig+0x4bc>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c69 	.word	0x08006c69
 8006c48:	08006c71 	.word	0x08006c71
 8006c4c:	08006c79 	.word	0x08006c79
 8006c50:	08006c8f 	.word	0x08006c8f
 8006c54:	08006c7f 	.word	0x08006c7f
 8006c58:	08006c8f 	.word	0x08006c8f
 8006c5c:	08006c8f 	.word	0x08006c8f
 8006c60:	08006c8f 	.word	0x08006c8f
 8006c64:	08006c87 	.word	0x08006c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c68:	f7fd fb8a 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8006c6c:	61f8      	str	r0, [r7, #28]
        break;
 8006c6e:	e014      	b.n	8006c9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c70:	f7fd fb9c 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8006c74:	61f8      	str	r0, [r7, #28]
        break;
 8006c76:	e010      	b.n	8006c9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c78:	4b1e      	ldr	r3, [pc, #120]	@ (8006cf4 <UART_SetConfig+0x56c>)
 8006c7a:	61fb      	str	r3, [r7, #28]
        break;
 8006c7c:	e00d      	b.n	8006c9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c7e:	f7fd fae9 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8006c82:	61f8      	str	r0, [r7, #28]
        break;
 8006c84:	e009      	b.n	8006c9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c8a:	61fb      	str	r3, [r7, #28]
        break;
 8006c8c:	e005      	b.n	8006c9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c98:	bf00      	nop
    }

    if (pclk != 0U)
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d019      	beq.n	8006cd4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	085a      	lsrs	r2, r3, #1
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	441a      	add	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2b0f      	cmp	r3, #15
 8006cb8:	d909      	bls.n	8006cce <UART_SetConfig+0x546>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cc0:	d205      	bcs.n	8006cce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60da      	str	r2, [r3, #12]
 8006ccc:	e002      	b.n	8006cd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006ce0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3728      	adds	r7, #40	@ 0x28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cee:	bf00      	nop
 8006cf0:	40008000 	.word	0x40008000
 8006cf4:	00f42400 	.word	0x00f42400

08006cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01a      	beq.n	8006e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006df6:	d10a      	bne.n	8006e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	605a      	str	r2, [r3, #4]
  }
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b098      	sub	sp, #96	@ 0x60
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e4c:	f7fa fd64 	bl	8001918 <HAL_GetTick>
 8006e50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0308 	and.w	r3, r3, #8
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d12e      	bne.n	8006ebe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f88c 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d021      	beq.n	8006ebe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e6      	bne.n	8006e7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e062      	b.n	8006f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d149      	bne.n	8006f60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f856 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d03c      	beq.n	8006f60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e6      	bne.n	8006ee6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0301 	bic.w	r3, r3, #1
 8006f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f38:	61fa      	str	r2, [r7, #28]
 8006f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	69b9      	ldr	r1, [r7, #24]
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	617b      	str	r3, [r7, #20]
   return(result);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e5      	bne.n	8006f18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e011      	b.n	8006f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3758      	adds	r7, #88	@ 0x58
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9c:	e04f      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d04b      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa6:	f7fa fcb7 	bl	8001918 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d302      	bcc.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e04e      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d037      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b80      	cmp	r3, #128	@ 0x80
 8006fd2:	d034      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d031      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d110      	bne.n	800700a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2208      	movs	r2, #8
 8006fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f838 	bl	8007066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e029      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007018:	d111      	bne.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f81e 	bl	8007066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e00f      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4013      	ands	r3, r2
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	bf0c      	ite	eq
 800704e:	2301      	moveq	r3, #1
 8007050:	2300      	movne	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	429a      	cmp	r2, r3
 800705a:	d0a0      	beq.n	8006f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007066:	b480      	push	{r7}
 8007068:	b095      	sub	sp, #84	@ 0x54
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800708c:	643b      	str	r3, [r7, #64]	@ 0x40
 800708e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e6      	bne.n	800706e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3308      	adds	r3, #8
 80070a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d118      	bne.n	800710e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f023 0310 	bic.w	r3, r3, #16
 80070f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6979      	ldr	r1, [r7, #20]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	613b      	str	r3, [r7, #16]
   return(result);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e6      	bne.n	80070dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007122:	bf00      	nop
 8007124:	3754      	adds	r7, #84	@ 0x54
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800712e:	b084      	sub	sp, #16
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	f107 001c 	add.w	r0, r7, #28
 800713c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 fa25 	bl	800859c <USB_CoreReset>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007156:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007162:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	639a      	str	r2, [r3, #56]	@ 0x38
 800716a:	e005      	b.n	8007178 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007170:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007184:	b004      	add	sp, #16
 8007186:	4770      	bx	lr

08007188 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d165      	bne.n	8007268 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4a3e      	ldr	r2, [pc, #248]	@ (8007298 <USB_SetTurnaroundTime+0x110>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d906      	bls.n	80071b2 <USB_SetTurnaroundTime+0x2a>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4a3d      	ldr	r2, [pc, #244]	@ (800729c <USB_SetTurnaroundTime+0x114>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d202      	bcs.n	80071b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80071ac:	230f      	movs	r3, #15
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	e05c      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4a39      	ldr	r2, [pc, #228]	@ (800729c <USB_SetTurnaroundTime+0x114>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d306      	bcc.n	80071c8 <USB_SetTurnaroundTime+0x40>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	4a38      	ldr	r2, [pc, #224]	@ (80072a0 <USB_SetTurnaroundTime+0x118>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d202      	bcs.n	80071c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80071c2:	230e      	movs	r3, #14
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e051      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4a35      	ldr	r2, [pc, #212]	@ (80072a0 <USB_SetTurnaroundTime+0x118>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d306      	bcc.n	80071de <USB_SetTurnaroundTime+0x56>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4a34      	ldr	r2, [pc, #208]	@ (80072a4 <USB_SetTurnaroundTime+0x11c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d202      	bcs.n	80071de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80071d8:	230d      	movs	r3, #13
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	e046      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	4a30      	ldr	r2, [pc, #192]	@ (80072a4 <USB_SetTurnaroundTime+0x11c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d306      	bcc.n	80071f4 <USB_SetTurnaroundTime+0x6c>
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4a2f      	ldr	r2, [pc, #188]	@ (80072a8 <USB_SetTurnaroundTime+0x120>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d802      	bhi.n	80071f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80071ee:	230c      	movs	r3, #12
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	e03b      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4a2c      	ldr	r2, [pc, #176]	@ (80072a8 <USB_SetTurnaroundTime+0x120>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d906      	bls.n	800720a <USB_SetTurnaroundTime+0x82>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	4a2b      	ldr	r2, [pc, #172]	@ (80072ac <USB_SetTurnaroundTime+0x124>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d802      	bhi.n	800720a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007204:	230b      	movs	r3, #11
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e030      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	4a27      	ldr	r2, [pc, #156]	@ (80072ac <USB_SetTurnaroundTime+0x124>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d906      	bls.n	8007220 <USB_SetTurnaroundTime+0x98>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4a26      	ldr	r2, [pc, #152]	@ (80072b0 <USB_SetTurnaroundTime+0x128>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d802      	bhi.n	8007220 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800721a:	230a      	movs	r3, #10
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	e025      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4a23      	ldr	r2, [pc, #140]	@ (80072b0 <USB_SetTurnaroundTime+0x128>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d906      	bls.n	8007236 <USB_SetTurnaroundTime+0xae>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4a22      	ldr	r2, [pc, #136]	@ (80072b4 <USB_SetTurnaroundTime+0x12c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d202      	bcs.n	8007236 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007230:	2309      	movs	r3, #9
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	e01a      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4a1e      	ldr	r2, [pc, #120]	@ (80072b4 <USB_SetTurnaroundTime+0x12c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d306      	bcc.n	800724c <USB_SetTurnaroundTime+0xc4>
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4a1d      	ldr	r2, [pc, #116]	@ (80072b8 <USB_SetTurnaroundTime+0x130>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d802      	bhi.n	800724c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007246:	2308      	movs	r3, #8
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	e00f      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4a1a      	ldr	r2, [pc, #104]	@ (80072b8 <USB_SetTurnaroundTime+0x130>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d906      	bls.n	8007262 <USB_SetTurnaroundTime+0xda>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4a19      	ldr	r2, [pc, #100]	@ (80072bc <USB_SetTurnaroundTime+0x134>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d202      	bcs.n	8007262 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800725c:	2307      	movs	r3, #7
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	e004      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007262:	2306      	movs	r3, #6
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e001      	b.n	800726c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007268:	2309      	movs	r3, #9
 800726a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	029b      	lsls	r3, r3, #10
 8007280:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007284:	431a      	orrs	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	00d8acbf 	.word	0x00d8acbf
 800729c:	00e4e1c0 	.word	0x00e4e1c0
 80072a0:	00f42400 	.word	0x00f42400
 80072a4:	01067380 	.word	0x01067380
 80072a8:	011a499f 	.word	0x011a499f
 80072ac:	01312cff 	.word	0x01312cff
 80072b0:	014ca43f 	.word	0x014ca43f
 80072b4:	016e3600 	.word	0x016e3600
 80072b8:	01a6ab1f 	.word	0x01a6ab1f
 80072bc:	01e84800 	.word	0x01e84800

080072c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f043 0201 	orr.w	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f023 0201 	bic.w	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d115      	bne.n	8007352 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007332:	200a      	movs	r0, #10
 8007334:	f7fa fafc 	bl	8001930 <HAL_Delay>
      ms += 10U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	330a      	adds	r3, #10
 800733c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 f8b3 	bl	80084aa <USB_GetMode>
 8007344:	4603      	mov	r3, r0
 8007346:	2b01      	cmp	r3, #1
 8007348:	d01e      	beq.n	8007388 <USB_SetCurrentMode+0x84>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2bc7      	cmp	r3, #199	@ 0xc7
 800734e:	d9f0      	bls.n	8007332 <USB_SetCurrentMode+0x2e>
 8007350:	e01a      	b.n	8007388 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d115      	bne.n	8007384 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007364:	200a      	movs	r0, #10
 8007366:	f7fa fae3 	bl	8001930 <HAL_Delay>
      ms += 10U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	330a      	adds	r3, #10
 800736e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 f89a 	bl	80084aa <USB_GetMode>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d005      	beq.n	8007388 <USB_SetCurrentMode+0x84>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007380:	d9f0      	bls.n	8007364 <USB_SetCurrentMode+0x60>
 8007382:	e001      	b.n	8007388 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e005      	b.n	8007394 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2bc8      	cmp	r3, #200	@ 0xc8
 800738c:	d101      	bne.n	8007392 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e000      	b.n	8007394 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800739c:	b084      	sub	sp, #16
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	e009      	b.n	80073d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3340      	adds	r3, #64	@ 0x40
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	2200      	movs	r2, #0
 80073c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3301      	adds	r3, #1
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b0e      	cmp	r3, #14
 80073d4:	d9f2      	bls.n	80073bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d11c      	bne.n	8007418 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073ec:	f043 0302 	orr.w	r3, r3, #2
 80073f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	e005      	b.n	8007424 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800742a:	461a      	mov	r2, r3
 800742c:	2300      	movs	r3, #0
 800742e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007430:	2103      	movs	r1, #3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f95a 	bl	80076ec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007438:	2110      	movs	r1, #16
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8f6 	bl	800762c <USB_FlushTxFifo>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f920 	bl	8007690 <USB_FlushRxFifo>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007460:	461a      	mov	r2, r3
 8007462:	2300      	movs	r3, #0
 8007464:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800746c:	461a      	mov	r2, r3
 800746e:	2300      	movs	r3, #0
 8007470:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007478:	461a      	mov	r2, r3
 800747a:	2300      	movs	r3, #0
 800747c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	e043      	b.n	800750c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800749a:	d118      	bne.n	80074ce <USB_DevInit+0x132>
    {
      if (i == 0U)
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ae:	461a      	mov	r2, r3
 80074b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	e013      	b.n	80074e0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c4:	461a      	mov	r2, r3
 80074c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	e008      	b.n	80074e0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074da:	461a      	mov	r2, r3
 80074dc:	2300      	movs	r3, #0
 80074de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ec:	461a      	mov	r2, r3
 80074ee:	2300      	movs	r3, #0
 80074f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074fe:	461a      	mov	r2, r3
 8007500:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007504:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	3301      	adds	r3, #1
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007510:	461a      	mov	r2, r3
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	4293      	cmp	r3, r2
 8007516:	d3b5      	bcc.n	8007484 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007518:	2300      	movs	r3, #0
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	e043      	b.n	80075a6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007530:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007534:	d118      	bne.n	8007568 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007548:	461a      	mov	r2, r3
 800754a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e013      	b.n	800757a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800755e:	461a      	mov	r2, r3
 8007560:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	e008      	b.n	800757a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007574:	461a      	mov	r2, r3
 8007576:	2300      	movs	r3, #0
 8007578:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007586:	461a      	mov	r2, r3
 8007588:	2300      	movs	r3, #0
 800758a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007598:	461a      	mov	r2, r3
 800759a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800759e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	3301      	adds	r3, #1
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80075aa:	461a      	mov	r2, r3
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d3b5      	bcc.n	800751e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80075d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	f043 0210 	orr.w	r2, r3, #16
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	4b10      	ldr	r3, [pc, #64]	@ (8007628 <USB_DevInit+0x28c>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f043 0208 	orr.w	r2, r3, #8
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007600:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007604:	2b01      	cmp	r3, #1
 8007606:	d107      	bne.n	8007618 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007610:	f043 0304 	orr.w	r3, r3, #4
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007624:	b004      	add	sp, #16
 8007626:	4770      	bx	lr
 8007628:	803c3800 	.word	0x803c3800

0800762c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007646:	d901      	bls.n	800764c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e01b      	b.n	8007684 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	daf2      	bge.n	800763a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	019b      	lsls	r3, r3, #6
 800765c:	f043 0220 	orr.w	r2, r3, #32
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3301      	adds	r3, #1
 8007668:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007670:	d901      	bls.n	8007676 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e006      	b.n	8007684 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b20      	cmp	r3, #32
 8007680:	d0f0      	beq.n	8007664 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3301      	adds	r3, #1
 80076a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076a8:	d901      	bls.n	80076ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e018      	b.n	80076e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	daf2      	bge.n	800769c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2210      	movs	r2, #16
 80076be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3301      	adds	r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076cc:	d901      	bls.n	80076d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e006      	b.n	80076e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b10      	cmp	r3, #16
 80076dc:	d0f0      	beq.n	80076c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800770c:	4313      	orrs	r3, r2
 800770e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800771e:	b480      	push	{r7}
 8007720:	b087      	sub	sp, #28
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0306 	and.w	r3, r3, #6
 8007736:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d002      	beq.n	8007744 <USB_GetDevSpeed+0x26>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b06      	cmp	r3, #6
 8007742:	d102      	bne.n	800774a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007744:	2302      	movs	r3, #2
 8007746:	75fb      	strb	r3, [r7, #23]
 8007748:	e001      	b.n	800774e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800774a:	230f      	movs	r3, #15
 800774c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800774e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007750:	4618      	mov	r0, r3
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d13a      	bne.n	80077ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	2101      	movs	r1, #1
 800778a:	fa01 f303 	lsl.w	r3, r1, r3
 800778e:	b29b      	uxth	r3, r3
 8007790:	68f9      	ldr	r1, [r7, #12]
 8007792:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007796:	4313      	orrs	r3, r2
 8007798:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d155      	bne.n	800785c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	791b      	ldrb	r3, [r3, #4]
 80077ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	059b      	lsls	r3, r3, #22
 80077d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077d4:	4313      	orrs	r3, r2
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	e036      	b.n	800785c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f4:	69da      	ldr	r2, [r3, #28]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	2101      	movs	r1, #1
 8007800:	fa01 f303 	lsl.w	r3, r1, r3
 8007804:	041b      	lsls	r3, r3, #16
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800780c:	4313      	orrs	r3, r2
 800780e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d11a      	bne.n	800785c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	791b      	ldrb	r3, [r3, #4]
 8007840:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007842:	430b      	orrs	r3, r1
 8007844:	4313      	orrs	r3, r2
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	440a      	add	r2, r1
 800784e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800785a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d161      	bne.n	800794c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800789a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800789e:	d11f      	bne.n	80078e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80078be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	2101      	movs	r1, #1
 80078f2:	fa01 f303 	lsl.w	r3, r1, r3
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	43db      	mvns	r3, r3
 80078fa:	68f9      	ldr	r1, [r7, #12]
 80078fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007900:	4013      	ands	r3, r2
 8007902:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800790a:	69da      	ldr	r2, [r3, #28]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	f003 030f 	and.w	r3, r3, #15
 8007914:	2101      	movs	r1, #1
 8007916:	fa01 f303 	lsl.w	r3, r1, r3
 800791a:	b29b      	uxth	r3, r3
 800791c:	43db      	mvns	r3, r3
 800791e:	68f9      	ldr	r1, [r7, #12]
 8007920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007924:	4013      	ands	r3, r2
 8007926:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	0159      	lsls	r1, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	440b      	add	r3, r1
 800793e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007942:	4619      	mov	r1, r3
 8007944:	4b35      	ldr	r3, [pc, #212]	@ (8007a1c <USB_DeactivateEndpoint+0x1b0>)
 8007946:	4013      	ands	r3, r2
 8007948:	600b      	str	r3, [r1, #0]
 800794a:	e060      	b.n	8007a0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800795e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007962:	d11f      	bne.n	80079a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	0151      	lsls	r1, r2, #5
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	440a      	add	r2, r1
 800797a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800797e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007982:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	0151      	lsls	r1, r2, #5
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	440a      	add	r2, r1
 800799a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800799e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	2101      	movs	r1, #1
 80079b6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ba:	041b      	lsls	r3, r3, #16
 80079bc:	43db      	mvns	r3, r3
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079c4:	4013      	ands	r3, r2
 80079c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ce:	69da      	ldr	r2, [r3, #28]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	2101      	movs	r1, #1
 80079da:	fa01 f303 	lsl.w	r3, r1, r3
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	43db      	mvns	r3, r3
 80079e2:	68f9      	ldr	r1, [r7, #12]
 80079e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079e8:	4013      	ands	r3, r2
 80079ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	0159      	lsls	r1, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	440b      	add	r3, r1
 8007a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a06:	4619      	mov	r1, r3
 8007a08:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <USB_DeactivateEndpoint+0x1b4>)
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	ec337800 	.word	0xec337800
 8007a20:	eff37800 	.word	0xeff37800

08007a24 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	f040 812d 	bne.w	8007c9c <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d132      	bne.n	8007ab0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	0151      	lsls	r1, r2, #5
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	440a      	add	r2, r1
 8007a60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a64:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a68:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aa8:	0cdb      	lsrs	r3, r3, #19
 8007aaa:	04db      	lsls	r3, r3, #19
 8007aac:	6113      	str	r3, [r2, #16]
 8007aae:	e097      	b.n	8007be0 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	0151      	lsls	r1, r2, #5
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	440a      	add	r2, r1
 8007ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aca:	0cdb      	lsrs	r3, r3, #19
 8007acc:	04db      	lsls	r3, r3, #19
 8007ace:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007aee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007af2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d11a      	bne.n	8007b30 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	691a      	ldr	r2, [r3, #16]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d903      	bls.n	8007b0e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b2c:	6113      	str	r3, [r2, #16]
 8007b2e:	e044      	b.n	8007bba <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	4413      	add	r3, r2
 8007b3a:	1e5a      	subs	r2, r3, #1
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b44:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	89fb      	ldrh	r3, [r7, #14]
 8007b56:	04d9      	lsls	r1, r3, #19
 8007b58:	4b8f      	ldr	r3, [pc, #572]	@ (8007d98 <USB_EPStartXfer+0x374>)
 8007b5a:	400b      	ands	r3, r1
 8007b5c:	6939      	ldr	r1, [r7, #16]
 8007b5e:	0148      	lsls	r0, r1, #5
 8007b60:	6979      	ldr	r1, [r7, #20]
 8007b62:	4401      	add	r1, r0
 8007b64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	791b      	ldrb	r3, [r3, #4]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d122      	bne.n	8007bba <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	0151      	lsls	r1, r2, #5
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	440a      	add	r2, r1
 8007b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b8e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007b92:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	89fb      	ldrh	r3, [r7, #14]
 8007ba4:	075b      	lsls	r3, r3, #29
 8007ba6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007baa:	6939      	ldr	r1, [r7, #16]
 8007bac:	0148      	lsls	r0, r1, #5
 8007bae:	6979      	ldr	r1, [r7, #20]
 8007bb0:	4401      	add	r1, r0
 8007bb2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bd0:	6939      	ldr	r1, [r7, #16]
 8007bd2:	0148      	lsls	r0, r1, #5
 8007bd4:	6979      	ldr	r1, [r7, #20]
 8007bd6:	4401      	add	r1, r0
 8007bd8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	0151      	lsls	r1, r2, #5
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	440a      	add	r2, r1
 8007bf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bfa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007bfe:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	791b      	ldrb	r3, [r3, #4]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d015      	beq.n	8007c34 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 813a 	beq.w	8007e86 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	2101      	movs	r1, #1
 8007c24:	fa01 f303 	lsl.w	r3, r1, r3
 8007c28:	6979      	ldr	r1, [r7, #20]
 8007c2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	634b      	str	r3, [r1, #52]	@ 0x34
 8007c32:	e128      	b.n	8007e86 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d110      	bne.n	8007c66 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	e00f      	b.n	8007c86 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c84:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68d9      	ldr	r1, [r3, #12]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f9a7 	bl	8007fe8 <USB_WritePacket>
 8007c9a:	e0f4      	b.n	8007e86 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb6:	0cdb      	lsrs	r3, r3, #19
 8007cb8:	04db      	lsls	r3, r3, #19
 8007cba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cd6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007cda:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007cde:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d12f      	bne.n	8007d46 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0a:	691a      	ldr	r2, [r3, #16]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d14:	6939      	ldr	r1, [r7, #16]
 8007d16:	0148      	lsls	r0, r1, #5
 8007d18:	6979      	ldr	r1, [r7, #20]
 8007d1a:	4401      	add	r1, r0
 8007d1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d20:	4313      	orrs	r3, r2
 8007d22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d42:	6113      	str	r3, [r2, #16]
 8007d44:	e062      	b.n	8007e0c <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d126      	bne.n	8007d9c <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5a:	691a      	ldr	r2, [r3, #16]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d64:	6939      	ldr	r1, [r7, #16]
 8007d66:	0148      	lsls	r0, r1, #5
 8007d68:	6979      	ldr	r1, [r7, #20]
 8007d6a:	4401      	add	r1, r0
 8007d6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d70:	4313      	orrs	r3, r2
 8007d72:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d92:	6113      	str	r3, [r2, #16]
 8007d94:	e03a      	b.n	8007e0c <USB_EPStartXfer+0x3e8>
 8007d96:	bf00      	nop
 8007d98:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	4413      	add	r3, r2
 8007da6:	1e5a      	subs	r2, r3, #1
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	89fa      	ldrh	r2, [r7, #14]
 8007db8:	fb03 f202 	mul.w	r2, r3, r2
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	89fb      	ldrh	r3, [r7, #14]
 8007dd0:	04d9      	lsls	r1, r3, #19
 8007dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8007e90 <USB_EPStartXfer+0x46c>)
 8007dd4:	400b      	ands	r3, r1
 8007dd6:	6939      	ldr	r1, [r7, #16]
 8007dd8:	0148      	lsls	r0, r1, #5
 8007dda:	6979      	ldr	r1, [r7, #20]
 8007ddc:	4401      	add	r1, r0
 8007dde:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007de2:	4313      	orrs	r3, r2
 8007de4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dfc:	6939      	ldr	r1, [r7, #16]
 8007dfe:	0148      	lsls	r0, r1, #5
 8007e00:	6979      	ldr	r1, [r7, #20]
 8007e02:	4401      	add	r1, r0
 8007e04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	791b      	ldrb	r3, [r3, #4]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d128      	bne.n	8007e66 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d110      	bne.n	8007e46 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	e00f      	b.n	8007e66 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e64:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	0151      	lsls	r1, r2, #5
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	440a      	add	r2, r1
 8007e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	1ff80000 	.word	0x1ff80000

08007e94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d14a      	bne.n	8007f48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007eca:	f040 8086 	bne.w	8007fda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	7812      	ldrb	r2, [r2, #0]
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ef0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	7812      	ldrb	r2, [r2, #0]
 8007f06:	0151      	lsls	r1, r2, #5
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	440a      	add	r2, r1
 8007f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d902      	bls.n	8007f2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	75fb      	strb	r3, [r7, #23]
          break;
 8007f2a:	e056      	b.n	8007fda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f44:	d0e7      	beq.n	8007f16 <USB_EPStopXfer+0x82>
 8007f46:	e048      	b.n	8007fda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f60:	d13b      	bne.n	8007fda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	7812      	ldrb	r2, [r2, #0]
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	7812      	ldrb	r2, [r2, #0]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3301      	adds	r3, #1
 8007fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d902      	bls.n	8007fc0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007fbe:	e00c      	b.n	8007fda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fd8:	d0e7      	beq.n	8007faa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	371c      	adds	r7, #28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b089      	sub	sp, #36	@ 0x24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	71fb      	strb	r3, [r7, #7]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008006:	88bb      	ldrh	r3, [r7, #4]
 8008008:	3303      	adds	r3, #3
 800800a:	089b      	lsrs	r3, r3, #2
 800800c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800800e:	2300      	movs	r3, #0
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	e018      	b.n	8008046 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	031a      	lsls	r2, r3, #12
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	4413      	add	r3, r2
 800801c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008020:	461a      	mov	r2, r3
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	3301      	adds	r3, #1
 800802c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	3301      	adds	r3, #1
 8008032:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	3301      	adds	r3, #1
 8008038:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	3301      	adds	r3, #1
 800803e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	3301      	adds	r3, #1
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	429a      	cmp	r2, r3
 800804c:	d3e2      	bcc.n	8008014 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3724      	adds	r7, #36	@ 0x24
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800805c:	b480      	push	{r7}
 800805e:	b08b      	sub	sp, #44	@ 0x2c
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	089b      	lsrs	r3, r3, #2
 8008076:	b29b      	uxth	r3, r3
 8008078:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008082:	2300      	movs	r3, #0
 8008084:	623b      	str	r3, [r7, #32]
 8008086:	e014      	b.n	80080b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	601a      	str	r2, [r3, #0]
    pDest++;
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	3301      	adds	r3, #1
 8008098:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	3301      	adds	r3, #1
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a2:	3301      	adds	r3, #1
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	3301      	adds	r3, #1
 80080aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	3301      	adds	r3, #1
 80080b0:	623b      	str	r3, [r7, #32]
 80080b2:	6a3a      	ldr	r2, [r7, #32]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d3e6      	bcc.n	8008088 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080ba:	8bfb      	ldrh	r3, [r7, #30]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01e      	beq.n	80080fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ca:	461a      	mov	r2, r3
 80080cc:	f107 0310 	add.w	r3, r7, #16
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	fa22 f303 	lsr.w	r3, r2, r3
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	701a      	strb	r2, [r3, #0]
      i++;
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	3301      	adds	r3, #1
 80080ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	3301      	adds	r3, #1
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80080f2:	8bfb      	ldrh	r3, [r7, #30]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080f8:	8bfb      	ldrh	r3, [r7, #30]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1ea      	bne.n	80080d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008100:	4618      	mov	r0, r3
 8008102:	372c      	adds	r7, #44	@ 0x2c
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d12c      	bne.n	8008182 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	db12      	blt.n	8008160 <USB_EPSetStall+0x54>
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00f      	beq.n	8008160 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	440a      	add	r2, r1
 8008156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800815a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800815e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	440a      	add	r2, r1
 8008176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800817a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	e02b      	b.n	80081da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	db12      	blt.n	80081ba <USB_EPSetStall+0xae>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00f      	beq.n	80081ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d128      	bne.n	8008256 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	440a      	add	r2, r1
 800821a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800821e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008222:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	791b      	ldrb	r3, [r3, #4]
 8008228:	2b03      	cmp	r3, #3
 800822a:	d003      	beq.n	8008234 <USB_EPClearStall+0x4c>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	791b      	ldrb	r3, [r3, #4]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d138      	bne.n	80082a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	440a      	add	r2, r1
 800824a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800824e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	e027      	b.n	80082a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	0151      	lsls	r1, r2, #5
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	440a      	add	r2, r1
 800826c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008270:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008274:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	2b03      	cmp	r3, #3
 800827c:	d003      	beq.n	8008286 <USB_EPClearStall+0x9e>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	791b      	ldrb	r3, [r3, #4]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d10f      	bne.n	80082a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	440a      	add	r2, r1
 800829c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80082d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	011b      	lsls	r3, r3, #4
 80082e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80082e8:	68f9      	ldr	r1, [r7, #12]
 80082ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082ee:	4313      	orrs	r3, r2
 80082f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800831a:	f023 0303 	bic.w	r3, r3, #3
 800831e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800832e:	f023 0302 	bic.w	r3, r3, #2
 8008332:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008342:	b480      	push	{r7}
 8008344:	b085      	sub	sp, #20
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800835c:	f023 0303 	bic.w	r3, r3, #3
 8008360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008370:	f043 0302 	orr.w	r3, r3, #2
 8008374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4013      	ands	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800839c:	68fb      	ldr	r3, [r7, #12]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	4013      	ands	r3, r2
 80083cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	0c1b      	lsrs	r3, r3, #16
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	4013      	ands	r3, r2
 8008400:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	b29b      	uxth	r3, r3
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4013      	ands	r3, r2
 800843e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008440:	68bb      	ldr	r3, [r7, #8]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800844e:	b480      	push	{r7}
 8008450:	b087      	sub	sp, #28
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800846e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008470:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	f003 030f 	and.w	r3, r3, #15
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	fa22 f303 	lsr.w	r3, r2, r3
 800847e:	01db      	lsls	r3, r3, #7
 8008480:	b2db      	uxtb	r3, r3
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4013      	ands	r3, r2
 800849a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800849c:	68bb      	ldr	r3, [r7, #8]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f003 0301 	and.w	r3, r3, #1
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80084e4:	f023 0307 	bic.w	r3, r3, #7
 80084e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	333c      	adds	r3, #60	@ 0x3c
 800851e:	3304      	adds	r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4a1c      	ldr	r2, [pc, #112]	@ (8008598 <USB_EP0_OutStart+0x8c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d90a      	bls.n	8008542 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800853c:	d101      	bne.n	8008542 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	e024      	b.n	800858c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008548:	461a      	mov	r2, r3
 800854a:	2300      	movs	r3, #0
 800854c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800855c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008560:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008570:	f043 0318 	orr.w	r3, r3, #24
 8008574:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008584:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008588:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	4f54300a 	.word	0x4f54300a

0800859c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3301      	adds	r3, #1
 80085ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085b4:	d901      	bls.n	80085ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e01b      	b.n	80085f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	daf2      	bge.n	80085a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	f043 0201 	orr.w	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3301      	adds	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085de:	d901      	bls.n	80085e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e006      	b.n	80085f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d0f0      	beq.n	80085d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800860c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008610:	f002 fdca 	bl	800b1a8 <USBD_static_malloc>
 8008614:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d109      	bne.n	8008630 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	32b0      	adds	r2, #176	@ 0xb0
 8008626:	2100      	movs	r1, #0
 8008628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800862c:	2302      	movs	r3, #2
 800862e:	e0d4      	b.n	80087da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008630:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008634:	2100      	movs	r1, #0
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f002 fdd4 	bl	800b1e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	32b0      	adds	r2, #176	@ 0xb0
 8008646:	68f9      	ldr	r1, [r7, #12]
 8008648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32b0      	adds	r2, #176	@ 0xb0
 8008656:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	7c1b      	ldrb	r3, [r3, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d138      	bne.n	80086da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008668:	4b5e      	ldr	r3, [pc, #376]	@ (80087e4 <USBD_CDC_Init+0x1e4>)
 800866a:	7819      	ldrb	r1, [r3, #0]
 800866c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008670:	2202      	movs	r2, #2
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f002 fb84 	bl	800ad80 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008678:	4b5a      	ldr	r3, [pc, #360]	@ (80087e4 <USBD_CDC_Init+0x1e4>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 020f 	and.w	r2, r3, #15
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	440b      	add	r3, r1
 800868c:	3324      	adds	r3, #36	@ 0x24
 800868e:	2201      	movs	r2, #1
 8008690:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008692:	4b55      	ldr	r3, [pc, #340]	@ (80087e8 <USBD_CDC_Init+0x1e8>)
 8008694:	7819      	ldrb	r1, [r3, #0]
 8008696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800869a:	2202      	movs	r2, #2
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f002 fb6f 	bl	800ad80 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80086a2:	4b51      	ldr	r3, [pc, #324]	@ (80087e8 <USBD_CDC_Init+0x1e8>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	f003 020f 	and.w	r2, r3, #15
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	440b      	add	r3, r1
 80086b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086ba:	2201      	movs	r2, #1
 80086bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80086be:	4b4b      	ldr	r3, [pc, #300]	@ (80087ec <USBD_CDC_Init+0x1ec>)
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	f003 020f 	and.w	r2, r3, #15
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	3326      	adds	r3, #38	@ 0x26
 80086d4:	2210      	movs	r2, #16
 80086d6:	801a      	strh	r2, [r3, #0]
 80086d8:	e035      	b.n	8008746 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086da:	4b42      	ldr	r3, [pc, #264]	@ (80087e4 <USBD_CDC_Init+0x1e4>)
 80086dc:	7819      	ldrb	r1, [r3, #0]
 80086de:	2340      	movs	r3, #64	@ 0x40
 80086e0:	2202      	movs	r2, #2
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f002 fb4c 	bl	800ad80 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086e8:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <USBD_CDC_Init+0x1e4>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f003 020f 	and.w	r2, r3, #15
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	3324      	adds	r3, #36	@ 0x24
 80086fe:	2201      	movs	r2, #1
 8008700:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008702:	4b39      	ldr	r3, [pc, #228]	@ (80087e8 <USBD_CDC_Init+0x1e8>)
 8008704:	7819      	ldrb	r1, [r3, #0]
 8008706:	2340      	movs	r3, #64	@ 0x40
 8008708:	2202      	movs	r2, #2
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f002 fb38 	bl	800ad80 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008710:	4b35      	ldr	r3, [pc, #212]	@ (80087e8 <USBD_CDC_Init+0x1e8>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 020f 	and.w	r2, r3, #15
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008728:	2201      	movs	r2, #1
 800872a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800872c:	4b2f      	ldr	r3, [pc, #188]	@ (80087ec <USBD_CDC_Init+0x1ec>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	f003 020f 	and.w	r2, r3, #15
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	440b      	add	r3, r1
 8008740:	3326      	adds	r3, #38	@ 0x26
 8008742:	2210      	movs	r2, #16
 8008744:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008746:	4b29      	ldr	r3, [pc, #164]	@ (80087ec <USBD_CDC_Init+0x1ec>)
 8008748:	7819      	ldrb	r1, [r3, #0]
 800874a:	2308      	movs	r3, #8
 800874c:	2203      	movs	r2, #3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f002 fb16 	bl	800ad80 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008754:	4b25      	ldr	r3, [pc, #148]	@ (80087ec <USBD_CDC_Init+0x1ec>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	f003 020f 	and.w	r2, r3, #15
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	3324      	adds	r3, #36	@ 0x24
 800876a:	2201      	movs	r2, #1
 800876c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	33b0      	adds	r3, #176	@ 0xb0
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80087a4:	2302      	movs	r3, #2
 80087a6:	e018      	b.n	80087da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	7c1b      	ldrb	r3, [r3, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10a      	bne.n	80087c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087b0:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <USBD_CDC_Init+0x1e8>)
 80087b2:	7819      	ldrb	r1, [r3, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f002 fc58 	bl	800b074 <USBD_LL_PrepareReceive>
 80087c4:	e008      	b.n	80087d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087c6:	4b08      	ldr	r3, [pc, #32]	@ (80087e8 <USBD_CDC_Init+0x1e8>)
 80087c8:	7819      	ldrb	r1, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087d0:	2340      	movs	r3, #64	@ 0x40
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f002 fc4e 	bl	800b074 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20000117 	.word	0x20000117
 80087e8:	20000118 	.word	0x20000118
 80087ec:	20000119 	.word	0x20000119

080087f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80087fc:	4b3a      	ldr	r3, [pc, #232]	@ (80088e8 <USBD_CDC_DeInit+0xf8>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f002 fafa 	bl	800adfc <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008808:	4b37      	ldr	r3, [pc, #220]	@ (80088e8 <USBD_CDC_DeInit+0xf8>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	f003 020f 	and.w	r2, r3, #15
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	3324      	adds	r3, #36	@ 0x24
 800881e:	2200      	movs	r2, #0
 8008820:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008822:	4b32      	ldr	r3, [pc, #200]	@ (80088ec <USBD_CDC_DeInit+0xfc>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f002 fae7 	bl	800adfc <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800882e:	4b2f      	ldr	r3, [pc, #188]	@ (80088ec <USBD_CDC_DeInit+0xfc>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	f003 020f 	and.w	r2, r3, #15
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008846:	2200      	movs	r2, #0
 8008848:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800884a:	4b29      	ldr	r3, [pc, #164]	@ (80088f0 <USBD_CDC_DeInit+0x100>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f002 fad3 	bl	800adfc <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008856:	4b26      	ldr	r3, [pc, #152]	@ (80088f0 <USBD_CDC_DeInit+0x100>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	f003 020f 	and.w	r2, r3, #15
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	3324      	adds	r3, #36	@ 0x24
 800886c:	2200      	movs	r2, #0
 800886e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008870:	4b1f      	ldr	r3, [pc, #124]	@ (80088f0 <USBD_CDC_DeInit+0x100>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	f003 020f 	and.w	r2, r3, #15
 8008878:	6879      	ldr	r1, [r7, #4]
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	440b      	add	r3, r1
 8008884:	3326      	adds	r3, #38	@ 0x26
 8008886:	2200      	movs	r2, #0
 8008888:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	32b0      	adds	r2, #176	@ 0xb0
 8008894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01f      	beq.n	80088dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	33b0      	adds	r3, #176	@ 0xb0
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	32b0      	adds	r2, #176	@ 0xb0
 80088ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088be:	4618      	mov	r0, r3
 80088c0:	f002 fc80 	bl	800b1c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	32b0      	adds	r2, #176	@ 0xb0
 80088ce:	2100      	movs	r1, #0
 80088d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20000117 	.word	0x20000117
 80088ec:	20000118 	.word	0x20000118
 80088f0:	20000119 	.word	0x20000119

080088f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	32b0      	adds	r2, #176	@ 0xb0
 8008908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008920:	2303      	movs	r3, #3
 8008922:	e0bf      	b.n	8008aa4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800892c:	2b00      	cmp	r3, #0
 800892e:	d050      	beq.n	80089d2 <USBD_CDC_Setup+0xde>
 8008930:	2b20      	cmp	r3, #32
 8008932:	f040 80af 	bne.w	8008a94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	88db      	ldrh	r3, [r3, #6]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d03a      	beq.n	80089b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	b25b      	sxtb	r3, r3
 8008944:	2b00      	cmp	r3, #0
 8008946:	da1b      	bge.n	8008980 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	33b0      	adds	r3, #176	@ 0xb0
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800895e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	88d2      	ldrh	r2, [r2, #6]
 8008964:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	88db      	ldrh	r3, [r3, #6]
 800896a:	2b07      	cmp	r3, #7
 800896c:	bf28      	it	cs
 800896e:	2307      	movcs	r3, #7
 8008970:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	89fa      	ldrh	r2, [r7, #14]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 fd7d 	bl	800a478 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800897e:	e090      	b.n	8008aa2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	785a      	ldrb	r2, [r3, #1]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	88db      	ldrh	r3, [r3, #6]
 800898e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008990:	d803      	bhi.n	800899a <USBD_CDC_Setup+0xa6>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	88db      	ldrh	r3, [r3, #6]
 8008996:	b2da      	uxtb	r2, r3
 8008998:	e000      	b.n	800899c <USBD_CDC_Setup+0xa8>
 800899a:	2240      	movs	r2, #64	@ 0x40
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80089a2:	6939      	ldr	r1, [r7, #16]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80089aa:	461a      	mov	r2, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fd8f 	bl	800a4d0 <USBD_CtlPrepareRx>
      break;
 80089b2:	e076      	b.n	8008aa2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	33b0      	adds	r3, #176	@ 0xb0
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	7850      	ldrb	r0, [r2, #1]
 80089ca:	2200      	movs	r2, #0
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	4798      	blx	r3
      break;
 80089d0:	e067      	b.n	8008aa2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	2b0b      	cmp	r3, #11
 80089d8:	d851      	bhi.n	8008a7e <USBD_CDC_Setup+0x18a>
 80089da:	a201      	add	r2, pc, #4	@ (adr r2, 80089e0 <USBD_CDC_Setup+0xec>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	08008a11 	.word	0x08008a11
 80089e4:	08008a8d 	.word	0x08008a8d
 80089e8:	08008a7f 	.word	0x08008a7f
 80089ec:	08008a7f 	.word	0x08008a7f
 80089f0:	08008a7f 	.word	0x08008a7f
 80089f4:	08008a7f 	.word	0x08008a7f
 80089f8:	08008a7f 	.word	0x08008a7f
 80089fc:	08008a7f 	.word	0x08008a7f
 8008a00:	08008a7f 	.word	0x08008a7f
 8008a04:	08008a7f 	.word	0x08008a7f
 8008a08:	08008a3b 	.word	0x08008a3b
 8008a0c:	08008a65 	.word	0x08008a65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d107      	bne.n	8008a2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a1c:	f107 030a 	add.w	r3, r7, #10
 8008a20:	2202      	movs	r2, #2
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 fd27 	bl	800a478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a2a:	e032      	b.n	8008a92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 fca5 	bl	800a37e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a34:	2303      	movs	r3, #3
 8008a36:	75fb      	strb	r3, [r7, #23]
          break;
 8008a38:	e02b      	b.n	8008a92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d107      	bne.n	8008a56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a46:	f107 030d 	add.w	r3, r7, #13
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fd12 	bl	800a478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a54:	e01d      	b.n	8008a92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 fc90 	bl	800a37e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	75fb      	strb	r3, [r7, #23]
          break;
 8008a62:	e016      	b.n	8008a92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d00f      	beq.n	8008a90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 fc83 	bl	800a37e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a7c:	e008      	b.n	8008a90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 fc7c 	bl	800a37e <USBD_CtlError>
          ret = USBD_FAIL;
 8008a86:	2303      	movs	r3, #3
 8008a88:	75fb      	strb	r3, [r7, #23]
          break;
 8008a8a:	e002      	b.n	8008a92 <USBD_CDC_Setup+0x19e>
          break;
 8008a8c:	bf00      	nop
 8008a8e:	e008      	b.n	8008aa2 <USBD_CDC_Setup+0x1ae>
          break;
 8008a90:	bf00      	nop
      }
      break;
 8008a92:	e006      	b.n	8008aa2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f001 fc71 	bl	800a37e <USBD_CtlError>
      ret = USBD_FAIL;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008abe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	32b0      	adds	r2, #176	@ 0xb0
 8008aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e065      	b.n	8008ba2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	32b0      	adds	r2, #176	@ 0xb0
 8008ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	f003 020f 	and.w	r2, r3, #15
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	440b      	add	r3, r1
 8008af8:	3318      	adds	r3, #24
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d02f      	beq.n	8008b60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	f003 020f 	and.w	r2, r3, #15
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	3318      	adds	r3, #24
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	f003 010f 	and.w	r1, r3, #15
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	00db      	lsls	r3, r3, #3
 8008b22:	440b      	add	r3, r1
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4403      	add	r3, r0
 8008b28:	331c      	adds	r3, #28
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b30:	fb01 f303 	mul.w	r3, r1, r3
 8008b34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d112      	bne.n	8008b60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	f003 020f 	and.w	r2, r3, #15
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	440b      	add	r3, r1
 8008b4c:	3318      	adds	r3, #24
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b52:	78f9      	ldrb	r1, [r7, #3]
 8008b54:	2300      	movs	r3, #0
 8008b56:	2200      	movs	r2, #0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f002 fa53 	bl	800b004 <USBD_LL_Transmit>
 8008b5e:	e01f      	b.n	8008ba0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	33b0      	adds	r3, #176	@ 0xb0
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d010      	beq.n	8008ba0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	33b0      	adds	r3, #176	@ 0xb0
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b9c:	78fa      	ldrb	r2, [r7, #3]
 8008b9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	32b0      	adds	r2, #176	@ 0xb0
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	32b0      	adds	r2, #176	@ 0xb0
 8008bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e01a      	b.n	8008c12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f002 fa7f 	bl	800b0e4 <USBD_LL_GetRxDataSize>
 8008be6:	4602      	mov	r2, r0
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	33b0      	adds	r3, #176	@ 0xb0
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	32b0      	adds	r2, #176	@ 0xb0
 8008c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e024      	b.n	8008c86 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	33b0      	adds	r3, #176	@ 0xb0
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d019      	beq.n	8008c84 <USBD_CDC_EP0_RxReady+0x6a>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c56:	2bff      	cmp	r3, #255	@ 0xff
 8008c58:	d014      	beq.n	8008c84 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	33b0      	adds	r3, #176	@ 0xb0
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008c72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	22ff      	movs	r2, #255	@ 0xff
 8008c80:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c98:	2182      	movs	r1, #130	@ 0x82
 8008c9a:	4818      	ldr	r0, [pc, #96]	@ (8008cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c9c:	f000 fd0f 	bl	80096be <USBD_GetEpDesc>
 8008ca0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	4815      	ldr	r0, [pc, #84]	@ (8008cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ca6:	f000 fd0a 	bl	80096be <USBD_GetEpDesc>
 8008caa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008cac:	2181      	movs	r1, #129	@ 0x81
 8008cae:	4813      	ldr	r0, [pc, #76]	@ (8008cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008cb0:	f000 fd05 	bl	80096be <USBD_GetEpDesc>
 8008cb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2210      	movs	r2, #16
 8008cc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d006      	beq.n	8008cd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cd0:	711a      	strb	r2, [r3, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d006      	beq.n	8008cea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ce4:	711a      	strb	r2, [r3, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2243      	movs	r2, #67	@ 0x43
 8008cee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cf0:	4b02      	ldr	r3, [pc, #8]	@ (8008cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	200000d4 	.word	0x200000d4

08008d00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d08:	2182      	movs	r1, #130	@ 0x82
 8008d0a:	4818      	ldr	r0, [pc, #96]	@ (8008d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d0c:	f000 fcd7 	bl	80096be <USBD_GetEpDesc>
 8008d10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d12:	2101      	movs	r1, #1
 8008d14:	4815      	ldr	r0, [pc, #84]	@ (8008d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d16:	f000 fcd2 	bl	80096be <USBD_GetEpDesc>
 8008d1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d1c:	2181      	movs	r1, #129	@ 0x81
 8008d1e:	4813      	ldr	r0, [pc, #76]	@ (8008d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d20:	f000 fccd 	bl	80096be <USBD_GetEpDesc>
 8008d24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2210      	movs	r2, #16
 8008d30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d006      	beq.n	8008d46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	711a      	strb	r2, [r3, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f042 0202 	orr.w	r2, r2, #2
 8008d44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d006      	beq.n	8008d5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	711a      	strb	r2, [r3, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f042 0202 	orr.w	r2, r2, #2
 8008d58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2243      	movs	r2, #67	@ 0x43
 8008d5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d60:	4b02      	ldr	r3, [pc, #8]	@ (8008d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	200000d4 	.word	0x200000d4

08008d70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d78:	2182      	movs	r1, #130	@ 0x82
 8008d7a:	4818      	ldr	r0, [pc, #96]	@ (8008ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d7c:	f000 fc9f 	bl	80096be <USBD_GetEpDesc>
 8008d80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d82:	2101      	movs	r1, #1
 8008d84:	4815      	ldr	r0, [pc, #84]	@ (8008ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d86:	f000 fc9a 	bl	80096be <USBD_GetEpDesc>
 8008d8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d8c:	2181      	movs	r1, #129	@ 0x81
 8008d8e:	4813      	ldr	r0, [pc, #76]	@ (8008ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d90:	f000 fc95 	bl	80096be <USBD_GetEpDesc>
 8008d94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2210      	movs	r2, #16
 8008da0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d006      	beq.n	8008db6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008db0:	711a      	strb	r2, [r3, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d006      	beq.n	8008dca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dc4:	711a      	strb	r2, [r3, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2243      	movs	r2, #67	@ 0x43
 8008dce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008dd0:	4b02      	ldr	r3, [pc, #8]	@ (8008ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	200000d4 	.word	0x200000d4

08008de0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	220a      	movs	r2, #10
 8008dec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008dee:	4b03      	ldr	r3, [pc, #12]	@ (8008dfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	20000090 	.word	0x20000090

08008e00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e009      	b.n	8008e28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	33b0      	adds	r3, #176	@ 0xb0
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	32b0      	adds	r2, #176	@ 0xb0
 8008e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e008      	b.n	8008e6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	371c      	adds	r7, #28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	32b0      	adds	r2, #176	@ 0xb0
 8008e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e004      	b.n	8008ea6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
	...

08008eb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	32b0      	adds	r2, #176	@ 0xb0
 8008ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	32b0      	adds	r2, #176	@ 0xb0
 8008ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e018      	b.n	8008f14 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7c1b      	ldrb	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10a      	bne.n	8008f00 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008eea:	4b0c      	ldr	r3, [pc, #48]	@ (8008f1c <USBD_CDC_ReceivePacket+0x68>)
 8008eec:	7819      	ldrb	r1, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f002 f8bb 	bl	800b074 <USBD_LL_PrepareReceive>
 8008efe:	e008      	b.n	8008f12 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f00:	4b06      	ldr	r3, [pc, #24]	@ (8008f1c <USBD_CDC_ReceivePacket+0x68>)
 8008f02:	7819      	ldrb	r1, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f0a:	2340      	movs	r3, #64	@ 0x40
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f002 f8b1 	bl	800b074 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000118 	.word	0x20000118

08008f20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e01f      	b.n	8008f78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	79fa      	ldrb	r2, [r7, #7]
 8008f6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f001 fe89 	bl	800ac84 <USBD_LL_Init>
 8008f72:	4603      	mov	r3, r0
 8008f74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e025      	b.n	8008fe4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	32ae      	adds	r2, #174	@ 0xae
 8008faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00f      	beq.n	8008fd4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	32ae      	adds	r2, #174	@ 0xae
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc4:	f107 020e 	add.w	r2, r7, #14
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
 8008fcc:	4602      	mov	r2, r0
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 fe91 	bl	800ad1c <USBD_LL_Start>
 8008ffa:	4603      	mov	r3, r0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009030:	2b00      	cmp	r3, #0
 8009032:	d009      	beq.n	8009048 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	78fa      	ldrb	r2, [r7, #3]
 800903e:	4611      	mov	r1, r2
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	4798      	blx	r3
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009048:	7bfb      	ldrb	r3, [r7, #15]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	4611      	mov	r1, r2
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	4798      	blx	r3
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009078:	2303      	movs	r3, #3
 800907a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800907c:	7bfb      	ldrb	r3, [r7, #15]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f936 	bl	800a30a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80090ac:	461a      	mov	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80090ba:	f003 031f 	and.w	r3, r3, #31
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d01a      	beq.n	80090f8 <USBD_LL_SetupStage+0x72>
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d822      	bhi.n	800910c <USBD_LL_SetupStage+0x86>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <USBD_LL_SetupStage+0x4a>
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d00a      	beq.n	80090e4 <USBD_LL_SetupStage+0x5e>
 80090ce:	e01d      	b.n	800910c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fb63 	bl	80097a4 <USBD_StdDevReq>
 80090de:	4603      	mov	r3, r0
 80090e0:	73fb      	strb	r3, [r7, #15]
      break;
 80090e2:	e020      	b.n	8009126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fbcb 	bl	8009888 <USBD_StdItfReq>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73fb      	strb	r3, [r7, #15]
      break;
 80090f6:	e016      	b.n	8009126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fc2d 	bl	8009960 <USBD_StdEPReq>
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]
      break;
 800910a:	e00c      	b.n	8009126 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009112:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009116:	b2db      	uxtb	r3, r3
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 fea4 	bl	800ae68 <USBD_LL_StallEP>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]
      break;
 8009124:	bf00      	nop
  }

  return ret;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	460b      	mov	r3, r1
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009142:	7afb      	ldrb	r3, [r7, #11]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d16e      	bne.n	8009226 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800914e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009156:	2b03      	cmp	r3, #3
 8009158:	f040 8098 	bne.w	800928c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	429a      	cmp	r2, r3
 8009166:	d913      	bls.n	8009190 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	1ad2      	subs	r2, r2, r3
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	4293      	cmp	r3, r2
 8009180:	bf28      	it	cs
 8009182:	4613      	movcs	r3, r2
 8009184:	461a      	mov	r2, r3
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f001 f9be 	bl	800a50a <USBD_CtlContinueRx>
 800918e:	e07d      	b.n	800928c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009196:	f003 031f 	and.w	r3, r3, #31
 800919a:	2b02      	cmp	r3, #2
 800919c:	d014      	beq.n	80091c8 <USBD_LL_DataOutStage+0x98>
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d81d      	bhi.n	80091de <USBD_LL_DataOutStage+0xae>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <USBD_LL_DataOutStage+0x7c>
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d003      	beq.n	80091b2 <USBD_LL_DataOutStage+0x82>
 80091aa:	e018      	b.n	80091de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	75bb      	strb	r3, [r7, #22]
            break;
 80091b0:	e018      	b.n	80091e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	4619      	mov	r1, r3
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fa64 	bl	800968a <USBD_CoreFindIF>
 80091c2:	4603      	mov	r3, r0
 80091c4:	75bb      	strb	r3, [r7, #22]
            break;
 80091c6:	e00d      	b.n	80091e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	4619      	mov	r1, r3
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 fa66 	bl	80096a4 <USBD_CoreFindEP>
 80091d8:	4603      	mov	r3, r0
 80091da:	75bb      	strb	r3, [r7, #22]
            break;
 80091dc:	e002      	b.n	80091e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	75bb      	strb	r3, [r7, #22]
            break;
 80091e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80091e4:	7dbb      	ldrb	r3, [r7, #22]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d119      	bne.n	800921e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d113      	bne.n	800921e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80091f6:	7dba      	ldrb	r2, [r7, #22]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	32ae      	adds	r2, #174	@ 0xae
 80091fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00b      	beq.n	800921e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009206:	7dba      	ldrb	r2, [r7, #22]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800920e:	7dba      	ldrb	r2, [r7, #22]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	32ae      	adds	r2, #174	@ 0xae
 8009214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f001 f984 	bl	800a52c <USBD_CtlSendStatus>
 8009224:	e032      	b.n	800928c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800922c:	b2db      	uxtb	r3, r3
 800922e:	4619      	mov	r1, r3
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 fa37 	bl	80096a4 <USBD_CoreFindEP>
 8009236:	4603      	mov	r3, r0
 8009238:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800923a:	7dbb      	ldrb	r3, [r7, #22]
 800923c:	2bff      	cmp	r3, #255	@ 0xff
 800923e:	d025      	beq.n	800928c <USBD_LL_DataOutStage+0x15c>
 8009240:	7dbb      	ldrb	r3, [r7, #22]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d122      	bne.n	800928c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b03      	cmp	r3, #3
 8009250:	d117      	bne.n	8009282 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009252:	7dba      	ldrb	r2, [r7, #22]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	32ae      	adds	r2, #174	@ 0xae
 8009258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00f      	beq.n	8009282 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009262:	7dba      	ldrb	r2, [r7, #22]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800926a:	7dba      	ldrb	r2, [r7, #22]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	32ae      	adds	r2, #174	@ 0xae
 8009270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	7afa      	ldrb	r2, [r7, #11]
 8009278:	4611      	mov	r1, r2
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	4798      	blx	r3
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	e000      	b.n	800928e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b086      	sub	sp, #24
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	460b      	mov	r3, r1
 80092a0:	607a      	str	r2, [r7, #4]
 80092a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80092a4:	7afb      	ldrb	r3, [r7, #11]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d16f      	bne.n	800938a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3314      	adds	r3, #20
 80092ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d15a      	bne.n	8009370 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	689a      	ldr	r2, [r3, #8]
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d914      	bls.n	80092f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	1ad2      	subs	r2, r2, r3
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	461a      	mov	r2, r3
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f001 f8e6 	bl	800a4ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e2:	2300      	movs	r3, #0
 80092e4:	2200      	movs	r2, #0
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f001 fec3 	bl	800b074 <USBD_LL_PrepareReceive>
 80092ee:	e03f      	b.n	8009370 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d11c      	bne.n	8009336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009304:	429a      	cmp	r2, r3
 8009306:	d316      	bcc.n	8009336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009312:	429a      	cmp	r2, r3
 8009314:	d20f      	bcs.n	8009336 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009316:	2200      	movs	r2, #0
 8009318:	2100      	movs	r1, #0
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f001 f8c7 	bl	800a4ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009328:	2300      	movs	r3, #0
 800932a:	2200      	movs	r2, #0
 800932c:	2100      	movs	r1, #0
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f001 fea0 	bl	800b074 <USBD_LL_PrepareReceive>
 8009334:	e01c      	b.n	8009370 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b03      	cmp	r3, #3
 8009340:	d10f      	bne.n	8009362 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d009      	beq.n	8009362 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009362:	2180      	movs	r1, #128	@ 0x80
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f001 fd7f 	bl	800ae68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f001 f8f1 	bl	800a552 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d03a      	beq.n	80093f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff fe42 	bl	8009004 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009388:	e032      	b.n	80093f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009390:	b2db      	uxtb	r3, r3
 8009392:	4619      	mov	r1, r3
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f985 	bl	80096a4 <USBD_CoreFindEP>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2bff      	cmp	r3, #255	@ 0xff
 80093a2:	d025      	beq.n	80093f0 <USBD_LL_DataInStage+0x15a>
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d122      	bne.n	80093f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d11c      	bne.n	80093f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80093b6:	7dfa      	ldrb	r2, [r7, #23]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	32ae      	adds	r2, #174	@ 0xae
 80093bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d014      	beq.n	80093f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80093c6:	7dfa      	ldrb	r2, [r7, #23]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80093ce:	7dfa      	ldrb	r2, [r7, #23]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	32ae      	adds	r2, #174	@ 0xae
 80093d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	7afa      	ldrb	r2, [r7, #11]
 80093dc:	4611      	mov	r1, r2
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	4798      	blx	r3
 80093e2:	4603      	mov	r3, r0
 80093e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80093e6:	7dbb      	ldrb	r3, [r7, #22]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80093ec:	7dbb      	ldrb	r3, [r7, #22]
 80093ee:	e000      	b.n	80093f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009432:	2b00      	cmp	r3, #0
 8009434:	d014      	beq.n	8009460 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00e      	beq.n	8009460 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6852      	ldr	r2, [r2, #4]
 800944e:	b2d2      	uxtb	r2, r2
 8009450:	4611      	mov	r1, r2
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4798      	blx	r3
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800945c:	2303      	movs	r3, #3
 800945e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009460:	2340      	movs	r3, #64	@ 0x40
 8009462:	2200      	movs	r2, #0
 8009464:	2100      	movs	r1, #0
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f001 fc8a 	bl	800ad80 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2240      	movs	r2, #64	@ 0x40
 8009478:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800947c:	2340      	movs	r3, #64	@ 0x40
 800947e:	2200      	movs	r2, #0
 8009480:	2180      	movs	r1, #128	@ 0x80
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f001 fc7c 	bl	800ad80 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2240      	movs	r2, #64	@ 0x40
 8009492:	621a      	str	r2, [r3, #32]

  return ret;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	78fa      	ldrb	r2, [r7, #3]
 80094ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d006      	beq.n	80094e0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2204      	movs	r2, #4
 80094e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b04      	cmp	r3, #4
 8009508:	d106      	bne.n	8009518 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009510:	b2da      	uxtb	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b03      	cmp	r3, #3
 8009538:	d110      	bne.n	800955c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	32ae      	adds	r2, #174	@ 0xae
 800957c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009584:	2303      	movs	r3, #3
 8009586:	e01c      	b.n	80095c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b03      	cmp	r3, #3
 8009592:	d115      	bne.n	80095c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	32ae      	adds	r2, #174	@ 0xae
 800959e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00b      	beq.n	80095c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	32ae      	adds	r2, #174	@ 0xae
 80095b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	78fa      	ldrb	r2, [r7, #3]
 80095ba:	4611      	mov	r1, r2
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	460b      	mov	r3, r1
 80095d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	32ae      	adds	r2, #174	@ 0xae
 80095e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e01c      	b.n	8009626 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d115      	bne.n	8009624 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	32ae      	adds	r2, #174	@ 0xae
 8009602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	32ae      	adds	r2, #174	@ 0xae
 8009616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961c:	78fa      	ldrb	r2, [r7, #3]
 800961e:	4611      	mov	r1, r2
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00e      	beq.n	8009680 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	6852      	ldr	r2, [r2, #4]
 800966e:	b2d2      	uxtb	r2, r2
 8009670:	4611      	mov	r1, r2
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	4798      	blx	r3
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800967c:	2303      	movs	r3, #3
 800967e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009680:	7bfb      	ldrb	r3, [r7, #15]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009696:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b086      	sub	sp, #24
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	885b      	ldrh	r3, [r3, #2]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	7812      	ldrb	r2, [r2, #0]
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d91f      	bls.n	8009724 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80096ea:	e013      	b.n	8009714 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80096ec:	f107 030a 	add.w	r3, r7, #10
 80096f0:	4619      	mov	r1, r3
 80096f2:	6978      	ldr	r0, [r7, #20]
 80096f4:	f000 f81b 	bl	800972e <USBD_GetNextDesc>
 80096f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	2b05      	cmp	r3, #5
 8009700:	d108      	bne.n	8009714 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	789b      	ldrb	r3, [r3, #2]
 800970a:	78fa      	ldrb	r2, [r7, #3]
 800970c:	429a      	cmp	r2, r3
 800970e:	d008      	beq.n	8009722 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009710:	2300      	movs	r3, #0
 8009712:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	885b      	ldrh	r3, [r3, #2]
 8009718:	b29a      	uxth	r2, r3
 800971a:	897b      	ldrh	r3, [r7, #10]
 800971c:	429a      	cmp	r2, r3
 800971e:	d8e5      	bhi.n	80096ec <USBD_GetEpDesc+0x2e>
 8009720:	e000      	b.n	8009724 <USBD_GetEpDesc+0x66>
          break;
 8009722:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009724:	693b      	ldr	r3, [r7, #16]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800972e:	b480      	push	{r7}
 8009730:	b085      	sub	sp, #20
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	4413      	add	r3, r2
 8009746:	b29a      	uxth	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4413      	add	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009758:	68fb      	ldr	r3, [r7, #12]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009766:	b480      	push	{r7}
 8009768:	b087      	sub	sp, #28
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	3301      	adds	r3, #1
 800977c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009784:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	b21a      	sxth	r2, r3
 800978c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009790:	4313      	orrs	r3, r2
 8009792:	b21b      	sxth	r3, r3
 8009794:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009796:	89fb      	ldrh	r3, [r7, #14]
}
 8009798:	4618      	mov	r0, r3
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097ba:	2b40      	cmp	r3, #64	@ 0x40
 80097bc:	d005      	beq.n	80097ca <USBD_StdDevReq+0x26>
 80097be:	2b40      	cmp	r3, #64	@ 0x40
 80097c0:	d857      	bhi.n	8009872 <USBD_StdDevReq+0xce>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00f      	beq.n	80097e6 <USBD_StdDevReq+0x42>
 80097c6:	2b20      	cmp	r3, #32
 80097c8:	d153      	bne.n	8009872 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	32ae      	adds	r2, #174	@ 0xae
 80097d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
      break;
 80097e4:	e04a      	b.n	800987c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b09      	cmp	r3, #9
 80097ec:	d83b      	bhi.n	8009866 <USBD_StdDevReq+0xc2>
 80097ee:	a201      	add	r2, pc, #4	@ (adr r2, 80097f4 <USBD_StdDevReq+0x50>)
 80097f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f4:	08009849 	.word	0x08009849
 80097f8:	0800985d 	.word	0x0800985d
 80097fc:	08009867 	.word	0x08009867
 8009800:	08009853 	.word	0x08009853
 8009804:	08009867 	.word	0x08009867
 8009808:	08009827 	.word	0x08009827
 800980c:	0800981d 	.word	0x0800981d
 8009810:	08009867 	.word	0x08009867
 8009814:	0800983f 	.word	0x0800983f
 8009818:	08009831 	.word	0x08009831
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fa3c 	bl	8009c9c <USBD_GetDescriptor>
          break;
 8009824:	e024      	b.n	8009870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fbcb 	bl	8009fc4 <USBD_SetAddress>
          break;
 800982e:	e01f      	b.n	8009870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fc0a 	bl	800a04c <USBD_SetConfig>
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]
          break;
 800983c:	e018      	b.n	8009870 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fcad 	bl	800a1a0 <USBD_GetConfig>
          break;
 8009846:	e013      	b.n	8009870 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fcde 	bl	800a20c <USBD_GetStatus>
          break;
 8009850:	e00e      	b.n	8009870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fd0d 	bl	800a274 <USBD_SetFeature>
          break;
 800985a:	e009      	b.n	8009870 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fd31 	bl	800a2c6 <USBD_ClrFeature>
          break;
 8009864:	e004      	b.n	8009870 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fd88 	bl	800a37e <USBD_CtlError>
          break;
 800986e:	bf00      	nop
      }
      break;
 8009870:	e004      	b.n	800987c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fd82 	bl	800a37e <USBD_CtlError>
      break;
 800987a:	bf00      	nop
  }

  return ret;
 800987c:	7bfb      	ldrb	r3, [r7, #15]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop

08009888 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800989e:	2b40      	cmp	r3, #64	@ 0x40
 80098a0:	d005      	beq.n	80098ae <USBD_StdItfReq+0x26>
 80098a2:	2b40      	cmp	r3, #64	@ 0x40
 80098a4:	d852      	bhi.n	800994c <USBD_StdItfReq+0xc4>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <USBD_StdItfReq+0x26>
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d14e      	bne.n	800994c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	3b01      	subs	r3, #1
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d840      	bhi.n	800993e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	889b      	ldrh	r3, [r3, #4]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d836      	bhi.n	8009934 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	889b      	ldrh	r3, [r3, #4]
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff fedb 	bl	800968a <USBD_CoreFindIF>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	2bff      	cmp	r3, #255	@ 0xff
 80098dc:	d01d      	beq.n	800991a <USBD_StdItfReq+0x92>
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d11a      	bne.n	800991a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80098e4:	7bba      	ldrb	r2, [r7, #14]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	32ae      	adds	r2, #174	@ 0xae
 80098ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00f      	beq.n	8009914 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80098f4:	7bba      	ldrb	r2, [r7, #14]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80098fc:	7bba      	ldrb	r2, [r7, #14]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	32ae      	adds	r2, #174	@ 0xae
 8009902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	4798      	blx	r3
 800990e:	4603      	mov	r3, r0
 8009910:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009912:	e004      	b.n	800991e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009914:	2303      	movs	r3, #3
 8009916:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009918:	e001      	b.n	800991e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800991a:	2303      	movs	r3, #3
 800991c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	88db      	ldrh	r3, [r3, #6]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d110      	bne.n	8009948 <USBD_StdItfReq+0xc0>
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10d      	bne.n	8009948 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fdfd 	bl	800a52c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009932:	e009      	b.n	8009948 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fd21 	bl	800a37e <USBD_CtlError>
          break;
 800993c:	e004      	b.n	8009948 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fd1c 	bl	800a37e <USBD_CtlError>
          break;
 8009946:	e000      	b.n	800994a <USBD_StdItfReq+0xc2>
          break;
 8009948:	bf00      	nop
      }
      break;
 800994a:	e004      	b.n	8009956 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fd15 	bl	800a37e <USBD_CtlError>
      break;
 8009954:	bf00      	nop
  }

  return ret;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	889b      	ldrh	r3, [r3, #4]
 8009972:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800997c:	2b40      	cmp	r3, #64	@ 0x40
 800997e:	d007      	beq.n	8009990 <USBD_StdEPReq+0x30>
 8009980:	2b40      	cmp	r3, #64	@ 0x40
 8009982:	f200 817f 	bhi.w	8009c84 <USBD_StdEPReq+0x324>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d02a      	beq.n	80099e0 <USBD_StdEPReq+0x80>
 800998a:	2b20      	cmp	r3, #32
 800998c:	f040 817a 	bne.w	8009c84 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff fe85 	bl	80096a4 <USBD_CoreFindEP>
 800999a:	4603      	mov	r3, r0
 800999c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800999e:	7b7b      	ldrb	r3, [r7, #13]
 80099a0:	2bff      	cmp	r3, #255	@ 0xff
 80099a2:	f000 8174 	beq.w	8009c8e <USBD_StdEPReq+0x32e>
 80099a6:	7b7b      	ldrb	r3, [r7, #13]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f040 8170 	bne.w	8009c8e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099ae:	7b7a      	ldrb	r2, [r7, #13]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80099b6:	7b7a      	ldrb	r2, [r7, #13]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	32ae      	adds	r2, #174	@ 0xae
 80099bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8163 	beq.w	8009c8e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80099c8:	7b7a      	ldrb	r2, [r7, #13]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	32ae      	adds	r2, #174	@ 0xae
 80099ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	4798      	blx	r3
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099de:	e156      	b.n	8009c8e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	785b      	ldrb	r3, [r3, #1]
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d008      	beq.n	80099fa <USBD_StdEPReq+0x9a>
 80099e8:	2b03      	cmp	r3, #3
 80099ea:	f300 8145 	bgt.w	8009c78 <USBD_StdEPReq+0x318>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 809b 	beq.w	8009b2a <USBD_StdEPReq+0x1ca>
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d03c      	beq.n	8009a72 <USBD_StdEPReq+0x112>
 80099f8:	e13e      	b.n	8009c78 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d002      	beq.n	8009a0c <USBD_StdEPReq+0xac>
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d016      	beq.n	8009a38 <USBD_StdEPReq+0xd8>
 8009a0a:	e02c      	b.n	8009a66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00d      	beq.n	8009a2e <USBD_StdEPReq+0xce>
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	2b80      	cmp	r3, #128	@ 0x80
 8009a16:	d00a      	beq.n	8009a2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 fa23 	bl	800ae68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a22:	2180      	movs	r1, #128	@ 0x80
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f001 fa1f 	bl	800ae68 <USBD_LL_StallEP>
 8009a2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a2c:	e020      	b.n	8009a70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fca4 	bl	800a37e <USBD_CtlError>
              break;
 8009a36:	e01b      	b.n	8009a70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	885b      	ldrh	r3, [r3, #2]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10e      	bne.n	8009a5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00b      	beq.n	8009a5e <USBD_StdEPReq+0xfe>
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	2b80      	cmp	r3, #128	@ 0x80
 8009a4a:	d008      	beq.n	8009a5e <USBD_StdEPReq+0xfe>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	88db      	ldrh	r3, [r3, #6]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f001 fa05 	bl	800ae68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fd64 	bl	800a52c <USBD_CtlSendStatus>

              break;
 8009a64:	e004      	b.n	8009a70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fc88 	bl	800a37e <USBD_CtlError>
              break;
 8009a6e:	bf00      	nop
          }
          break;
 8009a70:	e107      	b.n	8009c82 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d002      	beq.n	8009a84 <USBD_StdEPReq+0x124>
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d016      	beq.n	8009ab0 <USBD_StdEPReq+0x150>
 8009a82:	e04b      	b.n	8009b1c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00d      	beq.n	8009aa6 <USBD_StdEPReq+0x146>
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	2b80      	cmp	r3, #128	@ 0x80
 8009a8e:	d00a      	beq.n	8009aa6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f001 f9e7 	bl	800ae68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a9a:	2180      	movs	r1, #128	@ 0x80
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f001 f9e3 	bl	800ae68 <USBD_LL_StallEP>
 8009aa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009aa4:	e040      	b.n	8009b28 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fc68 	bl	800a37e <USBD_CtlError>
              break;
 8009aae:	e03b      	b.n	8009b28 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	885b      	ldrh	r3, [r3, #2]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d136      	bne.n	8009b26 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d004      	beq.n	8009acc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f001 fa04 	bl	800aed4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fd2d 	bl	800a52c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff fde4 	bl	80096a4 <USBD_CoreFindEP>
 8009adc:	4603      	mov	r3, r0
 8009ade:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ae0:	7b7b      	ldrb	r3, [r7, #13]
 8009ae2:	2bff      	cmp	r3, #255	@ 0xff
 8009ae4:	d01f      	beq.n	8009b26 <USBD_StdEPReq+0x1c6>
 8009ae6:	7b7b      	ldrb	r3, [r7, #13]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d11c      	bne.n	8009b26 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009aec:	7b7a      	ldrb	r2, [r7, #13]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009af4:	7b7a      	ldrb	r2, [r7, #13]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	32ae      	adds	r2, #174	@ 0xae
 8009afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d010      	beq.n	8009b26 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b04:	7b7a      	ldrb	r2, [r7, #13]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	32ae      	adds	r2, #174	@ 0xae
 8009b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	4798      	blx	r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b1a:	e004      	b.n	8009b26 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fc2d 	bl	800a37e <USBD_CtlError>
              break;
 8009b24:	e000      	b.n	8009b28 <USBD_StdEPReq+0x1c8>
              break;
 8009b26:	bf00      	nop
          }
          break;
 8009b28:	e0ab      	b.n	8009c82 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d002      	beq.n	8009b3c <USBD_StdEPReq+0x1dc>
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d032      	beq.n	8009ba0 <USBD_StdEPReq+0x240>
 8009b3a:	e097      	b.n	8009c6c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d007      	beq.n	8009b52 <USBD_StdEPReq+0x1f2>
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	2b80      	cmp	r3, #128	@ 0x80
 8009b46:	d004      	beq.n	8009b52 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fc17 	bl	800a37e <USBD_CtlError>
                break;
 8009b50:	e091      	b.n	8009c76 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da0b      	bge.n	8009b72 <USBD_StdEPReq+0x212>
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	3310      	adds	r3, #16
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	3304      	adds	r3, #4
 8009b70:	e00b      	b.n	8009b8a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	4413      	add	r3, r2
 8009b88:	3304      	adds	r3, #4
 8009b8a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2202      	movs	r2, #2
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc6d 	bl	800a478 <USBD_CtlSendData>
              break;
 8009b9e:	e06a      	b.n	8009c76 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	da11      	bge.n	8009bcc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	f003 020f 	and.w	r2, r3, #15
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	440b      	add	r3, r1
 8009bba:	3324      	adds	r3, #36	@ 0x24
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d117      	bne.n	8009bf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fbda 	bl	800a37e <USBD_CtlError>
                  break;
 8009bca:	e054      	b.n	8009c76 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bcc:	7bbb      	ldrb	r3, [r7, #14]
 8009bce:	f003 020f 	and.w	r2, r3, #15
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	440b      	add	r3, r1
 8009bde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fbc7 	bl	800a37e <USBD_CtlError>
                  break;
 8009bf0:	e041      	b.n	8009c76 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	da0b      	bge.n	8009c12 <USBD_StdEPReq+0x2b2>
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	3310      	adds	r3, #16
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	3304      	adds	r3, #4
 8009c10:	e00b      	b.n	8009c2a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
 8009c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	4413      	add	r3, r2
 8009c28:	3304      	adds	r3, #4
 8009c2a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <USBD_StdEPReq+0x2d8>
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	2b80      	cmp	r3, #128	@ 0x80
 8009c36:	d103      	bne.n	8009c40 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	e00e      	b.n	8009c5e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 f97b 	bl	800af40 <USBD_LL_IsStallEP>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d003      	beq.n	8009c58 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2201      	movs	r2, #1
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	e002      	b.n	8009c5e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2202      	movs	r2, #2
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fc07 	bl	800a478 <USBD_CtlSendData>
              break;
 8009c6a:	e004      	b.n	8009c76 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fb85 	bl	800a37e <USBD_CtlError>
              break;
 8009c74:	bf00      	nop
          }
          break;
 8009c76:	e004      	b.n	8009c82 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fb7f 	bl	800a37e <USBD_CtlError>
          break;
 8009c80:	bf00      	nop
      }
      break;
 8009c82:	e005      	b.n	8009c90 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fb79 	bl	800a37e <USBD_CtlError>
      break;
 8009c8c:	e000      	b.n	8009c90 <USBD_StdEPReq+0x330>
      break;
 8009c8e:	bf00      	nop
  }

  return ret;
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	885b      	ldrh	r3, [r3, #2]
 8009cb6:	0a1b      	lsrs	r3, r3, #8
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	2b0e      	cmp	r3, #14
 8009cbe:	f200 8152 	bhi.w	8009f66 <USBD_GetDescriptor+0x2ca>
 8009cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc8 <USBD_GetDescriptor+0x2c>)
 8009cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc8:	08009d39 	.word	0x08009d39
 8009ccc:	08009d51 	.word	0x08009d51
 8009cd0:	08009d91 	.word	0x08009d91
 8009cd4:	08009f67 	.word	0x08009f67
 8009cd8:	08009f67 	.word	0x08009f67
 8009cdc:	08009f07 	.word	0x08009f07
 8009ce0:	08009f33 	.word	0x08009f33
 8009ce4:	08009f67 	.word	0x08009f67
 8009ce8:	08009f67 	.word	0x08009f67
 8009cec:	08009f67 	.word	0x08009f67
 8009cf0:	08009f67 	.word	0x08009f67
 8009cf4:	08009f67 	.word	0x08009f67
 8009cf8:	08009f67 	.word	0x08009f67
 8009cfc:	08009f67 	.word	0x08009f67
 8009d00:	08009d05 	.word	0x08009d05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	7c12      	ldrb	r2, [r2, #16]
 8009d1c:	f107 0108 	add.w	r1, r7, #8
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
 8009d24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d26:	e126      	b.n	8009f76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fb27 	bl	800a37e <USBD_CtlError>
        err++;
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	3301      	adds	r3, #1
 8009d34:	72fb      	strb	r3, [r7, #11]
      break;
 8009d36:	e11e      	b.n	8009f76 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	7c12      	ldrb	r2, [r2, #16]
 8009d44:	f107 0108 	add.w	r1, r7, #8
 8009d48:	4610      	mov	r0, r2
 8009d4a:	4798      	blx	r3
 8009d4c:	60f8      	str	r0, [r7, #12]
      break;
 8009d4e:	e112      	b.n	8009f76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	7c1b      	ldrb	r3, [r3, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10d      	bne.n	8009d74 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d60:	f107 0208 	add.w	r2, r7, #8
 8009d64:	4610      	mov	r0, r2
 8009d66:	4798      	blx	r3
 8009d68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	2202      	movs	r2, #2
 8009d70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d72:	e100      	b.n	8009f76 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7c:	f107 0208 	add.w	r2, r7, #8
 8009d80:	4610      	mov	r0, r2
 8009d82:	4798      	blx	r3
 8009d84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	701a      	strb	r2, [r3, #0]
      break;
 8009d8e:	e0f2      	b.n	8009f76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	885b      	ldrh	r3, [r3, #2]
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b05      	cmp	r3, #5
 8009d98:	f200 80ac 	bhi.w	8009ef4 <USBD_GetDescriptor+0x258>
 8009d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009da4 <USBD_GetDescriptor+0x108>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009dbd 	.word	0x08009dbd
 8009da8:	08009df1 	.word	0x08009df1
 8009dac:	08009e25 	.word	0x08009e25
 8009db0:	08009e59 	.word	0x08009e59
 8009db4:	08009e8d 	.word	0x08009e8d
 8009db8:	08009ec1 	.word	0x08009ec1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00b      	beq.n	8009de0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	7c12      	ldrb	r2, [r2, #16]
 8009dd4:	f107 0108 	add.w	r1, r7, #8
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4798      	blx	r3
 8009ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dde:	e091      	b.n	8009f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 facb 	bl	800a37e <USBD_CtlError>
            err++;
 8009de8:	7afb      	ldrb	r3, [r7, #11]
 8009dea:	3301      	adds	r3, #1
 8009dec:	72fb      	strb	r3, [r7, #11]
          break;
 8009dee:	e089      	b.n	8009f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00b      	beq.n	8009e14 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	7c12      	ldrb	r2, [r2, #16]
 8009e08:	f107 0108 	add.w	r1, r7, #8
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4798      	blx	r3
 8009e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e12:	e077      	b.n	8009f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fab1 	bl	800a37e <USBD_CtlError>
            err++;
 8009e1c:	7afb      	ldrb	r3, [r7, #11]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	72fb      	strb	r3, [r7, #11]
          break;
 8009e22:	e06f      	b.n	8009f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00b      	beq.n	8009e48 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	7c12      	ldrb	r2, [r2, #16]
 8009e3c:	f107 0108 	add.w	r1, r7, #8
 8009e40:	4610      	mov	r0, r2
 8009e42:	4798      	blx	r3
 8009e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e46:	e05d      	b.n	8009f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e48:	6839      	ldr	r1, [r7, #0]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fa97 	bl	800a37e <USBD_CtlError>
            err++;
 8009e50:	7afb      	ldrb	r3, [r7, #11]
 8009e52:	3301      	adds	r3, #1
 8009e54:	72fb      	strb	r3, [r7, #11]
          break;
 8009e56:	e055      	b.n	8009f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	7c12      	ldrb	r2, [r2, #16]
 8009e70:	f107 0108 	add.w	r1, r7, #8
 8009e74:	4610      	mov	r0, r2
 8009e76:	4798      	blx	r3
 8009e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7a:	e043      	b.n	8009f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fa7d 	bl	800a37e <USBD_CtlError>
            err++;
 8009e84:	7afb      	ldrb	r3, [r7, #11]
 8009e86:	3301      	adds	r3, #1
 8009e88:	72fb      	strb	r3, [r7, #11]
          break;
 8009e8a:	e03b      	b.n	8009f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9e:	695b      	ldr	r3, [r3, #20]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	7c12      	ldrb	r2, [r2, #16]
 8009ea4:	f107 0108 	add.w	r1, r7, #8
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4798      	blx	r3
 8009eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eae:	e029      	b.n	8009f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa63 	bl	800a37e <USBD_CtlError>
            err++;
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ebe:	e021      	b.n	8009f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	7c12      	ldrb	r2, [r2, #16]
 8009ed8:	f107 0108 	add.w	r1, r7, #8
 8009edc:	4610      	mov	r0, r2
 8009ede:	4798      	blx	r3
 8009ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ee2:	e00f      	b.n	8009f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fa49 	bl	800a37e <USBD_CtlError>
            err++;
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ef2:	e007      	b.n	8009f04 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa41 	bl	800a37e <USBD_CtlError>
          err++;
 8009efc:	7afb      	ldrb	r3, [r7, #11]
 8009efe:	3301      	adds	r3, #1
 8009f00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f02:	bf00      	nop
      }
      break;
 8009f04:	e037      	b.n	8009f76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	7c1b      	ldrb	r3, [r3, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d109      	bne.n	8009f22 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f16:	f107 0208 	add.w	r2, r7, #8
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	4798      	blx	r3
 8009f1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f20:	e029      	b.n	8009f76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fa2a 	bl	800a37e <USBD_CtlError>
        err++;
 8009f2a:	7afb      	ldrb	r3, [r7, #11]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f30:	e021      	b.n	8009f76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	7c1b      	ldrb	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10d      	bne.n	8009f56 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f42:	f107 0208 	add.w	r2, r7, #8
 8009f46:	4610      	mov	r0, r2
 8009f48:	4798      	blx	r3
 8009f4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	2207      	movs	r2, #7
 8009f52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f54:	e00f      	b.n	8009f76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fa10 	bl	800a37e <USBD_CtlError>
        err++;
 8009f5e:	7afb      	ldrb	r3, [r7, #11]
 8009f60:	3301      	adds	r3, #1
 8009f62:	72fb      	strb	r3, [r7, #11]
      break;
 8009f64:	e007      	b.n	8009f76 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fa08 	bl	800a37e <USBD_CtlError>
      err++;
 8009f6e:	7afb      	ldrb	r3, [r7, #11]
 8009f70:	3301      	adds	r3, #1
 8009f72:	72fb      	strb	r3, [r7, #11]
      break;
 8009f74:	bf00      	nop
  }

  if (err != 0U)
 8009f76:	7afb      	ldrb	r3, [r7, #11]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d11e      	bne.n	8009fba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	88db      	ldrh	r3, [r3, #6]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d016      	beq.n	8009fb2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009f84:	893b      	ldrh	r3, [r7, #8]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00e      	beq.n	8009fa8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	88da      	ldrh	r2, [r3, #6]
 8009f8e:	893b      	ldrh	r3, [r7, #8]
 8009f90:	4293      	cmp	r3, r2
 8009f92:	bf28      	it	cs
 8009f94:	4613      	movcs	r3, r2
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f9a:	893b      	ldrh	r3, [r7, #8]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	68f9      	ldr	r1, [r7, #12]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fa69 	bl	800a478 <USBD_CtlSendData>
 8009fa6:	e009      	b.n	8009fbc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f9e7 	bl	800a37e <USBD_CtlError>
 8009fb0:	e004      	b.n	8009fbc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 faba 	bl	800a52c <USBD_CtlSendStatus>
 8009fb8:	e000      	b.n	8009fbc <USBD_GetDescriptor+0x320>
    return;
 8009fba:	bf00      	nop
  }
}
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop

08009fc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	889b      	ldrh	r3, [r3, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d131      	bne.n	800a03a <USBD_SetAddress+0x76>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	88db      	ldrh	r3, [r3, #6]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d12d      	bne.n	800a03a <USBD_SetAddress+0x76>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	885b      	ldrh	r3, [r3, #2]
 8009fe2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fe4:	d829      	bhi.n	800a03a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	885b      	ldrh	r3, [r3, #2]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ff0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	d104      	bne.n	800a008 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f9bc 	bl	800a37e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a006:	e01d      	b.n	800a044 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	7bfa      	ldrb	r2, [r7, #15]
 800a00c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 ffbf 	bl	800af98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fa86 	bl	800a52c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d004      	beq.n	800a030 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2202      	movs	r2, #2
 800a02a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a02e:	e009      	b.n	800a044 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a038:	e004      	b.n	800a044 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f99e 	bl	800a37e <USBD_CtlError>
  }
}
 800a042:	bf00      	nop
 800a044:	bf00      	nop
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	885b      	ldrh	r3, [r3, #2]
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	4b4e      	ldr	r3, [pc, #312]	@ (800a19c <USBD_SetConfig+0x150>)
 800a062:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a064:	4b4d      	ldr	r3, [pc, #308]	@ (800a19c <USBD_SetConfig+0x150>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d905      	bls.n	800a078 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f985 	bl	800a37e <USBD_CtlError>
    return USBD_FAIL;
 800a074:	2303      	movs	r3, #3
 800a076:	e08c      	b.n	800a192 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b02      	cmp	r3, #2
 800a082:	d002      	beq.n	800a08a <USBD_SetConfig+0x3e>
 800a084:	2b03      	cmp	r3, #3
 800a086:	d029      	beq.n	800a0dc <USBD_SetConfig+0x90>
 800a088:	e075      	b.n	800a176 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a08a:	4b44      	ldr	r3, [pc, #272]	@ (800a19c <USBD_SetConfig+0x150>)
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d020      	beq.n	800a0d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a092:	4b42      	ldr	r3, [pc, #264]	@ (800a19c <USBD_SetConfig+0x150>)
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a09c:	4b3f      	ldr	r3, [pc, #252]	@ (800a19c <USBD_SetConfig+0x150>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7fe ffb9 	bl	800901a <USBD_SetClassConfig>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d008      	beq.n	800a0c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f962 	bl	800a37e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2202      	movs	r2, #2
 800a0be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0c2:	e065      	b.n	800a190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fa31 	bl	800a52c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2203      	movs	r2, #3
 800a0ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a0d2:	e05d      	b.n	800a190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fa29 	bl	800a52c <USBD_CtlSendStatus>
      break;
 800a0da:	e059      	b.n	800a190 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0dc:	4b2f      	ldr	r3, [pc, #188]	@ (800a19c <USBD_SetConfig+0x150>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d112      	bne.n	800a10a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a0ec:	4b2b      	ldr	r3, [pc, #172]	@ (800a19c <USBD_SetConfig+0x150>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0f6:	4b29      	ldr	r3, [pc, #164]	@ (800a19c <USBD_SetConfig+0x150>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7fe ffa8 	bl	8009052 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fa12 	bl	800a52c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a108:	e042      	b.n	800a190 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a10a:	4b24      	ldr	r3, [pc, #144]	@ (800a19c <USBD_SetConfig+0x150>)
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	429a      	cmp	r2, r3
 800a116:	d02a      	beq.n	800a16e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7fe ff96 	bl	8009052 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a126:	4b1d      	ldr	r3, [pc, #116]	@ (800a19c <USBD_SetConfig+0x150>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a130:	4b1a      	ldr	r3, [pc, #104]	@ (800a19c <USBD_SetConfig+0x150>)
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7fe ff6f 	bl	800901a <USBD_SetClassConfig>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00f      	beq.n	800a166 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f918 	bl	800a37e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7fe ff7b 	bl	8009052 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2202      	movs	r2, #2
 800a160:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a164:	e014      	b.n	800a190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f9e0 	bl	800a52c <USBD_CtlSendStatus>
      break;
 800a16c:	e010      	b.n	800a190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f9dc 	bl	800a52c <USBD_CtlSendStatus>
      break;
 800a174:	e00c      	b.n	800a190 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f900 	bl	800a37e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a17e:	4b07      	ldr	r3, [pc, #28]	@ (800a19c <USBD_SetConfig+0x150>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7fe ff64 	bl	8009052 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a18a:	2303      	movs	r3, #3
 800a18c:	73fb      	strb	r3, [r7, #15]
      break;
 800a18e:	bf00      	nop
  }

  return ret;
 800a190:	7bfb      	ldrb	r3, [r7, #15]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000640 	.word	0x20000640

0800a1a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	88db      	ldrh	r3, [r3, #6]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d004      	beq.n	800a1bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f8e2 	bl	800a37e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1ba:	e023      	b.n	800a204 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	dc02      	bgt.n	800a1ce <USBD_GetConfig+0x2e>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	dc03      	bgt.n	800a1d4 <USBD_GetConfig+0x34>
 800a1cc:	e015      	b.n	800a1fa <USBD_GetConfig+0x5a>
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d00b      	beq.n	800a1ea <USBD_GetConfig+0x4a>
 800a1d2:	e012      	b.n	800a1fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3308      	adds	r3, #8
 800a1de:	2201      	movs	r2, #1
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f948 	bl	800a478 <USBD_CtlSendData>
        break;
 800a1e8:	e00c      	b.n	800a204 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f940 	bl	800a478 <USBD_CtlSendData>
        break;
 800a1f8:	e004      	b.n	800a204 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f8be 	bl	800a37e <USBD_CtlError>
        break;
 800a202:	bf00      	nop
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	3b01      	subs	r3, #1
 800a220:	2b02      	cmp	r3, #2
 800a222:	d81e      	bhi.n	800a262 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	88db      	ldrh	r3, [r3, #6]
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d004      	beq.n	800a236 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f8a5 	bl	800a37e <USBD_CtlError>
        break;
 800a234:	e01a      	b.n	800a26c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a242:	2b00      	cmp	r3, #0
 800a244:	d005      	beq.n	800a252 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f043 0202 	orr.w	r2, r3, #2
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	330c      	adds	r3, #12
 800a256:	2202      	movs	r2, #2
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f90c 	bl	800a478 <USBD_CtlSendData>
      break;
 800a260:	e004      	b.n	800a26c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f88a 	bl	800a37e <USBD_CtlError>
      break;
 800a26a:	bf00      	nop
  }
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	885b      	ldrh	r3, [r3, #2]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d107      	bne.n	800a296 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f94c 	bl	800a52c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a294:	e013      	b.n	800a2be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	885b      	ldrh	r3, [r3, #2]
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d10b      	bne.n	800a2b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	889b      	ldrh	r3, [r3, #4]
 800a2a2:	0a1b      	lsrs	r3, r3, #8
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f93c 	bl	800a52c <USBD_CtlSendStatus>
}
 800a2b4:	e003      	b.n	800a2be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f860 	bl	800a37e <USBD_CtlError>
}
 800a2be:	bf00      	nop
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d80b      	bhi.n	800a2f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	885b      	ldrh	r3, [r3, #2]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d10c      	bne.n	800a300 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f91c 	bl	800a52c <USBD_CtlSendStatus>
      }
      break;
 800a2f4:	e004      	b.n	800a300 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f840 	bl	800a37e <USBD_CtlError>
      break;
 800a2fe:	e000      	b.n	800a302 <USBD_ClrFeature+0x3c>
      break;
 800a300:	bf00      	nop
  }
}
 800a302:	bf00      	nop
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b084      	sub	sp, #16
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	781a      	ldrb	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3301      	adds	r3, #1
 800a324:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3301      	adds	r3, #1
 800a332:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f7ff fa16 	bl	8009766 <SWAPBYTE>
 800a33a:	4603      	mov	r3, r0
 800a33c:	461a      	mov	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3301      	adds	r3, #1
 800a346:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3301      	adds	r3, #1
 800a34c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff fa09 	bl	8009766 <SWAPBYTE>
 800a354:	4603      	mov	r3, r0
 800a356:	461a      	mov	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3301      	adds	r3, #1
 800a360:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3301      	adds	r3, #1
 800a366:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff f9fc 	bl	8009766 <SWAPBYTE>
 800a36e:	4603      	mov	r3, r0
 800a370:	461a      	mov	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	80da      	strh	r2, [r3, #6]
}
 800a376:	bf00      	nop
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a388:	2180      	movs	r1, #128	@ 0x80
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fd6c 	bl	800ae68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a390:	2100      	movs	r1, #0
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fd68 	bl	800ae68 <USBD_LL_StallEP>
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d042      	beq.n	800a43c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a3ba:	6938      	ldr	r0, [r7, #16]
 800a3bc:	f000 f842 	bl	800a444 <USBD_GetLen>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3ca:	d808      	bhi.n	800a3de <USBD_GetString+0x3e>
 800a3cc:	6938      	ldr	r0, [r7, #16]
 800a3ce:	f000 f839 	bl	800a444 <USBD_GetLen>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	e001      	b.n	800a3e2 <USBD_GetString+0x42>
 800a3de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	7812      	ldrb	r2, [r2, #0]
 800a3f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3f2:	7dfb      	ldrb	r3, [r7, #23]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	2203      	movs	r2, #3
 800a400:	701a      	strb	r2, [r3, #0]
  idx++;
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	3301      	adds	r3, #1
 800a406:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a408:	e013      	b.n	800a432 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	4413      	add	r3, r2
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	7812      	ldrb	r2, [r2, #0]
 800a414:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	3301      	adds	r3, #1
 800a41a:	613b      	str	r3, [r7, #16]
    idx++;
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
 800a41e:	3301      	adds	r3, #1
 800a420:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a422:	7dfb      	ldrb	r3, [r7, #23]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	4413      	add	r3, r2
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	3301      	adds	r3, #1
 800a430:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e7      	bne.n	800a40a <USBD_GetString+0x6a>
 800a43a:	e000      	b.n	800a43e <USBD_GetString+0x9e>
    return;
 800a43c:	bf00      	nop
  }
}
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a454:	e005      	b.n	800a462 <USBD_GetLen+0x1e>
  {
    len++;
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	3301      	adds	r3, #1
 800a45a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	3301      	adds	r3, #1
 800a460:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1f5      	bne.n	800a456 <USBD_GetLen+0x12>
  }

  return len;
 800a46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2202      	movs	r2, #2
 800a488:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	2100      	movs	r1, #0
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f000 fdb0 	bl	800b004 <USBD_LL_Transmit>

  return USBD_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	60f8      	str	r0, [r7, #12]
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	2100      	movs	r1, #0
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 fd9f 	bl	800b004 <USBD_LL_Transmit>

  return USBD_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2203      	movs	r2, #3
 800a4e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 fdba 	bl	800b074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	60f8      	str	r0, [r7, #12]
 800a512:	60b9      	str	r1, [r7, #8]
 800a514:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	2100      	movs	r1, #0
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 fda9 	bl	800b074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2204      	movs	r2, #4
 800a538:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a53c:	2300      	movs	r3, #0
 800a53e:	2200      	movs	r2, #0
 800a540:	2100      	movs	r1, #0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fd5e 	bl	800b004 <USBD_LL_Transmit>

  return USBD_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2205      	movs	r2, #5
 800a55e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a562:	2300      	movs	r3, #0
 800a564:	2200      	movs	r2, #0
 800a566:	2100      	movs	r1, #0
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fd83 	bl	800b074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a57c:	2200      	movs	r2, #0
 800a57e:	4912      	ldr	r1, [pc, #72]	@ (800a5c8 <MX_USB_DEVICE_Init+0x50>)
 800a580:	4812      	ldr	r0, [pc, #72]	@ (800a5cc <MX_USB_DEVICE_Init+0x54>)
 800a582:	f7fe fccd 	bl	8008f20 <USBD_Init>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a58c:	f7f6 fca4 	bl	8000ed8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a590:	490f      	ldr	r1, [pc, #60]	@ (800a5d0 <MX_USB_DEVICE_Init+0x58>)
 800a592:	480e      	ldr	r0, [pc, #56]	@ (800a5cc <MX_USB_DEVICE_Init+0x54>)
 800a594:	f7fe fcf4 	bl	8008f80 <USBD_RegisterClass>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a59e:	f7f6 fc9b 	bl	8000ed8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5a2:	490c      	ldr	r1, [pc, #48]	@ (800a5d4 <MX_USB_DEVICE_Init+0x5c>)
 800a5a4:	4809      	ldr	r0, [pc, #36]	@ (800a5cc <MX_USB_DEVICE_Init+0x54>)
 800a5a6:	f7fe fc2b 	bl	8008e00 <USBD_CDC_RegisterInterface>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5b0:	f7f6 fc92 	bl	8000ed8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5b4:	4805      	ldr	r0, [pc, #20]	@ (800a5cc <MX_USB_DEVICE_Init+0x54>)
 800a5b6:	f7fe fd19 	bl	8008fec <USBD_Start>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5c0:	f7f6 fc8a 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5c4:	bf00      	nop
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20000130 	.word	0x20000130
 800a5cc:	20000644 	.word	0x20000644
 800a5d0:	2000009c 	.word	0x2000009c
 800a5d4:	2000011c 	.word	0x2000011c

0800a5d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5dc:	2200      	movs	r2, #0
 800a5de:	4905      	ldr	r1, [pc, #20]	@ (800a5f4 <CDC_Init_FS+0x1c>)
 800a5e0:	4805      	ldr	r0, [pc, #20]	@ (800a5f8 <CDC_Init_FS+0x20>)
 800a5e2:	f7fe fc27 	bl	8008e34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5e6:	4905      	ldr	r1, [pc, #20]	@ (800a5fc <CDC_Init_FS+0x24>)
 800a5e8:	4803      	ldr	r0, [pc, #12]	@ (800a5f8 <CDC_Init_FS+0x20>)
 800a5ea:	f7fe fc45 	bl	8008e78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20001120 	.word	0x20001120
 800a5f8:	20000644 	.word	0x20000644
 800a5fc:	20000920 	.word	0x20000920

0800a600 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a604:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a606:	4618      	mov	r0, r3
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	6039      	str	r1, [r7, #0]
 800a61a:	71fb      	strb	r3, [r7, #7]
 800a61c:	4613      	mov	r3, r2
 800a61e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	2b23      	cmp	r3, #35	@ 0x23
 800a624:	d84a      	bhi.n	800a6bc <CDC_Control_FS+0xac>
 800a626:	a201      	add	r2, pc, #4	@ (adr r2, 800a62c <CDC_Control_FS+0x1c>)
 800a628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62c:	0800a6bd 	.word	0x0800a6bd
 800a630:	0800a6bd 	.word	0x0800a6bd
 800a634:	0800a6bd 	.word	0x0800a6bd
 800a638:	0800a6bd 	.word	0x0800a6bd
 800a63c:	0800a6bd 	.word	0x0800a6bd
 800a640:	0800a6bd 	.word	0x0800a6bd
 800a644:	0800a6bd 	.word	0x0800a6bd
 800a648:	0800a6bd 	.word	0x0800a6bd
 800a64c:	0800a6bd 	.word	0x0800a6bd
 800a650:	0800a6bd 	.word	0x0800a6bd
 800a654:	0800a6bd 	.word	0x0800a6bd
 800a658:	0800a6bd 	.word	0x0800a6bd
 800a65c:	0800a6bd 	.word	0x0800a6bd
 800a660:	0800a6bd 	.word	0x0800a6bd
 800a664:	0800a6bd 	.word	0x0800a6bd
 800a668:	0800a6bd 	.word	0x0800a6bd
 800a66c:	0800a6bd 	.word	0x0800a6bd
 800a670:	0800a6bd 	.word	0x0800a6bd
 800a674:	0800a6bd 	.word	0x0800a6bd
 800a678:	0800a6bd 	.word	0x0800a6bd
 800a67c:	0800a6bd 	.word	0x0800a6bd
 800a680:	0800a6bd 	.word	0x0800a6bd
 800a684:	0800a6bd 	.word	0x0800a6bd
 800a688:	0800a6bd 	.word	0x0800a6bd
 800a68c:	0800a6bd 	.word	0x0800a6bd
 800a690:	0800a6bd 	.word	0x0800a6bd
 800a694:	0800a6bd 	.word	0x0800a6bd
 800a698:	0800a6bd 	.word	0x0800a6bd
 800a69c:	0800a6bd 	.word	0x0800a6bd
 800a6a0:	0800a6bd 	.word	0x0800a6bd
 800a6a4:	0800a6bd 	.word	0x0800a6bd
 800a6a8:	0800a6bd 	.word	0x0800a6bd
 800a6ac:	0800a6bd 	.word	0x0800a6bd
 800a6b0:	0800a6bd 	.word	0x0800a6bd
 800a6b4:	0800a6bd 	.word	0x0800a6bd
 800a6b8:	0800a6bd 	.word	0x0800a6bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6bc:	bf00      	nop
  }

  return (USBD_OK);
 800a6be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	4805      	ldr	r0, [pc, #20]	@ (800a6f0 <CDC_Receive_FS+0x24>)
 800a6da:	f7fe fbcd 	bl	8008e78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6de:	4804      	ldr	r0, [pc, #16]	@ (800a6f0 <CDC_Receive_FS+0x24>)
 800a6e0:	f7fe fbe8 	bl	8008eb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a6e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20000644 	.word	0x20000644

0800a6f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	4613      	mov	r3, r2
 800a700:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a706:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	371c      	adds	r7, #28
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
	...

0800a718 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4603      	mov	r3, r0
 800a720:	6039      	str	r1, [r7, #0]
 800a722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	2212      	movs	r2, #18
 800a728:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a72a:	4b03      	ldr	r3, [pc, #12]	@ (800a738 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	20000150 	.word	0x20000150

0800a73c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	6039      	str	r1, [r7, #0]
 800a746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2204      	movs	r2, #4
 800a74c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a74e:	4b03      	ldr	r3, [pc, #12]	@ (800a75c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a750:	4618      	mov	r0, r3
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	20000170 	.word	0x20000170

0800a760 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	4603      	mov	r3, r0
 800a768:	6039      	str	r1, [r7, #0]
 800a76a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a76c:	79fb      	ldrb	r3, [r7, #7]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d105      	bne.n	800a77e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	4907      	ldr	r1, [pc, #28]	@ (800a794 <USBD_FS_ProductStrDescriptor+0x34>)
 800a776:	4808      	ldr	r0, [pc, #32]	@ (800a798 <USBD_FS_ProductStrDescriptor+0x38>)
 800a778:	f7ff fe12 	bl	800a3a0 <USBD_GetString>
 800a77c:	e004      	b.n	800a788 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	4904      	ldr	r1, [pc, #16]	@ (800a794 <USBD_FS_ProductStrDescriptor+0x34>)
 800a782:	4805      	ldr	r0, [pc, #20]	@ (800a798 <USBD_FS_ProductStrDescriptor+0x38>)
 800a784:	f7ff fe0c 	bl	800a3a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a788:	4b02      	ldr	r3, [pc, #8]	@ (800a794 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	20001920 	.word	0x20001920
 800a798:	0800b254 	.word	0x0800b254

0800a79c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	6039      	str	r1, [r7, #0]
 800a7a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	4904      	ldr	r1, [pc, #16]	@ (800a7bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7ac:	4804      	ldr	r0, [pc, #16]	@ (800a7c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7ae:	f7ff fdf7 	bl	800a3a0 <USBD_GetString>
  return USBD_StrDesc;
 800a7b2:	4b02      	ldr	r3, [pc, #8]	@ (800a7bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	20001920 	.word	0x20001920
 800a7c0:	0800b26c 	.word	0x0800b26c

0800a7c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	6039      	str	r1, [r7, #0]
 800a7ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	221a      	movs	r2, #26
 800a7d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7d6:	f000 f855 	bl	800a884 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7da:	4b02      	ldr	r3, [pc, #8]	@ (800a7e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	20000174 	.word	0x20000174

0800a7e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	6039      	str	r1, [r7, #0]
 800a7f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d105      	bne.n	800a806 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	4907      	ldr	r1, [pc, #28]	@ (800a81c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7fe:	4808      	ldr	r0, [pc, #32]	@ (800a820 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a800:	f7ff fdce 	bl	800a3a0 <USBD_GetString>
 800a804:	e004      	b.n	800a810 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	4904      	ldr	r1, [pc, #16]	@ (800a81c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a80a:	4805      	ldr	r0, [pc, #20]	@ (800a820 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a80c:	f7ff fdc8 	bl	800a3a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a810:	4b02      	ldr	r3, [pc, #8]	@ (800a81c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20001920 	.word	0x20001920
 800a820:	0800b280 	.word	0x0800b280

0800a824 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	4603      	mov	r3, r0
 800a82c:	6039      	str	r1, [r7, #0]
 800a82e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a830:	79fb      	ldrb	r3, [r7, #7]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d105      	bne.n	800a842 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	4907      	ldr	r1, [pc, #28]	@ (800a858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a83a:	4808      	ldr	r0, [pc, #32]	@ (800a85c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a83c:	f7ff fdb0 	bl	800a3a0 <USBD_GetString>
 800a840:	e004      	b.n	800a84c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	4904      	ldr	r1, [pc, #16]	@ (800a858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a846:	4805      	ldr	r0, [pc, #20]	@ (800a85c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a848:	f7ff fdaa 	bl	800a3a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a84c:	4b02      	ldr	r3, [pc, #8]	@ (800a858 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20001920 	.word	0x20001920
 800a85c:	0800b28c 	.word	0x0800b28c

0800a860 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	6039      	str	r1, [r7, #0]
 800a86a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	220c      	movs	r2, #12
 800a870:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a872:	4b03      	ldr	r3, [pc, #12]	@ (800a880 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	20000164 	.word	0x20000164

0800a884 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a88a:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c8 <Get_SerialNum+0x44>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a890:	4b0e      	ldr	r3, [pc, #56]	@ (800a8cc <Get_SerialNum+0x48>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a896:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d0 <Get_SerialNum+0x4c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d009      	beq.n	800a8be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8aa:	2208      	movs	r2, #8
 800a8ac:	4909      	ldr	r1, [pc, #36]	@ (800a8d4 <Get_SerialNum+0x50>)
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 f814 	bl	800a8dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8b4:	2204      	movs	r2, #4
 800a8b6:	4908      	ldr	r1, [pc, #32]	@ (800a8d8 <Get_SerialNum+0x54>)
 800a8b8:	68b8      	ldr	r0, [r7, #8]
 800a8ba:	f000 f80f 	bl	800a8dc <IntToUnicode>
  }
}
 800a8be:	bf00      	nop
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	1fff7590 	.word	0x1fff7590
 800a8cc:	1fff7594 	.word	0x1fff7594
 800a8d0:	1fff7598 	.word	0x1fff7598
 800a8d4:	20000176 	.word	0x20000176
 800a8d8:	20000186 	.word	0x20000186

0800a8dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75fb      	strb	r3, [r7, #23]
 800a8f2:	e027      	b.n	800a944 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	0f1b      	lsrs	r3, r3, #28
 800a8f8:	2b09      	cmp	r3, #9
 800a8fa:	d80b      	bhi.n	800a914 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	0f1b      	lsrs	r3, r3, #28
 800a900:	b2da      	uxtb	r2, r3
 800a902:	7dfb      	ldrb	r3, [r7, #23]
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	4619      	mov	r1, r3
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	440b      	add	r3, r1
 800a90c:	3230      	adds	r2, #48	@ 0x30
 800a90e:	b2d2      	uxtb	r2, r2
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	e00a      	b.n	800a92a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	0f1b      	lsrs	r3, r3, #28
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
 800a91c:	005b      	lsls	r3, r3, #1
 800a91e:	4619      	mov	r1, r3
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	440b      	add	r3, r1
 800a924:	3237      	adds	r2, #55	@ 0x37
 800a926:	b2d2      	uxtb	r2, r2
 800a928:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	011b      	lsls	r3, r3, #4
 800a92e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a930:	7dfb      	ldrb	r3, [r7, #23]
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	3301      	adds	r3, #1
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	4413      	add	r3, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	3301      	adds	r3, #1
 800a942:	75fb      	strb	r3, [r7, #23]
 800a944:	7dfa      	ldrb	r2, [r7, #23]
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d3d3      	bcc.n	800a8f4 <IntToUnicode+0x18>
  }
}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	371c      	adds	r7, #28
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
	...

0800a95c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b0ac      	sub	sp, #176	@ 0xb0
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a964:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	605a      	str	r2, [r3, #4]
 800a96e:	609a      	str	r2, [r3, #8]
 800a970:	60da      	str	r2, [r3, #12]
 800a972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a974:	f107 0314 	add.w	r3, r7, #20
 800a978:	2288      	movs	r2, #136	@ 0x88
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fc31 	bl	800b1e4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a98a:	d173      	bne.n	800aa74 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a98c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a990:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a992:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a996:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800a99a:	2303      	movs	r3, #3
 800a99c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800a9a2:	230c      	movs	r3, #12
 800a9a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a9a6:	2307      	movs	r3, #7
 800a9a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800a9aa:	2304      	movs	r3, #4
 800a9ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a9b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a9b6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9b8:	f107 0314 	add.w	r3, r7, #20
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7f9 fd6b 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800a9c8:	f7f6 fa86 	bl	8000ed8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9cc:	4b2b      	ldr	r3, [pc, #172]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800a9ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9d0:	4a2a      	ldr	r2, [pc, #168]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800a9d2:	f043 0301 	orr.w	r3, r3, #1
 800a9d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a9d8:	4b28      	ldr	r3, [pc, #160]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800a9da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	613b      	str	r3, [r7, #16]
 800a9e2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a9e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a9e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9fe:	230a      	movs	r3, #10
 800aa00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800aa08:	4619      	mov	r1, r3
 800aa0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800aa0e:	f7f7 fa2d 	bl	8001e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa12:	4b1a      	ldr	r3, [pc, #104]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800aa14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa16:	4a19      	ldr	r2, [pc, #100]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800aa18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aa1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa1e:	4b17      	ldr	r3, [pc, #92]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800aa20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa2a:	4b14      	ldr	r3, [pc, #80]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800aa2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d114      	bne.n	800aa60 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa36:	4b11      	ldr	r3, [pc, #68]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800aa38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa3a:	4a10      	ldr	r2, [pc, #64]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800aa3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa40:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa42:	4b0e      	ldr	r3, [pc, #56]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800aa44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa4a:	60bb      	str	r3, [r7, #8]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800aa4e:	f7f8 ff15 	bl	800387c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa52:	4b0a      	ldr	r3, [pc, #40]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800aa54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa56:	4a09      	ldr	r2, [pc, #36]	@ (800aa7c <HAL_PCD_MspInit+0x120>)
 800aa58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa5c:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa5e:	e001      	b.n	800aa64 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800aa60:	f7f8 ff0c 	bl	800387c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa64:	2200      	movs	r2, #0
 800aa66:	2100      	movs	r1, #0
 800aa68:	2043      	movs	r0, #67	@ 0x43
 800aa6a:	f7f7 f860 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa6e:	2043      	movs	r0, #67	@ 0x43
 800aa70:	f7f7 f879 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa74:	bf00      	nop
 800aa76:	37b0      	adds	r7, #176	@ 0xb0
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	40021000 	.word	0x40021000

0800aa80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa94:	4619      	mov	r1, r3
 800aa96:	4610      	mov	r0, r2
 800aa98:	f7fe faf5 	bl	8009086 <USBD_LL_SetupStage>
}
 800aa9c:	bf00      	nop
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aab6:	78fa      	ldrb	r2, [r7, #3]
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	4613      	mov	r3, r2
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	4413      	add	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	440b      	add	r3, r1
 800aac4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	78fb      	ldrb	r3, [r7, #3]
 800aacc:	4619      	mov	r1, r3
 800aace:	f7fe fb2f 	bl	8009130 <USBD_LL_DataOutStage>
}
 800aad2:	bf00      	nop
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b082      	sub	sp, #8
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	460b      	mov	r3, r1
 800aae4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aaec:	78fa      	ldrb	r2, [r7, #3]
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	3320      	adds	r3, #32
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	78fb      	ldrb	r3, [r7, #3]
 800ab00:	4619      	mov	r1, r3
 800ab02:	f7fe fbc8 	bl	8009296 <USBD_LL_DataInStage>
}
 800ab06:	bf00      	nop
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b082      	sub	sp, #8
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fe fd02 	bl	8009526 <USBD_LL_SOF>
}
 800ab22:	bf00      	nop
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b084      	sub	sp, #16
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab32:	2301      	movs	r3, #1
 800ab34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	79db      	ldrb	r3, [r3, #7]
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d001      	beq.n	800ab42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab3e:	f7f6 f9cb 	bl	8000ed8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab48:	7bfa      	ldrb	r2, [r7, #15]
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe fca6 	bl	800949e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fe fc4e 	bl	80093fa <USBD_LL_Reset>
}
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab82:	f043 0301 	orr.w	r3, r3, #1
 800ab86:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fc95 	bl	80094be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7adb      	ldrb	r3, [r3, #11]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab9c:	4b04      	ldr	r3, [pc, #16]	@ (800abb0 <HAL_PCD_SuspendCallback+0x48>)
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	4a03      	ldr	r2, [pc, #12]	@ (800abb0 <HAL_PCD_SuspendCallback+0x48>)
 800aba2:	f043 0306 	orr.w	r3, r3, #6
 800aba6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	e000ed00 	.word	0xe000ed00

0800abb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	6812      	ldr	r2, [r2, #0]
 800abca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800abce:	f023 0301 	bic.w	r3, r3, #1
 800abd2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	7adb      	ldrb	r3, [r3, #11]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d007      	beq.n	800abec <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abdc:	4b08      	ldr	r3, [pc, #32]	@ (800ac00 <HAL_PCD_ResumeCallback+0x4c>)
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	4a07      	ldr	r2, [pc, #28]	@ (800ac00 <HAL_PCD_ResumeCallback+0x4c>)
 800abe2:	f023 0306 	bic.w	r3, r3, #6
 800abe6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800abe8:	f000 faf6 	bl	800b1d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fe fc7f 	bl	80094f6 <USBD_LL_Resume>
}
 800abf8:	bf00      	nop
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	e000ed00 	.word	0xe000ed00

0800ac04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac16:	78fa      	ldrb	r2, [r7, #3]
 800ac18:	4611      	mov	r1, r2
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fe fcd5 	bl	80095ca <USBD_LL_IsoOUTIncomplete>
}
 800ac20:	bf00      	nop
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac3a:	78fa      	ldrb	r2, [r7, #3]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe fc91 	bl	8009566 <USBD_LL_IsoINIncomplete>
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe fce7 	bl	800962e <USBD_LL_DevConnected>
}
 800ac60:	bf00      	nop
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe fce4 	bl	8009644 <USBD_LL_DevDisconnected>
}
 800ac7c:	bf00      	nop
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d13c      	bne.n	800ad0e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac94:	4a20      	ldr	r2, [pc, #128]	@ (800ad18 <USBD_LL_Init+0x94>)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a1e      	ldr	r2, [pc, #120]	@ (800ad18 <USBD_LL_Init+0x94>)
 800aca0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aca4:	4b1c      	ldr	r3, [pc, #112]	@ (800ad18 <USBD_LL_Init+0x94>)
 800aca6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800acaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800acac:	4b1a      	ldr	r3, [pc, #104]	@ (800ad18 <USBD_LL_Init+0x94>)
 800acae:	2206      	movs	r2, #6
 800acb0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800acb2:	4b19      	ldr	r3, [pc, #100]	@ (800ad18 <USBD_LL_Init+0x94>)
 800acb4:	2202      	movs	r2, #2
 800acb6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800acb8:	4b17      	ldr	r3, [pc, #92]	@ (800ad18 <USBD_LL_Init+0x94>)
 800acba:	2202      	movs	r2, #2
 800acbc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800acbe:	4b16      	ldr	r3, [pc, #88]	@ (800ad18 <USBD_LL_Init+0x94>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800acc4:	4b14      	ldr	r3, [pc, #80]	@ (800ad18 <USBD_LL_Init+0x94>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800acca:	4b13      	ldr	r3, [pc, #76]	@ (800ad18 <USBD_LL_Init+0x94>)
 800accc:	2200      	movs	r2, #0
 800acce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800acd0:	4b11      	ldr	r3, [pc, #68]	@ (800ad18 <USBD_LL_Init+0x94>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800acd6:	4b10      	ldr	r3, [pc, #64]	@ (800ad18 <USBD_LL_Init+0x94>)
 800acd8:	2200      	movs	r2, #0
 800acda:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800acdc:	4b0e      	ldr	r3, [pc, #56]	@ (800ad18 <USBD_LL_Init+0x94>)
 800acde:	2200      	movs	r2, #0
 800ace0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ace2:	480d      	ldr	r0, [pc, #52]	@ (800ad18 <USBD_LL_Init+0x94>)
 800ace4:	f7f7 fbd0 	bl	8002488 <HAL_PCD_Init>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800acee:	f7f6 f8f3 	bl	8000ed8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800acf2:	2180      	movs	r1, #128	@ 0x80
 800acf4:	4808      	ldr	r0, [pc, #32]	@ (800ad18 <USBD_LL_Init+0x94>)
 800acf6:	f7f8 fd28 	bl	800374a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800acfa:	2240      	movs	r2, #64	@ 0x40
 800acfc:	2100      	movs	r1, #0
 800acfe:	4806      	ldr	r0, [pc, #24]	@ (800ad18 <USBD_LL_Init+0x94>)
 800ad00:	f7f8 fcdc 	bl	80036bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad04:	2280      	movs	r2, #128	@ 0x80
 800ad06:	2101      	movs	r1, #1
 800ad08:	4803      	ldr	r0, [pc, #12]	@ (800ad18 <USBD_LL_Init+0x94>)
 800ad0a:	f7f8 fcd7 	bl	80036bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	20001b20 	.word	0x20001b20

0800ad1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7f7 fcb7 	bl	80026a6 <HAL_PCD_Start>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ad3c:	7bbb      	ldrb	r3, [r7, #14]
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d816      	bhi.n	800ad70 <USBD_LL_Start+0x54>
 800ad42:	a201      	add	r2, pc, #4	@ (adr r2, 800ad48 <USBD_LL_Start+0x2c>)
 800ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad48:	0800ad59 	.word	0x0800ad59
 800ad4c:	0800ad5f 	.word	0x0800ad5f
 800ad50:	0800ad65 	.word	0x0800ad65
 800ad54:	0800ad6b 	.word	0x0800ad6b
    case HAL_OK :
      usb_status = USBD_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad5c:	e00b      	b.n	800ad76 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	73fb      	strb	r3, [r7, #15]
    break;
 800ad62:	e008      	b.n	800ad76 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad64:	2301      	movs	r3, #1
 800ad66:	73fb      	strb	r3, [r7, #15]
    break;
 800ad68:	e005      	b.n	800ad76 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad6e:	e002      	b.n	800ad76 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ad70:	2303      	movs	r3, #3
 800ad72:	73fb      	strb	r3, [r7, #15]
    break;
 800ad74:	bf00      	nop
  }
  return usb_status;
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	4608      	mov	r0, r1
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	4603      	mov	r3, r0
 800ad90:	70fb      	strb	r3, [r7, #3]
 800ad92:	460b      	mov	r3, r1
 800ad94:	70bb      	strb	r3, [r7, #2]
 800ad96:	4613      	mov	r3, r2
 800ad98:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ada8:	78bb      	ldrb	r3, [r7, #2]
 800adaa:	883a      	ldrh	r2, [r7, #0]
 800adac:	78f9      	ldrb	r1, [r7, #3]
 800adae:	f7f8 f963 	bl	8003078 <HAL_PCD_EP_Open>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d817      	bhi.n	800adec <USBD_LL_OpenEP+0x6c>
 800adbc:	a201      	add	r2, pc, #4	@ (adr r2, 800adc4 <USBD_LL_OpenEP+0x44>)
 800adbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc2:	bf00      	nop
 800adc4:	0800add5 	.word	0x0800add5
 800adc8:	0800addb 	.word	0x0800addb
 800adcc:	0800ade1 	.word	0x0800ade1
 800add0:	0800ade7 	.word	0x0800ade7
    case HAL_OK :
      usb_status = USBD_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
    break;
 800add8:	e00b      	b.n	800adf2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800adda:	2303      	movs	r3, #3
 800addc:	73fb      	strb	r3, [r7, #15]
    break;
 800adde:	e008      	b.n	800adf2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ade0:	2301      	movs	r3, #1
 800ade2:	73fb      	strb	r3, [r7, #15]
    break;
 800ade4:	e005      	b.n	800adf2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ade6:	2303      	movs	r3, #3
 800ade8:	73fb      	strb	r3, [r7, #15]
    break;
 800adea:	e002      	b.n	800adf2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800adec:	2303      	movs	r3, #3
 800adee:	73fb      	strb	r3, [r7, #15]
    break;
 800adf0:	bf00      	nop
  }
  return usb_status;
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7f8 f996 	bl	800314c <HAL_PCD_EP_Close>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d816      	bhi.n	800ae58 <USBD_LL_CloseEP+0x5c>
 800ae2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae30 <USBD_LL_CloseEP+0x34>)
 800ae2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae30:	0800ae41 	.word	0x0800ae41
 800ae34:	0800ae47 	.word	0x0800ae47
 800ae38:	0800ae4d 	.word	0x0800ae4d
 800ae3c:	0800ae53 	.word	0x0800ae53
    case HAL_OK :
      usb_status = USBD_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]
    break;
 800ae44:	e00b      	b.n	800ae5e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae46:	2303      	movs	r3, #3
 800ae48:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4a:	e008      	b.n	800ae5e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae50:	e005      	b.n	800ae5e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae52:	2303      	movs	r3, #3
 800ae54:	73fb      	strb	r3, [r7, #15]
    break;
 800ae56:	e002      	b.n	800ae5e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae5c:	bf00      	nop
  }
  return usb_status;
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	4611      	mov	r1, r2
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7f8 fa25 	bl	80032d6 <HAL_PCD_EP_SetStall>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d816      	bhi.n	800aec4 <USBD_LL_StallEP+0x5c>
 800ae96:	a201      	add	r2, pc, #4	@ (adr r2, 800ae9c <USBD_LL_StallEP+0x34>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aeb3 	.word	0x0800aeb3
 800aea4:	0800aeb9 	.word	0x0800aeb9
 800aea8:	0800aebf 	.word	0x0800aebf
    case HAL_OK :
      usb_status = USBD_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb0:	e00b      	b.n	800aeca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb6:	e008      	b.n	800aeca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	73fb      	strb	r3, [r7, #15]
    break;
 800aebc:	e005      	b.n	800aeca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aebe:	2303      	movs	r3, #3
 800aec0:	73fb      	strb	r3, [r7, #15]
    break;
 800aec2:	e002      	b.n	800aeca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800aec4:	2303      	movs	r3, #3
 800aec6:	73fb      	strb	r3, [r7, #15]
    break;
 800aec8:	bf00      	nop
  }
  return usb_status;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aeee:	78fa      	ldrb	r2, [r7, #3]
 800aef0:	4611      	mov	r1, r2
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7f8 fa51 	bl	800339a <HAL_PCD_EP_ClrStall>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d816      	bhi.n	800af30 <USBD_LL_ClearStallEP+0x5c>
 800af02:	a201      	add	r2, pc, #4	@ (adr r2, 800af08 <USBD_LL_ClearStallEP+0x34>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af19 	.word	0x0800af19
 800af0c:	0800af1f 	.word	0x0800af1f
 800af10:	0800af25 	.word	0x0800af25
 800af14:	0800af2b 	.word	0x0800af2b
    case HAL_OK :
      usb_status = USBD_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	73fb      	strb	r3, [r7, #15]
    break;
 800af1c:	e00b      	b.n	800af36 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af1e:	2303      	movs	r3, #3
 800af20:	73fb      	strb	r3, [r7, #15]
    break;
 800af22:	e008      	b.n	800af36 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af24:	2301      	movs	r3, #1
 800af26:	73fb      	strb	r3, [r7, #15]
    break;
 800af28:	e005      	b.n	800af36 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af2a:	2303      	movs	r3, #3
 800af2c:	73fb      	strb	r3, [r7, #15]
    break;
 800af2e:	e002      	b.n	800af36 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800af30:	2303      	movs	r3, #3
 800af32:	73fb      	strb	r3, [r7, #15]
    break;
 800af34:	bf00      	nop
  }
  return usb_status;
 800af36:	7bfb      	ldrb	r3, [r7, #15]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	da0b      	bge.n	800af74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af5c:	78fb      	ldrb	r3, [r7, #3]
 800af5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af62:	68f9      	ldr	r1, [r7, #12]
 800af64:	4613      	mov	r3, r2
 800af66:	00db      	lsls	r3, r3, #3
 800af68:	4413      	add	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	440b      	add	r3, r1
 800af6e:	3316      	adds	r3, #22
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	e00b      	b.n	800af8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af74:	78fb      	ldrb	r3, [r7, #3]
 800af76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af7a:	68f9      	ldr	r1, [r7, #12]
 800af7c:	4613      	mov	r3, r2
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	4413      	add	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	440b      	add	r3, r1
 800af86:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800af8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afb2:	78fa      	ldrb	r2, [r7, #3]
 800afb4:	4611      	mov	r1, r2
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7f8 f83a 	bl	8003030 <HAL_PCD_SetAddress>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d816      	bhi.n	800aff4 <USBD_LL_SetUSBAddress+0x5c>
 800afc6:	a201      	add	r2, pc, #4	@ (adr r2, 800afcc <USBD_LL_SetUSBAddress+0x34>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afdd 	.word	0x0800afdd
 800afd0:	0800afe3 	.word	0x0800afe3
 800afd4:	0800afe9 	.word	0x0800afe9
 800afd8:	0800afef 	.word	0x0800afef
    case HAL_OK :
      usb_status = USBD_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]
    break;
 800afe0:	e00b      	b.n	800affa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afe2:	2303      	movs	r3, #3
 800afe4:	73fb      	strb	r3, [r7, #15]
    break;
 800afe6:	e008      	b.n	800affa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afe8:	2301      	movs	r3, #1
 800afea:	73fb      	strb	r3, [r7, #15]
    break;
 800afec:	e005      	b.n	800affa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afee:	2303      	movs	r3, #3
 800aff0:	73fb      	strb	r3, [r7, #15]
    break;
 800aff2:	e002      	b.n	800affa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800aff4:	2303      	movs	r3, #3
 800aff6:	73fb      	strb	r3, [r7, #15]
    break;
 800aff8:	bf00      	nop
  }
  return usb_status;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	607a      	str	r2, [r7, #4]
 800b00e:	603b      	str	r3, [r7, #0]
 800b010:	460b      	mov	r3, r1
 800b012:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b022:	7af9      	ldrb	r1, [r7, #11]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	f7f8 f924 	bl	8003274 <HAL_PCD_EP_Transmit>
 800b02c:	4603      	mov	r3, r0
 800b02e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b030:	7dbb      	ldrb	r3, [r7, #22]
 800b032:	2b03      	cmp	r3, #3
 800b034:	d816      	bhi.n	800b064 <USBD_LL_Transmit+0x60>
 800b036:	a201      	add	r2, pc, #4	@ (adr r2, 800b03c <USBD_LL_Transmit+0x38>)
 800b038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03c:	0800b04d 	.word	0x0800b04d
 800b040:	0800b053 	.word	0x0800b053
 800b044:	0800b059 	.word	0x0800b059
 800b048:	0800b05f 	.word	0x0800b05f
    case HAL_OK :
      usb_status = USBD_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	75fb      	strb	r3, [r7, #23]
    break;
 800b050:	e00b      	b.n	800b06a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b052:	2303      	movs	r3, #3
 800b054:	75fb      	strb	r3, [r7, #23]
    break;
 800b056:	e008      	b.n	800b06a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b058:	2301      	movs	r3, #1
 800b05a:	75fb      	strb	r3, [r7, #23]
    break;
 800b05c:	e005      	b.n	800b06a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b05e:	2303      	movs	r3, #3
 800b060:	75fb      	strb	r3, [r7, #23]
    break;
 800b062:	e002      	b.n	800b06a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b064:	2303      	movs	r3, #3
 800b066:	75fb      	strb	r3, [r7, #23]
    break;
 800b068:	bf00      	nop
  }
  return usb_status;
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	607a      	str	r2, [r7, #4]
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	460b      	mov	r3, r1
 800b082:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b088:	2300      	movs	r3, #0
 800b08a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b092:	7af9      	ldrb	r1, [r7, #11]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	f7f8 f8a2 	bl	80031e0 <HAL_PCD_EP_Receive>
 800b09c:	4603      	mov	r3, r0
 800b09e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b0a0:	7dbb      	ldrb	r3, [r7, #22]
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d816      	bhi.n	800b0d4 <USBD_LL_PrepareReceive+0x60>
 800b0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0ac <USBD_LL_PrepareReceive+0x38>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b0bd 	.word	0x0800b0bd
 800b0b0:	0800b0c3 	.word	0x0800b0c3
 800b0b4:	0800b0c9 	.word	0x0800b0c9
 800b0b8:	0800b0cf 	.word	0x0800b0cf
    case HAL_OK :
      usb_status = USBD_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	75fb      	strb	r3, [r7, #23]
    break;
 800b0c0:	e00b      	b.n	800b0da <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	75fb      	strb	r3, [r7, #23]
    break;
 800b0c6:	e008      	b.n	800b0da <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	75fb      	strb	r3, [r7, #23]
    break;
 800b0cc:	e005      	b.n	800b0da <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	75fb      	strb	r3, [r7, #23]
    break;
 800b0d2:	e002      	b.n	800b0da <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	75fb      	strb	r3, [r7, #23]
    break;
 800b0d8:	bf00      	nop
  }
  return usb_status;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0f6:	78fa      	ldrb	r2, [r7, #3]
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7f8 f8a2 	bl	8003244 <HAL_PCD_EP_GetRxCount>
 800b100:	4603      	mov	r3, r0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b118:	78fb      	ldrb	r3, [r7, #3]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d002      	beq.n	800b124 <HAL_PCDEx_LPM_Callback+0x18>
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d01f      	beq.n	800b162 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b122:	e03b      	b.n	800b19c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	7adb      	ldrb	r3, [r3, #11]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d007      	beq.n	800b13c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b12c:	f000 f854 	bl	800b1d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b130:	4b1c      	ldr	r3, [pc, #112]	@ (800b1a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b136:	f023 0306 	bic.w	r3, r3, #6
 800b13a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	6812      	ldr	r2, [r2, #0]
 800b14a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b14e:	f023 0301 	bic.w	r3, r3, #1
 800b152:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe f9cb 	bl	80094f6 <USBD_LL_Resume>
    break;
 800b160:	e01c      	b.n	800b19c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	6812      	ldr	r2, [r2, #0]
 800b170:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b174:	f043 0301 	orr.w	r3, r3, #1
 800b178:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b180:	4618      	mov	r0, r3
 800b182:	f7fe f99c 	bl	80094be <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7adb      	ldrb	r3, [r3, #11]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d005      	beq.n	800b19a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b18e:	4b05      	ldr	r3, [pc, #20]	@ (800b1a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	4a04      	ldr	r2, [pc, #16]	@ (800b1a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b194:	f043 0306 	orr.w	r3, r3, #6
 800b198:	6113      	str	r3, [r2, #16]
    break;
 800b19a:	bf00      	nop
}
 800b19c:	bf00      	nop
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	e000ed00 	.word	0xe000ed00

0800b1a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b1b0:	4b03      	ldr	r3, [pc, #12]	@ (800b1c0 <USBD_static_malloc+0x18>)
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	20002004 	.word	0x20002004

0800b1c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]

}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b1dc:	f7f5 f9da 	bl	8000594 <SystemClock_Config>
}
 800b1e0:	bf00      	nop
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <memset>:
 800b1e4:	4402      	add	r2, r0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d100      	bne.n	800b1ee <memset+0xa>
 800b1ec:	4770      	bx	lr
 800b1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b1f2:	e7f9      	b.n	800b1e8 <memset+0x4>

0800b1f4 <__libc_init_array>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	4d0d      	ldr	r5, [pc, #52]	@ (800b22c <__libc_init_array+0x38>)
 800b1f8:	4c0d      	ldr	r4, [pc, #52]	@ (800b230 <__libc_init_array+0x3c>)
 800b1fa:	1b64      	subs	r4, r4, r5
 800b1fc:	10a4      	asrs	r4, r4, #2
 800b1fe:	2600      	movs	r6, #0
 800b200:	42a6      	cmp	r6, r4
 800b202:	d109      	bne.n	800b218 <__libc_init_array+0x24>
 800b204:	4d0b      	ldr	r5, [pc, #44]	@ (800b234 <__libc_init_array+0x40>)
 800b206:	4c0c      	ldr	r4, [pc, #48]	@ (800b238 <__libc_init_array+0x44>)
 800b208:	f000 f818 	bl	800b23c <_init>
 800b20c:	1b64      	subs	r4, r4, r5
 800b20e:	10a4      	asrs	r4, r4, #2
 800b210:	2600      	movs	r6, #0
 800b212:	42a6      	cmp	r6, r4
 800b214:	d105      	bne.n	800b222 <__libc_init_array+0x2e>
 800b216:	bd70      	pop	{r4, r5, r6, pc}
 800b218:	f855 3b04 	ldr.w	r3, [r5], #4
 800b21c:	4798      	blx	r3
 800b21e:	3601      	adds	r6, #1
 800b220:	e7ee      	b.n	800b200 <__libc_init_array+0xc>
 800b222:	f855 3b04 	ldr.w	r3, [r5], #4
 800b226:	4798      	blx	r3
 800b228:	3601      	adds	r6, #1
 800b22a:	e7f2      	b.n	800b212 <__libc_init_array+0x1e>
 800b22c:	0800b2ec 	.word	0x0800b2ec
 800b230:	0800b2ec 	.word	0x0800b2ec
 800b234:	0800b2ec 	.word	0x0800b2ec
 800b238:	0800b2f0 	.word	0x0800b2f0

0800b23c <_init>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	bf00      	nop
 800b240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b242:	bc08      	pop	{r3}
 800b244:	469e      	mov	lr, r3
 800b246:	4770      	bx	lr

0800b248 <_fini>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	bf00      	nop
 800b24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b24e:	bc08      	pop	{r3}
 800b250:	469e      	mov	lr, r3
 800b252:	4770      	bx	lr
