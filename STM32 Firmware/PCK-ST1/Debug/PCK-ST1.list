
PCK-ST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08010870  08010870  00011870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010de8  08010de8  000123c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010de8  08010de8  00011de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010df0  08010df0  000123c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010df0  08010df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010df4  08010df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c4  20000000  08010df8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002864  200003c8  080111bc  000123c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002c2c  080111bc  00012c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000123c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002143e  00000000  00000000  000123f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad2  00000000  00000000  00033832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  00038308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001526  00000000  00000000  00039e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8f2  00000000  00000000  0003b396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002473e  00000000  00000000  00067c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc5aa  00000000  00000000  0008c3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008710  00000000  00000000  001889b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001910c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003c8 	.word	0x200003c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010858 	.word	0x08010858

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	08010858 	.word	0x08010858

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <HAL_GPIO_EXTI_Callback>:
 *      Author: pecka
 */

#include "exti.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == EL_STOP_Pin) {
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d105      	bne.n	800105c <HAL_GPIO_EXTI_Callback+0x1c>

    	//Disable interrupts
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8001050:	2008      	movs	r0, #8
 8001052:	f001 fe5c 	bl	8002d0e <HAL_NVIC_DisableIRQ>
        Stepper_Stop(&EL_Axis_motor);
 8001056:	4803      	ldr	r0, [pc, #12]	@ (8001064 <HAL_GPIO_EXTI_Callback+0x24>)
 8001058:	f000 ff64 	bl	8001f24 <Stepper_Stop>
    }
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000

08001068 <nmea_to_decimal>:
static uint8_t dma_rx_buf[GPS_DMA_RX_BUF_SIZE];
static GPS_Data_t gps_data;

// Utility: convert NMEA lat/lon to decimal degrees
static double nmea_to_decimal(char *nmea_coord)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    if (!nmea_coord || strlen(nmea_coord) < 6) return 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <nmea_to_decimal+0x1a>
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff f90a 	bl	8000290 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	2b05      	cmp	r3, #5
 8001080:	d804      	bhi.n	800108c <nmea_to_decimal+0x24>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e038      	b.n	80010fe <nmea_to_decimal+0x96>
    double raw = atof(nmea_coord);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f00b fba3 	bl	800c7d8 <atof>
 8001092:	ed87 0b06 	vstr	d0, [r7, #24]
    int deg = (int)(raw / 100);
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <nmea_to_decimal+0xa8>)
 800109c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010a0:	f7ff fbe4 	bl	800086c <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd64 	bl	8000b78 <__aeabi_d2iz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	617b      	str	r3, [r7, #20]
    double min = raw - deg * 100;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2264      	movs	r2, #100	@ 0x64
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa41 	bl	8000544 <__aeabi_i2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ca:	f7ff f8ed 	bl	80002a8 <__aeabi_dsub>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return deg + (min / 60.0);
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff fa34 	bl	8000544 <__aeabi_i2d>
 80010dc:	4604      	mov	r4, r0
 80010de:	460d      	mov	r5, r1
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <nmea_to_decimal+0xac>)
 80010e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010ea:	f7ff fbbf 	bl	800086c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f8d9 	bl	80002ac <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
}
 80010fe:	ec43 2b17 	vmov	d7, r2, r3
 8001102:	eeb0 0a47 	vmov.f32	s0, s14
 8001106:	eef0 0a67 	vmov.f32	s1, s15
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bdb0      	pop	{r4, r5, r7, pc}
 8001110:	40590000 	.word	0x40590000
 8001114:	404e0000 	.word	0x404e0000

08001118 <GPS_ParseLine>:

// Parse a GGA sentence into gps_data
static void GPS_ParseLine(char *line)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    if (line[0] != '$') return;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b24      	cmp	r3, #36	@ 0x24
 8001126:	f040 80e5 	bne.w	80012f4 <GPS_ParseLine+0x1dc>

    char *type = strtok(line, ",");
 800112a:	4976      	ldr	r1, [pc, #472]	@ (8001304 <GPS_ParseLine+0x1ec>)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f00d f85b 	bl	800e1e8 <strtok>
 8001132:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (!type) return;
 8001134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80de 	beq.w	80012f8 <GPS_ParseLine+0x1e0>

    if (strcasecmp(type, "$GNGGA") != 0 && strcasecmp(type, "$GPGGA") != 0) return;
 800113c:	4972      	ldr	r1, [pc, #456]	@ (8001308 <GPS_ParseLine+0x1f0>)
 800113e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001140:	f00d f810 	bl	800e164 <strcasecmp>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <GPS_ParseLine+0x42>
 800114a:	4970      	ldr	r1, [pc, #448]	@ (800130c <GPS_ParseLine+0x1f4>)
 800114c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800114e:	f00d f809 	bl	800e164 <strcasecmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	f040 80d1 	bne.w	80012fc <GPS_ParseLine+0x1e4>

    char *time     = strtok(NULL, ",");
 800115a:	496a      	ldr	r1, [pc, #424]	@ (8001304 <GPS_ParseLine+0x1ec>)
 800115c:	2000      	movs	r0, #0
 800115e:	f00d f843 	bl	800e1e8 <strtok>
 8001162:	62b8      	str	r0, [r7, #40]	@ 0x28
    char *lat      = strtok(NULL, ",");
 8001164:	4967      	ldr	r1, [pc, #412]	@ (8001304 <GPS_ParseLine+0x1ec>)
 8001166:	2000      	movs	r0, #0
 8001168:	f00d f83e 	bl	800e1e8 <strtok>
 800116c:	6278      	str	r0, [r7, #36]	@ 0x24
    char *lat_dir  = strtok(NULL, ",");
 800116e:	4965      	ldr	r1, [pc, #404]	@ (8001304 <GPS_ParseLine+0x1ec>)
 8001170:	2000      	movs	r0, #0
 8001172:	f00d f839 	bl	800e1e8 <strtok>
 8001176:	6238      	str	r0, [r7, #32]
    char *lon      = strtok(NULL, ",");
 8001178:	4962      	ldr	r1, [pc, #392]	@ (8001304 <GPS_ParseLine+0x1ec>)
 800117a:	2000      	movs	r0, #0
 800117c:	f00d f834 	bl	800e1e8 <strtok>
 8001180:	61f8      	str	r0, [r7, #28]
    char *lon_dir  = strtok(NULL, ",");
 8001182:	4960      	ldr	r1, [pc, #384]	@ (8001304 <GPS_ParseLine+0x1ec>)
 8001184:	2000      	movs	r0, #0
 8001186:	f00d f82f 	bl	800e1e8 <strtok>
 800118a:	61b8      	str	r0, [r7, #24]
    char *fix      = strtok(NULL, ",");
 800118c:	495d      	ldr	r1, [pc, #372]	@ (8001304 <GPS_ParseLine+0x1ec>)
 800118e:	2000      	movs	r0, #0
 8001190:	f00d f82a 	bl	800e1e8 <strtok>
 8001194:	6178      	str	r0, [r7, #20]
    char *sats     = strtok(NULL, ",");
 8001196:	495b      	ldr	r1, [pc, #364]	@ (8001304 <GPS_ParseLine+0x1ec>)
 8001198:	2000      	movs	r0, #0
 800119a:	f00d f825 	bl	800e1e8 <strtok>
 800119e:	6138      	str	r0, [r7, #16]
    char *hdop     = strtok(NULL, ",");
 80011a0:	4958      	ldr	r1, [pc, #352]	@ (8001304 <GPS_ParseLine+0x1ec>)
 80011a2:	2000      	movs	r0, #0
 80011a4:	f00d f820 	bl	800e1e8 <strtok>
 80011a8:	60f8      	str	r0, [r7, #12]
    char *alt      = strtok(NULL, ",");
 80011aa:	4956      	ldr	r1, [pc, #344]	@ (8001304 <GPS_ParseLine+0x1ec>)
 80011ac:	2000      	movs	r0, #0
 80011ae:	f00d f81b 	bl	800e1e8 <strtok>
 80011b2:	60b8      	str	r0, [r7, #8]


   //Always get number of satellites and HDOP
    gps_data.satellites = sats ? (uint8_t)atoi(sats) : 0;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <GPS_ParseLine+0xae>
 80011ba:	6938      	ldr	r0, [r7, #16]
 80011bc:	f00b fb0f 	bl	800c7de <atoi>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	e000      	b.n	80011c8 <GPS_ParseLine+0xb0>
 80011c6:	2300      	movs	r3, #0
 80011c8:	4a51      	ldr	r2, [pc, #324]	@ (8001310 <GPS_ParseLine+0x1f8>)
 80011ca:	7513      	strb	r3, [r2, #20]
	gps_data.hdop       = hdop ? atof(hdop) : 0;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00a      	beq.n	80011e8 <GPS_ParseLine+0xd0>
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f00b fb00 	bl	800c7d8 <atof>
 80011d8:	ec53 2b10 	vmov	r2, r3, d0
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fd12 	bl	8000c08 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	e001      	b.n	80011ec <GPS_ParseLine+0xd4>
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	4a48      	ldr	r2, [pc, #288]	@ (8001310 <GPS_ParseLine+0x1f8>)
 80011ee:	6193      	str	r3, [r2, #24]

	//Get UTC time if available
	if (time)
 80011f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <GPS_ParseLine+0xf2>
	{
		strncpy(gps_data.time, time, sizeof(gps_data.time) - 1);
 80011f6:	220f      	movs	r2, #15
 80011f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011fa:	4846      	ldr	r0, [pc, #280]	@ (8001314 <GPS_ParseLine+0x1fc>)
 80011fc:	f00c ffe0 	bl	800e1c0 <strncpy>
		gps_data.time[sizeof(gps_data.time)-1] = '\0';
 8001200:	4b43      	ldr	r3, [pc, #268]	@ (8001310 <GPS_ParseLine+0x1f8>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001208:	e002      	b.n	8001210 <GPS_ParseLine+0xf8>
	}
	else
	{
		gps_data.time[0] = '\0';
 800120a:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <GPS_ParseLine+0x1f8>)
 800120c:	2200      	movs	r2, #0
 800120e:	775a      	strb	r2, [r3, #29]
	}

	if (!fix || strcmp(fix, "0") == 0) {
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <GPS_ParseLine+0x10c>
 8001216:	4940      	ldr	r1, [pc, #256]	@ (8001318 <GPS_ParseLine+0x200>)
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f7fe ffd9 	bl	80001d0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d115      	bne.n	8001250 <GPS_ParseLine+0x138>
		gps_data.fix = 0;
 8001224:	4b3a      	ldr	r3, [pc, #232]	@ (8001310 <GPS_ParseLine+0x1f8>)
 8001226:	2200      	movs	r2, #0
 8001228:	771a      	strb	r2, [r3, #28]
		gps_data.latitude  = 0;
 800122a:	4939      	ldr	r1, [pc, #228]	@ (8001310 <GPS_ParseLine+0x1f8>)
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c1 2300 	strd	r2, r3, [r1]
		gps_data.longitude = 0;
 8001238:	4935      	ldr	r1, [pc, #212]	@ (8001310 <GPS_ParseLine+0x1f8>)
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	e9c1 2302 	strd	r2, r3, [r1, #8]
		gps_data.altitude  = 0;
 8001246:	4b32      	ldr	r3, [pc, #200]	@ (8001310 <GPS_ParseLine+0x1f8>)
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
		return;
 800124e:	e056      	b.n	80012fe <GPS_ParseLine+0x1e6>
	}

	gps_data.fix = atoi(fix);
 8001250:	6978      	ldr	r0, [r7, #20]
 8001252:	f00b fac4 	bl	800c7de <atoi>
 8001256:	4603      	mov	r3, r0
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b2d      	ldr	r3, [pc, #180]	@ (8001310 <GPS_ParseLine+0x1f8>)
 800125c:	771a      	strb	r2, [r3, #28]
	gps_data.latitude  = nmea_to_decimal(lat)  * ((lat_dir && lat_dir[0]=='S') ? -1 : 1);
 800125e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001260:	f7ff ff02 	bl	8001068 <nmea_to_decimal>
 8001264:	ec55 4b10 	vmov	r4, r5, d0
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <GPS_ParseLine+0x166>
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b53      	cmp	r3, #83	@ 0x53
 8001274:	d103      	bne.n	800127e <GPS_ParseLine+0x166>
 8001276:	f04f 0000 	mov.w	r0, #0
 800127a:	4928      	ldr	r1, [pc, #160]	@ (800131c <GPS_ParseLine+0x204>)
 800127c:	e002      	b.n	8001284 <GPS_ParseLine+0x16c>
 800127e:	f04f 0000 	mov.w	r0, #0
 8001282:	4927      	ldr	r1, [pc, #156]	@ (8001320 <GPS_ParseLine+0x208>)
 8001284:	4622      	mov	r2, r4
 8001286:	462b      	mov	r3, r5
 8001288:	f7ff f9c6 	bl	8000618 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	491f      	ldr	r1, [pc, #124]	@ (8001310 <GPS_ParseLine+0x1f8>)
 8001292:	e9c1 2300 	strd	r2, r3, [r1]
	gps_data.longitude = nmea_to_decimal(lon)  * ((lon_dir && lon_dir[0]=='W') ? -1 : 1);
 8001296:	69f8      	ldr	r0, [r7, #28]
 8001298:	f7ff fee6 	bl	8001068 <nmea_to_decimal>
 800129c:	ec55 4b10 	vmov	r4, r5, d0
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <GPS_ParseLine+0x19e>
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b57      	cmp	r3, #87	@ 0x57
 80012ac:	d103      	bne.n	80012b6 <GPS_ParseLine+0x19e>
 80012ae:	f04f 0000 	mov.w	r0, #0
 80012b2:	491a      	ldr	r1, [pc, #104]	@ (800131c <GPS_ParseLine+0x204>)
 80012b4:	e002      	b.n	80012bc <GPS_ParseLine+0x1a4>
 80012b6:	f04f 0000 	mov.w	r0, #0
 80012ba:	4919      	ldr	r1, [pc, #100]	@ (8001320 <GPS_ParseLine+0x208>)
 80012bc:	4622      	mov	r2, r4
 80012be:	462b      	mov	r3, r5
 80012c0:	f7ff f9aa 	bl	8000618 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4911      	ldr	r1, [pc, #68]	@ (8001310 <GPS_ParseLine+0x1f8>)
 80012ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gps_data.altitude  = alt ? atof(alt) : 0;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00a      	beq.n	80012ea <GPS_ParseLine+0x1d2>
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f00b fa7f 	bl	800c7d8 <atof>
 80012da:	ec53 2b10 	vmov	r2, r3, d0
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fc91 	bl	8000c08 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	e001      	b.n	80012ee <GPS_ParseLine+0x1d6>
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <GPS_ParseLine+0x1f8>)
 80012f0:	6113      	str	r3, [r2, #16]
 80012f2:	e004      	b.n	80012fe <GPS_ParseLine+0x1e6>
    if (line[0] != '$') return;
 80012f4:	bf00      	nop
 80012f6:	e002      	b.n	80012fe <GPS_ParseLine+0x1e6>
    if (!type) return;
 80012f8:	bf00      	nop
 80012fa:	e000      	b.n	80012fe <GPS_ParseLine+0x1e6>
    if (strcasecmp(type, "$GNGGA") != 0 && strcasecmp(type, "$GPGGA") != 0) return;
 80012fc:	bf00      	nop
}
 80012fe:	3730      	adds	r7, #48	@ 0x30
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	08010870 	.word	0x08010870
 8001308:	08010874 	.word	0x08010874
 800130c:	0801087c 	.word	0x0801087c
 8001310:	200007e8 	.word	0x200007e8
 8001314:	20000805 	.word	0x20000805
 8001318:	08010884 	.word	0x08010884
 800131c:	bff00000 	.word	0xbff00000
 8001320:	3ff00000 	.word	0x3ff00000

08001324 <GPS_Init>:

// Initialize UART + DMA reception
void GPS_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(GPS_UART, dma_rx_buf, GPS_DMA_RX_BUF_SIZE);
 8001328:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800132c:	4902      	ldr	r1, [pc, #8]	@ (8001338 <GPS_Init+0x14>)
 800132e:	4803      	ldr	r0, [pc, #12]	@ (800133c <GPS_Init+0x18>)
 8001330:	f006 fa7c 	bl	800782c <HAL_UART_Receive_DMA>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200003e4 	.word	0x200003e4
 800133c:	20000c84 	.word	0x20000c84

08001340 <Get_GPS_Data>:

// Read latest complete NMEA sentence from DMA buffer safely
GPS_Data_t Get_GPS_Data(void)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    static uint16_t last_read_ptr = 0;
    uint16_t dma_write_ptr = GPS_DMA_RX_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8001348:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <Get_GPS_Data+0x138>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001354:	817b      	strh	r3, [r7, #10]

    int start_idx = -1, end_idx = -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	61bb      	str	r3, [r7, #24]
    uint16_t i = last_read_ptr;
 8001362:	4b46      	ldr	r3, [pc, #280]	@ (800147c <Get_GPS_Data+0x13c>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	82fb      	strh	r3, [r7, #22]
    uint16_t count = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	82bb      	strh	r3, [r7, #20]

    //printf("DMA write ptr: %d\n", dma_write_ptr);

    // Safety: limit max iterations to buffer size
    while (i != dma_write_ptr && count < GPS_DMA_RX_BUF_SIZE)
 800136c:	e022      	b.n	80013b4 <Get_GPS_Data+0x74>
    {
    	//printf("loop running\n");
    	if (dma_rx_buf[i] == '$') start_idx = i;
 800136e:	8afb      	ldrh	r3, [r7, #22]
 8001370:	4a43      	ldr	r2, [pc, #268]	@ (8001480 <Get_GPS_Data+0x140>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	2b24      	cmp	r3, #36	@ 0x24
 8001376:	d101      	bne.n	800137c <Get_GPS_Data+0x3c>
 8001378:	8afb      	ldrh	r3, [r7, #22]
 800137a:	61fb      	str	r3, [r7, #28]
        if ((dma_rx_buf[i] == '\n' || dma_rx_buf[i] == '\r') && start_idx >= 0)
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	4a40      	ldr	r2, [pc, #256]	@ (8001480 <Get_GPS_Data+0x140>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	2b0a      	cmp	r3, #10
 8001384:	d004      	beq.n	8001390 <Get_GPS_Data+0x50>
 8001386:	8afb      	ldrh	r3, [r7, #22]
 8001388:	4a3d      	ldr	r2, [pc, #244]	@ (8001480 <Get_GPS_Data+0x140>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	2b0d      	cmp	r3, #13
 800138e:	d104      	bne.n	800139a <Get_GPS_Data+0x5a>
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db01      	blt.n	800139a <Get_GPS_Data+0x5a>
        {
            end_idx = i;
 8001396:	8afb      	ldrh	r3, [r7, #22]
 8001398:	61bb      	str	r3, [r7, #24]
        }
        i = (i + 1) % GPS_DMA_RX_BUF_SIZE;
 800139a:	8afb      	ldrh	r3, [r7, #22]
 800139c:	3301      	adds	r3, #1
 800139e:	425a      	negs	r2, r3
 80013a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80013a8:	bf58      	it	pl
 80013aa:	4253      	negpl	r3, r2
 80013ac:	82fb      	strh	r3, [r7, #22]
        count++;
 80013ae:	8abb      	ldrh	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	82bb      	strh	r3, [r7, #20]
    while (i != dma_write_ptr && count < GPS_DMA_RX_BUF_SIZE)
 80013b4:	8afa      	ldrh	r2, [r7, #22]
 80013b6:	897b      	ldrh	r3, [r7, #10]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d003      	beq.n	80013c4 <Get_GPS_Data+0x84>
 80013bc:	8abb      	ldrh	r3, [r7, #20]
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c2:	d3d4      	bcc.n	800136e <Get_GPS_Data+0x2e>
    }

    if (start_idx >= 0 && end_idx >= 0)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db46      	blt.n	8001458 <Get_GPS_Data+0x118>
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db43      	blt.n	8001458 <Get_GPS_Data+0x118>
    {
        static char sentence[512];
        int len;

        if (end_idx >= start_idx)
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	db05      	blt.n	80013e4 <Get_GPS_Data+0xa4>
            len = end_idx - start_idx + 1;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	e006      	b.n	80013f2 <Get_GPS_Data+0xb2>
        else
            len = GPS_DMA_RX_BUF_SIZE - start_idx + end_idx + 1;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4413      	add	r3, r2
 80013ee:	3301      	adds	r3, #1
 80013f0:	613b      	str	r3, [r7, #16]

        // Copy safely from circular buffer
        for (int j = 0; j < len; j++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e013      	b.n	8001420 <Get_GPS_Data+0xe0>
            sentence[j] = dma_rx_buf[(start_idx + j) % GPS_DMA_RX_BUF_SIZE];
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	425a      	negs	r2, r3
 8001400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001404:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001408:	bf58      	it	pl
 800140a:	4253      	negpl	r3, r2
 800140c:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <Get_GPS_Data+0x140>)
 800140e:	5cd1      	ldrb	r1, [r2, r3]
 8001410:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <Get_GPS_Data+0x144>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4413      	add	r3, r2
 8001416:	460a      	mov	r2, r1
 8001418:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < len; j++)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbe7      	blt.n	80013f8 <Get_GPS_Data+0xb8>
        sentence[len] = '\0';
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <Get_GPS_Data+0x144>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4413      	add	r3, r2
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]

        last_read_ptr = (end_idx + 1) % GPS_DMA_RX_BUF_SIZE;
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	3301      	adds	r3, #1
 8001436:	425a      	negs	r2, r3
 8001438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800143c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001440:	bf58      	it	pl
 8001442:	4253      	negpl	r3, r2
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <Get_GPS_Data+0x13c>)
 8001448:	801a      	strh	r2, [r3, #0]

        printf("Sentence: %s\n", sentence);
 800144a:	490e      	ldr	r1, [pc, #56]	@ (8001484 <Get_GPS_Data+0x144>)
 800144c:	480e      	ldr	r0, [pc, #56]	@ (8001488 <Get_GPS_Data+0x148>)
 800144e:	f00c fe2b 	bl	800e0a8 <iprintf>

        GPS_ParseLine(sentence);
 8001452:	480c      	ldr	r0, [pc, #48]	@ (8001484 <Get_GPS_Data+0x144>)
 8001454:	f7ff fe60 	bl	8001118 <GPS_ParseLine>
    }

    return gps_data;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a0c      	ldr	r2, [pc, #48]	@ (800148c <Get_GPS_Data+0x14c>)
 800145c:	461c      	mov	r4, r3
 800145e:	4615      	mov	r5, r2
 8001460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001468:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800146c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bdb0      	pop	{r4, r5, r7, pc}
 8001478:	20000e1c 	.word	0x20000e1c
 800147c:	20000818 	.word	0x20000818
 8001480:	200003e4 	.word	0x200003e4
 8001484:	2000081c 	.word	0x2000081c
 8001488:	08010888 	.word	0x08010888
 800148c:	200007e8 	.word	0x200007e8

08001490 <LED_IT_Handeler>:
#include "stm32l4xx_hal.h"
#include "main.h"


void LED_IT_Handeler()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001494:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <LED_IT_Handeler+0x14>)
 800149a:	f002 f80d 	bl	80034b8 <HAL_GPIO_TogglePin>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	48000800 	.word	0x48000800

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ac:	b097      	sub	sp, #92	@ 0x5c
 80014ae:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b0:	f001 fa6b 	bl	800298a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b4:	f000 f84e 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b8:	f000 fc64 	bl	8001d84 <MX_GPIO_Init>
  MX_DMA_Init();
 80014bc:	f000 fc28 	bl	8001d10 <MX_DMA_Init>
  MX_I2C3_Init();
 80014c0:	f000 f898 	bl	80015f4 <MX_I2C3_Init>
  MX_UART4_Init();
 80014c4:	f000 fb94 	bl	8001bf0 <MX_UART4_Init>
  MX_UART5_Init();
 80014c8:	f000 fbc2 	bl	8001c50 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80014cc:	f000 fbf0 	bl	8001cb0 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 80014d0:	f000 fb68 	bl	8001ba4 <MX_TIM17_Init>
  MX_USB_DEVICE_Init();
 80014d4:	f00a fb14 	bl	800bb00 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80014d8:	f000 f9c8 	bl	800186c <MX_TIM3_Init>
  MX_TIM4_Init();
 80014dc:	f000 fa14 	bl	8001908 <MX_TIM4_Init>
  MX_TIM5_Init();
 80014e0:	f000 fa62 	bl	80019a8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80014e4:	f000 fab0 	bl	8001a48 <MX_TIM8_Init>
  MX_TIM1_Init();
 80014e8:	f000 f8c4 	bl	8001674 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014ec:	f000 f96e 	bl	80017cc <MX_TIM2_Init>


  //LED_Tim_Enable();
  //Stepper_IT_Enable();

  Stepper_nSleep(GPIO_PIN_SET);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f000 fd7f 	bl	8001ff4 <Stepper_nSleep>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GPS_Data_t GPS_Data;
  GPS_Init();
 80014f6:	f7ff ff15 	bl	8001324 <GPS_Init>
	//Stepper_Move(&RA_Axis_motor, 5, 1.0f, GPIO_PIN_SET);
	//HAL_Delay(2000);
	//Stepper_Move(&EL_Axis_motor, 5, 5.0f, 0);
	//Stepper_Move(&RA_Axis_motor, 5, 1.0f, GPIO_PIN_SET);

	  GPS_Data = Get_GPS_Data();
 80014fa:	463b      	mov	r3, r7
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff1f 	bl	8001340 <Get_GPS_Data>
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001502:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
	         GPS_Data.latitude,
	         GPS_Data.longitude,
	         GPS_Data.altitude,
 800150a:	693b      	ldr	r3, [r7, #16]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f82b 	bl	8000568 <__aeabi_f2d>
 8001512:	4682      	mov	sl, r0
 8001514:	468b      	mov	fp, r1
	         GPS_Data.satellites,
 8001516:	7d3b      	ldrb	r3, [r7, #20]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001518:	461e      	mov	r6, r3
	         GPS_Data.hdop,
 800151a:	69bb      	ldr	r3, [r7, #24]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f823 	bl	8000568 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
	         GPS_Data.fix);
 8001526:	7f39      	ldrb	r1, [r7, #28]
	  printf("Lat: %.6f, Lon: %.6f, Alt: %.2f m, Sats: %d, HDOP: %.2f, Fix: %d\r\n",
 8001528:	9108      	str	r1, [sp, #32]
 800152a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800152e:	9604      	str	r6, [sp, #16]
 8001530:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001534:	e9cd 4500 	strd	r4, r5, [sp]
 8001538:	4642      	mov	r2, r8
 800153a:	464b      	mov	r3, r9
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <main+0xa8>)
 800153e:	f00c fdb3 	bl	800e0a8 <iprintf>
	  HAL_Delay(1000);
 8001542:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001546:	f001 fa95 	bl	8002a74 <HAL_Delay>
	  GPS_Data = Get_GPS_Data();
 800154a:	bf00      	nop
 800154c:	e7d5      	b.n	80014fa <main+0x52>
 800154e:	bf00      	nop
 8001550:	08010898 	.word	0x08010898

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b096      	sub	sp, #88	@ 0x58
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2244      	movs	r2, #68	@ 0x44
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f00c fdf5 	bl	800e152 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001576:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800157a:	f003 faa5 	bl	8004ac8 <HAL_PWREx_ControlVoltageScaling>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001584:	f000 fcb2 	bl	8001eec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001588:	2301      	movs	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001592:	2302      	movs	r3, #2
 8001594:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001596:	2303      	movs	r3, #3
 8001598:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800159e:	2308      	movs	r3, #8
 80015a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015a2:	2307      	movs	r3, #7
 80015a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015a6:	2302      	movs	r3, #2
 80015a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015aa:	2302      	movs	r3, #2
 80015ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 faee 	bl	8004b94 <HAL_RCC_OscConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015be:	f000 fc95 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c2:	230f      	movs	r3, #15
 80015c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c6:	2303      	movs	r3, #3
 80015c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	2103      	movs	r1, #3
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 feb6 	bl	800534c <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015e6:	f000 fc81 	bl	8001eec <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3758      	adds	r7, #88	@ 0x58
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <MX_I2C3_Init+0x74>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <MX_I2C3_Init+0x78>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <MX_I2C3_Init+0x74>)
 8001600:	4a1b      	ldr	r2, [pc, #108]	@ (8001670 <MX_I2C3_Init+0x7c>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <MX_I2C3_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160a:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <MX_I2C3_Init+0x74>)
 800160c:	2201      	movs	r2, #1
 800160e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <MX_I2C3_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001616:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <MX_I2C3_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <MX_I2C3_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_I2C3_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_I2C3_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800162e:	480e      	ldr	r0, [pc, #56]	@ (8001668 <MX_I2C3_Init+0x74>)
 8001630:	f001 ff74 	bl	800351c <HAL_I2C_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800163a:	f000 fc57 	bl	8001eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4809      	ldr	r0, [pc, #36]	@ (8001668 <MX_I2C3_Init+0x74>)
 8001642:	f002 f806 	bl	8003652 <HAL_I2CEx_ConfigAnalogFilter>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800164c:	f000 fc4e 	bl	8001eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_I2C3_Init+0x74>)
 8001654:	f002 f848 	bl	80036e8 <HAL_I2CEx_ConfigDigitalFilter>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 fc45 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000a1c 	.word	0x20000a1c
 800166c:	40005c00 	.word	0x40005c00
 8001670:	10b17db5 	.word	0x10b17db5

08001674 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b09a      	sub	sp, #104	@ 0x68
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001694:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	222c      	movs	r2, #44	@ 0x2c
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00c fd4f 	bl	800e152 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016b4:	4b43      	ldr	r3, [pc, #268]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80016b6:	4a44      	ldr	r2, [pc, #272]	@ (80017c8 <MX_TIM1_Init+0x154>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80016ba:	4b42      	ldr	r3, [pc, #264]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80016bc:	221f      	movs	r2, #31
 80016be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b40      	ldr	r3, [pc, #256]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 80016c6:	4b3f      	ldr	r3, [pc, #252]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80016c8:	2213      	movs	r2, #19
 80016ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016d2:	4b3c      	ldr	r3, [pc, #240]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b3a      	ldr	r3, [pc, #232]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016de:	4839      	ldr	r0, [pc, #228]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80016e0:	f004 fd12 	bl	8006108 <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016ea:	f000 fbff 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016f8:	4619      	mov	r1, r3
 80016fa:	4832      	ldr	r0, [pc, #200]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80016fc:	f005 f89e 	bl	800683c <HAL_TIM_ConfigClockSource>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001706:	f000 fbf1 	bl	8001eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800170a:	482e      	ldr	r0, [pc, #184]	@ (80017c4 <MX_TIM1_Init+0x150>)
 800170c:	f004 fd82 	bl	8006214 <HAL_TIM_PWM_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001716:	f000 fbe9 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800171a:	2320      	movs	r3, #32
 800171c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001726:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800172a:	4619      	mov	r1, r3
 800172c:	4825      	ldr	r0, [pc, #148]	@ (80017c4 <MX_TIM1_Init+0x150>)
 800172e:	f005 fee5 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001738:	f000 fbd8 	bl	8001eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173c:	2360      	movs	r3, #96	@ 0x60
 800173e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 10;
 8001740:	230a      	movs	r3, #10
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001744:	2300      	movs	r3, #0
 8001746:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001748:	2308      	movs	r3, #8
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001758:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800175c:	2204      	movs	r2, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4818      	ldr	r0, [pc, #96]	@ (80017c4 <MX_TIM1_Init+0x150>)
 8001762:	f004 ff57 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800176c:	f000 fbbe 	bl	8001eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001784:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001788:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001792:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80017a6:	f005 ff31 	bl	800760c <HAL_TIMEx_ConfigBreakDeadTime>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80017b0:	f000 fb9c 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017b4:	4803      	ldr	r0, [pc, #12]	@ (80017c4 <MX_TIM1_Init+0x150>)
 80017b6:	f000 fd5d 	bl	8002274 <HAL_TIM_MspPostInit>

}
 80017ba:	bf00      	nop
 80017bc:	3768      	adds	r7, #104	@ 0x68
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000a70 	.word	0x20000a70
 80017c8:	40012c00 	.word	0x40012c00

080017cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e2:	463b      	mov	r3, r7
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <MX_TIM2_Init+0x9c>)
 80017ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001868 <MX_TIM2_Init+0x9c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <MX_TIM2_Init+0x9c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001800:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <MX_TIM2_Init+0x9c>)
 8001802:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001806:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <MX_TIM2_Init+0x9c>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <MX_TIM2_Init+0x9c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001814:	4814      	ldr	r0, [pc, #80]	@ (8001868 <MX_TIM2_Init+0x9c>)
 8001816:	f004 fc77 	bl	8006108 <HAL_TIM_Base_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001820:	f000 fb64 	bl	8001eec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001824:	2307      	movs	r3, #7
 8001826:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	4619      	mov	r1, r3
 8001832:	480d      	ldr	r0, [pc, #52]	@ (8001868 <MX_TIM2_Init+0x9c>)
 8001834:	f005 f8cb 	bl	80069ce <HAL_TIM_SlaveConfigSynchro>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800183e:	f000 fb55 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800184a:	463b      	mov	r3, r7
 800184c:	4619      	mov	r1, r3
 800184e:	4806      	ldr	r0, [pc, #24]	@ (8001868 <MX_TIM2_Init+0x9c>)
 8001850:	f005 fe54 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800185a:	f000 fb47 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000abc 	.word	0x20000abc

0800186c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <MX_TIM3_Init+0x94>)
 800188c:	4a1d      	ldr	r2, [pc, #116]	@ (8001904 <MX_TIM3_Init+0x98>)
 800188e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <MX_TIM3_Init+0x94>)
 8001892:	223f      	movs	r2, #63	@ 0x3f
 8001894:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <MX_TIM3_Init+0x94>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800189c:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <MX_TIM3_Init+0x94>)
 800189e:	2263      	movs	r2, #99	@ 0x63
 80018a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <MX_TIM3_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <MX_TIM3_Init+0x94>)
 80018aa:	2280      	movs	r2, #128	@ 0x80
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ae:	4814      	ldr	r0, [pc, #80]	@ (8001900 <MX_TIM3_Init+0x94>)
 80018b0:	f004 fc2a 	bl	8006108 <HAL_TIM_Base_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80018ba:	f000 fb17 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4619      	mov	r1, r3
 80018ca:	480d      	ldr	r0, [pc, #52]	@ (8001900 <MX_TIM3_Init+0x94>)
 80018cc:	f004 ffb6 	bl	800683c <HAL_TIM_ConfigClockSource>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018d6:	f000 fb09 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	@ (8001900 <MX_TIM3_Init+0x94>)
 80018e8:	f005 fe08 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018f2:	f000 fafb 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000b08 	.word	0x20000b08
 8001904:	40000400 	.word	0x40000400

08001908 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <MX_TIM4_Init+0x98>)
 8001928:	4a1e      	ldr	r2, [pc, #120]	@ (80019a4 <MX_TIM4_Init+0x9c>)
 800192a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 800192c:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <MX_TIM4_Init+0x98>)
 800192e:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001932:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_TIM4_Init+0x98>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <MX_TIM4_Init+0x98>)
 800193c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001940:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <MX_TIM4_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001948:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <MX_TIM4_Init+0x98>)
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800194e:	4814      	ldr	r0, [pc, #80]	@ (80019a0 <MX_TIM4_Init+0x98>)
 8001950:	f004 fbda 	bl	8006108 <HAL_TIM_Base_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800195a:	f000 fac7 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4619      	mov	r1, r3
 800196a:	480d      	ldr	r0, [pc, #52]	@ (80019a0 <MX_TIM4_Init+0x98>)
 800196c:	f004 ff66 	bl	800683c <HAL_TIM_ConfigClockSource>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001976:	f000 fab9 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4806      	ldr	r0, [pc, #24]	@ (80019a0 <MX_TIM4_Init+0x98>)
 8001988:	f005 fdb8 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001992:	f000 faab 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000b54 	.word	0x20000b54
 80019a4:	40000800 	.word	0x40000800

080019a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019be:	463b      	mov	r3, r7
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MX_TIM5_Init+0x98>)
 80019ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001a44 <MX_TIM5_Init+0x9c>)
 80019cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <MX_TIM5_Init+0x98>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <MX_TIM5_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <MX_TIM5_Init+0x98>)
 80019dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <MX_TIM5_Init+0x98>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e8:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <MX_TIM5_Init+0x98>)
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019ee:	4814      	ldr	r0, [pc, #80]	@ (8001a40 <MX_TIM5_Init+0x98>)
 80019f0:	f004 fb8a 	bl	8006108 <HAL_TIM_Base_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80019fa:	f000 fa77 	bl	8001eec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80019fe:	2307      	movs	r3, #7
 8001a00:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001a02:	2330      	movs	r3, #48	@ 0x30
 8001a04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <MX_TIM5_Init+0x98>)
 8001a0e:	f004 ffde 	bl	80069ce <HAL_TIM_SlaveConfigSynchro>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001a18:	f000 fa68 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <MX_TIM5_Init+0x98>)
 8001a2a:	f005 fd67 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001a34:	f000 fa5a 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000ba0 	.word	0x20000ba0
 8001a44:	40000c00 	.word	0x40000c00

08001a48 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b09a      	sub	sp, #104	@ 0x68
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	222c      	movs	r2, #44	@ 0x2c
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f00c fb65 	bl	800e152 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a88:	4b44      	ldr	r3, [pc, #272]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001a8a:	4a45      	ldr	r2, [pc, #276]	@ (8001ba0 <MX_TIM8_Init+0x158>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8001a8e:	4b43      	ldr	r3, [pc, #268]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001a90:	221f      	movs	r2, #31
 8001a92:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001a9a:	4b40      	ldr	r3, [pc, #256]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001a9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001aa0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ab4:	4839      	ldr	r0, [pc, #228]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001ab6:	f004 fb27 	bl	8006108 <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001ac0:	f000 fa14 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001aca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4832      	ldr	r0, [pc, #200]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001ad2:	f004 feb3 	bl	800683c <HAL_TIM_ConfigClockSource>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001adc:	f000 fa06 	bl	8001eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ae0:	482e      	ldr	r0, [pc, #184]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001ae2:	f004 fb97 	bl	8006214 <HAL_TIM_PWM_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001aec:	f000 f9fe 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001af0:	2320      	movs	r3, #32
 8001af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001afc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b00:	4619      	mov	r1, r3
 8001b02:	4826      	ldr	r0, [pc, #152]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001b04:	f005 fcfa 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001b0e:	f000 f9ed 	bl	8001eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b12:	2360      	movs	r3, #96	@ 0x60
 8001b14:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 8001b16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b20:	2300      	movs	r3, #0
 8001b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b34:	2208      	movs	r2, #8
 8001b36:	4619      	mov	r1, r3
 8001b38:	4818      	ldr	r0, [pc, #96]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001b3a:	f004 fd6b 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001b44:	f000 f9d2 	bl	8001eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4807      	ldr	r0, [pc, #28]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001b7e:	f005 fd45 	bl	800760c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001b88:	f000 f9b0 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b8c:	4803      	ldr	r0, [pc, #12]	@ (8001b9c <MX_TIM8_Init+0x154>)
 8001b8e:	f000 fb71 	bl	8002274 <HAL_TIM_MspPostInit>

}
 8001b92:	bf00      	nop
 8001b94:	3768      	adds	r7, #104	@ 0x68
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000bec 	.word	0x20000bec
 8001ba0:	40013400 	.word	0x40013400

08001ba4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <MX_TIM17_Init+0x44>)
 8001baa:	4a10      	ldr	r2, [pc, #64]	@ (8001bec <MX_TIM17_Init+0x48>)
 8001bac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <MX_TIM17_Init+0x44>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <MX_TIM17_Init+0x44>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <MX_TIM17_Init+0x44>)
 8001bbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <MX_TIM17_Init+0x44>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <MX_TIM17_Init+0x44>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <MX_TIM17_Init+0x44>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	@ (8001be8 <MX_TIM17_Init+0x44>)
 8001bd6:	f004 fa97 	bl	8006108 <HAL_TIM_Base_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001be0:	f000 f984 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000c38 	.word	0x20000c38
 8001bec:	40014800 	.word	0x40014800

08001bf0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001bf6:	4a15      	ldr	r2, [pc, #84]	@ (8001c4c <MX_UART4_Init+0x5c>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001c16:	2204      	movs	r2, #4
 8001c18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_UART4_Init+0x58>)
 8001c34:	f005 fdab 	bl	800778e <HAL_UART_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c3e:	f000 f955 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000c84 	.word	0x20000c84
 8001c4c:	40004c00 	.word	0x40004c00

08001c50 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <MX_UART5_Init+0x5c>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <MX_UART5_Init+0x58>)
 8001c94:	f005 fd7b 	bl	800778e <HAL_UART_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001c9e:	f000 f925 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000d0c 	.word	0x20000d0c
 8001cac:	40005000 	.word	0x40005000

08001cb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb4:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cb6:	4a15      	ldr	r2, [pc, #84]	@ (8001d0c <MX_USART1_UART_Init+0x5c>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cba:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cf4:	f005 fd4b 	bl	800778e <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cfe:	f000 f8f5 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000d94 	.word	0x20000d94
 8001d0c:	40013800 	.word	0x40013800

08001d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <MX_DMA_Init+0x70>)
 8001d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1a:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <MX_DMA_Init+0x70>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <MX_DMA_Init+0x70>)
 8001d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <MX_DMA_Init+0x70>)
 8001d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d32:	4a13      	ldr	r2, [pc, #76]	@ (8001d80 <MX_DMA_Init+0x70>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <MX_DMA_Init+0x70>)
 8001d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	200e      	movs	r0, #14
 8001d4c:	f000 ffb5 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001d50:	200e      	movs	r0, #14
 8001d52:	f000 ffce 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f000 ffad 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d60:	200f      	movs	r0, #15
 8001d62:	f000 ffc6 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	203c      	movs	r0, #60	@ 0x3c
 8001d6c:	f000 ffa5 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001d70:	203c      	movs	r0, #60	@ 0x3c
 8001d72:	f000 ffbe 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	4b51      	ldr	r3, [pc, #324]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9e:	4a50      	ldr	r2, [pc, #320]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbe:	4b48      	ldr	r3, [pc, #288]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b45      	ldr	r3, [pc, #276]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a44      	ldr	r2, [pc, #272]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b42      	ldr	r3, [pc, #264]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dee:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	4a38      	ldr	r2, [pc, #224]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e06:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <MX_GPIO_Init+0x15c>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWR_BTN_LED_Pin|DEC_EN_Pin|DEC_DIR_Pin|LED2_Pin
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 5133 	mov.w	r1, #11456	@ 0x2cc0
 8001e18:	4832      	ldr	r0, [pc, #200]	@ (8001ee4 <MX_GPIO_Init+0x160>)
 8001e1a:	f001 fb35 	bl	8003488 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f24c 01e0 	movw	r1, #49376	@ 0xc0e0
 8001e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e28:	f001 fb2e 	bl	8003488 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f243 4137 	movw	r1, #13367	@ 0x3437
 8001e32:	482d      	ldr	r0, [pc, #180]	@ (8001ee8 <MX_GPIO_Init+0x164>)
 8001e34:	f001 fb28 	bl	8003488 <HAL_GPIO_WritePin>
                          |RA_EN_Pin|RA_DIR_Pin|LED_USB_Pin|LED_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PWR_BTN_LED_Pin DEC_EN_Pin DEC_DIR_Pin LED2_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = PWR_BTN_LED_Pin|DEC_EN_Pin|DEC_DIR_Pin|LED2_Pin
 8001e38:	f44f 5333 	mov.w	r3, #11456	@ 0x2cc0
 8001e3c:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4824      	ldr	r0, [pc, #144]	@ (8001ee4 <MX_GPIO_Init+0x160>)
 8001e52:	f001 f96f 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : EL_STOP_Pin */
  GPIO_InitStruct.Pin = EL_STOP_Pin;
 8001e56:	2304      	movs	r3, #4
 8001e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e5a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EL_STOP_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e6e:	f001 f961 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : AZ_EN_Pin AZ_DIR_Pin AZ_STEP_Pin LED4_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = AZ_EN_Pin|AZ_DIR_Pin|AZ_STEP_Pin|LED4_Pin
 8001e72:	f24c 03e0 	movw	r3, #49376	@ 0xc0e0
 8001e76:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8e:	f001 f951 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_SLEEP_n_Pin EL_EN_Pin EL_DIR_Pin EL_STEP_Pin
                           RA_EN_Pin RA_DIR_Pin LED_USB_Pin LED_DC_Pin */
  GPIO_InitStruct.Pin = STEP_SLEEP_n_Pin|EL_EN_Pin|EL_DIR_Pin|EL_STEP_Pin
 8001e92:	f243 4337 	movw	r3, #13367	@ 0x3437
 8001e96:	617b      	str	r3, [r7, #20]
                          |RA_EN_Pin|RA_DIR_Pin|LED_USB_Pin|LED_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480f      	ldr	r0, [pc, #60]	@ (8001ee8 <MX_GPIO_Init+0x164>)
 8001eac:	f001 f942 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_STATE_Pin */
  GPIO_InitStruct.Pin = PWR_STATE_Pin;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_STATE_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4809      	ldr	r0, [pc, #36]	@ (8001ee8 <MX_GPIO_Init+0x164>)
 8001ec4:	f001 f936 	bl	8003134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2008      	movs	r0, #8
 8001ece:	f000 fef4 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ed2:	2008      	movs	r0, #8
 8001ed4:	f000 ff0d 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48000800 	.word	0x48000800
 8001ee8:	48000400 	.word	0x48000400

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <Error_Handler+0x8>

08001ef8 <Stepper_IT_Handeler>:
	.PWM_Type = PWM_OUT_P,
};


void Stepper_IT_Handeler()
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
    if (EL_Axis_motor.enabled)
 8001efc:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <Stepper_IT_Handeler+0x24>)
 8001efe:	7f1b      	ldrb	r3, [r3, #28]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <Stepper_IT_Handeler+0x12>
    {
    	STEP_Generating(&EL_Axis_motor);
 8001f04:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <Stepper_IT_Handeler+0x24>)
 8001f06:	f000 f84a 	bl	8001f9e <STEP_Generating>
    }

    if (AZ_Axis_motor.enabled)
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <Stepper_IT_Handeler+0x28>)
 8001f0c:	7f1b      	ldrb	r3, [r3, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <Stepper_IT_Handeler+0x20>
    {
        STEP_Generating(&AZ_Axis_motor);
 8001f12:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <Stepper_IT_Handeler+0x28>)
 8001f14:	f000 f843 	bl	8001f9e <STEP_Generating>
    }
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	2000003c 	.word	0x2000003c

08001f24 <Stepper_Stop>:
		}

}

void Stepper_Stop(Stepper_motor *Axis)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

	if (Axis->High_precision)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7f9b      	ldrb	r3, [r3, #30]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <Stepper_Stop+0x52>
	{
		//Stop PWM timer
			if (Axis->PWM_Type == PWM_OUT_P)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d108      	bne.n	8001f50 <Stepper_Stop+0x2c>
			{
				HAL_TIM_PWM_Stop(Axis->PWM_Timer, Axis->PWM_Channel);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4619      	mov	r1, r3
 8001f48:	4610      	mov	r0, r2
 8001f4a:	f004 f9c5 	bl	80062d8 <HAL_TIM_PWM_Stop>
 8001f4e:	e00c      	b.n	8001f6a <Stepper_Stop+0x46>
			}
			else if (Axis->PWM_Type == PWM_OUT_N)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d107      	bne.n	8001f6a <Stepper_Stop+0x46>
			{
				HAL_TIMEx_PWMN_Stop(Axis->PWM_Timer, Axis->PWM_Channel);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f005 fa6b 	bl	8007440 <HAL_TIMEx_PWMN_Stop>
			}
			//Stop STEP counting timer
			HAL_TIM_Base_Stop_IT(Axis->Step_Counter_Timer);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f921 	bl	80061b6 <HAL_TIM_Base_Stop_IT>
 8001f74:	e009      	b.n	8001f8a <Stepper_Stop+0x66>
	}
	else if (!Axis->High_precision)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7f9b      	ldrb	r3, [r3, #30]
 8001f7a:	f083 0301 	eor.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <Stepper_Stop+0x66>
	{
		Axis->Steps_remaining = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	621a      	str	r2, [r3, #32]
	}

	Axis->enabled = false;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
	Axis->busy = false;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	775a      	strb	r2, [r3, #29]

}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <STEP_Generating>:

void STEP_Generating(Stepper_motor *Axis)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
	if (Axis->Steps_remaining == 0)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <STEP_Generating+0x18>
	        {
				Axis->enabled= false;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
	            return;
 8001fb4:	e01a      	b.n	8001fec <STEP_Generating+0x4e>
	        }
	        if (Axis->Tick_counter == 0)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d111      	bne.n	8001fe2 <STEP_Generating+0x44>
	        {
	            // Generate one step pulse
	            HAL_GPIO_TogglePin(Axis->STEP_Port, Axis->STEP_Pin);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	889b      	ldrh	r3, [r3, #4]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4610      	mov	r0, r2
 8001fca:	f001 fa75 	bl	80034b8 <HAL_GPIO_TogglePin>

	            Axis->Steps_remaining--;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	1e5a      	subs	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	621a      	str	r2, [r3, #32]
	            Axis->Tick_counter = Axis->Step_interval_ticks;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fe0:	e004      	b.n	8001fec <STEP_Generating+0x4e>
	        }
	        else
	        {
	        	Axis->Tick_counter--;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
	        }
}
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <Stepper_nSleep>:


void Stepper_nSleep(bool n_sleep)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(STEP_SLEEP_n_GPIO_Port,STEP_SLEEP_n_Pin, n_sleep); //1 = enabled
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	461a      	mov	r2, r3
 8002002:	2101      	movs	r1, #1
 8002004:	4803      	ldr	r0, [pc, #12]	@ (8002014 <Stepper_nSleep+0x20>)
 8002006:	f001 fa3f 	bl	8003488 <HAL_GPIO_WritePin>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	48000400 	.word	0x48000400

08002018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <HAL_MspInit+0x44>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002022:	4a0e      	ldr	r2, [pc, #56]	@ (800205c <HAL_MspInit+0x44>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6613      	str	r3, [r2, #96]	@ 0x60
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <HAL_MspInit+0x44>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_MspInit+0x44>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	4a08      	ldr	r2, [pc, #32]	@ (800205c <HAL_MspInit+0x44>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002040:	6593      	str	r3, [r2, #88]	@ 0x58
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_MspInit+0x44>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b0ac      	sub	sp, #176	@ 0xb0
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2288      	movs	r2, #136	@ 0x88
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f00c f866 	bl	800e152 <memset>
  if(hi2c->Instance==I2C3)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a21      	ldr	r2, [pc, #132]	@ (8002110 <HAL_I2C_MspInit+0xb0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d13b      	bne.n	8002108 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002094:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002096:	2300      	movs	r3, #0
 8002098:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fb76 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020aa:	f7ff ff1f 	bl	8001eec <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <HAL_I2C_MspInit+0xb4>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b2:	4a18      	ldr	r2, [pc, #96]	@ (8002114 <HAL_I2C_MspInit+0xb4>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ba:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <HAL_I2C_MspInit+0xb4>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020c6:	2303      	movs	r3, #3
 80020c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020cc:	2312      	movs	r3, #18
 80020ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020de:	2304      	movs	r3, #4
 80020e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020e8:	4619      	mov	r1, r3
 80020ea:	480b      	ldr	r0, [pc, #44]	@ (8002118 <HAL_I2C_MspInit+0xb8>)
 80020ec:	f001 f822 	bl	8003134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_I2C_MspInit+0xb4>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	4a07      	ldr	r2, [pc, #28]	@ (8002114 <HAL_I2C_MspInit+0xb4>)
 80020f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_I2C_MspInit+0xb4>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002108:	bf00      	nop
 800210a:	37b0      	adds	r7, #176	@ 0xb0
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40005c00 	.word	0x40005c00
 8002114:	40021000 	.word	0x40021000
 8002118:	48000800 	.word	0x48000800

0800211c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4b      	ldr	r2, [pc, #300]	@ (8002258 <HAL_TIM_Base_MspInit+0x13c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d10c      	bne.n	8002148 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800212e:	4b4b      	ldr	r3, [pc, #300]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002132:	4a4a      	ldr	r2, [pc, #296]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002134:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002138:	6613      	str	r3, [r2, #96]	@ 0x60
 800213a:	4b48      	ldr	r3, [pc, #288]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 800213c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002146:	e082      	b.n	800224e <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002150:	d114      	bne.n	800217c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002152:	4b42      	ldr	r3, [pc, #264]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002156:	4a41      	ldr	r2, [pc, #260]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6593      	str	r3, [r2, #88]	@ 0x58
 800215e:	4b3f      	ldr	r3, [pc, #252]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	623b      	str	r3, [r7, #32]
 8002168:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	201c      	movs	r0, #28
 8002170:	f000 fda3 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002174:	201c      	movs	r0, #28
 8002176:	f000 fdbc 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
}
 800217a:	e068      	b.n	800224e <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a37      	ldr	r2, [pc, #220]	@ (8002260 <HAL_TIM_Base_MspInit+0x144>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d114      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002186:	4b35      	ldr	r3, [pc, #212]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	4a34      	ldr	r2, [pc, #208]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6593      	str	r3, [r2, #88]	@ 0x58
 8002192:	4b32      	ldr	r3, [pc, #200]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	201d      	movs	r0, #29
 80021a4:	f000 fd89 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021a8:	201d      	movs	r0, #29
 80021aa:	f000 fda2 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
}
 80021ae:	e04e      	b.n	800224e <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002264 <HAL_TIM_Base_MspInit+0x148>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10c      	bne.n	80021d4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ba:	4b28      	ldr	r3, [pc, #160]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	4a27      	ldr	r2, [pc, #156]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c6:	4b25      	ldr	r3, [pc, #148]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	69bb      	ldr	r3, [r7, #24]
}
 80021d2:	e03c      	b.n	800224e <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM5)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a23      	ldr	r2, [pc, #140]	@ (8002268 <HAL_TIM_Base_MspInit+0x14c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d114      	bne.n	8002208 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021de:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	4a1e      	ldr	r2, [pc, #120]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ea:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2032      	movs	r0, #50	@ 0x32
 80021fc:	f000 fd5d 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002200:	2032      	movs	r0, #50	@ 0x32
 8002202:	f000 fd76 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
}
 8002206:	e022      	b.n	800224e <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM8)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a17      	ldr	r2, [pc, #92]	@ (800226c <HAL_TIM_Base_MspInit+0x150>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10c      	bne.n	800222c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002212:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002216:	4a11      	ldr	r2, [pc, #68]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002218:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800221c:	6613      	str	r3, [r2, #96]	@ 0x60
 800221e:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002222:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
}
 800222a:	e010      	b.n	800224e <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM17)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <HAL_TIM_Base_MspInit+0x154>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10b      	bne.n	800224e <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223a:	4a08      	ldr	r2, [pc, #32]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002240:	6613      	str	r3, [r2, #96]	@ 0x60
 8002242:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_TIM_Base_MspInit+0x140>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002246:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
}
 800224e:	bf00      	nop
 8002250:	3728      	adds	r7, #40	@ 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40021000 	.word	0x40021000
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800
 8002268:	40000c00 	.word	0x40000c00
 800226c:	40013400 	.word	0x40013400
 8002270:	40014800 	.word	0x40014800

08002274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	@ 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a23      	ldr	r2, [pc, #140]	@ (8002320 <HAL_TIM_MspPostInit+0xac>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d11d      	bne.n	80022d2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <HAL_TIM_MspPostInit+0xb0>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	4a22      	ldr	r2, [pc, #136]	@ (8002324 <HAL_TIM_MspPostInit+0xb0>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <HAL_TIM_MspPostInit+0xb0>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = RA_STEP_Pin;
 80022ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RA_STEP_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	4817      	ldr	r0, [pc, #92]	@ (8002328 <HAL_TIM_MspPostInit+0xb4>)
 80022cc:	f000 ff32 	bl	8003134 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80022d0:	e021      	b.n	8002316 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a15      	ldr	r2, [pc, #84]	@ (800232c <HAL_TIM_MspPostInit+0xb8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d11c      	bne.n	8002316 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_TIM_MspPostInit+0xb0>)
 80022de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e0:	4a10      	ldr	r2, [pc, #64]	@ (8002324 <HAL_TIM_MspPostInit+0xb0>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_TIM_MspPostInit+0xb0>)
 80022ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEC_STEP_Pin;
 80022f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002306:	2303      	movs	r3, #3
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEC_STEP_GPIO_Port, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	4807      	ldr	r0, [pc, #28]	@ (8002330 <HAL_TIM_MspPostInit+0xbc>)
 8002312:	f000 ff0f 	bl	8003134 <HAL_GPIO_Init>
}
 8002316:	bf00      	nop
 8002318:	3728      	adds	r7, #40	@ 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40012c00 	.word	0x40012c00
 8002324:	40021000 	.word	0x40021000
 8002328:	48000400 	.word	0x48000400
 800232c:	40013400 	.word	0x40013400
 8002330:	48000800 	.word	0x48000800

08002334 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0b0      	sub	sp, #192	@ 0xc0
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800234c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002350:	2288      	movs	r2, #136	@ 0x88
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f00b fefc 	bl	800e152 <memset>
  if(huart->Instance==UART4)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a66      	ldr	r2, [pc, #408]	@ (80024f8 <HAL_UART_MspInit+0x1c4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d165      	bne.n	8002430 <HAL_UART_MspInit+0xfc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002364:	2308      	movs	r3, #8
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002368:	2300      	movs	r3, #0
 800236a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002370:	4618      	mov	r0, r3
 8002372:	f003 fa0d 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800237c:	f7ff fdb6 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002380:	4b5e      	ldr	r3, [pc, #376]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	4a5d      	ldr	r2, [pc, #372]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 8002386:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800238a:	6593      	str	r3, [r2, #88]	@ 0x58
 800238c:	4b5b      	ldr	r3, [pc, #364]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4b58      	ldr	r3, [pc, #352]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239c:	4a57      	ldr	r2, [pc, #348]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a4:	4b55      	ldr	r3, [pc, #340]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023b0:	2303      	movs	r3, #3
 80023b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023c8:	2308      	movs	r3, #8
 80023ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80023d2:	4619      	mov	r1, r3
 80023d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d8:	f000 feac 	bl	8003134 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80023dc:	4b48      	ldr	r3, [pc, #288]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 80023de:	4a49      	ldr	r2, [pc, #292]	@ (8002504 <HAL_UART_MspInit+0x1d0>)
 80023e0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 80023e2:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 80023e4:	2202      	movs	r2, #2
 80023e6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023e8:	4b45      	ldr	r3, [pc, #276]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ee:	4b44      	ldr	r3, [pc, #272]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023f4:	4b42      	ldr	r3, [pc, #264]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 80023f6:	2280      	movs	r2, #128	@ 0x80
 80023f8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023fa:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002400:	4b3f      	ldr	r3, [pc, #252]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002406:	4b3e      	ldr	r3, [pc, #248]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 8002408:	2220      	movs	r2, #32
 800240a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800240c:	4b3c      	ldr	r3, [pc, #240]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 800240e:	2200      	movs	r2, #0
 8002410:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002412:	483b      	ldr	r0, [pc, #236]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 8002414:	f000 fc96 	bl	8002d44 <HAL_DMA_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800241e:	f7ff fd65 	bl	8001eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a36      	ldr	r2, [pc, #216]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 8002426:	675a      	str	r2, [r3, #116]	@ 0x74
 8002428:	4a35      	ldr	r2, [pc, #212]	@ (8002500 <HAL_UART_MspInit+0x1cc>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6293      	str	r3, [r2, #40]	@ 0x28
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800242e:	e106      	b.n	800263e <HAL_UART_MspInit+0x30a>
  else if(huart->Instance==UART5)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a34      	ldr	r2, [pc, #208]	@ (8002508 <HAL_UART_MspInit+0x1d4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d16c      	bne.n	8002514 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800243a:	2310      	movs	r3, #16
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800243e:	2300      	movs	r3, #0
 8002440:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002446:	4618      	mov	r0, r3
 8002448:	f003 f9a2 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8002452:	f7ff fd4b 	bl	8001eec <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002456:	4b29      	ldr	r3, [pc, #164]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	4a28      	ldr	r2, [pc, #160]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 800245c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002460:	6593      	str	r3, [r2, #88]	@ 0x58
 8002462:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800246e:	4b23      	ldr	r3, [pc, #140]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	4a22      	ldr	r2, [pc, #136]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002486:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	4a1c      	ldr	r2, [pc, #112]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 800248c:	f043 0308 	orr.w	r3, r3, #8
 8002490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002492:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <HAL_UART_MspInit+0x1c8>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800249e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024b8:	2308      	movs	r3, #8
 80024ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024be:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024c2:	4619      	mov	r1, r3
 80024c4:	4811      	ldr	r0, [pc, #68]	@ (800250c <HAL_UART_MspInit+0x1d8>)
 80024c6:	f000 fe35 	bl	8003134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024ca:	2304      	movs	r3, #4
 80024cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024e2:	2308      	movs	r3, #8
 80024e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024ec:	4619      	mov	r1, r3
 80024ee:	4808      	ldr	r0, [pc, #32]	@ (8002510 <HAL_UART_MspInit+0x1dc>)
 80024f0:	f000 fe20 	bl	8003134 <HAL_GPIO_Init>
}
 80024f4:	e0a3      	b.n	800263e <HAL_UART_MspInit+0x30a>
 80024f6:	bf00      	nop
 80024f8:	40004c00 	.word	0x40004c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	20000e1c 	.word	0x20000e1c
 8002504:	40020458 	.word	0x40020458
 8002508:	40005000 	.word	0x40005000
 800250c:	48000800 	.word	0x48000800
 8002510:	48000c00 	.word	0x48000c00
  else if(huart->Instance==USART1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4b      	ldr	r2, [pc, #300]	@ (8002648 <HAL_UART_MspInit+0x314>)
 800251a:	4293      	cmp	r3, r2
 800251c:	f040 808f 	bne.w	800263e <HAL_UART_MspInit+0x30a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002520:	2301      	movs	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002524:	2300      	movs	r3, #0
 8002526:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800252c:	4618      	mov	r0, r3
 800252e:	f003 f92f 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_MspInit+0x208>
      Error_Handler();
 8002538:	f7ff fcd8 	bl	8001eec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800253c:	4b43      	ldr	r3, [pc, #268]	@ (800264c <HAL_UART_MspInit+0x318>)
 800253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002540:	4a42      	ldr	r2, [pc, #264]	@ (800264c <HAL_UART_MspInit+0x318>)
 8002542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002546:	6613      	str	r3, [r2, #96]	@ 0x60
 8002548:	4b40      	ldr	r3, [pc, #256]	@ (800264c <HAL_UART_MspInit+0x318>)
 800254a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002554:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <HAL_UART_MspInit+0x318>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002558:	4a3c      	ldr	r2, [pc, #240]	@ (800264c <HAL_UART_MspInit+0x318>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002560:	4b3a      	ldr	r3, [pc, #232]	@ (800264c <HAL_UART_MspInit+0x318>)
 8002562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800256c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002586:	2307      	movs	r3, #7
 8002588:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002590:	4619      	mov	r1, r3
 8002592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002596:	f000 fdcd 	bl	8003134 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800259a:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 800259c:	4a2d      	ldr	r2, [pc, #180]	@ (8002654 <HAL_UART_MspInit+0x320>)
 800259e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80025a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025a2:	2202      	movs	r2, #2
 80025a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ac:	4b28      	ldr	r3, [pc, #160]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025b2:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025b4:	2280      	movs	r2, #128	@ 0x80
 80025b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b8:	4b25      	ldr	r3, [pc, #148]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025be:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80025c4:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025c6:	2220      	movs	r2, #32
 80025c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ca:	4b21      	ldr	r3, [pc, #132]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025d0:	481f      	ldr	r0, [pc, #124]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025d2:	f000 fbb7 	bl	8002d44 <HAL_DMA_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 80025dc:	f7ff fc86 	bl	8001eec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80025e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002650 <HAL_UART_MspInit+0x31c>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <HAL_UART_MspInit+0x324>)
 80025ee:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <HAL_UART_MspInit+0x328>)
 80025f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80025f2:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_UART_MspInit+0x324>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025f8:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <HAL_UART_MspInit+0x324>)
 80025fa:	2210      	movs	r2, #16
 80025fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fe:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <HAL_UART_MspInit+0x324>)
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002604:	4b14      	ldr	r3, [pc, #80]	@ (8002658 <HAL_UART_MspInit+0x324>)
 8002606:	2280      	movs	r2, #128	@ 0x80
 8002608:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260a:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <HAL_UART_MspInit+0x324>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_UART_MspInit+0x324>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002616:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <HAL_UART_MspInit+0x324>)
 8002618:	2200      	movs	r2, #0
 800261a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800261c:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_UART_MspInit+0x324>)
 800261e:	2200      	movs	r2, #0
 8002620:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002622:	480d      	ldr	r0, [pc, #52]	@ (8002658 <HAL_UART_MspInit+0x324>)
 8002624:	f000 fb8e 	bl	8002d44 <HAL_DMA_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 800262e:	f7ff fc5d 	bl	8001eec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a08      	ldr	r2, [pc, #32]	@ (8002658 <HAL_UART_MspInit+0x324>)
 8002636:	671a      	str	r2, [r3, #112]	@ 0x70
 8002638:	4a07      	ldr	r2, [pc, #28]	@ (8002658 <HAL_UART_MspInit+0x324>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800263e:	bf00      	nop
 8002640:	37c0      	adds	r7, #192	@ 0xc0
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40013800 	.word	0x40013800
 800264c:	40021000 	.word	0x40021000
 8002650:	20000e64 	.word	0x20000e64
 8002654:	40020058 	.word	0x40020058
 8002658:	20000eac 	.word	0x20000eac
 800265c:	40020044 	.word	0x40020044

08002660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <NMI_Handler+0x4>

08002668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <MemManage_Handler+0x4>

08002678 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <BusFault_Handler+0x4>

08002680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <UsageFault_Handler+0x4>

08002688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b6:	f000 f9bd 	bl	8002a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}

080026be <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EL_STOP_Pin);
 80026c2:	2004      	movs	r0, #4
 80026c4:	f000 ff12 	bl	80034ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <DMA1_Channel4_IRQHandler+0x10>)
 80026d2:	f000 fc4f 	bl	8002f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000eac 	.word	0x20000eac

080026e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026e4:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <DMA1_Channel5_IRQHandler+0x10>)
 80026e6:	f000 fc45 	bl	8002f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000e64 	.word	0x20000e64

080026f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026f8:	4802      	ldr	r0, [pc, #8]	@ (8002704 <TIM2_IRQHandler+0x10>)
 80026fa:	f003 fe83 	bl	8006404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000abc 	.word	0x20000abc

08002708 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800270c:	4802      	ldr	r0, [pc, #8]	@ (8002718 <TIM3_IRQHandler+0x10>)
 800270e:	f003 fe79 	bl	8006404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000b08 	.word	0x20000b08

0800271c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <TIM5_IRQHandler+0x10>)
 8002722:	f003 fe6f 	bl	8006404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000ba0 	.word	0x20000ba0

08002730 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <DMA2_Channel5_IRQHandler+0x10>)
 8002736:	f000 fc1d 	bl	8002f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000e1c 	.word	0x20000e1c

08002744 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <OTG_FS_IRQHandler+0x10>)
 800274a:	f001 f957 	bl	80039fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200023dc 	.word	0x200023dc

08002758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return 1;
 800275c:	2301      	movs	r3, #1
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <_kill>:

int _kill(int pid, int sig)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002772:	f00b fdef 	bl	800e354 <__errno>
 8002776:	4603      	mov	r3, r0
 8002778:	2216      	movs	r2, #22
 800277a:	601a      	str	r2, [r3, #0]
  return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <_exit>:

void _exit (int status)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002790:	f04f 31ff 	mov.w	r1, #4294967295
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ffe7 	bl	8002768 <_kill>
  while (1) {}    /* Make sure we hang here */
 800279a:	bf00      	nop
 800279c:	e7fd      	b.n	800279a <_exit+0x12>

0800279e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e00a      	b.n	80027c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027b0:	f3af 8000 	nop.w
 80027b4:	4601      	mov	r1, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	60ba      	str	r2, [r7, #8]
 80027bc:	b2ca      	uxtb	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3301      	adds	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dbf0      	blt.n	80027b0 <_read+0x12>
  }

  return len;
 80027ce:	687b      	ldr	r3, [r7, #4]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002800:	605a      	str	r2, [r3, #4]
  return 0;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <_isatty>:

int _isatty(int file)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002818:	2301      	movs	r3, #1
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002870:	f00b fd70 	bl	800e354 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20018000 	.word	0x20018000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	20000ef4 	.word	0x20000ef4
 80028a8:	20002c30 	.word	0x20002c30

080028ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: pecka
 */
#include "timers.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == LED_TIMER)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d102      	bne.n	80028e8 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  //LEDs timer
	  LED_IT_Handeler();
 80028e2:	f7fe fdd5 	bl	8001490 <LED_IT_Handeler>
  {
	  //Stepper timer RA
	  Stepper_Stop(&RA_Axis_motor);
  }

}
 80028e6:	e018      	b.n	800291a <HAL_TIM_PeriodElapsedCallback+0x4a>
  else if(htim->Instance == STEPPER_TIMER)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002928 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d102      	bne.n	80028f8 <HAL_TIM_PeriodElapsedCallback+0x28>
	  Stepper_IT_Handeler();
 80028f2:	f7ff fb01 	bl	8001ef8 <Stepper_IT_Handeler>
}
 80028f6:	e010      	b.n	800291a <HAL_TIM_PeriodElapsedCallback+0x4a>
  else if (htim->Instance == DEC_TIM)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0b      	ldr	r2, [pc, #44]	@ (800292c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d103      	bne.n	800290a <HAL_TIM_PeriodElapsedCallback+0x3a>
	  Stepper_Stop(&DEC_Axis_motor);
 8002902:	480b      	ldr	r0, [pc, #44]	@ (8002930 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002904:	f7ff fb0e 	bl	8001f24 <Stepper_Stop>
}
 8002908:	e007      	b.n	800291a <HAL_TIM_PeriodElapsedCallback+0x4a>
  else if(htim->Instance == RA_TIM)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002912:	d102      	bne.n	800291a <HAL_TIM_PeriodElapsedCallback+0x4a>
	  Stepper_Stop(&RA_Axis_motor);
 8002914:	4807      	ldr	r0, [pc, #28]	@ (8002934 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002916:	f7ff fb05 	bl	8001f24 <Stepper_Stop>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40000800 	.word	0x40000800
 8002928:	40000400 	.word	0x40000400
 800292c:	40000c00 	.word	0x40000c00
 8002930:	200000b4 	.word	0x200000b4
 8002934:	20000078 	.word	0x20000078

08002938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002970 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800293c:	f7ff ffb6 	bl	80028ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002940:	480c      	ldr	r0, [pc, #48]	@ (8002974 <LoopForever+0x6>)
  ldr r1, =_edata
 8002942:	490d      	ldr	r1, [pc, #52]	@ (8002978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002944:	4a0d      	ldr	r2, [pc, #52]	@ (800297c <LoopForever+0xe>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002948:	e002      	b.n	8002950 <LoopCopyDataInit>

0800294a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800294c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294e:	3304      	adds	r3, #4

08002950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002954:	d3f9      	bcc.n	800294a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002958:	4c0a      	ldr	r4, [pc, #40]	@ (8002984 <LoopForever+0x16>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800295c:	e001      	b.n	8002962 <LoopFillZerobss>

0800295e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002960:	3204      	adds	r2, #4

08002962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002964:	d3fb      	bcc.n	800295e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002966:	f00b fcfb 	bl	800e360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800296a:	f7fe fd9d 	bl	80014a8 <main>

0800296e <LoopForever>:

LoopForever:
    b LoopForever
 800296e:	e7fe      	b.n	800296e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002970:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002978:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 800297c:	08010df8 	.word	0x08010df8
  ldr r2, =_sbss
 8002980:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8002984:	20002c2c 	.word	0x20002c2c

08002988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002988:	e7fe      	b.n	8002988 <ADC1_2_IRQHandler>

0800298a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 f985 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800299a:	200f      	movs	r0, #15
 800299c:	f000 f80e 	bl	80029bc <HAL_InitTick>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	71fb      	strb	r3, [r7, #7]
 80029aa:	e001      	b.n	80029b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029ac:	f7ff fb34 	bl	8002018 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029b0:	79fb      	ldrb	r3, [r7, #7]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029c8:	4b17      	ldr	r3, [pc, #92]	@ (8002a28 <HAL_InitTick+0x6c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d023      	beq.n	8002a18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <HAL_InitTick+0x70>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <HAL_InitTick+0x6c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029de:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f99f 	bl	8002d2a <HAL_SYSTICK_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d809      	bhi.n	8002a0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f8:	2200      	movs	r2, #0
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	f000 f95b 	bl	8002cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a04:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <HAL_InitTick+0x74>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e007      	b.n	8002a1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e004      	b.n	8002a1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e001      	b.n	8002a1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200000f8 	.word	0x200000f8
 8002a2c:	200000f0 	.word	0x200000f0
 8002a30:	200000f4 	.word	0x200000f4

08002a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_IncTick+0x20>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <HAL_IncTick+0x24>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <HAL_IncTick+0x24>)
 8002a46:	6013      	str	r3, [r2, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	200000f8 	.word	0x200000f8
 8002a58:	20000ef8 	.word	0x20000ef8

08002a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a60:	4b03      	ldr	r3, [pc, #12]	@ (8002a70 <HAL_GetTick+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000ef8 	.word	0x20000ef8

08002a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff ffee 	bl	8002a5c <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d005      	beq.n	8002a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_Delay+0x44>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a9a:	bf00      	nop
 8002a9c:	f7ff ffde 	bl	8002a5c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d8f7      	bhi.n	8002a9c <HAL_Delay+0x28>
  {
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200000f8 	.word	0x200000f8

08002abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <__NVIC_GetPriorityGrouping+0x18>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 0307 	and.w	r3, r3, #7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	db0b      	blt.n	8002b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4907      	ldr	r1, [pc, #28]	@ (8002b58 <__NVIC_EnableIRQ+0x38>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000e100 	.word	0xe000e100

08002b5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db12      	blt.n	8002b94 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	490a      	ldr	r1, [pc, #40]	@ (8002ba0 <__NVIC_DisableIRQ+0x44>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b82:	3320      	adds	r3, #32
 8002b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b88:	f3bf 8f4f 	dsb	sy
}
 8002b8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b8e:	f3bf 8f6f 	isb	sy
}
 8002b92:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	@ (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	@ 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff05 	bl	8002abc <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff1a 	bl	8002b04 <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff8e 	bl	8002bf8 <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5d 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff0d 	bl	8002b20 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff1d 	bl	8002b5c <__NVIC_DisableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ff94 	bl	8002c60 <SysTick_Config>
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e098      	b.n	8002e88 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e94 <HAL_DMA_Init+0x150>)
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d80f      	bhi.n	8002d82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b4b      	ldr	r3, [pc, #300]	@ (8002e98 <HAL_DMA_Init+0x154>)
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e9c <HAL_DMA_Init+0x158>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	009a      	lsls	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a48      	ldr	r2, [pc, #288]	@ (8002ea0 <HAL_DMA_Init+0x15c>)
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d80:	e00e      	b.n	8002da0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b46      	ldr	r3, [pc, #280]	@ (8002ea4 <HAL_DMA_Init+0x160>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a43      	ldr	r2, [pc, #268]	@ (8002e9c <HAL_DMA_Init+0x158>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	009a      	lsls	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a42      	ldr	r2, [pc, #264]	@ (8002ea8 <HAL_DMA_Init+0x164>)
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dfa:	d039      	beq.n	8002e70 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	4a27      	ldr	r2, [pc, #156]	@ (8002ea0 <HAL_DMA_Init+0x15c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d11a      	bne.n	8002e3c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e06:	4b29      	ldr	r3, [pc, #164]	@ (8002eac <HAL_DMA_Init+0x168>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	f003 031c 	and.w	r3, r3, #28
 8002e12:	210f      	movs	r1, #15
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	4924      	ldr	r1, [pc, #144]	@ (8002eac <HAL_DMA_Init+0x168>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e20:	4b22      	ldr	r3, [pc, #136]	@ (8002eac <HAL_DMA_Init+0x168>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2c:	f003 031c 	and.w	r3, r3, #28
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	491d      	ldr	r1, [pc, #116]	@ (8002eac <HAL_DMA_Init+0x168>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
 8002e3a:	e019      	b.n	8002e70 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <HAL_DMA_Init+0x16c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e44:	f003 031c 	and.w	r3, r3, #28
 8002e48:	210f      	movs	r1, #15
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	4917      	ldr	r1, [pc, #92]	@ (8002eb0 <HAL_DMA_Init+0x16c>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e56:	4b16      	ldr	r3, [pc, #88]	@ (8002eb0 <HAL_DMA_Init+0x16c>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f003 031c 	and.w	r3, r3, #28
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	4911      	ldr	r1, [pc, #68]	@ (8002eb0 <HAL_DMA_Init+0x16c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40020407 	.word	0x40020407
 8002e98:	bffdfff8 	.word	0xbffdfff8
 8002e9c:	cccccccd 	.word	0xcccccccd
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	bffdfbf8 	.word	0xbffdfbf8
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	400200a8 	.word	0x400200a8
 8002eb0:	400204a8 	.word	0x400204a8

08002eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_DMA_Start_IT+0x20>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e04b      	b.n	8002f6c <HAL_DMA_Start_IT+0xb8>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d13a      	bne.n	8002f5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f8e0 	bl	80030d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 020e 	orr.w	r2, r2, #14
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e00f      	b.n	8002f4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0204 	bic.w	r2, r2, #4
 8002f3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 020a 	orr.w	r2, r2, #10
 8002f4a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e005      	b.n	8002f6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f90:	f003 031c 	and.w	r3, r3, #28
 8002f94:	2204      	movs	r2, #4
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d026      	beq.n	8002fee <HAL_DMA_IRQHandler+0x7a>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d021      	beq.n	8002fee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0204 	bic.w	r2, r2, #4
 8002fc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fcc:	f003 021c 	and.w	r2, r3, #28
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fda:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d071      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fec:	e06c      	b.n	80030c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	f003 031c 	and.w	r3, r3, #28
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d02e      	beq.n	8003060 <HAL_DMA_IRQHandler+0xec>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d029      	beq.n	8003060 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 020a 	bic.w	r2, r2, #10
 8003028:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f003 021c 	and.w	r2, r3, #28
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	2102      	movs	r1, #2
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d038      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800305e:	e033      	b.n	80030c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f003 031c 	and.w	r3, r3, #28
 8003068:	2208      	movs	r2, #8
 800306a:	409a      	lsls	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02a      	beq.n	80030ca <HAL_DMA_IRQHandler+0x156>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d025      	beq.n	80030ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 020e 	bic.w	r2, r2, #14
 800308c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	f003 021c 	and.w	r2, r3, #28
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	2101      	movs	r1, #1
 800309c:	fa01 f202 	lsl.w	r2, r1, r2
 80030a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
}
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	f003 021c 	and.w	r2, r3, #28
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	2101      	movs	r1, #1
 80030ee:	fa01 f202 	lsl.w	r2, r1, r2
 80030f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b10      	cmp	r3, #16
 8003102:	d108      	bne.n	8003116 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003114:	e007      	b.n	8003126 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	60da      	str	r2, [r3, #12]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003142:	e17f      	b.n	8003444 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2101      	movs	r1, #1
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8171 	beq.w	800343e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d005      	beq.n	8003174 <HAL_GPIO_Init+0x40>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d130      	bne.n	80031d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031aa:	2201      	movs	r2, #1
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 0201 	and.w	r2, r3, #1
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d118      	bne.n	8003214 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	08db      	lsrs	r3, r3, #3
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b03      	cmp	r3, #3
 800321e:	d017      	beq.n	8003250 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d123      	bne.n	80032a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	6939      	ldr	r1, [r7, #16]
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80ac 	beq.w	800343e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003464 <HAL_GPIO_Init+0x330>)
 80032e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003464 <HAL_GPIO_Init+0x330>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80032f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003464 <HAL_GPIO_Init+0x330>)
 80032f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032fe:	4a5a      	ldr	r2, [pc, #360]	@ (8003468 <HAL_GPIO_Init+0x334>)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	3302      	adds	r3, #2
 8003306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	220f      	movs	r2, #15
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003328:	d025      	beq.n	8003376 <HAL_GPIO_Init+0x242>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4f      	ldr	r2, [pc, #316]	@ (800346c <HAL_GPIO_Init+0x338>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01f      	beq.n	8003372 <HAL_GPIO_Init+0x23e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4e      	ldr	r2, [pc, #312]	@ (8003470 <HAL_GPIO_Init+0x33c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d019      	beq.n	800336e <HAL_GPIO_Init+0x23a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4d      	ldr	r2, [pc, #308]	@ (8003474 <HAL_GPIO_Init+0x340>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_GPIO_Init+0x236>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4c      	ldr	r2, [pc, #304]	@ (8003478 <HAL_GPIO_Init+0x344>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00d      	beq.n	8003366 <HAL_GPIO_Init+0x232>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4b      	ldr	r2, [pc, #300]	@ (800347c <HAL_GPIO_Init+0x348>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <HAL_GPIO_Init+0x22e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4a      	ldr	r2, [pc, #296]	@ (8003480 <HAL_GPIO_Init+0x34c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_GPIO_Init+0x22a>
 800335a:	2306      	movs	r3, #6
 800335c:	e00c      	b.n	8003378 <HAL_GPIO_Init+0x244>
 800335e:	2307      	movs	r3, #7
 8003360:	e00a      	b.n	8003378 <HAL_GPIO_Init+0x244>
 8003362:	2305      	movs	r3, #5
 8003364:	e008      	b.n	8003378 <HAL_GPIO_Init+0x244>
 8003366:	2304      	movs	r3, #4
 8003368:	e006      	b.n	8003378 <HAL_GPIO_Init+0x244>
 800336a:	2303      	movs	r3, #3
 800336c:	e004      	b.n	8003378 <HAL_GPIO_Init+0x244>
 800336e:	2302      	movs	r3, #2
 8003370:	e002      	b.n	8003378 <HAL_GPIO_Init+0x244>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_GPIO_Init+0x244>
 8003376:	2300      	movs	r3, #0
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	f002 0203 	and.w	r2, r2, #3
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	4093      	lsls	r3, r2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003388:	4937      	ldr	r1, [pc, #220]	@ (8003468 <HAL_GPIO_Init+0x334>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003396:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <HAL_GPIO_Init+0x350>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033ba:	4a32      	ldr	r2, [pc, #200]	@ (8003484 <HAL_GPIO_Init+0x350>)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033c0:	4b30      	ldr	r3, [pc, #192]	@ (8003484 <HAL_GPIO_Init+0x350>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033e4:	4a27      	ldr	r2, [pc, #156]	@ (8003484 <HAL_GPIO_Init+0x350>)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033ea:	4b26      	ldr	r3, [pc, #152]	@ (8003484 <HAL_GPIO_Init+0x350>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800340e:	4a1d      	ldr	r2, [pc, #116]	@ (8003484 <HAL_GPIO_Init+0x350>)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003414:	4b1b      	ldr	r3, [pc, #108]	@ (8003484 <HAL_GPIO_Init+0x350>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	43db      	mvns	r3, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003438:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <HAL_GPIO_Init+0x350>)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	f47f ae78 	bne.w	8003144 <HAL_GPIO_Init+0x10>
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40010000 	.word	0x40010000
 800346c:	48000400 	.word	0x48000400
 8003470:	48000800 	.word	0x48000800
 8003474:	48000c00 	.word	0x48000c00
 8003478:	48001000 	.word	0x48001000
 800347c:	48001400 	.word	0x48001400
 8003480:	48001800 	.word	0x48001800
 8003484:	40010400 	.word	0x40010400

08003488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	807b      	strh	r3, [r7, #2]
 8003494:	4613      	mov	r3, r2
 8003496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003498:	787b      	ldrb	r3, [r7, #1]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800349e:	887a      	ldrh	r2, [r7, #2]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034a4:	e002      	b.n	80034ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4013      	ands	r3, r2
 80034d0:	041a      	lsls	r2, r3, #16
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43d9      	mvns	r1, r3
 80034d6:	887b      	ldrh	r3, [r7, #2]
 80034d8:	400b      	ands	r3, r1
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	619a      	str	r2, [r3, #24]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034f6:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003502:	4a05      	ldr	r2, [pc, #20]	@ (8003518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fd98 	bl	8001040 <HAL_GPIO_EXTI_Callback>
  }
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e08d      	b.n	800364a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe fd8c 	bl	8002060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	@ 0x24
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800356c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800357c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	e006      	b.n	80035a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d108      	bne.n	80035be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	e007      	b.n	80035ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69d9      	ldr	r1, [r3, #28]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b20      	cmp	r3, #32
 8003666:	d138      	bne.n	80036da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003672:	2302      	movs	r3, #2
 8003674:	e032      	b.n	80036dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2224      	movs	r2, #36	@ 0x24
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6819      	ldr	r1, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d139      	bne.n	8003772 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003708:	2302      	movs	r3, #2
 800370a:	e033      	b.n	8003774 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	@ 0x24
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800373a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af02      	add	r7, sp, #8
 8003786:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e101      	b.n	8003996 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f008 fbd2 	bl	800bf50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2203      	movs	r2, #3
 80037b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f005 f813 	bl	80087ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7c1a      	ldrb	r2, [r3, #16]
 80037cc:	f88d 2000 	strb.w	r2, [sp]
 80037d0:	3304      	adds	r3, #4
 80037d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037d4:	f004 ff2e 	bl	8008634 <USB_CoreInit>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0d5      	b.n	8003996 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f005 f80b 	bl	800880c <USB_SetCurrentMode>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0c6      	b.n	8003996 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	e04a      	b.n	80038a4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3315      	adds	r3, #21
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3314      	adds	r3, #20
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	b298      	uxth	r0, r3
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	332e      	adds	r3, #46	@ 0x2e
 800384a:	4602      	mov	r2, r0
 800384c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800384e:	7bfa      	ldrb	r2, [r7, #15]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3318      	adds	r3, #24
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	331c      	adds	r3, #28
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3320      	adds	r3, #32
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3324      	adds	r3, #36	@ 0x24
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	3301      	adds	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	791b      	ldrb	r3, [r3, #4]
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d3af      	bcc.n	800380e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
 80038b2:	e044      	b.n	800393e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80038dc:	7bfa      	ldrb	r2, [r7, #15]
 80038de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	3301      	adds	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	791b      	ldrb	r3, [r3, #4]
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	429a      	cmp	r2, r3
 8003946:	d3b5      	bcc.n	80038b4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7c1a      	ldrb	r2, [r3, #16]
 8003950:	f88d 2000 	strb.w	r2, [sp]
 8003954:	3304      	adds	r3, #4
 8003956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003958:	f004 ffa4 	bl	80088a4 <USB_DevInit>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e013      	b.n	8003996 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7b1b      	ldrb	r3, [r3, #12]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d102      	bne.n	800398a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f001 f86d 	bl	8004a64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f005 ff5b 	bl	800984a <USB_DevDisconnect>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_PCD_Start+0x1c>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e01c      	b.n	80039f4 <HAL_PCD_Start+0x56>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	7b5b      	ldrb	r3, [r3, #13]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d105      	bne.n	80039d6 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f004 fef4 	bl	80087c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f005 ff0f 	bl	8009808 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b08d      	sub	sp, #52	@ 0x34
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f005 ffcd 	bl	80099b2 <USB_GetMode>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 8481 	bne.w	8004322 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f005 ff31 	bl	800988c <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8477 	beq.w	8004320 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f005 ff1e 	bl	800988c <USB_ReadInterrupts>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d107      	bne.n	8003a6a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f002 0202 	and.w	r2, r2, #2
 8003a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f005 ff0c 	bl	800988c <USB_ReadInterrupts>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d161      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0210 	bic.w	r2, r2, #16
 8003a8c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 020f 	and.w	r2, r3, #15
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3304      	adds	r3, #4
 8003aac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003ab4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ab8:	d124      	bne.n	8003b04 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d035      	beq.n	8003b32 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	6a38      	ldr	r0, [r7, #32]
 8003ada:	f005 fd43 	bl	8009564 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aea:	441a      	add	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003afc:	441a      	add	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	615a      	str	r2, [r3, #20]
 8003b02:	e016      	b.n	8003b32 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b0a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b0e:	d110      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b16:	2208      	movs	r2, #8
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6a38      	ldr	r0, [r7, #32]
 8003b1c:	f005 fd22 	bl	8009564 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b2c:	441a      	add	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0210 	orr.w	r2, r2, #16
 8003b40:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f005 fea0 	bl	800988c <USB_ReadInterrupts>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b56:	f040 80a7 	bne.w	8003ca8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f005 fea5 	bl	80098b2 <USB_ReadDevAllOutEpInterrupt>
 8003b68:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003b6a:	e099      	b.n	8003ca0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 808e 	beq.w	8003c94 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f005 fec9 	bl	800991a <USB_ReadDevOutEPInterrupt>
 8003b88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00c      	beq.n	8003bae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ba6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fe81 	bl	80048b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00c      	beq.n	8003bd2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 febd 	bl	800494c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	2310      	movs	r3, #16
 8003bec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d030      	beq.n	8003c5a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c00:	2b80      	cmp	r3, #128	@ 0x80
 8003c02:	d109      	bne.n	8003c18 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c16:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	78db      	ldrb	r3, [r3, #3]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d108      	bne.n	8003c48 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f008 fad8 	bl	800c1f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c54:	461a      	mov	r2, r3
 8003c56:	2302      	movs	r3, #2
 8003c58:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c70:	461a      	mov	r2, r3
 8003c72:	2320      	movs	r3, #32
 8003c74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c92:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	3301      	adds	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f47f af62 	bne.w	8003b6c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f005 fded 	bl	800988c <USB_ReadInterrupts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cbc:	f040 80a4 	bne.w	8003e08 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f005 fe0e 	bl	80098e6 <USB_ReadDevAllInEpInterrupt>
 8003cca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003cd0:	e096      	b.n	8003e00 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 808b 	beq.w	8003df4 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f005 fe34 	bl	8009956 <USB_ReadDevInEPInterrupt>
 8003cee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d020      	beq.n	8003d3c <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2201      	movs	r2, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69f9      	ldr	r1, [r7, #28]
 8003d16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f008 f9c9 	bl	800c0ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d52:	461a      	mov	r2, r3
 8003d54:	2308      	movs	r3, #8
 8003d56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2310      	movs	r3, #16
 8003d72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2340      	movs	r3, #64	@ 0x40
 8003d8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d023      	beq.n	8003de2 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d9c:	6a38      	ldr	r0, [r7, #32]
 8003d9e:	f004 fec9 	bl	8008b34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	3310      	adds	r3, #16
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	3304      	adds	r3, #4
 8003db4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	78db      	ldrb	r3, [r3, #3]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d108      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f008 fa26 	bl	800c21c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2302      	movs	r3, #2
 8003de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003dec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fcd6 	bl	80047a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	3301      	adds	r3, #1
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f47f af65 	bne.w	8003cd2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f005 fd3d 	bl	800988c <USB_ReadInterrupts>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e1c:	d122      	bne.n	8003e64 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d108      	bne.n	8003e4e <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e44:	2100      	movs	r1, #0
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f008 fc5a 	bl	800c700 <HAL_PCDEx_LPM_Callback>
 8003e4c:	e002      	b.n	8003e54 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f008 f9aa 	bl	800c1a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f005 fd0f 	bl	800988c <USB_ReadInterrupts>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e78:	d112      	bne.n	8003ea0 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d102      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f008 f966 	bl	800c15c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f005 fcf1 	bl	800988c <USB_ReadInterrupts>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb4:	d121      	bne.n	8003efa <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003ec4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d111      	bne.n	8003ef4 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	f003 020f 	and.w	r2, r3, #15
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003eea:	2101      	movs	r1, #1
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f008 fc07 	bl	800c700 <HAL_PCDEx_LPM_Callback>
 8003ef2:	e002      	b.n	8003efa <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f008 f931 	bl	800c15c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f005 fcc4 	bl	800988c <USB_ReadInterrupts>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0e:	f040 80b6 	bne.w	800407e <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2110      	movs	r1, #16
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f004 fe01 	bl	8008b34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f36:	e046      	b.n	8003fc6 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f44:	461a      	mov	r2, r3
 8003f46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f5c:	0151      	lsls	r1, r2, #5
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	440a      	add	r2, r1
 8003f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fbe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	791b      	ldrb	r3, [r3, #4]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d3b2      	bcc.n	8003f38 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fe0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003fe4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7bdb      	ldrb	r3, [r3, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ffe:	f043 030b 	orr.w	r3, r3, #11
 8004002:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004014:	f043 030b 	orr.w	r3, r3, #11
 8004018:	6453      	str	r3, [r2, #68]	@ 0x44
 800401a:	e015      	b.n	8004048 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800402a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800402e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004032:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004042:	f043 030b 	orr.w	r3, r3, #11
 8004046:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004056:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800405a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f005 fcd3 	bl	8009a14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800407c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f005 fc02 	bl	800988c <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004092:	d123      	bne.n	80040dc <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f005 fc98 	bl	80099ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f004 fdbf 	bl	8008c26 <USB_GetDevSpeed>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681c      	ldr	r4, [r3, #0]
 80040b4:	f001 fad4 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 80040b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040be:	461a      	mov	r2, r3
 80040c0:	4620      	mov	r0, r4
 80040c2:	f004 fae5 	bl	8008690 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f008 f829 	bl	800c11e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80040da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f005 fbd3 	bl	800988c <USB_ReadInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d10a      	bne.n	8004106 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f008 f806 	bl	800c102 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f002 0208 	and.w	r2, r2, #8
 8004104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f005 fbbe 	bl	800988c <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004116:	2b80      	cmp	r3, #128	@ 0x80
 8004118:	d123      	bne.n	8004162 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004126:	2301      	movs	r3, #1
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
 800412a:	e014      	b.n	8004156 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d105      	bne.n	8004150 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	b2db      	uxtb	r3, r3
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 faf7 	bl	800473e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	3301      	adds	r3, #1
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	791b      	ldrb	r3, [r3, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	4293      	cmp	r3, r2
 8004160:	d3e4      	bcc.n	800412c <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f005 fb90 	bl	800988c <USB_ReadInterrupts>
 800416c:	4603      	mov	r3, r0
 800416e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004176:	d13c      	bne.n	80041f2 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004178:	2301      	movs	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
 800417c:	e02b      	b.n	80041d6 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	3318      	adds	r3, #24
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d115      	bne.n	80041d0 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da12      	bge.n	80041d0 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	3317      	adds	r3, #23
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	4619      	mov	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fab7 	bl	800473e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	3301      	adds	r3, #1
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	791b      	ldrb	r3, [r3, #4]
 80041da:	461a      	mov	r2, r3
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	4293      	cmp	r3, r2
 80041e0:	d3cd      	bcc.n	800417e <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80041f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f005 fb48 	bl	800988c <USB_ReadInterrupts>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004206:	d156      	bne.n	80042b6 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004208:	2301      	movs	r3, #1
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
 800420c:	e045      	b.n	800429a <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d12e      	bne.n	8004294 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004236:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004238:	2b00      	cmp	r3, #0
 800423a:	da2b      	bge.n	8004294 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004248:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800424c:	429a      	cmp	r2, r3
 800424e:	d121      	bne.n	8004294 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800428c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004290:	6053      	str	r3, [r2, #4]
            break;
 8004292:	e008      	b.n	80042a6 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	3301      	adds	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	791b      	ldrb	r3, [r3, #4]
 800429e:	461a      	mov	r2, r3
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d3b3      	bcc.n	800420e <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80042b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f005 fae6 	bl	800988c <USB_ReadInterrupts>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ca:	d10a      	bne.n	80042e2 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f007 ffb7 	bl	800c240 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80042e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f005 fad0 	bl	800988c <USB_ReadInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d115      	bne.n	8004322 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f007 ffa7 	bl	800c25c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	e000      	b.n	8004322 <HAL_PCD_IRQHandler+0x926>
      return;
 8004320:	bf00      	nop
    }
  }
}
 8004322:	3734      	adds	r7, #52	@ 0x34
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}

08004328 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_PCD_SetAddress+0x1a>
 800433e:	2302      	movs	r3, #2
 8004340:	e012      	b.n	8004368 <HAL_PCD_SetAddress+0x40>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f005 fa2f 	bl	80097bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	461a      	mov	r2, r3
 800437e:	4603      	mov	r3, r0
 8004380:	70fb      	strb	r3, [r7, #3]
 8004382:	460b      	mov	r3, r1
 8004384:	803b      	strh	r3, [r7, #0]
 8004386:	4613      	mov	r3, r2
 8004388:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800438e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	da0f      	bge.n	80043b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	3310      	adds	r3, #16
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	705a      	strb	r2, [r3, #1]
 80043b4:	e00f      	b.n	80043d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f003 020f 	and.w	r2, r3, #15
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80043e2:	883b      	ldrh	r3, [r7, #0]
 80043e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	78ba      	ldrb	r2, [r7, #2]
 80043f0:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d004      	beq.n	8004404 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004404:	78bb      	ldrb	r3, [r7, #2]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d102      	bne.n	8004410 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_PCD_EP_Open+0xae>
 800441a:	2302      	movs	r3, #2
 800441c:	e00e      	b.n	800443c <HAL_PCD_EP_Open+0xcc>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	4618      	mov	r0, r3
 800442e:	f004 fc19 	bl	8008c64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800443a:	7afb      	ldrb	r3, [r7, #11]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004454:	2b00      	cmp	r3, #0
 8004456:	da0f      	bge.n	8004478 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	f003 020f 	and.w	r2, r3, #15
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	3310      	adds	r3, #16
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	3304      	adds	r3, #4
 800446e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	705a      	strb	r2, [r3, #1]
 8004476:	e00f      	b.n	8004498 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	f003 020f 	and.w	r2, r3, #15
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	4413      	add	r3, r2
 800448e:	3304      	adds	r3, #4
 8004490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_PCD_EP_Close+0x6e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e00e      	b.n	80044d0 <HAL_PCD_EP_Close+0x8c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f004 fc57 	bl	8008d74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	460b      	mov	r3, r1
 80044e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044e8:	7afb      	ldrb	r3, [r7, #11]
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	3304      	adds	r3, #4
 8004500:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2200      	movs	r2, #0
 8004518:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800451a:	7afb      	ldrb	r3, [r7, #11]
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	b2da      	uxtb	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6979      	ldr	r1, [r7, #20]
 800452c:	4618      	mov	r0, r3
 800452e:	f004 fcfd 	bl	8008f2c <USB_EPStartXfer>

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	460b      	mov	r3, r1
 800457a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800457c:	7afb      	ldrb	r3, [r7, #11]
 800457e:	f003 020f 	and.w	r2, r3, #15
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	3310      	adds	r3, #16
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	3304      	adds	r3, #4
 8004592:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2200      	movs	r2, #0
 80045a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2201      	movs	r2, #1
 80045aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045ac:	7afb      	ldrb	r3, [r7, #11]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	4618      	mov	r0, r3
 80045c0:	f004 fcb4 	bl	8008f2c <USB_EPStartXfer>

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	460b      	mov	r3, r1
 80045d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	7912      	ldrb	r2, [r2, #4]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e04e      	b.n	800468a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da0f      	bge.n	8004614 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	f003 020f 	and.w	r2, r3, #15
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	3310      	adds	r3, #16
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	705a      	strb	r2, [r3, #1]
 8004612:	e00d      	b.n	8004630 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	3304      	adds	r3, #4
 8004628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_PCD_EP_SetStall+0x82>
 800464c:	2302      	movs	r3, #2
 800464e:	e01c      	b.n	800468a <HAL_PCD_EP_SetStall+0xbc>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68f9      	ldr	r1, [r7, #12]
 800465e:	4618      	mov	r0, r3
 8004660:	f004 ffd8 	bl	8009614 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f005 f9ca 	bl	8009a14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	7912      	ldrb	r2, [r2, #4]
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e042      	b.n	8004736 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da0f      	bge.n	80046d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	f003 020f 	and.w	r2, r3, #15
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	3310      	adds	r3, #16
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	3304      	adds	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	705a      	strb	r2, [r3, #1]
 80046d6:	e00f      	b.n	80046f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	3304      	adds	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_PCD_EP_ClrStall+0x86>
 8004714:	2302      	movs	r3, #2
 8004716:	e00e      	b.n	8004736 <HAL_PCD_EP_ClrStall+0xa4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	4618      	mov	r0, r3
 8004728:	f004 ffe2 	bl	80096f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	460b      	mov	r3, r1
 8004748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800474a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800474e:	2b00      	cmp	r3, #0
 8004750:	da0c      	bge.n	800476c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	f003 020f 	and.w	r2, r3, #15
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	3310      	adds	r3, #16
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	3304      	adds	r3, #4
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	e00c      	b.n	8004786 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	3304      	adds	r3, #4
 8004784:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	4618      	mov	r0, r3
 800478e:	f004 fe05 	bl	800939c <USB_EPStopXfer>
 8004792:	4603      	mov	r3, r0
 8004794:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004796:	7afb      	ldrb	r3, [r7, #11]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	3310      	adds	r3, #16
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	4413      	add	r3, r2
 80047c4:	3304      	adds	r3, #4
 80047c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d901      	bls.n	80047d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e067      	b.n	80048a8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d902      	bls.n	80047f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3303      	adds	r3, #3
 80047f8:	089b      	lsrs	r3, r3, #2
 80047fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047fc:	e026      	b.n	800484c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	429a      	cmp	r2, r3
 8004812:	d902      	bls.n	800481a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3303      	adds	r3, #3
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68d9      	ldr	r1, [r3, #12]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	b29b      	uxth	r3, r3
 800482e:	6978      	ldr	r0, [r7, #20]
 8004830:	f004 fe5e 	bl	80094f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	441a      	add	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	441a      	add	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	429a      	cmp	r2, r3
 8004860:	d809      	bhi.n	8004876 <PCD_WriteEmptyTxFifo+0xd6>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800486a:	429a      	cmp	r2, r3
 800486c:	d203      	bcs.n	8004876 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1c3      	bne.n	80047fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	429a      	cmp	r2, r3
 8004880:	d811      	bhi.n	80048a6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	2201      	movs	r2, #1
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	43db      	mvns	r3, r3
 800489c:	6939      	ldr	r1, [r7, #16]
 800489e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048a2:	4013      	ands	r3, r2
 80048a4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	333c      	adds	r3, #60	@ 0x3c
 80048c8:	3304      	adds	r3, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a19      	ldr	r2, [pc, #100]	@ (8004948 <PCD_EP_OutXfrComplete_int+0x98>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d124      	bne.n	8004930 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fc:	461a      	mov	r2, r3
 80048fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004902:	6093      	str	r3, [r2, #8]
 8004904:	e01a      	b.n	800493c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491c:	461a      	mov	r2, r3
 800491e:	2320      	movs	r3, #32
 8004920:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f007 fbb5 	bl	800c098 <HAL_PCD_DataOutStageCallback>
 800492e:	e005      	b.n	800493c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f007 fbae 	bl	800c098 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	4f54310a 	.word	0x4f54310a

0800494c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	333c      	adds	r3, #60	@ 0x3c
 8004964:	3304      	adds	r3, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a0c      	ldr	r2, [pc, #48]	@ (80049b0 <PCD_EP_OutSetupPacket_int+0x64>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d90e      	bls.n	80049a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004988:	2b00      	cmp	r3, #0
 800498a:	d009      	beq.n	80049a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004998:	461a      	mov	r2, r3
 800499a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800499e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f007 fb67 	bl	800c074 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	4f54300a 	.word	0x4f54300a

080049b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
 80049c0:	4613      	mov	r3, r2
 80049c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049d2:	883b      	ldrh	r3, [r7, #0]
 80049d4:	0419      	lsls	r1, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	430a      	orrs	r2, r1
 80049de:	629a      	str	r2, [r3, #40]	@ 0x28
 80049e0:	e028      	b.n	8004a34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4413      	add	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]
 80049f4:	e00d      	b.n	8004a12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	3340      	adds	r3, #64	@ 0x40
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	4413      	add	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
 8004a12:	7bfa      	ldrb	r2, [r7, #15]
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d3ec      	bcc.n	80049f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a1c:	883b      	ldrh	r3, [r7, #0]
 8004a1e:	0418      	lsls	r0, r3, #16
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	4302      	orrs	r2, r0
 8004a2c:	3340      	adds	r3, #64	@ 0x40
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a96:	f043 0303 	orr.w	r3, r3, #3
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40007000 	.word	0x40007000

08004ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad6:	d130      	bne.n	8004b3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ad8:	4b23      	ldr	r3, [pc, #140]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ae4:	d038      	beq.n	8004b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ae6:	4b20      	ldr	r3, [pc, #128]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aee:	4a1e      	ldr	r2, [pc, #120]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004af4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004af6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2232      	movs	r2, #50	@ 0x32
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	4a1b      	ldr	r2, [pc, #108]	@ (8004b70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	0c9b      	lsrs	r3, r3, #18
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b0c:	e002      	b.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b14:	4b14      	ldr	r3, [pc, #80]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b20:	d102      	bne.n	8004b28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f2      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b28:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b34:	d110      	bne.n	8004b58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e00f      	b.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b46:	d007      	beq.n	8004b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b48:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b50:	4a05      	ldr	r2, [pc, #20]	@ (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	200000f0 	.word	0x200000f0
 8004b70:	431bde83 	.word	0x431bde83

08004b74 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a04      	ldr	r2, [pc, #16]	@ (8004b90 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b82:	6053      	str	r3, [r2, #4]
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40007000 	.word	0x40007000

08004b94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e3ca      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba6:	4b97      	ldr	r3, [pc, #604]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb0:	4b94      	ldr	r3, [pc, #592]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80e4 	beq.w	8004d90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_RCC_OscConfig+0x4a>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	f040 808b 	bne.w	8004cec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	f040 8087 	bne.w	8004cec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bde:	4b89      	ldr	r3, [pc, #548]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x62>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e3a2      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1a      	ldr	r2, [r3, #32]
 8004bfa:	4b82      	ldr	r3, [pc, #520]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <HAL_RCC_OscConfig+0x7c>
 8004c06:	4b7f      	ldr	r3, [pc, #508]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c0e:	e005      	b.n	8004c1c <HAL_RCC_OscConfig+0x88>
 8004c10:	4b7c      	ldr	r3, [pc, #496]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d223      	bcs.n	8004c68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fd53 	bl	80056d0 <RCC_SetFlashLatencyFromMSIRange>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e383      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c34:	4b73      	ldr	r3, [pc, #460]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a72      	ldr	r2, [pc, #456]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	f043 0308 	orr.w	r3, r3, #8
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	4b70      	ldr	r3, [pc, #448]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	496d      	ldr	r1, [pc, #436]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c52:	4b6c      	ldr	r3, [pc, #432]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	4968      	ldr	r1, [pc, #416]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
 8004c66:	e025      	b.n	8004cb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c68:	4b66      	ldr	r3, [pc, #408]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a65      	ldr	r2, [pc, #404]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c6e:	f043 0308 	orr.w	r3, r3, #8
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	4b63      	ldr	r3, [pc, #396]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	4960      	ldr	r1, [pc, #384]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c86:	4b5f      	ldr	r3, [pc, #380]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	495b      	ldr	r1, [pc, #364]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fd13 	bl	80056d0 <RCC_SetFlashLatencyFromMSIRange>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e343      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cb4:	f000 fc4a 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b52      	ldr	r3, [pc, #328]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	4950      	ldr	r1, [pc, #320]	@ (8004e08 <HAL_RCC_OscConfig+0x274>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd0:	4a4e      	ldr	r2, [pc, #312]	@ (8004e0c <HAL_RCC_OscConfig+0x278>)
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8004e10 <HAL_RCC_OscConfig+0x27c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fd fe6f 	bl	80029bc <HAL_InitTick>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d052      	beq.n	8004d8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	e327      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d032      	beq.n	8004d5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cf4:	4b43      	ldr	r3, [pc, #268]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a42      	ldr	r2, [pc, #264]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d00:	f7fd feac 	bl	8002a5c <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d08:	f7fd fea8 	bl	8002a5c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e310      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d26:	4b37      	ldr	r3, [pc, #220]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a36      	ldr	r2, [pc, #216]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d2c:	f043 0308 	orr.w	r3, r3, #8
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4b34      	ldr	r3, [pc, #208]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4931      	ldr	r1, [pc, #196]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d44:	4b2f      	ldr	r3, [pc, #188]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	492c      	ldr	r1, [pc, #176]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]
 8004d58:	e01a      	b.n	8004d90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a29      	ldr	r2, [pc, #164]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d66:	f7fd fe79 	bl	8002a5c <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d6e:	f7fd fe75 	bl	8002a5c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e2dd      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d80:	4b20      	ldr	r3, [pc, #128]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x1da>
 8004d8c:	e000      	b.n	8004d90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d074      	beq.n	8004e86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d005      	beq.n	8004dae <HAL_RCC_OscConfig+0x21a>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d10e      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d10b      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dae:	4b15      	ldr	r3, [pc, #84]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d064      	beq.n	8004e84 <HAL_RCC_OscConfig+0x2f0>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d160      	bne.n	8004e84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e2ba      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dce:	d106      	bne.n	8004dde <HAL_RCC_OscConfig+0x24a>
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e026      	b.n	8004e2c <HAL_RCC_OscConfig+0x298>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004de6:	d115      	bne.n	8004e14 <HAL_RCC_OscConfig+0x280>
 8004de8:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a05      	ldr	r2, [pc, #20]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	4b03      	ldr	r3, [pc, #12]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a02      	ldr	r2, [pc, #8]	@ (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	e014      	b.n	8004e2c <HAL_RCC_OscConfig+0x298>
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	08010924 	.word	0x08010924
 8004e0c:	200000f0 	.word	0x200000f0
 8004e10:	200000f4 	.word	0x200000f4
 8004e14:	4ba0      	ldr	r3, [pc, #640]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a9f      	ldr	r2, [pc, #636]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	4b9d      	ldr	r3, [pc, #628]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a9c      	ldr	r2, [pc, #624]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d013      	beq.n	8004e5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fd fe12 	bl	8002a5c <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e3c:	f7fd fe0e 	bl	8002a5c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	@ 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e276      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e4e:	4b92      	ldr	r3, [pc, #584]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x2a8>
 8004e5a:	e014      	b.n	8004e86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fd fdfe 	bl	8002a5c <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e64:	f7fd fdfa 	bl	8002a5c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	@ 0x64
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e262      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e76:	4b88      	ldr	r3, [pc, #544]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2d0>
 8004e82:	e000      	b.n	8004e86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d060      	beq.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x310>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d119      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d116      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ea4:	4b7c      	ldr	r3, [pc, #496]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_RCC_OscConfig+0x328>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e23f      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebc:	4b76      	ldr	r3, [pc, #472]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	4973      	ldr	r1, [pc, #460]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ed0:	e040      	b.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d023      	beq.n	8004f22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eda:	4b6f      	ldr	r3, [pc, #444]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a6e      	ldr	r2, [pc, #440]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee6:	f7fd fdb9 	bl	8002a5c <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eee:	f7fd fdb5 	bl	8002a5c <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e21d      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f00:	4b65      	ldr	r3, [pc, #404]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0c:	4b62      	ldr	r3, [pc, #392]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	061b      	lsls	r3, r3, #24
 8004f1a:	495f      	ldr	r1, [pc, #380]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
 8004f20:	e018      	b.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f22:	4b5d      	ldr	r3, [pc, #372]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5c      	ldr	r2, [pc, #368]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2e:	f7fd fd95 	bl	8002a5c <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f36:	f7fd fd91 	bl	8002a5c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1f9      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f48:	4b53      	ldr	r3, [pc, #332]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f0      	bne.n	8004f36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d03c      	beq.n	8004fda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01c      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f68:	4b4b      	ldr	r3, [pc, #300]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fd fd70 	bl	8002a5c <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f80:	f7fd fd6c 	bl	8002a5c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e1d4      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f92:	4b41      	ldr	r3, [pc, #260]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ef      	beq.n	8004f80 <HAL_RCC_OscConfig+0x3ec>
 8004fa0:	e01b      	b.n	8004fda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb2:	f7fd fd53 	bl	8002a5c <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fba:	f7fd fd4f 	bl	8002a5c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1b7      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fcc:	4b32      	ldr	r3, [pc, #200]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ef      	bne.n	8004fba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80a6 	beq.w	8005134 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fec:	4b2a      	ldr	r3, [pc, #168]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff8:	4b27      	ldr	r3, [pc, #156]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffc:	4a26      	ldr	r2, [pc, #152]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005002:	6593      	str	r3, [r2, #88]	@ 0x58
 8005004:	4b24      	ldr	r3, [pc, #144]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005010:	2301      	movs	r3, #1
 8005012:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005014:	4b21      	ldr	r3, [pc, #132]	@ (800509c <HAL_RCC_OscConfig+0x508>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d118      	bne.n	8005052 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005020:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <HAL_RCC_OscConfig+0x508>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1d      	ldr	r2, [pc, #116]	@ (800509c <HAL_RCC_OscConfig+0x508>)
 8005026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800502a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502c:	f7fd fd16 	bl	8002a5c <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005034:	f7fd fd12 	bl	8002a5c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e17a      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005046:	4b15      	ldr	r3, [pc, #84]	@ (800509c <HAL_RCC_OscConfig+0x508>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d108      	bne.n	800506c <HAL_RCC_OscConfig+0x4d8>
 800505a:	4b0f      	ldr	r3, [pc, #60]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005060:	4a0d      	ldr	r2, [pc, #52]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800506a:	e029      	b.n	80050c0 <HAL_RCC_OscConfig+0x52c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b05      	cmp	r3, #5
 8005072:	d115      	bne.n	80050a0 <HAL_RCC_OscConfig+0x50c>
 8005074:	4b08      	ldr	r3, [pc, #32]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507a:	4a07      	ldr	r2, [pc, #28]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 800507c:	f043 0304 	orr.w	r3, r3, #4
 8005080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005084:	4b04      	ldr	r3, [pc, #16]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508a:	4a03      	ldr	r2, [pc, #12]	@ (8005098 <HAL_RCC_OscConfig+0x504>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005094:	e014      	b.n	80050c0 <HAL_RCC_OscConfig+0x52c>
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000
 800509c:	40007000 	.word	0x40007000
 80050a0:	4b9c      	ldr	r3, [pc, #624]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a6:	4a9b      	ldr	r2, [pc, #620]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050b0:	4b98      	ldr	r3, [pc, #608]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b6:	4a97      	ldr	r2, [pc, #604]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80050b8:	f023 0304 	bic.w	r3, r3, #4
 80050bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d016      	beq.n	80050f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c8:	f7fd fcc8 	bl	8002a5c <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ce:	e00a      	b.n	80050e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d0:	f7fd fcc4 	bl	8002a5c <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e12a      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ed      	beq.n	80050d0 <HAL_RCC_OscConfig+0x53c>
 80050f4:	e015      	b.n	8005122 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fd fcb1 	bl	8002a5c <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fd fcad 	bl	8002a5c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e113      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005114:	4b7f      	ldr	r3, [pc, #508]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1ed      	bne.n	80050fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005122:	7ffb      	ldrb	r3, [r7, #31]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d105      	bne.n	8005134 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005128:	4b7a      	ldr	r3, [pc, #488]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512c:	4a79      	ldr	r2, [pc, #484]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 800512e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005132:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80fe 	beq.w	800533a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	2b02      	cmp	r3, #2
 8005144:	f040 80d0 	bne.w	80052e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005148:	4b72      	ldr	r3, [pc, #456]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 0203 	and.w	r2, r3, #3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005158:	429a      	cmp	r2, r3
 800515a:	d130      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	3b01      	subs	r3, #1
 8005168:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d127      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005178:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800517a:	429a      	cmp	r2, r3
 800517c:	d11f      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005188:	2a07      	cmp	r2, #7
 800518a:	bf14      	ite	ne
 800518c:	2201      	movne	r2, #1
 800518e:	2200      	moveq	r2, #0
 8005190:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005192:	4293      	cmp	r3, r2
 8005194:	d113      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	3b01      	subs	r3, #1
 80051a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d109      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	3b01      	subs	r3, #1
 80051b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d06e      	beq.n	800529c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	d069      	beq.n	8005298 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051c4:	4b53      	ldr	r3, [pc, #332]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80051d0:	4b50      	ldr	r3, [pc, #320]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0ad      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051e0:	4b4c      	ldr	r3, [pc, #304]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80051e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051ec:	f7fd fc36 	bl	8002a5c <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f4:	f7fd fc32 	bl	8002a5c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e09a      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005206:	4b43      	ldr	r3, [pc, #268]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005212:	4b40      	ldr	r3, [pc, #256]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	4b40      	ldr	r3, [pc, #256]	@ (8005318 <HAL_RCC_OscConfig+0x784>)
 8005218:	4013      	ands	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005222:	3a01      	subs	r2, #1
 8005224:	0112      	lsls	r2, r2, #4
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800522c:	0212      	lsls	r2, r2, #8
 800522e:	4311      	orrs	r1, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005234:	0852      	lsrs	r2, r2, #1
 8005236:	3a01      	subs	r2, #1
 8005238:	0552      	lsls	r2, r2, #21
 800523a:	4311      	orrs	r1, r2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005240:	0852      	lsrs	r2, r2, #1
 8005242:	3a01      	subs	r2, #1
 8005244:	0652      	lsls	r2, r2, #25
 8005246:	4311      	orrs	r1, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800524c:	0912      	lsrs	r2, r2, #4
 800524e:	0452      	lsls	r2, r2, #17
 8005250:	430a      	orrs	r2, r1
 8005252:	4930      	ldr	r1, [pc, #192]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 8005254:	4313      	orrs	r3, r2
 8005256:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005258:	4b2e      	ldr	r3, [pc, #184]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2d      	ldr	r2, [pc, #180]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 800525e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005262:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005264:	4b2b      	ldr	r3, [pc, #172]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4a2a      	ldr	r2, [pc, #168]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 800526a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800526e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005270:	f7fd fbf4 	bl	8002a5c <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005278:	f7fd fbf0 	bl	8002a5c <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e058      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528a:	4b22      	ldr	r3, [pc, #136]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005296:	e050      	b.n	800533a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e04f      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529c:	4b1d      	ldr	r3, [pc, #116]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d148      	bne.n	800533a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a19      	ldr	r2, [pc, #100]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80052ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b4:	4b17      	ldr	r3, [pc, #92]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a16      	ldr	r2, [pc, #88]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80052ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052c0:	f7fd fbcc 	bl	8002a5c <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fd fbc8 	bl	8002a5c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e030      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052da:	4b0e      	ldr	r3, [pc, #56]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x734>
 80052e6:	e028      	b.n	800533a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d023      	beq.n	8005336 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a08      	ldr	r2, [pc, #32]	@ (8005314 <HAL_RCC_OscConfig+0x780>)
 80052f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fd fbaf 	bl	8002a5c <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	e00c      	b.n	800531c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005302:	f7fd fbab 	bl	8002a5c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d905      	bls.n	800531c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e013      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
 8005314:	40021000 	.word	0x40021000
 8005318:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800531c:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <HAL_RCC_OscConfig+0x7b0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ec      	bne.n	8005302 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005328:	4b06      	ldr	r3, [pc, #24]	@ (8005344 <HAL_RCC_OscConfig+0x7b0>)
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	4905      	ldr	r1, [pc, #20]	@ (8005344 <HAL_RCC_OscConfig+0x7b0>)
 800532e:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <HAL_RCC_OscConfig+0x7b4>)
 8005330:	4013      	ands	r3, r2
 8005332:	60cb      	str	r3, [r1, #12]
 8005334:	e001      	b.n	800533a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40021000 	.word	0x40021000
 8005348:	feeefffc 	.word	0xfeeefffc

0800534c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0e7      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005360:	4b75      	ldr	r3, [pc, #468]	@ (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d910      	bls.n	8005390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b72      	ldr	r3, [pc, #456]	@ (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 0207 	bic.w	r2, r3, #7
 8005376:	4970      	ldr	r1, [pc, #448]	@ (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b6e      	ldr	r3, [pc, #440]	@ (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0cf      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d010      	beq.n	80053be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	4b66      	ldr	r3, [pc, #408]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d908      	bls.n	80053be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ac:	4b63      	ldr	r3, [pc, #396]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4960      	ldr	r1, [pc, #384]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d04c      	beq.n	8005464 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d2:	4b5a      	ldr	r3, [pc, #360]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d121      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e0a6      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ea:	4b54      	ldr	r3, [pc, #336]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d115      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e09a      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005402:	4b4e      	ldr	r3, [pc, #312]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e08e      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005412:	4b4a      	ldr	r3, [pc, #296]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e086      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005422:	4b46      	ldr	r3, [pc, #280]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f023 0203 	bic.w	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4943      	ldr	r1, [pc, #268]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005430:	4313      	orrs	r3, r2
 8005432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005434:	f7fd fb12 	bl	8002a5c <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	e00a      	b.n	8005452 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543c:	f7fd fb0e 	bl	8002a5c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e06e      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	4b3a      	ldr	r3, [pc, #232]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 020c 	and.w	r2, r3, #12
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	429a      	cmp	r2, r3
 8005462:	d1eb      	bne.n	800543c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	4b31      	ldr	r3, [pc, #196]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800547c:	429a      	cmp	r2, r3
 800547e:	d208      	bcs.n	8005492 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005480:	4b2e      	ldr	r3, [pc, #184]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	492b      	ldr	r1, [pc, #172]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005492:	4b29      	ldr	r3, [pc, #164]	@ (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d210      	bcs.n	80054c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a0:	4b25      	ldr	r3, [pc, #148]	@ (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 0207 	bic.w	r2, r3, #7
 80054a8:	4923      	ldr	r1, [pc, #140]	@ (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b0:	4b21      	ldr	r3, [pc, #132]	@ (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e036      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ce:	4b1b      	ldr	r3, [pc, #108]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	4918      	ldr	r1, [pc, #96]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ec:	4b13      	ldr	r3, [pc, #76]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4910      	ldr	r1, [pc, #64]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005500:	f000 f824 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	490b      	ldr	r1, [pc, #44]	@ (8005540 <HAL_RCC_ClockConfig+0x1f4>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
 800551c:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <HAL_RCC_ClockConfig+0x1f8>)
 800551e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005520:	4b09      	ldr	r3, [pc, #36]	@ (8005548 <HAL_RCC_ClockConfig+0x1fc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f7fd fa49 	bl	80029bc <HAL_InitTick>
 800552a:	4603      	mov	r3, r0
 800552c:	72fb      	strb	r3, [r7, #11]

  return status;
 800552e:	7afb      	ldrb	r3, [r7, #11]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40022000 	.word	0x40022000
 800553c:	40021000 	.word	0x40021000
 8005540:	08010924 	.word	0x08010924
 8005544:	200000f0 	.word	0x200000f0
 8005548:	200000f4 	.word	0x200000f4

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	@ 0x24
 8005550:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800555a:	4b3e      	ldr	r3, [pc, #248]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005564:	4b3b      	ldr	r3, [pc, #236]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x34>
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d121      	bne.n	80055be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d11e      	bne.n	80055be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005580:	4b34      	ldr	r3, [pc, #208]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d107      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800558c:	4b31      	ldr	r3, [pc, #196]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 800558e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	e005      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800559c:	4b2d      	ldr	r3, [pc, #180]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10d      	bne.n	80055d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d102      	bne.n	80055ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055c4:	4b25      	ldr	r3, [pc, #148]	@ (800565c <HAL_RCC_GetSysClockFreq+0x110>)
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	e004      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d101      	bne.n	80055d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055d0:	4b22      	ldr	r3, [pc, #136]	@ (800565c <HAL_RCC_GetSysClockFreq+0x110>)
 80055d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b0c      	cmp	r3, #12
 80055d8:	d134      	bne.n	8005644 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055da:	4b1e      	ldr	r3, [pc, #120]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d003      	beq.n	80055f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d003      	beq.n	80055f8 <HAL_RCC_GetSysClockFreq+0xac>
 80055f0:	e005      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055f2:	4b1a      	ldr	r3, [pc, #104]	@ (800565c <HAL_RCC_GetSysClockFreq+0x110>)
 80055f4:	617b      	str	r3, [r7, #20]
      break;
 80055f6:	e005      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055f8:	4b18      	ldr	r3, [pc, #96]	@ (800565c <HAL_RCC_GetSysClockFreq+0x110>)
 80055fa:	617b      	str	r3, [r7, #20]
      break;
 80055fc:	e002      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	617b      	str	r3, [r7, #20]
      break;
 8005602:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005604:	4b13      	ldr	r3, [pc, #76]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	3301      	adds	r3, #1
 8005610:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005612:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	fb03 f202 	mul.w	r2, r3, r2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800562a:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	0e5b      	lsrs	r3, r3, #25
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	3301      	adds	r3, #1
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005644:	69bb      	ldr	r3, [r7, #24]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3724      	adds	r7, #36	@ 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	0801093c 	.word	0x0801093c
 800565c:	00f42400 	.word	0x00f42400

08005660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005664:	4b03      	ldr	r3, [pc, #12]	@ (8005674 <HAL_RCC_GetHCLKFreq+0x14>)
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	200000f0 	.word	0x200000f0

08005678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800567c:	f7ff fff0 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b06      	ldr	r3, [pc, #24]	@ (800569c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4904      	ldr	r1, [pc, #16]	@ (80056a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40021000 	.word	0x40021000
 80056a0:	08010934 	.word	0x08010934

080056a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056a8:	f7ff ffda 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	0adb      	lsrs	r3, r3, #11
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4904      	ldr	r1, [pc, #16]	@ (80056cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40021000 	.word	0x40021000
 80056cc:	08010934 	.word	0x08010934

080056d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056d8:	2300      	movs	r3, #0
 80056da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056e8:	f7ff f9e0 	bl	8004aac <HAL_PWREx_GetVoltageRange>
 80056ec:	6178      	str	r0, [r7, #20]
 80056ee:	e014      	b.n	800571a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056f0:	4b25      	ldr	r3, [pc, #148]	@ (8005788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f4:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80056fc:	4b22      	ldr	r3, [pc, #136]	@ (8005788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005708:	f7ff f9d0 	bl	8004aac <HAL_PWREx_GetVoltageRange>
 800570c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800570e:	4b1e      	ldr	r3, [pc, #120]	@ (8005788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005712:	4a1d      	ldr	r2, [pc, #116]	@ (8005788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005718:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005720:	d10b      	bne.n	800573a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b80      	cmp	r3, #128	@ 0x80
 8005726:	d919      	bls.n	800575c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2ba0      	cmp	r3, #160	@ 0xa0
 800572c:	d902      	bls.n	8005734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800572e:	2302      	movs	r3, #2
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	e013      	b.n	800575c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005734:	2301      	movs	r3, #1
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	e010      	b.n	800575c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b80      	cmp	r3, #128	@ 0x80
 800573e:	d902      	bls.n	8005746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005740:	2303      	movs	r3, #3
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	e00a      	b.n	800575c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b80      	cmp	r3, #128	@ 0x80
 800574a:	d102      	bne.n	8005752 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800574c:	2302      	movs	r3, #2
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	e004      	b.n	800575c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b70      	cmp	r3, #112	@ 0x70
 8005756:	d101      	bne.n	800575c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005758:	2301      	movs	r3, #1
 800575a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800575c:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f023 0207 	bic.w	r2, r3, #7
 8005764:	4909      	ldr	r1, [pc, #36]	@ (800578c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800576c:	4b07      	ldr	r3, [pc, #28]	@ (800578c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	429a      	cmp	r2, r3
 8005778:	d001      	beq.n	800577e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40021000 	.word	0x40021000
 800578c:	40022000 	.word	0x40022000

08005790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005798:	2300      	movs	r3, #0
 800579a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800579c:	2300      	movs	r3, #0
 800579e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d041      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057b4:	d02a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80057b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057ba:	d824      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057c0:	d008      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057c6:	d81e      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80057cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057d0:	d010      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057d2:	e018      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057d4:	4b86      	ldr	r3, [pc, #536]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	4a85      	ldr	r2, [pc, #532]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057e0:	e015      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	2100      	movs	r1, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fabb 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057f2:	e00c      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3320      	adds	r3, #32
 80057f8:	2100      	movs	r1, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fba6 	bl	8005f4c <RCCEx_PLLSAI2_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005804:	e003      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	74fb      	strb	r3, [r7, #19]
      break;
 800580a:	e000      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800580c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10b      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005814:	4b76      	ldr	r3, [pc, #472]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005822:	4973      	ldr	r1, [pc, #460]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800582a:	e001      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d041      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005840:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005844:	d02a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005846:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800584a:	d824      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800584c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005850:	d008      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005852:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005856:	d81e      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800585c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005860:	d010      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005862:	e018      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005864:	4b62      	ldr	r3, [pc, #392]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a61      	ldr	r2, [pc, #388]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800586e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005870:	e015      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3304      	adds	r3, #4
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fa73 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005882:	e00c      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3320      	adds	r3, #32
 8005888:	2100      	movs	r1, #0
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fb5e 	bl	8005f4c <RCCEx_PLLSAI2_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005894:	e003      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	74fb      	strb	r3, [r7, #19]
      break;
 800589a:	e000      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800589c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589e:	7cfb      	ldrb	r3, [r7, #19]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058a4:	4b52      	ldr	r3, [pc, #328]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058b2:	494f      	ldr	r1, [pc, #316]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80058ba:	e001      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80a0 	beq.w	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ce:	2300      	movs	r3, #0
 80058d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058d2:	4b47      	ldr	r3, [pc, #284]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80058e2:	2300      	movs	r3, #0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e8:	4b41      	ldr	r3, [pc, #260]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ec:	4a40      	ldr	r2, [pc, #256]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058f4:	4b3e      	ldr	r3, [pc, #248]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005900:	2301      	movs	r3, #1
 8005902:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005904:	4b3b      	ldr	r3, [pc, #236]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a3a      	ldr	r2, [pc, #232]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800590a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800590e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005910:	f7fd f8a4 	bl	8002a5c <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005916:	e009      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005918:	f7fd f8a0 	bl	8002a5c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d902      	bls.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	74fb      	strb	r3, [r7, #19]
        break;
 800592a:	e005      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800592c:	4b31      	ldr	r3, [pc, #196]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0ef      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005938:	7cfb      	ldrb	r3, [r7, #19]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d15c      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800593e:	4b2c      	ldr	r3, [pc, #176]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005948:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01f      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	429a      	cmp	r2, r3
 800595a:	d019      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800595c:	4b24      	ldr	r3, [pc, #144]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005968:	4b21      	ldr	r3, [pc, #132]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596e:	4a20      	ldr	r2, [pc, #128]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005978:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800597e:	4a1c      	ldr	r2, [pc, #112]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005988:	4a19      	ldr	r2, [pc, #100]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d016      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599a:	f7fd f85f 	bl	8002a5c <HAL_GetTick>
 800599e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059a0:	e00b      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a2:	f7fd f85b 	bl	8002a5c <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d902      	bls.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	74fb      	strb	r3, [r7, #19]
            break;
 80059b8:	e006      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0ec      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80059c8:	7cfb      	ldrb	r3, [r7, #19]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10c      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ce:	4b08      	ldr	r3, [pc, #32]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059de:	4904      	ldr	r1, [pc, #16]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80059e6:	e009      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	74bb      	strb	r3, [r7, #18]
 80059ec:	e006      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80059ee:	bf00      	nop
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f8:	7cfb      	ldrb	r3, [r7, #19]
 80059fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059fc:	7c7b      	ldrb	r3, [r7, #17]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d105      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a02:	4b9e      	ldr	r3, [pc, #632]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a06:	4a9d      	ldr	r2, [pc, #628]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a1a:	4b98      	ldr	r3, [pc, #608]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a20:	f023 0203 	bic.w	r2, r3, #3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	4994      	ldr	r1, [pc, #592]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a3c:	4b8f      	ldr	r3, [pc, #572]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a42:	f023 020c 	bic.w	r2, r3, #12
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4a:	498c      	ldr	r1, [pc, #560]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a5e:	4b87      	ldr	r3, [pc, #540]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	4983      	ldr	r1, [pc, #524]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a80:	4b7e      	ldr	r3, [pc, #504]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8e:	497b      	ldr	r1, [pc, #492]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aa2:	4b76      	ldr	r3, [pc, #472]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab0:	4972      	ldr	r1, [pc, #456]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ac4:	4b6d      	ldr	r3, [pc, #436]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad2:	496a      	ldr	r1, [pc, #424]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ae6:	4b65      	ldr	r3, [pc, #404]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af4:	4961      	ldr	r1, [pc, #388]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b08:	4b5c      	ldr	r3, [pc, #368]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b16:	4959      	ldr	r1, [pc, #356]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b2a:	4b54      	ldr	r3, [pc, #336]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b38:	4950      	ldr	r1, [pc, #320]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	4948      	ldr	r1, [pc, #288]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b6e:	4b43      	ldr	r3, [pc, #268]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7c:	493f      	ldr	r1, [pc, #252]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d028      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b90:	4b3a      	ldr	r3, [pc, #232]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b9e:	4937      	ldr	r1, [pc, #220]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005baa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bae:	d106      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb0:	4b32      	ldr	r3, [pc, #200]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4a31      	ldr	r2, [pc, #196]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bba:	60d3      	str	r3, [r2, #12]
 8005bbc:	e011      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bc6:	d10c      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	2101      	movs	r1, #1
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f8c8 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005bde:	7cfb      	ldrb	r3, [r7, #19]
 8005be0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d028      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bee:	4b23      	ldr	r3, [pc, #140]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfc:	491f      	ldr	r1, [pc, #124]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c0c:	d106      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	4a1a      	ldr	r2, [pc, #104]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c18:	60d3      	str	r3, [r2, #12]
 8005c1a:	e011      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c24:	d10c      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 f899 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005c3c:	7cfb      	ldrb	r3, [r7, #19]
 8005c3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d02b      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c5a:	4908      	ldr	r1, [pc, #32]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c6a:	d109      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c6c:	4b03      	ldr	r3, [pc, #12]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a02      	ldr	r2, [pc, #8]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c76:	60d3      	str	r3, [r2, #12]
 8005c78:	e014      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2101      	movs	r1, #1
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f867 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c9a:	7cfb      	ldrb	r3, [r7, #19]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
 8005ca2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02f      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cbe:	4928      	ldr	r1, [pc, #160]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cce:	d10d      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 f844 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d014      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ce6:	7cfb      	ldrb	r3, [r7, #19]
 8005ce8:	74bb      	strb	r3, [r7, #18]
 8005cea:	e011      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3320      	adds	r3, #32
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f925 	bl	8005f4c <RCCEx_PLLSAI2_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d06:	7cfb      	ldrb	r3, [r7, #19]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d0c:	7cfb      	ldrb	r3, [r7, #19]
 8005d0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d1c:	4b10      	ldr	r3, [pc, #64]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d22:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d2a:	490d      	ldr	r1, [pc, #52]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00b      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d3e:	4b08      	ldr	r3, [pc, #32]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4e:	4904      	ldr	r1, [pc, #16]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d56:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40021000 	.word	0x40021000

08005d64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d72:	4b75      	ldr	r3, [pc, #468]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d018      	beq.n	8005db0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d7e:	4b72      	ldr	r3, [pc, #456]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0203 	and.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d10d      	bne.n	8005daa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
       ||
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d96:	4b6c      	ldr	r3, [pc, #432]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	091b      	lsrs	r3, r3, #4
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
       ||
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d047      	beq.n	8005e3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
 8005dae:	e044      	b.n	8005e3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d018      	beq.n	8005dea <RCCEx_PLLSAI1_Config+0x86>
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d825      	bhi.n	8005e08 <RCCEx_PLLSAI1_Config+0xa4>
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d002      	beq.n	8005dc6 <RCCEx_PLLSAI1_Config+0x62>
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d009      	beq.n	8005dd8 <RCCEx_PLLSAI1_Config+0x74>
 8005dc4:	e020      	b.n	8005e08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dc6:	4b60      	ldr	r3, [pc, #384]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d11d      	bne.n	8005e0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dd6:	e01a      	b.n	8005e0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dd8:	4b5b      	ldr	r3, [pc, #364]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d116      	bne.n	8005e12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de8:	e013      	b.n	8005e12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dea:	4b57      	ldr	r3, [pc, #348]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10f      	bne.n	8005e16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005df6:	4b54      	ldr	r3, [pc, #336]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e06:	e006      	b.n	8005e16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0c:	e004      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e0e:	bf00      	nop
 8005e10:	e002      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e12:	bf00      	nop
 8005e14:	e000      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10d      	bne.n	8005e3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6819      	ldr	r1, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	430b      	orrs	r3, r1
 8005e34:	4944      	ldr	r1, [pc, #272]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d17d      	bne.n	8005f3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e40:	4b41      	ldr	r3, [pc, #260]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a40      	ldr	r2, [pc, #256]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4c:	f7fc fe06 	bl	8002a5c <HAL_GetTick>
 8005e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e52:	e009      	b.n	8005e68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e54:	f7fc fe02 	bl	8002a5c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d902      	bls.n	8005e68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	73fb      	strb	r3, [r7, #15]
        break;
 8005e66:	e005      	b.n	8005e74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e68:	4b37      	ldr	r3, [pc, #220]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1ef      	bne.n	8005e54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d160      	bne.n	8005f3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d111      	bne.n	8005ea4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e80:	4b31      	ldr	r3, [pc, #196]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6892      	ldr	r2, [r2, #8]
 8005e90:	0211      	lsls	r1, r2, #8
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68d2      	ldr	r2, [r2, #12]
 8005e96:	0912      	lsrs	r2, r2, #4
 8005e98:	0452      	lsls	r2, r2, #17
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	492a      	ldr	r1, [pc, #168]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	610b      	str	r3, [r1, #16]
 8005ea2:	e027      	b.n	8005ef4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d112      	bne.n	8005ed0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005eaa:	4b27      	ldr	r3, [pc, #156]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005eb2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6892      	ldr	r2, [r2, #8]
 8005eba:	0211      	lsls	r1, r2, #8
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6912      	ldr	r2, [r2, #16]
 8005ec0:	0852      	lsrs	r2, r2, #1
 8005ec2:	3a01      	subs	r2, #1
 8005ec4:	0552      	lsls	r2, r2, #21
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	491f      	ldr	r1, [pc, #124]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	610b      	str	r3, [r1, #16]
 8005ece:	e011      	b.n	8005ef4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ed8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6892      	ldr	r2, [r2, #8]
 8005ee0:	0211      	lsls	r1, r2, #8
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6952      	ldr	r2, [r2, #20]
 8005ee6:	0852      	lsrs	r2, r2, #1
 8005ee8:	3a01      	subs	r2, #1
 8005eea:	0652      	lsls	r2, r2, #25
 8005eec:	430a      	orrs	r2, r1
 8005eee:	4916      	ldr	r1, [pc, #88]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ef4:	4b14      	ldr	r3, [pc, #80]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a13      	ldr	r2, [pc, #76]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005efa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005efe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7fc fdac 	bl	8002a5c <HAL_GetTick>
 8005f04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f06:	e009      	b.n	8005f1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f08:	f7fc fda8 	bl	8002a5c <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d902      	bls.n	8005f1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	73fb      	strb	r3, [r7, #15]
          break;
 8005f1a:	e005      	b.n	8005f28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0ef      	beq.n	8005f08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f2e:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	4904      	ldr	r1, [pc, #16]	@ (8005f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40021000 	.word	0x40021000

08005f4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d018      	beq.n	8005f98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f66:	4b67      	ldr	r3, [pc, #412]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0203 	and.w	r2, r3, #3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d10d      	bne.n	8005f92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
       ||
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f7e:	4b61      	ldr	r3, [pc, #388]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	091b      	lsrs	r3, r3, #4
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
       ||
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d047      	beq.n	8006022 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
 8005f96:	e044      	b.n	8006022 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d018      	beq.n	8005fd2 <RCCEx_PLLSAI2_Config+0x86>
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d825      	bhi.n	8005ff0 <RCCEx_PLLSAI2_Config+0xa4>
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d002      	beq.n	8005fae <RCCEx_PLLSAI2_Config+0x62>
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d009      	beq.n	8005fc0 <RCCEx_PLLSAI2_Config+0x74>
 8005fac:	e020      	b.n	8005ff0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fae:	4b55      	ldr	r3, [pc, #340]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d11d      	bne.n	8005ff6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fbe:	e01a      	b.n	8005ff6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fc0:	4b50      	ldr	r3, [pc, #320]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d116      	bne.n	8005ffa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fd0:	e013      	b.n	8005ffa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fd2:	4b4c      	ldr	r3, [pc, #304]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fde:	4b49      	ldr	r3, [pc, #292]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fee:	e006      	b.n	8005ffe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff4:	e004      	b.n	8006000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e002      	b.n	8006000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e000      	b.n	8006000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10d      	bne.n	8006022 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006006:	4b3f      	ldr	r3, [pc, #252]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6819      	ldr	r1, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	3b01      	subs	r3, #1
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	430b      	orrs	r3, r1
 800601c:	4939      	ldr	r1, [pc, #228]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800601e:	4313      	orrs	r3, r2
 8006020:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d167      	bne.n	80060f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006028:	4b36      	ldr	r3, [pc, #216]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a35      	ldr	r2, [pc, #212]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800602e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006034:	f7fc fd12 	bl	8002a5c <HAL_GetTick>
 8006038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800603a:	e009      	b.n	8006050 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800603c:	f7fc fd0e 	bl	8002a5c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d902      	bls.n	8006050 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	73fb      	strb	r3, [r7, #15]
        break;
 800604e:	e005      	b.n	800605c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006050:	4b2c      	ldr	r3, [pc, #176]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1ef      	bne.n	800603c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d14a      	bne.n	80060f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d111      	bne.n	800608c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006068:	4b26      	ldr	r3, [pc, #152]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6892      	ldr	r2, [r2, #8]
 8006078:	0211      	lsls	r1, r2, #8
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	68d2      	ldr	r2, [r2, #12]
 800607e:	0912      	lsrs	r2, r2, #4
 8006080:	0452      	lsls	r2, r2, #17
 8006082:	430a      	orrs	r2, r1
 8006084:	491f      	ldr	r1, [pc, #124]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006086:	4313      	orrs	r3, r2
 8006088:	614b      	str	r3, [r1, #20]
 800608a:	e011      	b.n	80060b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800608c:	4b1d      	ldr	r3, [pc, #116]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006094:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6892      	ldr	r2, [r2, #8]
 800609c:	0211      	lsls	r1, r2, #8
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6912      	ldr	r2, [r2, #16]
 80060a2:	0852      	lsrs	r2, r2, #1
 80060a4:	3a01      	subs	r2, #1
 80060a6:	0652      	lsls	r2, r2, #25
 80060a8:	430a      	orrs	r2, r1
 80060aa:	4916      	ldr	r1, [pc, #88]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060b0:	4b14      	ldr	r3, [pc, #80]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a13      	ldr	r2, [pc, #76]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060bc:	f7fc fcce 	bl	8002a5c <HAL_GetTick>
 80060c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060c2:	e009      	b.n	80060d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060c4:	f7fc fcca 	bl	8002a5c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d902      	bls.n	80060d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	73fb      	strb	r3, [r7, #15]
          break;
 80060d6:	e005      	b.n	80060e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0ef      	beq.n	80060c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060ea:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	4904      	ldr	r1, [pc, #16]	@ (8006104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40021000 	.word	0x40021000

08006108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e049      	b.n	80061ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb fff4 	bl	800211c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f000 fcac 	bl	8006aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a1a      	ldr	r2, [r3, #32]
 80061d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80061d8:	4013      	ands	r3, r2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10f      	bne.n	80061fe <HAL_TIM_Base_Stop_IT+0x48>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6a1a      	ldr	r2, [r3, #32]
 80061e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d107      	bne.n	80061fe <HAL_TIM_Base_Stop_IT+0x48>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e049      	b.n	80062ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f841 	bl	80062c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3304      	adds	r3, #4
 8006250:	4619      	mov	r1, r3
 8006252:	4610      	mov	r0, r2
 8006254:	f000 fc26 	bl	8006aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 f883 	bl	80073f6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a3e      	ldr	r2, [pc, #248]	@ (80063f0 <HAL_TIM_PWM_Stop+0x118>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <HAL_TIM_PWM_Stop+0x4a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a3d      	ldr	r2, [pc, #244]	@ (80063f4 <HAL_TIM_PWM_Stop+0x11c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_TIM_PWM_Stop+0x4a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a3b      	ldr	r2, [pc, #236]	@ (80063f8 <HAL_TIM_PWM_Stop+0x120>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d009      	beq.n	8006322 <HAL_TIM_PWM_Stop+0x4a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a3a      	ldr	r2, [pc, #232]	@ (80063fc <HAL_TIM_PWM_Stop+0x124>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_TIM_PWM_Stop+0x4a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a38      	ldr	r2, [pc, #224]	@ (8006400 <HAL_TIM_PWM_Stop+0x128>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_Stop+0x4e>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_TIM_PWM_Stop+0x50>
 8006326:	2300      	movs	r3, #0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d017      	beq.n	800635c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a1a      	ldr	r2, [r3, #32]
 8006332:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006336:	4013      	ands	r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10f      	bne.n	800635c <HAL_TIM_PWM_Stop+0x84>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	f240 4344 	movw	r3, #1092	@ 0x444
 8006346:	4013      	ands	r3, r2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d107      	bne.n	800635c <HAL_TIM_PWM_Stop+0x84>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800635a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6a1a      	ldr	r2, [r3, #32]
 8006362:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006366:	4013      	ands	r3, r2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10f      	bne.n	800638c <HAL_TIM_PWM_Stop+0xb4>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6a1a      	ldr	r2, [r3, #32]
 8006372:	f240 4344 	movw	r3, #1092	@ 0x444
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d107      	bne.n	800638c <HAL_TIM_PWM_Stop+0xb4>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <HAL_TIM_PWM_Stop+0xc4>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800639a:	e023      	b.n	80063e4 <HAL_TIM_PWM_Stop+0x10c>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d104      	bne.n	80063ac <HAL_TIM_PWM_Stop+0xd4>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063aa:	e01b      	b.n	80063e4 <HAL_TIM_PWM_Stop+0x10c>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d104      	bne.n	80063bc <HAL_TIM_PWM_Stop+0xe4>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063ba:	e013      	b.n	80063e4 <HAL_TIM_PWM_Stop+0x10c>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b0c      	cmp	r3, #12
 80063c0:	d104      	bne.n	80063cc <HAL_TIM_PWM_Stop+0xf4>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063ca:	e00b      	b.n	80063e4 <HAL_TIM_PWM_Stop+0x10c>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d104      	bne.n	80063dc <HAL_TIM_PWM_Stop+0x104>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063da:	e003      	b.n	80063e4 <HAL_TIM_PWM_Stop+0x10c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40012c00 	.word	0x40012c00
 80063f4:	40013400 	.word	0x40013400
 80063f8:	40014000 	.word	0x40014000
 80063fc:	40014400 	.word	0x40014400
 8006400:	40014800 	.word	0x40014800

08006404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d020      	beq.n	8006468 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01b      	beq.n	8006468 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0202 	mvn.w	r2, #2
 8006438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fb09 	bl	8006a66 <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fafb 	bl	8006a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fb0c 	bl	8006a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d020      	beq.n	80064b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01b      	beq.n	80064b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0204 	mvn.w	r2, #4
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fae3 	bl	8006a66 <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fad5 	bl	8006a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fae6 	bl	8006a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d020      	beq.n	8006500 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01b      	beq.n	8006500 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0208 	mvn.w	r2, #8
 80064d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2204      	movs	r2, #4
 80064d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fabd 	bl	8006a66 <HAL_TIM_IC_CaptureCallback>
 80064ec:	e005      	b.n	80064fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 faaf 	bl	8006a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fac0 	bl	8006a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	2b00      	cmp	r3, #0
 8006508:	d020      	beq.n	800654c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01b      	beq.n	800654c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0210 	mvn.w	r2, #16
 800651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2208      	movs	r2, #8
 8006522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa97 	bl	8006a66 <HAL_TIM_IC_CaptureCallback>
 8006538:	e005      	b.n	8006546 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa89 	bl	8006a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa9a 	bl	8006a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00c      	beq.n	8006570 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d007      	beq.n	8006570 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0201 	mvn.w	r2, #1
 8006568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fc f9b0 	bl	80028d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00c      	beq.n	800659e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 f8bf 	bl	800771c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00c      	beq.n	80065c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 f8b7 	bl	8007730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00c      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fa54 	bl	8006a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00c      	beq.n	800660a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f06f 0220 	mvn.w	r2, #32
 8006602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 f87f 	bl	8007708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800662e:	2302      	movs	r3, #2
 8006630:	e0ff      	b.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b14      	cmp	r3, #20
 800663e:	f200 80f0 	bhi.w	8006822 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006642:	a201      	add	r2, pc, #4	@ (adr r2, 8006648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	0800669d 	.word	0x0800669d
 800664c:	08006823 	.word	0x08006823
 8006650:	08006823 	.word	0x08006823
 8006654:	08006823 	.word	0x08006823
 8006658:	080066dd 	.word	0x080066dd
 800665c:	08006823 	.word	0x08006823
 8006660:	08006823 	.word	0x08006823
 8006664:	08006823 	.word	0x08006823
 8006668:	0800671f 	.word	0x0800671f
 800666c:	08006823 	.word	0x08006823
 8006670:	08006823 	.word	0x08006823
 8006674:	08006823 	.word	0x08006823
 8006678:	0800675f 	.word	0x0800675f
 800667c:	08006823 	.word	0x08006823
 8006680:	08006823 	.word	0x08006823
 8006684:	08006823 	.word	0x08006823
 8006688:	080067a1 	.word	0x080067a1
 800668c:	08006823 	.word	0x08006823
 8006690:	08006823 	.word	0x08006823
 8006694:	08006823 	.word	0x08006823
 8006698:	080067e1 	.word	0x080067e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 faa4 	bl	8006bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0208 	orr.w	r2, r2, #8
 80066b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0204 	bic.w	r2, r2, #4
 80066c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6999      	ldr	r1, [r3, #24]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	619a      	str	r2, [r3, #24]
      break;
 80066da:	e0a5      	b.n	8006828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fb14 	bl	8006d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6999      	ldr	r1, [r3, #24]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	021a      	lsls	r2, r3, #8
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	619a      	str	r2, [r3, #24]
      break;
 800671c:	e084      	b.n	8006828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fb7d 	bl	8006e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0208 	orr.w	r2, r2, #8
 8006738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0204 	bic.w	r2, r2, #4
 8006748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69d9      	ldr	r1, [r3, #28]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	61da      	str	r2, [r3, #28]
      break;
 800675c:	e064      	b.n	8006828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fbe5 	bl	8006f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69d9      	ldr	r1, [r3, #28]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	021a      	lsls	r2, r3, #8
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	61da      	str	r2, [r3, #28]
      break;
 800679e:	e043      	b.n	8006828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fc2e 	bl	8007008 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0208 	orr.w	r2, r2, #8
 80067ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0204 	bic.w	r2, r2, #4
 80067ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80067de:	e023      	b.n	8006828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fc72 	bl	80070d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800680a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	021a      	lsls	r2, r3, #8
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006820:	e002      	b.n	8006828 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	75fb      	strb	r3, [r7, #23]
      break;
 8006826:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop

0800683c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_TIM_ConfigClockSource+0x1c>
 8006854:	2302      	movs	r3, #2
 8006856:	e0b6      	b.n	80069c6 <HAL_TIM_ConfigClockSource+0x18a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006876:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800687a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006894:	d03e      	beq.n	8006914 <HAL_TIM_ConfigClockSource+0xd8>
 8006896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800689a:	f200 8087 	bhi.w	80069ac <HAL_TIM_ConfigClockSource+0x170>
 800689e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a2:	f000 8086 	beq.w	80069b2 <HAL_TIM_ConfigClockSource+0x176>
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068aa:	d87f      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x170>
 80068ac:	2b70      	cmp	r3, #112	@ 0x70
 80068ae:	d01a      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0xaa>
 80068b0:	2b70      	cmp	r3, #112	@ 0x70
 80068b2:	d87b      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x170>
 80068b4:	2b60      	cmp	r3, #96	@ 0x60
 80068b6:	d050      	beq.n	800695a <HAL_TIM_ConfigClockSource+0x11e>
 80068b8:	2b60      	cmp	r3, #96	@ 0x60
 80068ba:	d877      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x170>
 80068bc:	2b50      	cmp	r3, #80	@ 0x50
 80068be:	d03c      	beq.n	800693a <HAL_TIM_ConfigClockSource+0xfe>
 80068c0:	2b50      	cmp	r3, #80	@ 0x50
 80068c2:	d873      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x170>
 80068c4:	2b40      	cmp	r3, #64	@ 0x40
 80068c6:	d058      	beq.n	800697a <HAL_TIM_ConfigClockSource+0x13e>
 80068c8:	2b40      	cmp	r3, #64	@ 0x40
 80068ca:	d86f      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x170>
 80068cc:	2b30      	cmp	r3, #48	@ 0x30
 80068ce:	d064      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x15e>
 80068d0:	2b30      	cmp	r3, #48	@ 0x30
 80068d2:	d86b      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x170>
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d060      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x15e>
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d867      	bhi.n	80069ac <HAL_TIM_ConfigClockSource+0x170>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d05c      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x15e>
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d05a      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x15e>
 80068e4:	e062      	b.n	80069ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068f6:	f000 fd5e 	bl	80073b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	609a      	str	r2, [r3, #8]
      break;
 8006912:	e04f      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006924:	f000 fd47 	bl	80073b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006936:	609a      	str	r2, [r3, #8]
      break;
 8006938:	e03c      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006946:	461a      	mov	r2, r3
 8006948:	f000 fcbb 	bl	80072c2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2150      	movs	r1, #80	@ 0x50
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fd14 	bl	8007380 <TIM_ITRx_SetConfig>
      break;
 8006958:	e02c      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006966:	461a      	mov	r2, r3
 8006968:	f000 fcda 	bl	8007320 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2160      	movs	r1, #96	@ 0x60
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fd04 	bl	8007380 <TIM_ITRx_SetConfig>
      break;
 8006978:	e01c      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006986:	461a      	mov	r2, r3
 8006988:	f000 fc9b 	bl	80072c2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2140      	movs	r1, #64	@ 0x40
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fcf4 	bl	8007380 <TIM_ITRx_SetConfig>
      break;
 8006998:	e00c      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f000 fceb 	bl	8007380 <TIM_ITRx_SetConfig>
      break;
 80069aa:	e003      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
      break;
 80069b0:	e000      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80069b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80069e2:	2302      	movs	r3, #2
 80069e4:	e031      	b.n	8006a4a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fbcf 	bl	800719c <TIM_SlaveTimer_SetConfig>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e018      	b.n	8006a4a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a26:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a36:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a46      	ldr	r2, [pc, #280]	@ (8006bd0 <TIM_Base_SetConfig+0x12c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d013      	beq.n	8006ae4 <TIM_Base_SetConfig+0x40>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac2:	d00f      	beq.n	8006ae4 <TIM_Base_SetConfig+0x40>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a43      	ldr	r2, [pc, #268]	@ (8006bd4 <TIM_Base_SetConfig+0x130>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d00b      	beq.n	8006ae4 <TIM_Base_SetConfig+0x40>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a42      	ldr	r2, [pc, #264]	@ (8006bd8 <TIM_Base_SetConfig+0x134>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d007      	beq.n	8006ae4 <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a41      	ldr	r2, [pc, #260]	@ (8006bdc <TIM_Base_SetConfig+0x138>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a40      	ldr	r2, [pc, #256]	@ (8006be0 <TIM_Base_SetConfig+0x13c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d108      	bne.n	8006af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a35      	ldr	r2, [pc, #212]	@ (8006bd0 <TIM_Base_SetConfig+0x12c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d01f      	beq.n	8006b3e <TIM_Base_SetConfig+0x9a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b04:	d01b      	beq.n	8006b3e <TIM_Base_SetConfig+0x9a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a32      	ldr	r2, [pc, #200]	@ (8006bd4 <TIM_Base_SetConfig+0x130>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d017      	beq.n	8006b3e <TIM_Base_SetConfig+0x9a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a31      	ldr	r2, [pc, #196]	@ (8006bd8 <TIM_Base_SetConfig+0x134>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d013      	beq.n	8006b3e <TIM_Base_SetConfig+0x9a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a30      	ldr	r2, [pc, #192]	@ (8006bdc <TIM_Base_SetConfig+0x138>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00f      	beq.n	8006b3e <TIM_Base_SetConfig+0x9a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2f      	ldr	r2, [pc, #188]	@ (8006be0 <TIM_Base_SetConfig+0x13c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00b      	beq.n	8006b3e <TIM_Base_SetConfig+0x9a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2e      	ldr	r2, [pc, #184]	@ (8006be4 <TIM_Base_SetConfig+0x140>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d007      	beq.n	8006b3e <TIM_Base_SetConfig+0x9a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a2d      	ldr	r2, [pc, #180]	@ (8006be8 <TIM_Base_SetConfig+0x144>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d003      	beq.n	8006b3e <TIM_Base_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2c      	ldr	r2, [pc, #176]	@ (8006bec <TIM_Base_SetConfig+0x148>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d108      	bne.n	8006b50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a16      	ldr	r2, [pc, #88]	@ (8006bd0 <TIM_Base_SetConfig+0x12c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00f      	beq.n	8006b9c <TIM_Base_SetConfig+0xf8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a18      	ldr	r2, [pc, #96]	@ (8006be0 <TIM_Base_SetConfig+0x13c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <TIM_Base_SetConfig+0xf8>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a17      	ldr	r2, [pc, #92]	@ (8006be4 <TIM_Base_SetConfig+0x140>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_Base_SetConfig+0xf8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a16      	ldr	r2, [pc, #88]	@ (8006be8 <TIM_Base_SetConfig+0x144>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_Base_SetConfig+0xf8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a15      	ldr	r2, [pc, #84]	@ (8006bec <TIM_Base_SetConfig+0x148>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d103      	bne.n	8006ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d105      	bne.n	8006bc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f023 0201 	bic.w	r2, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	611a      	str	r2, [r3, #16]
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800

08006bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	f023 0201 	bic.w	r2, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0303 	bic.w	r3, r3, #3
 8006c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 0302 	bic.w	r3, r3, #2
 8006c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8006cfc <TIM_OC1_SetConfig+0x10c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00f      	beq.n	8006c70 <TIM_OC1_SetConfig+0x80>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a2b      	ldr	r2, [pc, #172]	@ (8006d00 <TIM_OC1_SetConfig+0x110>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00b      	beq.n	8006c70 <TIM_OC1_SetConfig+0x80>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006d04 <TIM_OC1_SetConfig+0x114>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d007      	beq.n	8006c70 <TIM_OC1_SetConfig+0x80>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a29      	ldr	r2, [pc, #164]	@ (8006d08 <TIM_OC1_SetConfig+0x118>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_OC1_SetConfig+0x80>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a28      	ldr	r2, [pc, #160]	@ (8006d0c <TIM_OC1_SetConfig+0x11c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10c      	bne.n	8006c8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0308 	bic.w	r3, r3, #8
 8006c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f023 0304 	bic.w	r3, r3, #4
 8006c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cfc <TIM_OC1_SetConfig+0x10c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00f      	beq.n	8006cb2 <TIM_OC1_SetConfig+0xc2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a1a      	ldr	r2, [pc, #104]	@ (8006d00 <TIM_OC1_SetConfig+0x110>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00b      	beq.n	8006cb2 <TIM_OC1_SetConfig+0xc2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a19      	ldr	r2, [pc, #100]	@ (8006d04 <TIM_OC1_SetConfig+0x114>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d007      	beq.n	8006cb2 <TIM_OC1_SetConfig+0xc2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a18      	ldr	r2, [pc, #96]	@ (8006d08 <TIM_OC1_SetConfig+0x118>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_OC1_SetConfig+0xc2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <TIM_OC1_SetConfig+0x11c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d111      	bne.n	8006cd6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	40012c00 	.word	0x40012c00
 8006d00:	40013400 	.word	0x40013400
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800

08006d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f023 0210 	bic.w	r2, r3, #16
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 0320 	bic.w	r3, r3, #32
 8006d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a28      	ldr	r2, [pc, #160]	@ (8006e10 <TIM_OC2_SetConfig+0x100>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_OC2_SetConfig+0x6c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a27      	ldr	r2, [pc, #156]	@ (8006e14 <TIM_OC2_SetConfig+0x104>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d10d      	bne.n	8006d98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <TIM_OC2_SetConfig+0x100>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00f      	beq.n	8006dc0 <TIM_OC2_SetConfig+0xb0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a1c      	ldr	r2, [pc, #112]	@ (8006e14 <TIM_OC2_SetConfig+0x104>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00b      	beq.n	8006dc0 <TIM_OC2_SetConfig+0xb0>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a1b      	ldr	r2, [pc, #108]	@ (8006e18 <TIM_OC2_SetConfig+0x108>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d007      	beq.n	8006dc0 <TIM_OC2_SetConfig+0xb0>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a1a      	ldr	r2, [pc, #104]	@ (8006e1c <TIM_OC2_SetConfig+0x10c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d003      	beq.n	8006dc0 <TIM_OC2_SetConfig+0xb0>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a19      	ldr	r2, [pc, #100]	@ (8006e20 <TIM_OC2_SetConfig+0x110>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d113      	bne.n	8006de8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40013400 	.word	0x40013400
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40014400 	.word	0x40014400
 8006e20:	40014800 	.word	0x40014800

08006e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a27      	ldr	r2, [pc, #156]	@ (8006f20 <TIM_OC3_SetConfig+0xfc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_OC3_SetConfig+0x6a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a26      	ldr	r2, [pc, #152]	@ (8006f24 <TIM_OC3_SetConfig+0x100>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d10d      	bne.n	8006eaa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a1c      	ldr	r2, [pc, #112]	@ (8006f20 <TIM_OC3_SetConfig+0xfc>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00f      	beq.n	8006ed2 <TIM_OC3_SetConfig+0xae>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f24 <TIM_OC3_SetConfig+0x100>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00b      	beq.n	8006ed2 <TIM_OC3_SetConfig+0xae>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8006f28 <TIM_OC3_SetConfig+0x104>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d007      	beq.n	8006ed2 <TIM_OC3_SetConfig+0xae>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a19      	ldr	r2, [pc, #100]	@ (8006f2c <TIM_OC3_SetConfig+0x108>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_OC3_SetConfig+0xae>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a18      	ldr	r2, [pc, #96]	@ (8006f30 <TIM_OC3_SetConfig+0x10c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d113      	bne.n	8006efa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	621a      	str	r2, [r3, #32]
}
 8006f14:	bf00      	nop
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	40012c00 	.word	0x40012c00
 8006f24:	40013400 	.word	0x40013400
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40014400 	.word	0x40014400
 8006f30:	40014800 	.word	0x40014800

08006f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	031b      	lsls	r3, r3, #12
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a18      	ldr	r2, [pc, #96]	@ (8006ff4 <TIM_OC4_SetConfig+0xc0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00f      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x84>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a17      	ldr	r2, [pc, #92]	@ (8006ff8 <TIM_OC4_SetConfig+0xc4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x84>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a16      	ldr	r2, [pc, #88]	@ (8006ffc <TIM_OC4_SetConfig+0xc8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x84>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a15      	ldr	r2, [pc, #84]	@ (8007000 <TIM_OC4_SetConfig+0xcc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x84>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a14      	ldr	r2, [pc, #80]	@ (8007004 <TIM_OC4_SetConfig+0xd0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d109      	bne.n	8006fcc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	019b      	lsls	r3, r3, #6
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	621a      	str	r2, [r3, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40013400 	.word	0x40013400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800703a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800704c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	041b      	lsls	r3, r3, #16
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a17      	ldr	r2, [pc, #92]	@ (80070bc <TIM_OC5_SetConfig+0xb4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00f      	beq.n	8007082 <TIM_OC5_SetConfig+0x7a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a16      	ldr	r2, [pc, #88]	@ (80070c0 <TIM_OC5_SetConfig+0xb8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00b      	beq.n	8007082 <TIM_OC5_SetConfig+0x7a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a15      	ldr	r2, [pc, #84]	@ (80070c4 <TIM_OC5_SetConfig+0xbc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d007      	beq.n	8007082 <TIM_OC5_SetConfig+0x7a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a14      	ldr	r2, [pc, #80]	@ (80070c8 <TIM_OC5_SetConfig+0xc0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_OC5_SetConfig+0x7a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a13      	ldr	r2, [pc, #76]	@ (80070cc <TIM_OC5_SetConfig+0xc4>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d109      	bne.n	8007096 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007088:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	621a      	str	r2, [r3, #32]
}
 80070b0:	bf00      	nop
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	40012c00 	.word	0x40012c00
 80070c0:	40013400 	.word	0x40013400
 80070c4:	40014000 	.word	0x40014000
 80070c8:	40014400 	.word	0x40014400
 80070cc:	40014800 	.word	0x40014800

080070d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	051b      	lsls	r3, r3, #20
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a18      	ldr	r2, [pc, #96]	@ (8007188 <TIM_OC6_SetConfig+0xb8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00f      	beq.n	800714c <TIM_OC6_SetConfig+0x7c>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a17      	ldr	r2, [pc, #92]	@ (800718c <TIM_OC6_SetConfig+0xbc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00b      	beq.n	800714c <TIM_OC6_SetConfig+0x7c>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a16      	ldr	r2, [pc, #88]	@ (8007190 <TIM_OC6_SetConfig+0xc0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_OC6_SetConfig+0x7c>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a15      	ldr	r2, [pc, #84]	@ (8007194 <TIM_OC6_SetConfig+0xc4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC6_SetConfig+0x7c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a14      	ldr	r2, [pc, #80]	@ (8007198 <TIM_OC6_SetConfig+0xc8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d109      	bne.n	8007160 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007152:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	029b      	lsls	r3, r3, #10
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40012c00 	.word	0x40012c00
 800718c:	40013400 	.word	0x40013400
 8007190:	40014000 	.word	0x40014000
 8007194:	40014400 	.word	0x40014400
 8007198:	40014800 	.word	0x40014800

0800719c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2b70      	cmp	r3, #112	@ 0x70
 80071e8:	d01a      	beq.n	8007220 <TIM_SlaveTimer_SetConfig+0x84>
 80071ea:	2b70      	cmp	r3, #112	@ 0x70
 80071ec:	d860      	bhi.n	80072b0 <TIM_SlaveTimer_SetConfig+0x114>
 80071ee:	2b60      	cmp	r3, #96	@ 0x60
 80071f0:	d054      	beq.n	800729c <TIM_SlaveTimer_SetConfig+0x100>
 80071f2:	2b60      	cmp	r3, #96	@ 0x60
 80071f4:	d85c      	bhi.n	80072b0 <TIM_SlaveTimer_SetConfig+0x114>
 80071f6:	2b50      	cmp	r3, #80	@ 0x50
 80071f8:	d046      	beq.n	8007288 <TIM_SlaveTimer_SetConfig+0xec>
 80071fa:	2b50      	cmp	r3, #80	@ 0x50
 80071fc:	d858      	bhi.n	80072b0 <TIM_SlaveTimer_SetConfig+0x114>
 80071fe:	2b40      	cmp	r3, #64	@ 0x40
 8007200:	d019      	beq.n	8007236 <TIM_SlaveTimer_SetConfig+0x9a>
 8007202:	2b40      	cmp	r3, #64	@ 0x40
 8007204:	d854      	bhi.n	80072b0 <TIM_SlaveTimer_SetConfig+0x114>
 8007206:	2b30      	cmp	r3, #48	@ 0x30
 8007208:	d055      	beq.n	80072b6 <TIM_SlaveTimer_SetConfig+0x11a>
 800720a:	2b30      	cmp	r3, #48	@ 0x30
 800720c:	d850      	bhi.n	80072b0 <TIM_SlaveTimer_SetConfig+0x114>
 800720e:	2b20      	cmp	r3, #32
 8007210:	d051      	beq.n	80072b6 <TIM_SlaveTimer_SetConfig+0x11a>
 8007212:	2b20      	cmp	r3, #32
 8007214:	d84c      	bhi.n	80072b0 <TIM_SlaveTimer_SetConfig+0x114>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d04d      	beq.n	80072b6 <TIM_SlaveTimer_SetConfig+0x11a>
 800721a:	2b10      	cmp	r3, #16
 800721c:	d04b      	beq.n	80072b6 <TIM_SlaveTimer_SetConfig+0x11a>
 800721e:	e047      	b.n	80072b0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007230:	f000 f8c1 	bl	80073b6 <TIM_ETR_SetConfig>
      break;
 8007234:	e040      	b.n	80072b8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b05      	cmp	r3, #5
 800723c:	d101      	bne.n	8007242 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e03b      	b.n	80072ba <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6a1a      	ldr	r2, [r3, #32]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0201 	bic.w	r2, r2, #1
 8007258:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007268:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	4313      	orrs	r3, r2
 8007274:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	621a      	str	r2, [r3, #32]
      break;
 8007286:	e017      	b.n	80072b8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007294:	461a      	mov	r2, r3
 8007296:	f000 f814 	bl	80072c2 <TIM_TI1_ConfigInputStage>
      break;
 800729a:	e00d      	b.n	80072b8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072a8:	461a      	mov	r2, r3
 80072aa:	f000 f839 	bl	8007320 <TIM_TI2_ConfigInputStage>
      break;
 80072ae:	e003      	b.n	80072b8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
      break;
 80072b4:	e000      	b.n	80072b8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80072b6:	bf00      	nop
  }

  return status;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b087      	sub	sp, #28
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f023 0201 	bic.w	r2, r3, #1
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f023 030a 	bic.w	r3, r3, #10
 80072fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	621a      	str	r2, [r3, #32]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f023 0210 	bic.w	r2, r3, #16
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800734a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	031b      	lsls	r3, r3, #12
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800735c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	621a      	str	r2, [r3, #32]
}
 8007374:	bf00      	nop
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007396:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	f043 0307 	orr.w	r3, r3, #7
 80073a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	609a      	str	r2, [r3, #8]
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b087      	sub	sp, #28
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	021a      	lsls	r2, r3, #8
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	431a      	orrs	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4313      	orrs	r3, r2
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	609a      	str	r2, [r3, #8]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b087      	sub	sp, #28
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2201      	movs	r2, #1
 800740a:	fa02 f303 	lsl.w	r3, r2, r3
 800740e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	43db      	mvns	r3, r3
 8007418:	401a      	ands	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1a      	ldr	r2, [r3, #32]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	fa01 f303 	lsl.w	r3, r1, r3
 800742e:	431a      	orrs	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	621a      	str	r2, [r3, #32]
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2200      	movs	r2, #0
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f976 	bl	8007744 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007462:	4013      	ands	r3, r2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10f      	bne.n	8007488 <HAL_TIMEx_PWMN_Stop+0x48>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a1a      	ldr	r2, [r3, #32]
 800746e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007472:	4013      	ands	r3, r2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d107      	bne.n	8007488 <HAL_TIMEx_PWMN_Stop+0x48>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007486:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6a1a      	ldr	r2, [r3, #32]
 800748e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007492:	4013      	ands	r3, r2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10f      	bne.n	80074b8 <HAL_TIMEx_PWMN_Stop+0x78>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6a1a      	ldr	r2, [r3, #32]
 800749e:	f240 4344 	movw	r3, #1092	@ 0x444
 80074a2:	4013      	ands	r3, r2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d107      	bne.n	80074b8 <HAL_TIMEx_PWMN_Stop+0x78>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0201 	bic.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <HAL_TIMEx_PWMN_Stop+0x88>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074c6:	e013      	b.n	80074f0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d104      	bne.n	80074d8 <HAL_TIMEx_PWMN_Stop+0x98>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074d6:	e00b      	b.n	80074f0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d104      	bne.n	80074e8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074e6:	e003      	b.n	80074f0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007510:	2302      	movs	r3, #2
 8007512:	e068      	b.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2e      	ldr	r2, [pc, #184]	@ (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d004      	beq.n	8007548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a2d      	ldr	r2, [pc, #180]	@ (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d108      	bne.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800754e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1e      	ldr	r2, [pc, #120]	@ (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d01d      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007586:	d018      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1b      	ldr	r2, [pc, #108]	@ (80075fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1a      	ldr	r2, [pc, #104]	@ (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00e      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a18      	ldr	r2, [pc, #96]	@ (8007604 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d009      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a13      	ldr	r2, [pc, #76]	@ (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d004      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a14      	ldr	r2, [pc, #80]	@ (8007608 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d10c      	bne.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40013400 	.word	0x40013400
 80075fc:	40000400 	.word	0x40000400
 8007600:	40000800 	.word	0x40000800
 8007604:	40000c00 	.word	0x40000c00
 8007608:	40014000 	.word	0x40014000

0800760c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007624:	2302      	movs	r3, #2
 8007626:	e065      	b.n	80076f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	041b      	lsls	r3, r3, #16
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a16      	ldr	r2, [pc, #88]	@ (8007700 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d004      	beq.n	80076b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a14      	ldr	r2, [pc, #80]	@ (8007704 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d115      	bne.n	80076e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	051b      	lsls	r3, r3, #20
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	40012c00 	.word	0x40012c00
 8007704:	40013400 	.word	0x40013400

08007708 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f003 030f 	and.w	r3, r3, #15
 8007756:	2204      	movs	r2, #4
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1a      	ldr	r2, [r3, #32]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	43db      	mvns	r3, r3
 8007766:	401a      	ands	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a1a      	ldr	r2, [r3, #32]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	fa01 f303 	lsl.w	r3, r1, r3
 800777c:	431a      	orrs	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e040      	b.n	8007822 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d106      	bne.n	80077b6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7fa fdbf 	bl	8002334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2224      	movs	r2, #36	@ 0x24
 80077ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0201 	bic.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fb57 	bl	8007e88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f89c 	bl	8007918 <UART_SetConfig>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e01b      	b.n	8007822 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007808:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0201 	orr.w	r2, r2, #1
 8007818:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fbd6 	bl	8007fcc <UART_CheckIdleState>
 8007820:	4603      	mov	r3, r0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4613      	mov	r3, r2
 8007838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007840:	2b20      	cmp	r3, #32
 8007842:	d137      	bne.n	80078b4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <HAL_UART_Receive_DMA+0x24>
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e030      	b.n	80078b6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a18      	ldr	r2, [pc, #96]	@ (80078c0 <HAL_UART_Receive_DMA+0x94>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d01f      	beq.n	80078a4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d018      	beq.n	80078a4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	613b      	str	r3, [r7, #16]
   return(result);
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	623b      	str	r3, [r7, #32]
 8007892:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	69f9      	ldr	r1, [r7, #28]
 8007896:	6a3a      	ldr	r2, [r7, #32]
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	61bb      	str	r3, [r7, #24]
   return(result);
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e6      	bne.n	8007872 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	461a      	mov	r2, r3
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fca4 	bl	80081f8 <UART_Start_Receive_DMA>
 80078b0:	4603      	mov	r3, r0
 80078b2:	e000      	b.n	80078b6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078b4:	2302      	movs	r3, #2
  }
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3728      	adds	r7, #40	@ 0x28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	40008000 	.word	0x40008000

080078c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800791c:	b08a      	sub	sp, #40	@ 0x28
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	431a      	orrs	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	431a      	orrs	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	4313      	orrs	r3, r2
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	4ba4      	ldr	r3, [pc, #656]	@ (8007bd8 <UART_SetConfig+0x2c0>)
 8007948:	4013      	ands	r3, r2
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007950:	430b      	orrs	r3, r1
 8007952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a99      	ldr	r2, [pc, #612]	@ (8007bdc <UART_SetConfig+0x2c4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d004      	beq.n	8007984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007980:	4313      	orrs	r3, r2
 8007982:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007994:	430a      	orrs	r2, r1
 8007996:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a90      	ldr	r2, [pc, #576]	@ (8007be0 <UART_SetConfig+0x2c8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d126      	bne.n	80079f0 <UART_SetConfig+0xd8>
 80079a2:	4b90      	ldr	r3, [pc, #576]	@ (8007be4 <UART_SetConfig+0x2cc>)
 80079a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a8:	f003 0303 	and.w	r3, r3, #3
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d81b      	bhi.n	80079e8 <UART_SetConfig+0xd0>
 80079b0:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <UART_SetConfig+0xa0>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	080079c9 	.word	0x080079c9
 80079bc:	080079d9 	.word	0x080079d9
 80079c0:	080079d1 	.word	0x080079d1
 80079c4:	080079e1 	.word	0x080079e1
 80079c8:	2301      	movs	r3, #1
 80079ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ce:	e116      	b.n	8007bfe <UART_SetConfig+0x2e6>
 80079d0:	2302      	movs	r3, #2
 80079d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079d6:	e112      	b.n	8007bfe <UART_SetConfig+0x2e6>
 80079d8:	2304      	movs	r3, #4
 80079da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079de:	e10e      	b.n	8007bfe <UART_SetConfig+0x2e6>
 80079e0:	2308      	movs	r3, #8
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e6:	e10a      	b.n	8007bfe <UART_SetConfig+0x2e6>
 80079e8:	2310      	movs	r3, #16
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ee:	e106      	b.n	8007bfe <UART_SetConfig+0x2e6>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a7c      	ldr	r2, [pc, #496]	@ (8007be8 <UART_SetConfig+0x2d0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d138      	bne.n	8007a6c <UART_SetConfig+0x154>
 80079fa:	4b7a      	ldr	r3, [pc, #488]	@ (8007be4 <UART_SetConfig+0x2cc>)
 80079fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a00:	f003 030c 	and.w	r3, r3, #12
 8007a04:	2b0c      	cmp	r3, #12
 8007a06:	d82d      	bhi.n	8007a64 <UART_SetConfig+0x14c>
 8007a08:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <UART_SetConfig+0xf8>)
 8007a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0e:	bf00      	nop
 8007a10:	08007a45 	.word	0x08007a45
 8007a14:	08007a65 	.word	0x08007a65
 8007a18:	08007a65 	.word	0x08007a65
 8007a1c:	08007a65 	.word	0x08007a65
 8007a20:	08007a55 	.word	0x08007a55
 8007a24:	08007a65 	.word	0x08007a65
 8007a28:	08007a65 	.word	0x08007a65
 8007a2c:	08007a65 	.word	0x08007a65
 8007a30:	08007a4d 	.word	0x08007a4d
 8007a34:	08007a65 	.word	0x08007a65
 8007a38:	08007a65 	.word	0x08007a65
 8007a3c:	08007a65 	.word	0x08007a65
 8007a40:	08007a5d 	.word	0x08007a5d
 8007a44:	2300      	movs	r3, #0
 8007a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a4a:	e0d8      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a52:	e0d4      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007a54:	2304      	movs	r3, #4
 8007a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5a:	e0d0      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007a5c:	2308      	movs	r3, #8
 8007a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a62:	e0cc      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007a64:	2310      	movs	r3, #16
 8007a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6a:	e0c8      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a5e      	ldr	r2, [pc, #376]	@ (8007bec <UART_SetConfig+0x2d4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d125      	bne.n	8007ac2 <UART_SetConfig+0x1aa>
 8007a76:	4b5b      	ldr	r3, [pc, #364]	@ (8007be4 <UART_SetConfig+0x2cc>)
 8007a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a80:	2b30      	cmp	r3, #48	@ 0x30
 8007a82:	d016      	beq.n	8007ab2 <UART_SetConfig+0x19a>
 8007a84:	2b30      	cmp	r3, #48	@ 0x30
 8007a86:	d818      	bhi.n	8007aba <UART_SetConfig+0x1a2>
 8007a88:	2b20      	cmp	r3, #32
 8007a8a:	d00a      	beq.n	8007aa2 <UART_SetConfig+0x18a>
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d814      	bhi.n	8007aba <UART_SetConfig+0x1a2>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <UART_SetConfig+0x182>
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d008      	beq.n	8007aaa <UART_SetConfig+0x192>
 8007a98:	e00f      	b.n	8007aba <UART_SetConfig+0x1a2>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa0:	e0ad      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa8:	e0a9      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007aaa:	2304      	movs	r3, #4
 8007aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab0:	e0a5      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007ab2:	2308      	movs	r3, #8
 8007ab4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab8:	e0a1      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007aba:	2310      	movs	r3, #16
 8007abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac0:	e09d      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a4a      	ldr	r2, [pc, #296]	@ (8007bf0 <UART_SetConfig+0x2d8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d125      	bne.n	8007b18 <UART_SetConfig+0x200>
 8007acc:	4b45      	ldr	r3, [pc, #276]	@ (8007be4 <UART_SetConfig+0x2cc>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ad6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ad8:	d016      	beq.n	8007b08 <UART_SetConfig+0x1f0>
 8007ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8007adc:	d818      	bhi.n	8007b10 <UART_SetConfig+0x1f8>
 8007ade:	2b80      	cmp	r3, #128	@ 0x80
 8007ae0:	d00a      	beq.n	8007af8 <UART_SetConfig+0x1e0>
 8007ae2:	2b80      	cmp	r3, #128	@ 0x80
 8007ae4:	d814      	bhi.n	8007b10 <UART_SetConfig+0x1f8>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <UART_SetConfig+0x1d8>
 8007aea:	2b40      	cmp	r3, #64	@ 0x40
 8007aec:	d008      	beq.n	8007b00 <UART_SetConfig+0x1e8>
 8007aee:	e00f      	b.n	8007b10 <UART_SetConfig+0x1f8>
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007af6:	e082      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007af8:	2302      	movs	r3, #2
 8007afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007afe:	e07e      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007b00:	2304      	movs	r3, #4
 8007b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b06:	e07a      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007b08:	2308      	movs	r3, #8
 8007b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b0e:	e076      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007b10:	2310      	movs	r3, #16
 8007b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b16:	e072      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a35      	ldr	r2, [pc, #212]	@ (8007bf4 <UART_SetConfig+0x2dc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d12a      	bne.n	8007b78 <UART_SetConfig+0x260>
 8007b22:	4b30      	ldr	r3, [pc, #192]	@ (8007be4 <UART_SetConfig+0x2cc>)
 8007b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b30:	d01a      	beq.n	8007b68 <UART_SetConfig+0x250>
 8007b32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b36:	d81b      	bhi.n	8007b70 <UART_SetConfig+0x258>
 8007b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b3c:	d00c      	beq.n	8007b58 <UART_SetConfig+0x240>
 8007b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b42:	d815      	bhi.n	8007b70 <UART_SetConfig+0x258>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <UART_SetConfig+0x238>
 8007b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b4c:	d008      	beq.n	8007b60 <UART_SetConfig+0x248>
 8007b4e:	e00f      	b.n	8007b70 <UART_SetConfig+0x258>
 8007b50:	2300      	movs	r3, #0
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b56:	e052      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5e:	e04e      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b66:	e04a      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b6e:	e046      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b76:	e042      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a17      	ldr	r2, [pc, #92]	@ (8007bdc <UART_SetConfig+0x2c4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d13a      	bne.n	8007bf8 <UART_SetConfig+0x2e0>
 8007b82:	4b18      	ldr	r3, [pc, #96]	@ (8007be4 <UART_SetConfig+0x2cc>)
 8007b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b90:	d01a      	beq.n	8007bc8 <UART_SetConfig+0x2b0>
 8007b92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b96:	d81b      	bhi.n	8007bd0 <UART_SetConfig+0x2b8>
 8007b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b9c:	d00c      	beq.n	8007bb8 <UART_SetConfig+0x2a0>
 8007b9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ba2:	d815      	bhi.n	8007bd0 <UART_SetConfig+0x2b8>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <UART_SetConfig+0x298>
 8007ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bac:	d008      	beq.n	8007bc0 <UART_SetConfig+0x2a8>
 8007bae:	e00f      	b.n	8007bd0 <UART_SetConfig+0x2b8>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bb6:	e022      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bbe:	e01e      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bc6:	e01a      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007bc8:	2308      	movs	r3, #8
 8007bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bce:	e016      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bd6:	e012      	b.n	8007bfe <UART_SetConfig+0x2e6>
 8007bd8:	efff69f3 	.word	0xefff69f3
 8007bdc:	40008000 	.word	0x40008000
 8007be0:	40013800 	.word	0x40013800
 8007be4:	40021000 	.word	0x40021000
 8007be8:	40004400 	.word	0x40004400
 8007bec:	40004800 	.word	0x40004800
 8007bf0:	40004c00 	.word	0x40004c00
 8007bf4:	40005000 	.word	0x40005000
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a9f      	ldr	r2, [pc, #636]	@ (8007e80 <UART_SetConfig+0x568>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d17a      	bne.n	8007cfe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d824      	bhi.n	8007c5a <UART_SetConfig+0x342>
 8007c10:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <UART_SetConfig+0x300>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c3d 	.word	0x08007c3d
 8007c1c:	08007c5b 	.word	0x08007c5b
 8007c20:	08007c45 	.word	0x08007c45
 8007c24:	08007c5b 	.word	0x08007c5b
 8007c28:	08007c4b 	.word	0x08007c4b
 8007c2c:	08007c5b 	.word	0x08007c5b
 8007c30:	08007c5b 	.word	0x08007c5b
 8007c34:	08007c5b 	.word	0x08007c5b
 8007c38:	08007c53 	.word	0x08007c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c3c:	f7fd fd1c 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8007c40:	61f8      	str	r0, [r7, #28]
        break;
 8007c42:	e010      	b.n	8007c66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c44:	4b8f      	ldr	r3, [pc, #572]	@ (8007e84 <UART_SetConfig+0x56c>)
 8007c46:	61fb      	str	r3, [r7, #28]
        break;
 8007c48:	e00d      	b.n	8007c66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4a:	f7fd fc7f 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8007c4e:	61f8      	str	r0, [r7, #28]
        break;
 8007c50:	e009      	b.n	8007c66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c56:	61fb      	str	r3, [r7, #28]
        break;
 8007c58:	e005      	b.n	8007c66 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80fb 	beq.w	8007e64 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	4413      	add	r3, r2
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d305      	bcc.n	8007c8a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d903      	bls.n	8007c92 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c90:	e0e8      	b.n	8007e64 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	2200      	movs	r2, #0
 8007c96:	461c      	mov	r4, r3
 8007c98:	4615      	mov	r5, r2
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	022b      	lsls	r3, r5, #8
 8007ca4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ca8:	0222      	lsls	r2, r4, #8
 8007caa:	68f9      	ldr	r1, [r7, #12]
 8007cac:	6849      	ldr	r1, [r1, #4]
 8007cae:	0849      	lsrs	r1, r1, #1
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	4688      	mov	r8, r1
 8007cb4:	4681      	mov	r9, r0
 8007cb6:	eb12 0a08 	adds.w	sl, r2, r8
 8007cba:	eb43 0b09 	adc.w	fp, r3, r9
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	603b      	str	r3, [r7, #0]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ccc:	4650      	mov	r0, sl
 8007cce:	4659      	mov	r1, fp
 8007cd0:	f7f8 ffea 	bl	8000ca8 <__aeabi_uldivmod>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4613      	mov	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ce2:	d308      	bcc.n	8007cf6 <UART_SetConfig+0x3de>
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cea:	d204      	bcs.n	8007cf6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	60da      	str	r2, [r3, #12]
 8007cf4:	e0b6      	b.n	8007e64 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007cfc:	e0b2      	b.n	8007e64 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d06:	d15e      	bne.n	8007dc6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007d08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d828      	bhi.n	8007d62 <UART_SetConfig+0x44a>
 8007d10:	a201      	add	r2, pc, #4	@ (adr r2, 8007d18 <UART_SetConfig+0x400>)
 8007d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d16:	bf00      	nop
 8007d18:	08007d3d 	.word	0x08007d3d
 8007d1c:	08007d45 	.word	0x08007d45
 8007d20:	08007d4d 	.word	0x08007d4d
 8007d24:	08007d63 	.word	0x08007d63
 8007d28:	08007d53 	.word	0x08007d53
 8007d2c:	08007d63 	.word	0x08007d63
 8007d30:	08007d63 	.word	0x08007d63
 8007d34:	08007d63 	.word	0x08007d63
 8007d38:	08007d5b 	.word	0x08007d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d3c:	f7fd fc9c 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8007d40:	61f8      	str	r0, [r7, #28]
        break;
 8007d42:	e014      	b.n	8007d6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d44:	f7fd fcae 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 8007d48:	61f8      	str	r0, [r7, #28]
        break;
 8007d4a:	e010      	b.n	8007d6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8007e84 <UART_SetConfig+0x56c>)
 8007d4e:	61fb      	str	r3, [r7, #28]
        break;
 8007d50:	e00d      	b.n	8007d6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d52:	f7fd fbfb 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8007d56:	61f8      	str	r0, [r7, #28]
        break;
 8007d58:	e009      	b.n	8007d6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d5e:	61fb      	str	r3, [r7, #28]
        break;
 8007d60:	e005      	b.n	8007d6e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d077      	beq.n	8007e64 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	005a      	lsls	r2, r3, #1
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	085b      	lsrs	r3, r3, #1
 8007d7e:	441a      	add	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	2b0f      	cmp	r3, #15
 8007d8e:	d916      	bls.n	8007dbe <UART_SetConfig+0x4a6>
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d96:	d212      	bcs.n	8007dbe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f023 030f 	bic.w	r3, r3, #15
 8007da0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	8afb      	ldrh	r3, [r7, #22]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	8afa      	ldrh	r2, [r7, #22]
 8007dba:	60da      	str	r2, [r3, #12]
 8007dbc:	e052      	b.n	8007e64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007dc4:	e04e      	b.n	8007e64 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007dca:	2b08      	cmp	r3, #8
 8007dcc:	d827      	bhi.n	8007e1e <UART_SetConfig+0x506>
 8007dce:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd4 <UART_SetConfig+0x4bc>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007df9 	.word	0x08007df9
 8007dd8:	08007e01 	.word	0x08007e01
 8007ddc:	08007e09 	.word	0x08007e09
 8007de0:	08007e1f 	.word	0x08007e1f
 8007de4:	08007e0f 	.word	0x08007e0f
 8007de8:	08007e1f 	.word	0x08007e1f
 8007dec:	08007e1f 	.word	0x08007e1f
 8007df0:	08007e1f 	.word	0x08007e1f
 8007df4:	08007e17 	.word	0x08007e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007df8:	f7fd fc3e 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8007dfc:	61f8      	str	r0, [r7, #28]
        break;
 8007dfe:	e014      	b.n	8007e2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e00:	f7fd fc50 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 8007e04:	61f8      	str	r0, [r7, #28]
        break;
 8007e06:	e010      	b.n	8007e2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e08:	4b1e      	ldr	r3, [pc, #120]	@ (8007e84 <UART_SetConfig+0x56c>)
 8007e0a:	61fb      	str	r3, [r7, #28]
        break;
 8007e0c:	e00d      	b.n	8007e2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e0e:	f7fd fb9d 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8007e12:	61f8      	str	r0, [r7, #28]
        break;
 8007e14:	e009      	b.n	8007e2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e1a:	61fb      	str	r3, [r7, #28]
        break;
 8007e1c:	e005      	b.n	8007e2a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e28:	bf00      	nop
    }

    if (pclk != 0U)
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d019      	beq.n	8007e64 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	085a      	lsrs	r2, r3, #1
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	441a      	add	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2b0f      	cmp	r3, #15
 8007e48:	d909      	bls.n	8007e5e <UART_SetConfig+0x546>
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e50:	d205      	bcs.n	8007e5e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60da      	str	r2, [r3, #12]
 8007e5c:	e002      	b.n	8007e64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3728      	adds	r7, #40	@ 0x28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e7e:	bf00      	nop
 8007e80:	40008000 	.word	0x40008000
 8007e84:	00f42400 	.word	0x00f42400

08007e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1c:	f003 0310 	and.w	r3, r3, #16
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01a      	beq.n	8007f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f86:	d10a      	bne.n	8007f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	605a      	str	r2, [r3, #4]
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b098      	sub	sp, #96	@ 0x60
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fdc:	f7fa fd3e 	bl	8002a5c <HAL_GetTick>
 8007fe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d12e      	bne.n	800804e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f88c 	bl	800811c <UART_WaitOnFlagUntilTimeout>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d021      	beq.n	800804e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800801e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008028:	647b      	str	r3, [r7, #68]	@ 0x44
 800802a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800802e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e6      	bne.n	800800a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e062      	b.n	8008114 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b04      	cmp	r3, #4
 800805a:	d149      	bne.n	80080f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800805c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008064:	2200      	movs	r2, #0
 8008066:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f856 	bl	800811c <UART_WaitOnFlagUntilTimeout>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d03c      	beq.n	80080f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	623b      	str	r3, [r7, #32]
   return(result);
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800808a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008094:	633b      	str	r3, [r7, #48]	@ 0x30
 8008096:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800809a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e6      	bne.n	8008076 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0301 	bic.w	r3, r3, #1
 80080be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3308      	adds	r3, #8
 80080c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080c8:	61fa      	str	r2, [r7, #28]
 80080ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	69b9      	ldr	r1, [r7, #24]
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	617b      	str	r3, [r7, #20]
   return(result);
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e5      	bne.n	80080a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2220      	movs	r2, #32
 80080e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e011      	b.n	8008114 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3758      	adds	r7, #88	@ 0x58
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800812c:	e04f      	b.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d04b      	beq.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008136:	f7fa fc91 	bl	8002a5c <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	429a      	cmp	r2, r3
 8008144:	d302      	bcc.n	800814c <UART_WaitOnFlagUntilTimeout+0x30>
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e04e      	b.n	80081ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	d037      	beq.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b80      	cmp	r3, #128	@ 0x80
 8008162:	d034      	beq.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b40      	cmp	r3, #64	@ 0x40
 8008168:	d031      	beq.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b08      	cmp	r3, #8
 8008176:	d110      	bne.n	800819a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2208      	movs	r2, #8
 800817e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f8ff 	bl	8008384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2208      	movs	r2, #8
 800818a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e029      	b.n	80081ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081a8:	d111      	bne.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f8e5 	bl	8008384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e00f      	b.n	80081ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4013      	ands	r3, r2
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	429a      	cmp	r2, r3
 80081dc:	bf0c      	ite	eq
 80081de:	2301      	moveq	r3, #1
 80081e0:	2300      	movne	r3, #0
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d0a0      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b096      	sub	sp, #88	@ 0x58
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	4613      	mov	r3, r2
 8008204:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	88fa      	ldrh	r2, [r7, #6]
 8008210:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2222      	movs	r2, #34	@ 0x22
 8008220:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008228:	2b00      	cmp	r3, #0
 800822a:	d028      	beq.n	800827e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008230:	4a3e      	ldr	r2, [pc, #248]	@ (800832c <UART_Start_Receive_DMA+0x134>)
 8008232:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008238:	4a3d      	ldr	r2, [pc, #244]	@ (8008330 <UART_Start_Receive_DMA+0x138>)
 800823a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008240:	4a3c      	ldr	r2, [pc, #240]	@ (8008334 <UART_Start_Receive_DMA+0x13c>)
 8008242:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008248:	2200      	movs	r2, #0
 800824a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3324      	adds	r3, #36	@ 0x24
 8008256:	4619      	mov	r1, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825c:	461a      	mov	r2, r3
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	f7fa fe28 	bl	8002eb4 <HAL_DMA_Start_IT>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2210      	movs	r2, #16
 800826e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2220      	movs	r2, #32
 8008276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e051      	b.n	8008322 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d018      	beq.n	80082b8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800829a:	657b      	str	r3, [r7, #84]	@ 0x54
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80082b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e6      	bne.n	8008286 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3308      	adds	r3, #8
 80082be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	f043 0301 	orr.w	r3, r3, #1
 80082ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3308      	adds	r3, #8
 80082d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80082da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082e0:	e841 2300 	strex	r3, r2, [r1]
 80082e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80082e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e5      	bne.n	80082b8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3308      	adds	r3, #8
 80082f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	613b      	str	r3, [r7, #16]
   return(result);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3308      	adds	r3, #8
 800830a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800830c:	623a      	str	r2, [r7, #32]
 800830e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	69f9      	ldr	r1, [r7, #28]
 8008312:	6a3a      	ldr	r2, [r7, #32]
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	61bb      	str	r3, [r7, #24]
   return(result);
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e5      	bne.n	80082ec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3758      	adds	r7, #88	@ 0x58
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	0800844d 	.word	0x0800844d
 8008330:	08008579 	.word	0x08008579
 8008334:	080085b7 	.word	0x080085b7

08008338 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b089      	sub	sp, #36	@ 0x24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	60bb      	str	r3, [r7, #8]
   return(result);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008354:	61fb      	str	r3, [r7, #28]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	613b      	str	r3, [r7, #16]
   return(result);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e6      	bne.n	8008340 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008378:	bf00      	nop
 800837a:	3724      	adds	r7, #36	@ 0x24
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008384:	b480      	push	{r7}
 8008386:	b095      	sub	sp, #84	@ 0x54
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80083ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e6      	bne.n	800838c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	f023 0301 	bic.w	r3, r3, #1
 80083d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3308      	adds	r3, #8
 80083dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e5      	bne.n	80083be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d118      	bne.n	800842c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	60bb      	str	r3, [r7, #8]
   return(result);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f023 0310 	bic.w	r3, r3, #16
 800840e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	461a      	mov	r2, r3
 8008416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008418:	61bb      	str	r3, [r7, #24]
 800841a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6979      	ldr	r1, [r7, #20]
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	613b      	str	r3, [r7, #16]
   return(result);
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e6      	bne.n	80083fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008440:	bf00      	nop
 8008442:	3754      	adds	r7, #84	@ 0x54
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b09c      	sub	sp, #112	@ 0x70
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008458:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d171      	bne.n	800854c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800847e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800848e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008490:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800849c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e6      	bne.n	8008470 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b4:	f023 0301 	bic.w	r3, r3, #1
 80084b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80084ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3308      	adds	r3, #8
 80084c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80084c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80084c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e5      	bne.n	80084a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	623b      	str	r3, [r7, #32]
   return(result);
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3308      	adds	r3, #8
 80084f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80084f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80084f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e5      	bne.n	80084d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800850a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008516:	2b01      	cmp	r3, #1
 8008518:	d118      	bne.n	800854c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	60fb      	str	r3, [r7, #12]
   return(result);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0310 	bic.w	r3, r3, #16
 800852e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	461a      	mov	r2, r3
 8008536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008538:	61fb      	str	r3, [r7, #28]
 800853a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	69b9      	ldr	r1, [r7, #24]
 800853e:	69fa      	ldr	r2, [r7, #28]
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	617b      	str	r3, [r7, #20]
   return(result);
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e6      	bne.n	800851a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800854c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800854e:	2200      	movs	r2, #0
 8008550:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008556:	2b01      	cmp	r3, #1
 8008558:	d107      	bne.n	800856a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800855a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800855c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008560:	4619      	mov	r1, r3
 8008562:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008564:	f7ff f9cc 	bl	8007900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008568:	e002      	b.n	8008570 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800856a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800856c:	f7ff f9aa 	bl	80078c4 <HAL_UART_RxCpltCallback>
}
 8008570:	bf00      	nop
 8008572:	3770      	adds	r7, #112	@ 0x70
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008590:	2b01      	cmp	r3, #1
 8008592:	d109      	bne.n	80085a8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800859a:	085b      	lsrs	r3, r3, #1
 800859c:	b29b      	uxth	r3, r3
 800859e:	4619      	mov	r1, r3
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff f9ad 	bl	8007900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085a6:	e002      	b.n	80085ae <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff f995 	bl	80078d8 <HAL_UART_RxHalfCpltCallback>
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b086      	sub	sp, #24
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085dc:	2b80      	cmp	r3, #128	@ 0x80
 80085de:	d109      	bne.n	80085f4 <UART_DMAError+0x3e>
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2b21      	cmp	r3, #33	@ 0x21
 80085e4:	d106      	bne.n	80085f4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80085ee:	6978      	ldr	r0, [r7, #20]
 80085f0:	f7ff fea2 	bl	8008338 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fe:	2b40      	cmp	r3, #64	@ 0x40
 8008600:	d109      	bne.n	8008616 <UART_DMAError+0x60>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b22      	cmp	r3, #34	@ 0x22
 8008606:	d106      	bne.n	8008616 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2200      	movs	r2, #0
 800860c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008610:	6978      	ldr	r0, [r7, #20]
 8008612:	f7ff feb7 	bl	8008384 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800861c:	f043 0210 	orr.w	r2, r3, #16
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008626:	6978      	ldr	r0, [r7, #20]
 8008628:	f7ff f960 	bl	80078ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800862c:	bf00      	nop
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008634:	b084      	sub	sp, #16
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	f107 001c 	add.w	r0, r7, #28
 8008642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f001 fa26 	bl	8009aa4 <USB_CoreReset>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800865c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008660:	2b00      	cmp	r3, #0
 8008662:	d106      	bne.n	8008672 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008668:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008670:	e005      	b.n	800867e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008676:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800868a:	b004      	add	sp, #16
 800868c:	4770      	bx	lr
	...

08008690 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	4613      	mov	r3, r2
 800869c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d165      	bne.n	8008770 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4a3e      	ldr	r2, [pc, #248]	@ (80087a0 <USB_SetTurnaroundTime+0x110>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d906      	bls.n	80086ba <USB_SetTurnaroundTime+0x2a>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4a3d      	ldr	r2, [pc, #244]	@ (80087a4 <USB_SetTurnaroundTime+0x114>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d202      	bcs.n	80086ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80086b4:	230f      	movs	r3, #15
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	e05c      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4a39      	ldr	r2, [pc, #228]	@ (80087a4 <USB_SetTurnaroundTime+0x114>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d306      	bcc.n	80086d0 <USB_SetTurnaroundTime+0x40>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	4a38      	ldr	r2, [pc, #224]	@ (80087a8 <USB_SetTurnaroundTime+0x118>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d202      	bcs.n	80086d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80086ca:	230e      	movs	r3, #14
 80086cc:	617b      	str	r3, [r7, #20]
 80086ce:	e051      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4a35      	ldr	r2, [pc, #212]	@ (80087a8 <USB_SetTurnaroundTime+0x118>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d306      	bcc.n	80086e6 <USB_SetTurnaroundTime+0x56>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	4a34      	ldr	r2, [pc, #208]	@ (80087ac <USB_SetTurnaroundTime+0x11c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d202      	bcs.n	80086e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80086e0:	230d      	movs	r3, #13
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e046      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	4a30      	ldr	r2, [pc, #192]	@ (80087ac <USB_SetTurnaroundTime+0x11c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d306      	bcc.n	80086fc <USB_SetTurnaroundTime+0x6c>
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4a2f      	ldr	r2, [pc, #188]	@ (80087b0 <USB_SetTurnaroundTime+0x120>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d802      	bhi.n	80086fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80086f6:	230c      	movs	r3, #12
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	e03b      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4a2c      	ldr	r2, [pc, #176]	@ (80087b0 <USB_SetTurnaroundTime+0x120>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d906      	bls.n	8008712 <USB_SetTurnaroundTime+0x82>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4a2b      	ldr	r2, [pc, #172]	@ (80087b4 <USB_SetTurnaroundTime+0x124>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d802      	bhi.n	8008712 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800870c:	230b      	movs	r3, #11
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	e030      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4a27      	ldr	r2, [pc, #156]	@ (80087b4 <USB_SetTurnaroundTime+0x124>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d906      	bls.n	8008728 <USB_SetTurnaroundTime+0x98>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4a26      	ldr	r2, [pc, #152]	@ (80087b8 <USB_SetTurnaroundTime+0x128>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d802      	bhi.n	8008728 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008722:	230a      	movs	r3, #10
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	e025      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4a23      	ldr	r2, [pc, #140]	@ (80087b8 <USB_SetTurnaroundTime+0x128>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d906      	bls.n	800873e <USB_SetTurnaroundTime+0xae>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4a22      	ldr	r2, [pc, #136]	@ (80087bc <USB_SetTurnaroundTime+0x12c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d202      	bcs.n	800873e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008738:	2309      	movs	r3, #9
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e01a      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4a1e      	ldr	r2, [pc, #120]	@ (80087bc <USB_SetTurnaroundTime+0x12c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d306      	bcc.n	8008754 <USB_SetTurnaroundTime+0xc4>
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4a1d      	ldr	r2, [pc, #116]	@ (80087c0 <USB_SetTurnaroundTime+0x130>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d802      	bhi.n	8008754 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800874e:	2308      	movs	r3, #8
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	e00f      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4a1a      	ldr	r2, [pc, #104]	@ (80087c0 <USB_SetTurnaroundTime+0x130>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d906      	bls.n	800876a <USB_SetTurnaroundTime+0xda>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4a19      	ldr	r2, [pc, #100]	@ (80087c4 <USB_SetTurnaroundTime+0x134>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d202      	bcs.n	800876a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008764:	2307      	movs	r3, #7
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	e004      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800876a:	2306      	movs	r3, #6
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e001      	b.n	8008774 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008770:	2309      	movs	r3, #9
 8008772:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	68da      	ldr	r2, [r3, #12]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	029b      	lsls	r3, r3, #10
 8008788:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800878c:	431a      	orrs	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	00d8acbf 	.word	0x00d8acbf
 80087a4:	00e4e1c0 	.word	0x00e4e1c0
 80087a8:	00f42400 	.word	0x00f42400
 80087ac:	01067380 	.word	0x01067380
 80087b0:	011a499f 	.word	0x011a499f
 80087b4:	01312cff 	.word	0x01312cff
 80087b8:	014ca43f 	.word	0x014ca43f
 80087bc:	016e3600 	.word	0x016e3600
 80087c0:	01a6ab1f 	.word	0x01a6ab1f
 80087c4:	01e84800 	.word	0x01e84800

080087c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f043 0201 	orr.w	r2, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f023 0201 	bic.w	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008828:	78fb      	ldrb	r3, [r7, #3]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d115      	bne.n	800885a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800883a:	200a      	movs	r0, #10
 800883c:	f7fa f91a 	bl	8002a74 <HAL_Delay>
      ms += 10U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	330a      	adds	r3, #10
 8008844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 f8b3 	bl	80099b2 <USB_GetMode>
 800884c:	4603      	mov	r3, r0
 800884e:	2b01      	cmp	r3, #1
 8008850:	d01e      	beq.n	8008890 <USB_SetCurrentMode+0x84>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2bc7      	cmp	r3, #199	@ 0xc7
 8008856:	d9f0      	bls.n	800883a <USB_SetCurrentMode+0x2e>
 8008858:	e01a      	b.n	8008890 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d115      	bne.n	800888c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800886c:	200a      	movs	r0, #10
 800886e:	f7fa f901 	bl	8002a74 <HAL_Delay>
      ms += 10U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	330a      	adds	r3, #10
 8008876:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 f89a 	bl	80099b2 <USB_GetMode>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <USB_SetCurrentMode+0x84>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2bc7      	cmp	r3, #199	@ 0xc7
 8008888:	d9f0      	bls.n	800886c <USB_SetCurrentMode+0x60>
 800888a:	e001      	b.n	8008890 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e005      	b.n	800889c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2bc8      	cmp	r3, #200	@ 0xc8
 8008894:	d101      	bne.n	800889a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e000      	b.n	800889c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088a4:	b084      	sub	sp, #16
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b086      	sub	sp, #24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80088b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	e009      	b.n	80088d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	3340      	adds	r3, #64	@ 0x40
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	2200      	movs	r2, #0
 80088d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	3301      	adds	r3, #1
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2b0e      	cmp	r3, #14
 80088dc:	d9f2      	bls.n	80088c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d11c      	bne.n	8008920 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088f4:	f043 0302 	orr.w	r3, r3, #2
 80088f8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	e005      	b.n	800892c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008924:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008932:	461a      	mov	r2, r3
 8008934:	2300      	movs	r3, #0
 8008936:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008938:	2103      	movs	r1, #3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f95a 	bl	8008bf4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008940:	2110      	movs	r1, #16
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f8f6 	bl	8008b34 <USB_FlushTxFifo>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f920 	bl	8008b98 <USB_FlushRxFifo>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008968:	461a      	mov	r2, r3
 800896a:	2300      	movs	r3, #0
 800896c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008974:	461a      	mov	r2, r3
 8008976:	2300      	movs	r3, #0
 8008978:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008980:	461a      	mov	r2, r3
 8008982:	2300      	movs	r3, #0
 8008984:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008986:	2300      	movs	r3, #0
 8008988:	613b      	str	r3, [r7, #16]
 800898a:	e043      	b.n	8008a14 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800899e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089a2:	d118      	bne.n	80089d6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b6:	461a      	mov	r2, r3
 80089b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	e013      	b.n	80089e8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089cc:	461a      	mov	r2, r3
 80089ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	e008      	b.n	80089e8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e2:	461a      	mov	r2, r3
 80089e4:	2300      	movs	r3, #0
 80089e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089f4:	461a      	mov	r2, r3
 80089f6:	2300      	movs	r3, #0
 80089f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a06:	461a      	mov	r2, r3
 8008a08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	3301      	adds	r3, #1
 8008a12:	613b      	str	r3, [r7, #16]
 8008a14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008a18:	461a      	mov	r2, r3
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d3b5      	bcc.n	800898c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a20:	2300      	movs	r3, #0
 8008a22:	613b      	str	r3, [r7, #16]
 8008a24:	e043      	b.n	8008aae <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a3c:	d118      	bne.n	8008a70 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a50:	461a      	mov	r2, r3
 8008a52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	e013      	b.n	8008a82 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a66:	461a      	mov	r2, r3
 8008a68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	e008      	b.n	8008a82 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008aa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	613b      	str	r3, [r7, #16]
 8008aae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d3b5      	bcc.n	8008a26 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008acc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008ada:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	f043 0210 	orr.w	r2, r3, #16
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	699a      	ldr	r2, [r3, #24]
 8008aec:	4b10      	ldr	r3, [pc, #64]	@ (8008b30 <USB_DevInit+0x28c>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008af4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	f043 0208 	orr.w	r2, r3, #8
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d107      	bne.n	8008b20 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b18:	f043 0304 	orr.w	r3, r3, #4
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b2c:	b004      	add	sp, #16
 8008b2e:	4770      	bx	lr
 8008b30:	803c3800 	.word	0x803c3800

08008b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3301      	adds	r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b4e:	d901      	bls.n	8008b54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e01b      	b.n	8008b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	daf2      	bge.n	8008b42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	019b      	lsls	r3, r3, #6
 8008b64:	f043 0220 	orr.w	r2, r3, #32
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b78:	d901      	bls.n	8008b7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e006      	b.n	8008b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	d0f0      	beq.n	8008b6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bb0:	d901      	bls.n	8008bb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e018      	b.n	8008be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	daf2      	bge.n	8008ba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2210      	movs	r2, #16
 8008bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bd4:	d901      	bls.n	8008bda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e006      	b.n	8008be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	f003 0310 	and.w	r3, r3, #16
 8008be2:	2b10      	cmp	r3, #16
 8008be4:	d0f0      	beq.n	8008bc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c14:	4313      	orrs	r3, r2
 8008c16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b087      	sub	sp, #28
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 0306 	and.w	r3, r3, #6
 8008c3e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d002      	beq.n	8008c4c <USB_GetDevSpeed+0x26>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b06      	cmp	r3, #6
 8008c4a:	d102      	bne.n	8008c52 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	75fb      	strb	r3, [r7, #23]
 8008c50:	e001      	b.n	8008c56 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008c52:	230f      	movs	r3, #15
 8008c54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	371c      	adds	r7, #28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	785b      	ldrb	r3, [r3, #1]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d13a      	bne.n	8008cf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c86:	69da      	ldr	r2, [r3, #28]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	2101      	movs	r1, #1
 8008c92:	fa01 f303 	lsl.w	r3, r1, r3
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	68f9      	ldr	r1, [r7, #12]
 8008c9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d155      	bne.n	8008d64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	791b      	ldrb	r3, [r3, #4]
 8008cd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008cd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	059b      	lsls	r3, r3, #22
 8008cda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	0151      	lsls	r1, r2, #5
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	440a      	add	r2, r1
 8008ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	e036      	b.n	8008d64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cfc:	69da      	ldr	r2, [r3, #28]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f003 030f 	and.w	r3, r3, #15
 8008d06:	2101      	movs	r1, #1
 8008d08:	fa01 f303 	lsl.w	r3, r1, r3
 8008d0c:	041b      	lsls	r3, r3, #16
 8008d0e:	68f9      	ldr	r1, [r7, #12]
 8008d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d14:	4313      	orrs	r3, r2
 8008d16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d11a      	bne.n	8008d64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	791b      	ldrb	r3, [r3, #4]
 8008d48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	0151      	lsls	r1, r2, #5
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	440a      	add	r2, r1
 8008d56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
	...

08008d74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	785b      	ldrb	r3, [r3, #1]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d161      	bne.n	8008e54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008da6:	d11f      	bne.n	8008de8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	0151      	lsls	r1, r2, #5
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	440a      	add	r2, r1
 8008dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008dc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	0151      	lsls	r1, r2, #5
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	440a      	add	r2, r1
 8008dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008de2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008de6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	2101      	movs	r1, #1
 8008dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	43db      	mvns	r3, r3
 8008e02:	68f9      	ldr	r1, [r7, #12]
 8008e04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e08:	4013      	ands	r3, r2
 8008e0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e12:	69da      	ldr	r2, [r3, #28]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	f003 030f 	and.w	r3, r3, #15
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	43db      	mvns	r3, r3
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	0159      	lsls	r1, r3, #5
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	440b      	add	r3, r1
 8008e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4b35      	ldr	r3, [pc, #212]	@ (8008f24 <USB_DeactivateEndpoint+0x1b0>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	600b      	str	r3, [r1, #0]
 8008e52:	e060      	b.n	8008f16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e6a:	d11f      	bne.n	8008eac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	0151      	lsls	r1, r2, #5
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	440a      	add	r2, r1
 8008e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ea6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec2:	041b      	lsls	r3, r3, #16
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	68f9      	ldr	r1, [r7, #12]
 8008ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ecc:	4013      	ands	r3, r2
 8008ece:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee6:	041b      	lsls	r3, r3, #16
 8008ee8:	43db      	mvns	r3, r3
 8008eea:	68f9      	ldr	r1, [r7, #12]
 8008eec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	0159      	lsls	r1, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	440b      	add	r3, r1
 8008f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4b05      	ldr	r3, [pc, #20]	@ (8008f28 <USB_DeactivateEndpoint+0x1b4>)
 8008f12:	4013      	ands	r3, r2
 8008f14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	ec337800 	.word	0xec337800
 8008f28:	eff37800 	.word	0xeff37800

08008f2c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	f040 812d 	bne.w	80091a4 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d132      	bne.n	8008fb8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f6c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f70:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	0151      	lsls	r1, r2, #5
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	440a      	add	r2, r1
 8008fac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fb0:	0cdb      	lsrs	r3, r3, #19
 8008fb2:	04db      	lsls	r3, r3, #19
 8008fb4:	6113      	str	r3, [r2, #16]
 8008fb6:	e097      	b.n	80090e8 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	0151      	lsls	r1, r2, #5
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	440a      	add	r2, r1
 8008fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fd2:	0cdb      	lsrs	r3, r3, #19
 8008fd4:	04db      	lsls	r3, r3, #19
 8008fd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	0151      	lsls	r1, r2, #5
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	440a      	add	r2, r1
 8008fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ff2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ff6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ffa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d11a      	bne.n	8009038 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	691a      	ldr	r2, [r3, #16]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	429a      	cmp	r2, r3
 800900c:	d903      	bls.n	8009016 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	0151      	lsls	r1, r2, #5
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	440a      	add	r2, r1
 800902c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009030:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009034:	6113      	str	r3, [r2, #16]
 8009036:	e044      	b.n	80090c2 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	691a      	ldr	r2, [r3, #16]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	4413      	add	r3, r2
 8009042:	1e5a      	subs	r2, r3, #1
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	fbb2 f3f3 	udiv	r3, r2, r3
 800904c:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	89fb      	ldrh	r3, [r7, #14]
 800905e:	04d9      	lsls	r1, r3, #19
 8009060:	4b8f      	ldr	r3, [pc, #572]	@ (80092a0 <USB_EPStartXfer+0x374>)
 8009062:	400b      	ands	r3, r1
 8009064:	6939      	ldr	r1, [r7, #16]
 8009066:	0148      	lsls	r0, r1, #5
 8009068:	6979      	ldr	r1, [r7, #20]
 800906a:	4401      	add	r1, r0
 800906c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009070:	4313      	orrs	r3, r2
 8009072:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	791b      	ldrb	r3, [r3, #4]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d122      	bne.n	80090c2 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	440a      	add	r2, r1
 8009092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009096:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800909a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a8:	691a      	ldr	r2, [r3, #16]
 80090aa:	89fb      	ldrh	r3, [r7, #14]
 80090ac:	075b      	lsls	r3, r3, #29
 80090ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80090b2:	6939      	ldr	r1, [r7, #16]
 80090b4:	0148      	lsls	r0, r1, #5
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	4401      	add	r1, r0
 80090ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80090be:	4313      	orrs	r3, r2
 80090c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ce:	691a      	ldr	r2, [r3, #16]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090d8:	6939      	ldr	r1, [r7, #16]
 80090da:	0148      	lsls	r0, r1, #5
 80090dc:	6979      	ldr	r1, [r7, #20]
 80090de:	4401      	add	r1, r0
 80090e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80090e4:	4313      	orrs	r3, r2
 80090e6:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	0151      	lsls	r1, r2, #5
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	440a      	add	r2, r1
 80090fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009102:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009106:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	791b      	ldrb	r3, [r3, #4]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d015      	beq.n	800913c <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 813a 	beq.w	800938e <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	2101      	movs	r1, #1
 800912c:	fa01 f303 	lsl.w	r3, r1, r3
 8009130:	6979      	ldr	r1, [r7, #20]
 8009132:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009136:	4313      	orrs	r3, r2
 8009138:	634b      	str	r3, [r1, #52]	@ 0x34
 800913a:	e128      	b.n	800938e <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009148:	2b00      	cmp	r3, #0
 800914a:	d110      	bne.n	800916e <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	0151      	lsls	r1, r2, #5
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	440a      	add	r2, r1
 8009162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009166:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	e00f      	b.n	800918e <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	4413      	add	r3, r2
 8009176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	0151      	lsls	r1, r2, #5
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	440a      	add	r2, r1
 8009184:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800918c:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	68d9      	ldr	r1, [r3, #12]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	b29b      	uxth	r3, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f9a7 	bl	80094f0 <USB_WritePacket>
 80091a2:	e0f4      	b.n	800938e <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	0151      	lsls	r1, r2, #5
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	440a      	add	r2, r1
 80091ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091be:	0cdb      	lsrs	r3, r3, #19
 80091c0:	04db      	lsls	r3, r3, #19
 80091c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	0151      	lsls	r1, r2, #5
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	440a      	add	r2, r1
 80091da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80091e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80091e6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d12f      	bne.n	800924e <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009212:	691a      	ldr	r2, [r3, #16]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800921c:	6939      	ldr	r1, [r7, #16]
 800921e:	0148      	lsls	r0, r1, #5
 8009220:	6979      	ldr	r1, [r7, #20]
 8009222:	4401      	add	r1, r0
 8009224:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009228:	4313      	orrs	r3, r2
 800922a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009246:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800924a:	6113      	str	r3, [r2, #16]
 800924c:	e062      	b.n	8009314 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d126      	bne.n	80092a4 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009262:	691a      	ldr	r2, [r3, #16]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800926c:	6939      	ldr	r1, [r7, #16]
 800926e:	0148      	lsls	r0, r1, #5
 8009270:	6979      	ldr	r1, [r7, #20]
 8009272:	4401      	add	r1, r0
 8009274:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009278:	4313      	orrs	r3, r2
 800927a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	0151      	lsls	r1, r2, #5
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	440a      	add	r2, r1
 8009292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009296:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800929a:	6113      	str	r3, [r2, #16]
 800929c:	e03a      	b.n	8009314 <USB_EPStartXfer+0x3e8>
 800929e:	bf00      	nop
 80092a0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	691a      	ldr	r2, [r3, #16]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	4413      	add	r3, r2
 80092ae:	1e5a      	subs	r2, r3, #1
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b8:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	89fa      	ldrh	r2, [r7, #14]
 80092c0:	fb03 f202 	mul.w	r2, r3, r2
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d4:	691a      	ldr	r2, [r3, #16]
 80092d6:	89fb      	ldrh	r3, [r7, #14]
 80092d8:	04d9      	lsls	r1, r3, #19
 80092da:	4b2f      	ldr	r3, [pc, #188]	@ (8009398 <USB_EPStartXfer+0x46c>)
 80092dc:	400b      	ands	r3, r1
 80092de:	6939      	ldr	r1, [r7, #16]
 80092e0:	0148      	lsls	r0, r1, #5
 80092e2:	6979      	ldr	r1, [r7, #20]
 80092e4:	4401      	add	r1, r0
 80092e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80092ea:	4313      	orrs	r3, r2
 80092ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009304:	6939      	ldr	r1, [r7, #16]
 8009306:	0148      	lsls	r0, r1, #5
 8009308:	6979      	ldr	r1, [r7, #20]
 800930a:	4401      	add	r1, r0
 800930c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009310:	4313      	orrs	r3, r2
 8009312:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	791b      	ldrb	r3, [r3, #4]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d128      	bne.n	800936e <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009328:	2b00      	cmp	r3, #0
 800932a:	d110      	bne.n	800934e <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	440a      	add	r2, r1
 8009342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009346:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	e00f      	b.n	800936e <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	440a      	add	r2, r1
 8009364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800936c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	4413      	add	r3, r2
 8009376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	0151      	lsls	r1, r2, #5
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	440a      	add	r2, r1
 8009384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009388:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800938c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	1ff80000 	.word	0x1ff80000

0800939c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	785b      	ldrb	r3, [r3, #1]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d14a      	bne.n	8009450 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093d2:	f040 8086 	bne.w	80094e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	7812      	ldrb	r2, [r2, #0]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	0151      	lsls	r1, r2, #5
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	440a      	add	r2, r1
 8009414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800941c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3301      	adds	r3, #1
 8009422:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f242 7210 	movw	r2, #10000	@ 0x2710
 800942a:	4293      	cmp	r3, r2
 800942c:	d902      	bls.n	8009434 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	75fb      	strb	r3, [r7, #23]
          break;
 8009432:	e056      	b.n	80094e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800944c:	d0e7      	beq.n	800941e <USB_EPStopXfer+0x82>
 800944e:	e048      	b.n	80094e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009468:	d13b      	bne.n	80094e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	7812      	ldrb	r2, [r2, #0]
 800947e:	0151      	lsls	r1, r2, #5
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	440a      	add	r2, r1
 8009484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009488:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800948c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	7812      	ldrb	r2, [r2, #0]
 80094a2:	0151      	lsls	r1, r2, #5
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	440a      	add	r2, r1
 80094a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80094be:	4293      	cmp	r3, r2
 80094c0:	d902      	bls.n	80094c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	75fb      	strb	r3, [r7, #23]
          break;
 80094c6:	e00c      	b.n	80094e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094e0:	d0e7      	beq.n	80094b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	371c      	adds	r7, #28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b089      	sub	sp, #36	@ 0x24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	4611      	mov	r1, r2
 80094fc:	461a      	mov	r2, r3
 80094fe:	460b      	mov	r3, r1
 8009500:	71fb      	strb	r3, [r7, #7]
 8009502:	4613      	mov	r3, r2
 8009504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800950e:	88bb      	ldrh	r3, [r7, #4]
 8009510:	3303      	adds	r3, #3
 8009512:	089b      	lsrs	r3, r3, #2
 8009514:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009516:	2300      	movs	r3, #0
 8009518:	61bb      	str	r3, [r7, #24]
 800951a:	e018      	b.n	800954e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	031a      	lsls	r2, r3, #12
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	4413      	add	r3, r2
 8009524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009528:	461a      	mov	r2, r3
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	3301      	adds	r3, #1
 8009534:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	3301      	adds	r3, #1
 800953a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	3301      	adds	r3, #1
 8009540:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	3301      	adds	r3, #1
 8009546:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	3301      	adds	r3, #1
 800954c:	61bb      	str	r3, [r7, #24]
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	429a      	cmp	r2, r3
 8009554:	d3e2      	bcc.n	800951c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3724      	adds	r7, #36	@ 0x24
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009564:	b480      	push	{r7}
 8009566:	b08b      	sub	sp, #44	@ 0x2c
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	4613      	mov	r3, r2
 8009570:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800957a:	88fb      	ldrh	r3, [r7, #6]
 800957c:	089b      	lsrs	r3, r3, #2
 800957e:	b29b      	uxth	r3, r3
 8009580:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800958a:	2300      	movs	r3, #0
 800958c:	623b      	str	r3, [r7, #32]
 800958e:	e014      	b.n	80095ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959a:	601a      	str	r2, [r3, #0]
    pDest++;
 800959c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959e:	3301      	adds	r3, #1
 80095a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a4:	3301      	adds	r3, #1
 80095a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095aa:	3301      	adds	r3, #1
 80095ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b0:	3301      	adds	r3, #1
 80095b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	3301      	adds	r3, #1
 80095b8:	623b      	str	r3, [r7, #32]
 80095ba:	6a3a      	ldr	r2, [r7, #32]
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d3e6      	bcc.n	8009590 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80095c2:	8bfb      	ldrh	r3, [r7, #30]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01e      	beq.n	8009606 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095d2:	461a      	mov	r2, r3
 80095d4:	f107 0310 	add.w	r3, r7, #16
 80095d8:	6812      	ldr	r2, [r2, #0]
 80095da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	00db      	lsls	r3, r3, #3
 80095e4:	fa22 f303 	lsr.w	r3, r2, r3
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	701a      	strb	r2, [r3, #0]
      i++;
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	3301      	adds	r3, #1
 80095f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	3301      	adds	r3, #1
 80095f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80095fa:	8bfb      	ldrh	r3, [r7, #30]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009600:	8bfb      	ldrh	r3, [r7, #30]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1ea      	bne.n	80095dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009608:	4618      	mov	r0, r3
 800960a:	372c      	adds	r7, #44	@ 0x2c
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	785b      	ldrb	r3, [r3, #1]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d12c      	bne.n	800968a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	db12      	blt.n	8009668 <USB_EPSetStall+0x54>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00f      	beq.n	8009668 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	440a      	add	r2, r1
 800965e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009662:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009666:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	0151      	lsls	r1, r2, #5
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	440a      	add	r2, r1
 800967e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009682:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	e02b      	b.n	80096e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	db12      	blt.n	80096c2 <USB_EPSetStall+0xae>
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00f      	beq.n	80096c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	0151      	lsls	r1, r2, #5
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	440a      	add	r2, r1
 80096b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80096c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	0151      	lsls	r1, r2, #5
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	440a      	add	r2, r1
 80096d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	785b      	ldrb	r3, [r3, #1]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d128      	bne.n	800975e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	0151      	lsls	r1, r2, #5
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	440a      	add	r2, r1
 8009722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009726:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800972a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	791b      	ldrb	r3, [r3, #4]
 8009730:	2b03      	cmp	r3, #3
 8009732:	d003      	beq.n	800973c <USB_EPClearStall+0x4c>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	791b      	ldrb	r3, [r3, #4]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d138      	bne.n	80097ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	4413      	add	r3, r2
 8009744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	0151      	lsls	r1, r2, #5
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	440a      	add	r2, r1
 8009752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	e027      	b.n	80097ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4413      	add	r3, r2
 8009766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	0151      	lsls	r1, r2, #5
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	440a      	add	r2, r1
 8009774:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009778:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800977c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	791b      	ldrb	r3, [r3, #4]
 8009782:	2b03      	cmp	r3, #3
 8009784:	d003      	beq.n	800978e <USB_EPClearStall+0x9e>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	791b      	ldrb	r3, [r3, #4]
 800978a:	2b02      	cmp	r3, #2
 800978c:	d10f      	bne.n	80097ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	0151      	lsls	r1, r2, #5
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	440a      	add	r2, r1
 80097a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80097de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	011b      	lsls	r3, r3, #4
 80097ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80097f0:	68f9      	ldr	r1, [r7, #12]
 80097f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097f6:	4313      	orrs	r3, r2
 80097f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009822:	f023 0303 	bic.w	r3, r3, #3
 8009826:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009836:	f023 0302 	bic.w	r3, r3, #2
 800983a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800984a:	b480      	push	{r7}
 800984c:	b085      	sub	sp, #20
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009864:	f023 0303 	bic.w	r3, r3, #3
 8009868:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009878:	f043 0302 	orr.w	r3, r3, #2
 800987c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	4013      	ands	r3, r2
 80098a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098a4:	68fb      	ldr	r3, [r7, #12]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	4013      	ands	r3, r2
 80098d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	0c1b      	lsrs	r3, r3, #16
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3714      	adds	r7, #20
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b085      	sub	sp, #20
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	4013      	ands	r3, r2
 8009908:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	b29b      	uxth	r3, r3
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800991a:	b480      	push	{r7}
 800991c:	b085      	sub	sp, #20
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	460b      	mov	r3, r1
 8009924:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800992a:	78fb      	ldrb	r3, [r7, #3]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	4013      	ands	r3, r2
 8009946:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009948:	68bb      	ldr	r3, [r7, #8]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009956:	b480      	push	{r7}
 8009958:	b087      	sub	sp, #28
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009978:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800997a:	78fb      	ldrb	r3, [r7, #3]
 800997c:	f003 030f 	and.w	r3, r3, #15
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	fa22 f303 	lsr.w	r3, r2, r3
 8009986:	01db      	lsls	r3, r3, #7
 8009988:	b2db      	uxtb	r3, r3
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	4313      	orrs	r3, r2
 800998e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	4013      	ands	r3, r2
 80099a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099a4:	68bb      	ldr	r3, [r7, #8]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	f003 0301 	and.w	r3, r3, #1
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80099ec:	f023 0307 	bic.w	r3, r3, #7
 80099f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	333c      	adds	r3, #60	@ 0x3c
 8009a26:	3304      	adds	r3, #4
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8009aa0 <USB_EP0_OutStart+0x8c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d90a      	bls.n	8009a4a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a44:	d101      	bne.n	8009a4a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	e024      	b.n	8009a94 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a50:	461a      	mov	r2, r3
 8009a52:	2300      	movs	r3, #0
 8009a54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a78:	f043 0318 	orr.w	r3, r3, #24
 8009a7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a8c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009a90:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	4f54300a 	.word	0x4f54300a

08009aa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009abc:	d901      	bls.n	8009ac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e01b      	b.n	8009afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	daf2      	bge.n	8009ab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	f043 0201 	orr.w	r2, r3, #1
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3301      	adds	r3, #1
 8009ade:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ae6:	d901      	bls.n	8009aec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e006      	b.n	8009afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d0f0      	beq.n	8009ada <USB_CoreReset+0x36>

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
	...

08009b08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b14:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009b18:	f002 fe40 	bl	800c79c <USBD_static_malloc>
 8009b1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d109      	bne.n	8009b38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	32b0      	adds	r2, #176	@ 0xb0
 8009b2e:	2100      	movs	r1, #0
 8009b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b34:	2302      	movs	r3, #2
 8009b36:	e0d4      	b.n	8009ce2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b38:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f004 fb07 	bl	800e152 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	32b0      	adds	r2, #176	@ 0xb0
 8009b4e:	68f9      	ldr	r1, [r7, #12]
 8009b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	32b0      	adds	r2, #176	@ 0xb0
 8009b5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	7c1b      	ldrb	r3, [r3, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d138      	bne.n	8009be2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b70:	4b5e      	ldr	r3, [pc, #376]	@ (8009cec <USBD_CDC_Init+0x1e4>)
 8009b72:	7819      	ldrb	r1, [r3, #0]
 8009b74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b78:	2202      	movs	r2, #2
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f002 fbfa 	bl	800c374 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b80:	4b5a      	ldr	r3, [pc, #360]	@ (8009cec <USBD_CDC_Init+0x1e4>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	f003 020f 	and.w	r2, r3, #15
 8009b88:	6879      	ldr	r1, [r7, #4]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	440b      	add	r3, r1
 8009b94:	3324      	adds	r3, #36	@ 0x24
 8009b96:	2201      	movs	r2, #1
 8009b98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b9a:	4b55      	ldr	r3, [pc, #340]	@ (8009cf0 <USBD_CDC_Init+0x1e8>)
 8009b9c:	7819      	ldrb	r1, [r3, #0]
 8009b9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f002 fbe5 	bl	800c374 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009baa:	4b51      	ldr	r3, [pc, #324]	@ (8009cf0 <USBD_CDC_Init+0x1e8>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	f003 020f 	and.w	r2, r3, #15
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	440b      	add	r3, r1
 8009bbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8009cf4 <USBD_CDC_Init+0x1ec>)
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	f003 020f 	and.w	r2, r3, #15
 8009bce:	6879      	ldr	r1, [r7, #4]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	440b      	add	r3, r1
 8009bda:	3326      	adds	r3, #38	@ 0x26
 8009bdc:	2210      	movs	r2, #16
 8009bde:	801a      	strh	r2, [r3, #0]
 8009be0:	e035      	b.n	8009c4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009be2:	4b42      	ldr	r3, [pc, #264]	@ (8009cec <USBD_CDC_Init+0x1e4>)
 8009be4:	7819      	ldrb	r1, [r3, #0]
 8009be6:	2340      	movs	r3, #64	@ 0x40
 8009be8:	2202      	movs	r2, #2
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f002 fbc2 	bl	800c374 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8009cec <USBD_CDC_Init+0x1e4>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	f003 020f 	and.w	r2, r3, #15
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	440b      	add	r3, r1
 8009c04:	3324      	adds	r3, #36	@ 0x24
 8009c06:	2201      	movs	r2, #1
 8009c08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c0a:	4b39      	ldr	r3, [pc, #228]	@ (8009cf0 <USBD_CDC_Init+0x1e8>)
 8009c0c:	7819      	ldrb	r1, [r3, #0]
 8009c0e:	2340      	movs	r3, #64	@ 0x40
 8009c10:	2202      	movs	r2, #2
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f002 fbae 	bl	800c374 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c18:	4b35      	ldr	r3, [pc, #212]	@ (8009cf0 <USBD_CDC_Init+0x1e8>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	f003 020f 	and.w	r2, r3, #15
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	440b      	add	r3, r1
 8009c2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c30:	2201      	movs	r2, #1
 8009c32:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c34:	4b2f      	ldr	r3, [pc, #188]	@ (8009cf4 <USBD_CDC_Init+0x1ec>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	f003 020f 	and.w	r2, r3, #15
 8009c3c:	6879      	ldr	r1, [r7, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	440b      	add	r3, r1
 8009c48:	3326      	adds	r3, #38	@ 0x26
 8009c4a:	2210      	movs	r2, #16
 8009c4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c4e:	4b29      	ldr	r3, [pc, #164]	@ (8009cf4 <USBD_CDC_Init+0x1ec>)
 8009c50:	7819      	ldrb	r1, [r3, #0]
 8009c52:	2308      	movs	r3, #8
 8009c54:	2203      	movs	r2, #3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f002 fb8c 	bl	800c374 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c5c:	4b25      	ldr	r3, [pc, #148]	@ (8009cf4 <USBD_CDC_Init+0x1ec>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	f003 020f 	and.w	r2, r3, #15
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	3324      	adds	r3, #36	@ 0x24
 8009c72:	2201      	movs	r2, #1
 8009c74:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	33b0      	adds	r3, #176	@ 0xb0
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009cac:	2302      	movs	r3, #2
 8009cae:	e018      	b.n	8009ce2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	7c1b      	ldrb	r3, [r3, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf0 <USBD_CDC_Init+0x1e8>)
 8009cba:	7819      	ldrb	r1, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f002 fcce 	bl	800c668 <USBD_LL_PrepareReceive>
 8009ccc:	e008      	b.n	8009ce0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cce:	4b08      	ldr	r3, [pc, #32]	@ (8009cf0 <USBD_CDC_Init+0x1e8>)
 8009cd0:	7819      	ldrb	r1, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cd8:	2340      	movs	r3, #64	@ 0x40
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f002 fcc4 	bl	800c668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000183 	.word	0x20000183
 8009cf0:	20000184 	.word	0x20000184
 8009cf4:	20000185 	.word	0x20000185

08009cf8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d04:	4b3a      	ldr	r3, [pc, #232]	@ (8009df0 <USBD_CDC_DeInit+0xf8>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f002 fb70 	bl	800c3f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d10:	4b37      	ldr	r3, [pc, #220]	@ (8009df0 <USBD_CDC_DeInit+0xf8>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	3324      	adds	r3, #36	@ 0x24
 8009d26:	2200      	movs	r2, #0
 8009d28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d2a:	4b32      	ldr	r3, [pc, #200]	@ (8009df4 <USBD_CDC_DeInit+0xfc>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f002 fb5d 	bl	800c3f0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d36:	4b2f      	ldr	r3, [pc, #188]	@ (8009df4 <USBD_CDC_DeInit+0xfc>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	f003 020f 	and.w	r2, r3, #15
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	4613      	mov	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d4e:	2200      	movs	r2, #0
 8009d50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009d52:	4b29      	ldr	r3, [pc, #164]	@ (8009df8 <USBD_CDC_DeInit+0x100>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f002 fb49 	bl	800c3f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d5e:	4b26      	ldr	r3, [pc, #152]	@ (8009df8 <USBD_CDC_DeInit+0x100>)
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	f003 020f 	and.w	r2, r3, #15
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	440b      	add	r3, r1
 8009d72:	3324      	adds	r3, #36	@ 0x24
 8009d74:	2200      	movs	r2, #0
 8009d76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d78:	4b1f      	ldr	r3, [pc, #124]	@ (8009df8 <USBD_CDC_DeInit+0x100>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	f003 020f 	and.w	r2, r3, #15
 8009d80:	6879      	ldr	r1, [r7, #4]
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	440b      	add	r3, r1
 8009d8c:	3326      	adds	r3, #38	@ 0x26
 8009d8e:	2200      	movs	r2, #0
 8009d90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	32b0      	adds	r2, #176	@ 0xb0
 8009d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d01f      	beq.n	8009de4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	33b0      	adds	r3, #176	@ 0xb0
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	32b0      	adds	r2, #176	@ 0xb0
 8009dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f002 fcf6 	bl	800c7b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	32b0      	adds	r2, #176	@ 0xb0
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20000183 	.word	0x20000183
 8009df4:	20000184 	.word	0x20000184
 8009df8:	20000185 	.word	0x20000185

08009dfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	32b0      	adds	r2, #176	@ 0xb0
 8009e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e0bf      	b.n	8009fac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d050      	beq.n	8009eda <USBD_CDC_Setup+0xde>
 8009e38:	2b20      	cmp	r3, #32
 8009e3a:	f040 80af 	bne.w	8009f9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	88db      	ldrh	r3, [r3, #6]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d03a      	beq.n	8009ebc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	b25b      	sxtb	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	da1b      	bge.n	8009e88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	33b0      	adds	r3, #176	@ 0xb0
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e68:	683a      	ldr	r2, [r7, #0]
 8009e6a:	88d2      	ldrh	r2, [r2, #6]
 8009e6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	88db      	ldrh	r3, [r3, #6]
 8009e72:	2b07      	cmp	r3, #7
 8009e74:	bf28      	it	cs
 8009e76:	2307      	movcs	r3, #7
 8009e78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	89fa      	ldrh	r2, [r7, #14]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 fdbd 	bl	800ba00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e86:	e090      	b.n	8009faa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	785a      	ldrb	r2, [r3, #1]
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	88db      	ldrh	r3, [r3, #6]
 8009e96:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e98:	d803      	bhi.n	8009ea2 <USBD_CDC_Setup+0xa6>
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	88db      	ldrh	r3, [r3, #6]
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	e000      	b.n	8009ea4 <USBD_CDC_Setup+0xa8>
 8009ea2:	2240      	movs	r2, #64	@ 0x40
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009eaa:	6939      	ldr	r1, [r7, #16]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f001 fdcf 	bl	800ba58 <USBD_CtlPrepareRx>
      break;
 8009eba:	e076      	b.n	8009faa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	33b0      	adds	r3, #176	@ 0xb0
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	7850      	ldrb	r0, [r2, #1]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	4798      	blx	r3
      break;
 8009ed8:	e067      	b.n	8009faa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	785b      	ldrb	r3, [r3, #1]
 8009ede:	2b0b      	cmp	r3, #11
 8009ee0:	d851      	bhi.n	8009f86 <USBD_CDC_Setup+0x18a>
 8009ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee8 <USBD_CDC_Setup+0xec>)
 8009ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee8:	08009f19 	.word	0x08009f19
 8009eec:	08009f95 	.word	0x08009f95
 8009ef0:	08009f87 	.word	0x08009f87
 8009ef4:	08009f87 	.word	0x08009f87
 8009ef8:	08009f87 	.word	0x08009f87
 8009efc:	08009f87 	.word	0x08009f87
 8009f00:	08009f87 	.word	0x08009f87
 8009f04:	08009f87 	.word	0x08009f87
 8009f08:	08009f87 	.word	0x08009f87
 8009f0c:	08009f87 	.word	0x08009f87
 8009f10:	08009f43 	.word	0x08009f43
 8009f14:	08009f6d 	.word	0x08009f6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d107      	bne.n	8009f34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f24:	f107 030a 	add.w	r3, r7, #10
 8009f28:	2202      	movs	r2, #2
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 fd67 	bl	800ba00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f32:	e032      	b.n	8009f9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fce5 	bl	800b906 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	75fb      	strb	r3, [r7, #23]
          break;
 8009f40:	e02b      	b.n	8009f9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d107      	bne.n	8009f5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f4e:	f107 030d 	add.w	r3, r7, #13
 8009f52:	2201      	movs	r2, #1
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f001 fd52 	bl	800ba00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f5c:	e01d      	b.n	8009f9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 fcd0 	bl	800b906 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f66:	2303      	movs	r3, #3
 8009f68:	75fb      	strb	r3, [r7, #23]
          break;
 8009f6a:	e016      	b.n	8009f9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d00f      	beq.n	8009f98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 fcc3 	bl	800b906 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f84:	e008      	b.n	8009f98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f001 fcbc 	bl	800b906 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	75fb      	strb	r3, [r7, #23]
          break;
 8009f92:	e002      	b.n	8009f9a <USBD_CDC_Setup+0x19e>
          break;
 8009f94:	bf00      	nop
 8009f96:	e008      	b.n	8009faa <USBD_CDC_Setup+0x1ae>
          break;
 8009f98:	bf00      	nop
      }
      break;
 8009f9a:	e006      	b.n	8009faa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 fcb1 	bl	800b906 <USBD_CtlError>
      ret = USBD_FAIL;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	32b0      	adds	r2, #176	@ 0xb0
 8009fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e065      	b.n	800a0aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	32b0      	adds	r2, #176	@ 0xb0
 8009fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fee:	78fb      	ldrb	r3, [r7, #3]
 8009ff0:	f003 020f 	and.w	r2, r3, #15
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	440b      	add	r3, r1
 800a000:	3318      	adds	r3, #24
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d02f      	beq.n	800a068 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a008:	78fb      	ldrb	r3, [r7, #3]
 800a00a:	f003 020f 	and.w	r2, r3, #15
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	4613      	mov	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4413      	add	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	440b      	add	r3, r1
 800a01a:	3318      	adds	r3, #24
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	78fb      	ldrb	r3, [r7, #3]
 800a020:	f003 010f 	and.w	r1, r3, #15
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	460b      	mov	r3, r1
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	440b      	add	r3, r1
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4403      	add	r3, r0
 800a030:	331c      	adds	r3, #28
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	fbb2 f1f3 	udiv	r1, r2, r3
 800a038:	fb01 f303 	mul.w	r3, r1, r3
 800a03c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d112      	bne.n	800a068 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a042:	78fb      	ldrb	r3, [r7, #3]
 800a044:	f003 020f 	and.w	r2, r3, #15
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	4613      	mov	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	440b      	add	r3, r1
 800a054:	3318      	adds	r3, #24
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a05a:	78f9      	ldrb	r1, [r7, #3]
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f002 fac9 	bl	800c5f8 <USBD_LL_Transmit>
 800a066:	e01f      	b.n	800a0a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	33b0      	adds	r3, #176	@ 0xb0
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d010      	beq.n	800a0a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	33b0      	adds	r3, #176	@ 0xb0
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a0a4:	78fa      	ldrb	r2, [r7, #3]
 800a0a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	32b0      	adds	r2, #176	@ 0xb0
 800a0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	32b0      	adds	r2, #176	@ 0xb0
 800a0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e01a      	b.n	800a11a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f002 faf5 	bl	800c6d8 <USBD_LL_GetRxDataSize>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	33b0      	adds	r3, #176	@ 0xb0
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a114:	4611      	mov	r1, r2
 800a116:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	32b0      	adds	r2, #176	@ 0xb0
 800a134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a138:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a140:	2303      	movs	r3, #3
 800a142:	e024      	b.n	800a18e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	33b0      	adds	r3, #176	@ 0xb0
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d019      	beq.n	800a18c <USBD_CDC_EP0_RxReady+0x6a>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a15e:	2bff      	cmp	r3, #255	@ 0xff
 800a160:	d014      	beq.n	800a18c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	33b0      	adds	r3, #176	@ 0xb0
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a17a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a182:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	22ff      	movs	r2, #255	@ 0xff
 800a188:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1a0:	2182      	movs	r1, #130	@ 0x82
 800a1a2:	4818      	ldr	r0, [pc, #96]	@ (800a204 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1a4:	f000 fd4f 	bl	800ac46 <USBD_GetEpDesc>
 800a1a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	4815      	ldr	r0, [pc, #84]	@ (800a204 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1ae:	f000 fd4a 	bl	800ac46 <USBD_GetEpDesc>
 800a1b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1b4:	2181      	movs	r1, #129	@ 0x81
 800a1b6:	4813      	ldr	r0, [pc, #76]	@ (800a204 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1b8:	f000 fd45 	bl	800ac46 <USBD_GetEpDesc>
 800a1bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	2210      	movs	r2, #16
 800a1c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d006      	beq.n	800a1de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1d8:	711a      	strb	r2, [r3, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d006      	beq.n	800a1f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1ec:	711a      	strb	r2, [r3, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2243      	movs	r2, #67	@ 0x43
 800a1f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1f8:	4b02      	ldr	r3, [pc, #8]	@ (800a204 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3718      	adds	r7, #24
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000140 	.word	0x20000140

0800a208 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a210:	2182      	movs	r1, #130	@ 0x82
 800a212:	4818      	ldr	r0, [pc, #96]	@ (800a274 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a214:	f000 fd17 	bl	800ac46 <USBD_GetEpDesc>
 800a218:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a21a:	2101      	movs	r1, #1
 800a21c:	4815      	ldr	r0, [pc, #84]	@ (800a274 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a21e:	f000 fd12 	bl	800ac46 <USBD_GetEpDesc>
 800a222:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a224:	2181      	movs	r1, #129	@ 0x81
 800a226:	4813      	ldr	r0, [pc, #76]	@ (800a274 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a228:	f000 fd0d 	bl	800ac46 <USBD_GetEpDesc>
 800a22c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2210      	movs	r2, #16
 800a238:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d006      	beq.n	800a24e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	2200      	movs	r2, #0
 800a244:	711a      	strb	r2, [r3, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f042 0202 	orr.w	r2, r2, #2
 800a24c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d006      	beq.n	800a262 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	711a      	strb	r2, [r3, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f042 0202 	orr.w	r2, r2, #2
 800a260:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2243      	movs	r2, #67	@ 0x43
 800a266:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a268:	4b02      	ldr	r3, [pc, #8]	@ (800a274 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3718      	adds	r7, #24
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20000140 	.word	0x20000140

0800a278 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a280:	2182      	movs	r1, #130	@ 0x82
 800a282:	4818      	ldr	r0, [pc, #96]	@ (800a2e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a284:	f000 fcdf 	bl	800ac46 <USBD_GetEpDesc>
 800a288:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a28a:	2101      	movs	r1, #1
 800a28c:	4815      	ldr	r0, [pc, #84]	@ (800a2e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a28e:	f000 fcda 	bl	800ac46 <USBD_GetEpDesc>
 800a292:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a294:	2181      	movs	r1, #129	@ 0x81
 800a296:	4813      	ldr	r0, [pc, #76]	@ (800a2e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a298:	f000 fcd5 	bl	800ac46 <USBD_GetEpDesc>
 800a29c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2210      	movs	r2, #16
 800a2a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d006      	beq.n	800a2be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2b8:	711a      	strb	r2, [r3, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d006      	beq.n	800a2d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2cc:	711a      	strb	r2, [r3, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2243      	movs	r2, #67	@ 0x43
 800a2d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2d8:	4b02      	ldr	r3, [pc, #8]	@ (800a2e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000140 	.word	0x20000140

0800a2e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	220a      	movs	r2, #10
 800a2f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2f6:	4b03      	ldr	r3, [pc, #12]	@ (800a304 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	200000fc 	.word	0x200000fc

0800a308 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a318:	2303      	movs	r3, #3
 800a31a:	e009      	b.n	800a330 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	33b0      	adds	r3, #176	@ 0xb0
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	32b0      	adds	r2, #176	@ 0xb0
 800a352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a356:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a35e:	2303      	movs	r3, #3
 800a360:	e008      	b.n	800a374 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	371c      	adds	r7, #28
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	32b0      	adds	r2, #176	@ 0xb0
 800a394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a398:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e004      	b.n	800a3ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
	...

0800a3bc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	32b0      	adds	r2, #176	@ 0xb0
 800a3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e025      	b.n	800a42e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d11f      	bne.n	800a42c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a3f4:	4b10      	ldr	r3, [pc, #64]	@ (800a438 <USBD_CDC_TransmitPacket+0x7c>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	f003 020f 	and.w	r2, r3, #15
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	4613      	mov	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4403      	add	r3, r0
 800a40e:	3318      	adds	r3, #24
 800a410:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a412:	4b09      	ldr	r3, [pc, #36]	@ (800a438 <USBD_CDC_TransmitPacket+0x7c>)
 800a414:	7819      	ldrb	r1, [r3, #0]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f002 f8e8 	bl	800c5f8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000183 	.word	0x20000183

0800a43c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	32b0      	adds	r2, #176	@ 0xb0
 800a44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a452:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	32b0      	adds	r2, #176	@ 0xb0
 800a45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a466:	2303      	movs	r3, #3
 800a468:	e018      	b.n	800a49c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7c1b      	ldrb	r3, [r3, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10a      	bne.n	800a488 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a472:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a4 <USBD_CDC_ReceivePacket+0x68>)
 800a474:	7819      	ldrb	r1, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a47c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f002 f8f1 	bl	800c668 <USBD_LL_PrepareReceive>
 800a486:	e008      	b.n	800a49a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a488:	4b06      	ldr	r3, [pc, #24]	@ (800a4a4 <USBD_CDC_ReceivePacket+0x68>)
 800a48a:	7819      	ldrb	r1, [r3, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a492:	2340      	movs	r3, #64	@ 0x40
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f002 f8e7 	bl	800c668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20000184 	.word	0x20000184

0800a4a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e01f      	b.n	800a500 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	79fa      	ldrb	r2, [r7, #7]
 800a4f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f001 febf 	bl	800c278 <USBD_LL_Init>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a512:	2300      	movs	r3, #0
 800a514:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e025      	b.n	800a56c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	32ae      	adds	r2, #174	@ 0xae
 800a532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00f      	beq.n	800a55c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	32ae      	adds	r2, #174	@ 0xae
 800a546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54c:	f107 020e 	add.w	r2, r7, #14
 800a550:	4610      	mov	r0, r2
 800a552:	4798      	blx	r3
 800a554:	4602      	mov	r2, r0
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 fec7 	bl	800c310 <USBD_LL_Start>
 800a582:	4603      	mov	r3, r0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a594:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a596:	4618      	mov	r0, r3
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d009      	beq.n	800a5d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	78fa      	ldrb	r2, [r7, #3]
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	4798      	blx	r3
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	78fa      	ldrb	r2, [r7, #3]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	4798      	blx	r3
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a600:	2303      	movs	r3, #3
 800a602:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a604:	7bfb      	ldrb	r3, [r7, #15]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	4618      	mov	r0, r3
 800a622:	f001 f936 	bl	800b892 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a634:	461a      	mov	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a642:	f003 031f 	and.w	r3, r3, #31
 800a646:	2b02      	cmp	r3, #2
 800a648:	d01a      	beq.n	800a680 <USBD_LL_SetupStage+0x72>
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d822      	bhi.n	800a694 <USBD_LL_SetupStage+0x86>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <USBD_LL_SetupStage+0x4a>
 800a652:	2b01      	cmp	r3, #1
 800a654:	d00a      	beq.n	800a66c <USBD_LL_SetupStage+0x5e>
 800a656:	e01d      	b.n	800a694 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a65e:	4619      	mov	r1, r3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fb63 	bl	800ad2c <USBD_StdDevReq>
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]
      break;
 800a66a:	e020      	b.n	800a6ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fbcb 	bl	800ae10 <USBD_StdItfReq>
 800a67a:	4603      	mov	r3, r0
 800a67c:	73fb      	strb	r3, [r7, #15]
      break;
 800a67e:	e016      	b.n	800a6ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fc2d 	bl	800aee8 <USBD_StdEPReq>
 800a68e:	4603      	mov	r3, r0
 800a690:	73fb      	strb	r3, [r7, #15]
      break;
 800a692:	e00c      	b.n	800a6ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a69a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f001 feda 	bl	800c45c <USBD_LL_StallEP>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ac:	bf00      	nop
  }

  return ret;
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a6ca:	7afb      	ldrb	r3, [r7, #11]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d16e      	bne.n	800a7ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a6d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a6de:	2b03      	cmp	r3, #3
 800a6e0:	f040 8098 	bne.w	800a814 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	689a      	ldr	r2, [r3, #8]
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d913      	bls.n	800a718 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	1ad2      	subs	r2, r2, r3
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	68da      	ldr	r2, [r3, #12]
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	4293      	cmp	r3, r2
 800a708:	bf28      	it	cs
 800a70a:	4613      	movcs	r3, r2
 800a70c:	461a      	mov	r2, r3
 800a70e:	6879      	ldr	r1, [r7, #4]
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f001 f9be 	bl	800ba92 <USBD_CtlContinueRx>
 800a716:	e07d      	b.n	800a814 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a71e:	f003 031f 	and.w	r3, r3, #31
 800a722:	2b02      	cmp	r3, #2
 800a724:	d014      	beq.n	800a750 <USBD_LL_DataOutStage+0x98>
 800a726:	2b02      	cmp	r3, #2
 800a728:	d81d      	bhi.n	800a766 <USBD_LL_DataOutStage+0xae>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <USBD_LL_DataOutStage+0x7c>
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d003      	beq.n	800a73a <USBD_LL_DataOutStage+0x82>
 800a732:	e018      	b.n	800a766 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a734:	2300      	movs	r3, #0
 800a736:	75bb      	strb	r3, [r7, #22]
            break;
 800a738:	e018      	b.n	800a76c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a740:	b2db      	uxtb	r3, r3
 800a742:	4619      	mov	r1, r3
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 fa64 	bl	800ac12 <USBD_CoreFindIF>
 800a74a:	4603      	mov	r3, r0
 800a74c:	75bb      	strb	r3, [r7, #22]
            break;
 800a74e:	e00d      	b.n	800a76c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a756:	b2db      	uxtb	r3, r3
 800a758:	4619      	mov	r1, r3
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f000 fa66 	bl	800ac2c <USBD_CoreFindEP>
 800a760:	4603      	mov	r3, r0
 800a762:	75bb      	strb	r3, [r7, #22]
            break;
 800a764:	e002      	b.n	800a76c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	75bb      	strb	r3, [r7, #22]
            break;
 800a76a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a76c:	7dbb      	ldrb	r3, [r7, #22]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d119      	bne.n	800a7a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d113      	bne.n	800a7a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a77e:	7dba      	ldrb	r2, [r7, #22]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	32ae      	adds	r2, #174	@ 0xae
 800a784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00b      	beq.n	800a7a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a78e:	7dba      	ldrb	r2, [r7, #22]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a796:	7dba      	ldrb	r2, [r7, #22]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	32ae      	adds	r2, #174	@ 0xae
 800a79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f001 f984 	bl	800bab4 <USBD_CtlSendStatus>
 800a7ac:	e032      	b.n	800a814 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a7ae:	7afb      	ldrb	r3, [r7, #11]
 800a7b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 fa37 	bl	800ac2c <USBD_CoreFindEP>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7c2:	7dbb      	ldrb	r3, [r7, #22]
 800a7c4:	2bff      	cmp	r3, #255	@ 0xff
 800a7c6:	d025      	beq.n	800a814 <USBD_LL_DataOutStage+0x15c>
 800a7c8:	7dbb      	ldrb	r3, [r7, #22]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d122      	bne.n	800a814 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d117      	bne.n	800a80a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7da:	7dba      	ldrb	r2, [r7, #22]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	32ae      	adds	r2, #174	@ 0xae
 800a7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00f      	beq.n	800a80a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a7ea:	7dba      	ldrb	r2, [r7, #22]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7f2:	7dba      	ldrb	r2, [r7, #22]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	32ae      	adds	r2, #174	@ 0xae
 800a7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	7afa      	ldrb	r2, [r7, #11]
 800a800:	4611      	mov	r1, r2
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	4798      	blx	r3
 800a806:	4603      	mov	r3, r0
 800a808:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	e000      	b.n	800a816 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b086      	sub	sp, #24
 800a822:	af00      	add	r7, sp, #0
 800a824:	60f8      	str	r0, [r7, #12]
 800a826:	460b      	mov	r3, r1
 800a828:	607a      	str	r2, [r7, #4]
 800a82a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a82c:	7afb      	ldrb	r3, [r7, #11]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d16f      	bne.n	800a912 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3314      	adds	r3, #20
 800a836:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d15a      	bne.n	800a8f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	689a      	ldr	r2, [r3, #8]
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d914      	bls.n	800a878 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	689a      	ldr	r2, [r3, #8]
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	1ad2      	subs	r2, r2, r3
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	461a      	mov	r2, r3
 800a862:	6879      	ldr	r1, [r7, #4]
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f001 f8e6 	bl	800ba36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a86a:	2300      	movs	r3, #0
 800a86c:	2200      	movs	r2, #0
 800a86e:	2100      	movs	r1, #0
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f001 fef9 	bl	800c668 <USBD_LL_PrepareReceive>
 800a876:	e03f      	b.n	800a8f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	68da      	ldr	r2, [r3, #12]
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	429a      	cmp	r2, r3
 800a882:	d11c      	bne.n	800a8be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d316      	bcc.n	800a8be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d20f      	bcs.n	800a8be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f001 f8c7 	bl	800ba36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f001 fed6 	bl	800c668 <USBD_LL_PrepareReceive>
 800a8bc:	e01c      	b.n	800a8f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d10f      	bne.n	800a8ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d009      	beq.n	800a8ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ea:	2180      	movs	r1, #128	@ 0x80
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f001 fdb5 	bl	800c45c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f001 f8f1 	bl	800bada <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d03a      	beq.n	800a978 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f7ff fe42 	bl	800a58c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a910:	e032      	b.n	800a978 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a912:	7afb      	ldrb	r3, [r7, #11]
 800a914:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	4619      	mov	r1, r3
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 f985 	bl	800ac2c <USBD_CoreFindEP>
 800a922:	4603      	mov	r3, r0
 800a924:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	2bff      	cmp	r3, #255	@ 0xff
 800a92a:	d025      	beq.n	800a978 <USBD_LL_DataInStage+0x15a>
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d122      	bne.n	800a978 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d11c      	bne.n	800a978 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a93e:	7dfa      	ldrb	r2, [r7, #23]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	32ae      	adds	r2, #174	@ 0xae
 800a944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d014      	beq.n	800a978 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a94e:	7dfa      	ldrb	r2, [r7, #23]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a956:	7dfa      	ldrb	r2, [r7, #23]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	32ae      	adds	r2, #174	@ 0xae
 800a95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	7afa      	ldrb	r2, [r7, #11]
 800a964:	4611      	mov	r1, r2
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	4798      	blx	r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a96e:	7dbb      	ldrb	r3, [r7, #22]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a974:	7dbb      	ldrb	r3, [r7, #22]
 800a976:	e000      	b.n	800a97a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d014      	beq.n	800a9e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00e      	beq.n	800a9e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	6852      	ldr	r2, [r2, #4]
 800a9d6:	b2d2      	uxtb	r2, r2
 800a9d8:	4611      	mov	r1, r2
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	4798      	blx	r3
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9e8:	2340      	movs	r3, #64	@ 0x40
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 fcc0 	bl	800c374 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2240      	movs	r2, #64	@ 0x40
 800aa00:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa04:	2340      	movs	r3, #64	@ 0x40
 800aa06:	2200      	movs	r2, #0
 800aa08:	2180      	movs	r1, #128	@ 0x80
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f001 fcb2 	bl	800c374 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2240      	movs	r2, #64	@ 0x40
 800aa1a:	621a      	str	r2, [r3, #32]

  return ret;
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	460b      	mov	r3, r1
 800aa30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	78fa      	ldrb	r2, [r7, #3]
 800aa36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b083      	sub	sp, #12
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b04      	cmp	r3, #4
 800aa58:	d006      	beq.n	800aa68 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2204      	movs	r2, #4
 800aa6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d106      	bne.n	800aaa0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d110      	bne.n	800aae4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00b      	beq.n	800aae4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d005      	beq.n	800aae4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b082      	sub	sp, #8
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	32ae      	adds	r2, #174	@ 0xae
 800ab04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e01c      	b.n	800ab4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b03      	cmp	r3, #3
 800ab1a:	d115      	bne.n	800ab48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	32ae      	adds	r2, #174	@ 0xae
 800ab26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00b      	beq.n	800ab48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	32ae      	adds	r2, #174	@ 0xae
 800ab3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	78fa      	ldrb	r2, [r7, #3]
 800ab42:	4611      	mov	r1, r2
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	32ae      	adds	r2, #174	@ 0xae
 800ab68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e01c      	b.n	800abae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	d115      	bne.n	800abac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	32ae      	adds	r2, #174	@ 0xae
 800ab8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	32ae      	adds	r2, #174	@ 0xae
 800ab9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba4:	78fa      	ldrb	r2, [r7, #3]
 800aba6:	4611      	mov	r1, r2
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00e      	beq.n	800ac08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	6852      	ldr	r2, [r2, #4]
 800abf6:	b2d2      	uxtb	r2, r2
 800abf8:	4611      	mov	r1, r2
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac04:	2303      	movs	r3, #3
 800ac06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b086      	sub	sp, #24
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	460b      	mov	r3, r1
 800ac50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	885b      	ldrh	r3, [r3, #2]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	7812      	ldrb	r2, [r2, #0]
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d91f      	bls.n	800acac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac72:	e013      	b.n	800ac9c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac74:	f107 030a 	add.w	r3, r7, #10
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6978      	ldr	r0, [r7, #20]
 800ac7c:	f000 f81b 	bl	800acb6 <USBD_GetNextDesc>
 800ac80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	785b      	ldrb	r3, [r3, #1]
 800ac86:	2b05      	cmp	r3, #5
 800ac88:	d108      	bne.n	800ac9c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	789b      	ldrb	r3, [r3, #2]
 800ac92:	78fa      	ldrb	r2, [r7, #3]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d008      	beq.n	800acaa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	885b      	ldrh	r3, [r3, #2]
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	897b      	ldrh	r3, [r7, #10]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d8e5      	bhi.n	800ac74 <USBD_GetEpDesc+0x2e>
 800aca8:	e000      	b.n	800acac <USBD_GetEpDesc+0x66>
          break;
 800acaa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800acac:	693b      	ldr	r3, [r7, #16]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b085      	sub	sp, #20
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	7812      	ldrb	r2, [r2, #0]
 800accc:	4413      	add	r3, r2
 800acce:	b29a      	uxth	r2, r3
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4413      	add	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ace0:	68fb      	ldr	r3, [r7, #12]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acee:	b480      	push	{r7}
 800acf0:	b087      	sub	sp, #28
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	3301      	adds	r3, #1
 800ad04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ad10:	021b      	lsls	r3, r3, #8
 800ad12:	b21a      	sxth	r2, r3
 800ad14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	b21b      	sxth	r3, r3
 800ad1c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad1e:	89fb      	ldrh	r3, [r7, #14]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	371c      	adds	r7, #28
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad42:	2b40      	cmp	r3, #64	@ 0x40
 800ad44:	d005      	beq.n	800ad52 <USBD_StdDevReq+0x26>
 800ad46:	2b40      	cmp	r3, #64	@ 0x40
 800ad48:	d857      	bhi.n	800adfa <USBD_StdDevReq+0xce>
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00f      	beq.n	800ad6e <USBD_StdDevReq+0x42>
 800ad4e:	2b20      	cmp	r3, #32
 800ad50:	d153      	bne.n	800adfa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	32ae      	adds	r2, #174	@ 0xae
 800ad5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	4798      	blx	r3
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad6c:	e04a      	b.n	800ae04 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	785b      	ldrb	r3, [r3, #1]
 800ad72:	2b09      	cmp	r3, #9
 800ad74:	d83b      	bhi.n	800adee <USBD_StdDevReq+0xc2>
 800ad76:	a201      	add	r2, pc, #4	@ (adr r2, 800ad7c <USBD_StdDevReq+0x50>)
 800ad78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7c:	0800add1 	.word	0x0800add1
 800ad80:	0800ade5 	.word	0x0800ade5
 800ad84:	0800adef 	.word	0x0800adef
 800ad88:	0800addb 	.word	0x0800addb
 800ad8c:	0800adef 	.word	0x0800adef
 800ad90:	0800adaf 	.word	0x0800adaf
 800ad94:	0800ada5 	.word	0x0800ada5
 800ad98:	0800adef 	.word	0x0800adef
 800ad9c:	0800adc7 	.word	0x0800adc7
 800ada0:	0800adb9 	.word	0x0800adb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fa3c 	bl	800b224 <USBD_GetDescriptor>
          break;
 800adac:	e024      	b.n	800adf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fbcb 	bl	800b54c <USBD_SetAddress>
          break;
 800adb6:	e01f      	b.n	800adf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fc0a 	bl	800b5d4 <USBD_SetConfig>
 800adc0:	4603      	mov	r3, r0
 800adc2:	73fb      	strb	r3, [r7, #15]
          break;
 800adc4:	e018      	b.n	800adf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fcad 	bl	800b728 <USBD_GetConfig>
          break;
 800adce:	e013      	b.n	800adf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fcde 	bl	800b794 <USBD_GetStatus>
          break;
 800add8:	e00e      	b.n	800adf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fd0d 	bl	800b7fc <USBD_SetFeature>
          break;
 800ade2:	e009      	b.n	800adf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fd31 	bl	800b84e <USBD_ClrFeature>
          break;
 800adec:	e004      	b.n	800adf8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fd88 	bl	800b906 <USBD_CtlError>
          break;
 800adf6:	bf00      	nop
      }
      break;
 800adf8:	e004      	b.n	800ae04 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fd82 	bl	800b906 <USBD_CtlError>
      break;
 800ae02:	bf00      	nop
  }

  return ret;
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop

0800ae10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae26:	2b40      	cmp	r3, #64	@ 0x40
 800ae28:	d005      	beq.n	800ae36 <USBD_StdItfReq+0x26>
 800ae2a:	2b40      	cmp	r3, #64	@ 0x40
 800ae2c:	d852      	bhi.n	800aed4 <USBD_StdItfReq+0xc4>
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <USBD_StdItfReq+0x26>
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	d14e      	bne.n	800aed4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	d840      	bhi.n	800aec6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	889b      	ldrh	r3, [r3, #4]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d836      	bhi.n	800aebc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	889b      	ldrh	r3, [r3, #4]
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff fedb 	bl	800ac12 <USBD_CoreFindIF>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	2bff      	cmp	r3, #255	@ 0xff
 800ae64:	d01d      	beq.n	800aea2 <USBD_StdItfReq+0x92>
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d11a      	bne.n	800aea2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae6c:	7bba      	ldrb	r2, [r7, #14]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	32ae      	adds	r2, #174	@ 0xae
 800ae72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00f      	beq.n	800ae9c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae7c:	7bba      	ldrb	r2, [r7, #14]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae84:	7bba      	ldrb	r2, [r7, #14]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	32ae      	adds	r2, #174	@ 0xae
 800ae8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	4798      	blx	r3
 800ae96:	4603      	mov	r3, r0
 800ae98:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae9a:	e004      	b.n	800aea6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aea0:	e001      	b.n	800aea6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aea2:	2303      	movs	r3, #3
 800aea4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	88db      	ldrh	r3, [r3, #6]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d110      	bne.n	800aed0 <USBD_StdItfReq+0xc0>
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10d      	bne.n	800aed0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fdfd 	bl	800bab4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aeba:	e009      	b.n	800aed0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fd21 	bl	800b906 <USBD_CtlError>
          break;
 800aec4:	e004      	b.n	800aed0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fd1c 	bl	800b906 <USBD_CtlError>
          break;
 800aece:	e000      	b.n	800aed2 <USBD_StdItfReq+0xc2>
          break;
 800aed0:	bf00      	nop
      }
      break;
 800aed2:	e004      	b.n	800aede <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fd15 	bl	800b906 <USBD_CtlError>
      break;
 800aedc:	bf00      	nop
  }

  return ret;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	889b      	ldrh	r3, [r3, #4]
 800aefa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af04:	2b40      	cmp	r3, #64	@ 0x40
 800af06:	d007      	beq.n	800af18 <USBD_StdEPReq+0x30>
 800af08:	2b40      	cmp	r3, #64	@ 0x40
 800af0a:	f200 817f 	bhi.w	800b20c <USBD_StdEPReq+0x324>
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d02a      	beq.n	800af68 <USBD_StdEPReq+0x80>
 800af12:	2b20      	cmp	r3, #32
 800af14:	f040 817a 	bne.w	800b20c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	4619      	mov	r1, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff fe85 	bl	800ac2c <USBD_CoreFindEP>
 800af22:	4603      	mov	r3, r0
 800af24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af26:	7b7b      	ldrb	r3, [r7, #13]
 800af28:	2bff      	cmp	r3, #255	@ 0xff
 800af2a:	f000 8174 	beq.w	800b216 <USBD_StdEPReq+0x32e>
 800af2e:	7b7b      	ldrb	r3, [r7, #13]
 800af30:	2b00      	cmp	r3, #0
 800af32:	f040 8170 	bne.w	800b216 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af36:	7b7a      	ldrb	r2, [r7, #13]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af3e:	7b7a      	ldrb	r2, [r7, #13]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	32ae      	adds	r2, #174	@ 0xae
 800af44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 8163 	beq.w	800b216 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af50:	7b7a      	ldrb	r2, [r7, #13]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	32ae      	adds	r2, #174	@ 0xae
 800af56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	4798      	blx	r3
 800af62:	4603      	mov	r3, r0
 800af64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af66:	e156      	b.n	800b216 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d008      	beq.n	800af82 <USBD_StdEPReq+0x9a>
 800af70:	2b03      	cmp	r3, #3
 800af72:	f300 8145 	bgt.w	800b200 <USBD_StdEPReq+0x318>
 800af76:	2b00      	cmp	r3, #0
 800af78:	f000 809b 	beq.w	800b0b2 <USBD_StdEPReq+0x1ca>
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d03c      	beq.n	800affa <USBD_StdEPReq+0x112>
 800af80:	e13e      	b.n	800b200 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d002      	beq.n	800af94 <USBD_StdEPReq+0xac>
 800af8e:	2b03      	cmp	r3, #3
 800af90:	d016      	beq.n	800afc0 <USBD_StdEPReq+0xd8>
 800af92:	e02c      	b.n	800afee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00d      	beq.n	800afb6 <USBD_StdEPReq+0xce>
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	2b80      	cmp	r3, #128	@ 0x80
 800af9e:	d00a      	beq.n	800afb6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f001 fa59 	bl	800c45c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afaa:	2180      	movs	r1, #128	@ 0x80
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 fa55 	bl	800c45c <USBD_LL_StallEP>
 800afb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afb4:	e020      	b.n	800aff8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fca4 	bl	800b906 <USBD_CtlError>
              break;
 800afbe:	e01b      	b.n	800aff8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	885b      	ldrh	r3, [r3, #2]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10e      	bne.n	800afe6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00b      	beq.n	800afe6 <USBD_StdEPReq+0xfe>
 800afce:	7bbb      	ldrb	r3, [r7, #14]
 800afd0:	2b80      	cmp	r3, #128	@ 0x80
 800afd2:	d008      	beq.n	800afe6 <USBD_StdEPReq+0xfe>
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	88db      	ldrh	r3, [r3, #6]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d104      	bne.n	800afe6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f001 fa3b 	bl	800c45c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fd64 	bl	800bab4 <USBD_CtlSendStatus>

              break;
 800afec:	e004      	b.n	800aff8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fc88 	bl	800b906 <USBD_CtlError>
              break;
 800aff6:	bf00      	nop
          }
          break;
 800aff8:	e107      	b.n	800b20a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b02      	cmp	r3, #2
 800b004:	d002      	beq.n	800b00c <USBD_StdEPReq+0x124>
 800b006:	2b03      	cmp	r3, #3
 800b008:	d016      	beq.n	800b038 <USBD_StdEPReq+0x150>
 800b00a:	e04b      	b.n	800b0a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00d      	beq.n	800b02e <USBD_StdEPReq+0x146>
 800b012:	7bbb      	ldrb	r3, [r7, #14]
 800b014:	2b80      	cmp	r3, #128	@ 0x80
 800b016:	d00a      	beq.n	800b02e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 fa1d 	bl	800c45c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b022:	2180      	movs	r1, #128	@ 0x80
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f001 fa19 	bl	800c45c <USBD_LL_StallEP>
 800b02a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b02c:	e040      	b.n	800b0b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fc68 	bl	800b906 <USBD_CtlError>
              break;
 800b036:	e03b      	b.n	800b0b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	885b      	ldrh	r3, [r3, #2]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d136      	bne.n	800b0ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b046:	2b00      	cmp	r3, #0
 800b048:	d004      	beq.n	800b054 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b04a:	7bbb      	ldrb	r3, [r7, #14]
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f001 fa3a 	bl	800c4c8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fd2d 	bl	800bab4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b05a:	7bbb      	ldrb	r3, [r7, #14]
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff fde4 	bl	800ac2c <USBD_CoreFindEP>
 800b064:	4603      	mov	r3, r0
 800b066:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b068:	7b7b      	ldrb	r3, [r7, #13]
 800b06a:	2bff      	cmp	r3, #255	@ 0xff
 800b06c:	d01f      	beq.n	800b0ae <USBD_StdEPReq+0x1c6>
 800b06e:	7b7b      	ldrb	r3, [r7, #13]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d11c      	bne.n	800b0ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b074:	7b7a      	ldrb	r2, [r7, #13]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b07c:	7b7a      	ldrb	r2, [r7, #13]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	32ae      	adds	r2, #174	@ 0xae
 800b082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d010      	beq.n	800b0ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b08c:	7b7a      	ldrb	r2, [r7, #13]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	32ae      	adds	r2, #174	@ 0xae
 800b092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	4798      	blx	r3
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0a2:	e004      	b.n	800b0ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fc2d 	bl	800b906 <USBD_CtlError>
              break;
 800b0ac:	e000      	b.n	800b0b0 <USBD_StdEPReq+0x1c8>
              break;
 800b0ae:	bf00      	nop
          }
          break;
 800b0b0:	e0ab      	b.n	800b20a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d002      	beq.n	800b0c4 <USBD_StdEPReq+0x1dc>
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d032      	beq.n	800b128 <USBD_StdEPReq+0x240>
 800b0c2:	e097      	b.n	800b1f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0c4:	7bbb      	ldrb	r3, [r7, #14]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d007      	beq.n	800b0da <USBD_StdEPReq+0x1f2>
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	2b80      	cmp	r3, #128	@ 0x80
 800b0ce:	d004      	beq.n	800b0da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fc17 	bl	800b906 <USBD_CtlError>
                break;
 800b0d8:	e091      	b.n	800b1fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	da0b      	bge.n	800b0fa <USBD_StdEPReq+0x212>
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	3310      	adds	r3, #16
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	e00b      	b.n	800b112 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0fa:	7bbb      	ldrb	r3, [r7, #14]
 800b0fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b100:	4613      	mov	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	4413      	add	r3, r2
 800b110:	3304      	adds	r3, #4
 800b112:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	2202      	movs	r2, #2
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fc6d 	bl	800ba00 <USBD_CtlSendData>
              break;
 800b126:	e06a      	b.n	800b1fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	da11      	bge.n	800b154 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b130:	7bbb      	ldrb	r3, [r7, #14]
 800b132:	f003 020f 	and.w	r2, r3, #15
 800b136:	6879      	ldr	r1, [r7, #4]
 800b138:	4613      	mov	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	440b      	add	r3, r1
 800b142:	3324      	adds	r3, #36	@ 0x24
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d117      	bne.n	800b17a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fbda 	bl	800b906 <USBD_CtlError>
                  break;
 800b152:	e054      	b.n	800b1fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b154:	7bbb      	ldrb	r3, [r7, #14]
 800b156:	f003 020f 	and.w	r2, r3, #15
 800b15a:	6879      	ldr	r1, [r7, #4]
 800b15c:	4613      	mov	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	440b      	add	r3, r1
 800b166:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d104      	bne.n	800b17a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fbc7 	bl	800b906 <USBD_CtlError>
                  break;
 800b178:	e041      	b.n	800b1fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b17a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	da0b      	bge.n	800b19a <USBD_StdEPReq+0x2b2>
 800b182:	7bbb      	ldrb	r3, [r7, #14]
 800b184:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b188:	4613      	mov	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	3310      	adds	r3, #16
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	4413      	add	r3, r2
 800b196:	3304      	adds	r3, #4
 800b198:	e00b      	b.n	800b1b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <USBD_StdEPReq+0x2d8>
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	2b80      	cmp	r3, #128	@ 0x80
 800b1be:	d103      	bne.n	800b1c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	e00e      	b.n	800b1e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1c8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f001 f9b1 	bl	800c534 <USBD_LL_IsStallEP>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	e002      	b.n	800b1e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fc07 	bl	800ba00 <USBD_CtlSendData>
              break;
 800b1f2:	e004      	b.n	800b1fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fb85 	bl	800b906 <USBD_CtlError>
              break;
 800b1fc:	bf00      	nop
          }
          break;
 800b1fe:	e004      	b.n	800b20a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fb7f 	bl	800b906 <USBD_CtlError>
          break;
 800b208:	bf00      	nop
      }
      break;
 800b20a:	e005      	b.n	800b218 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fb79 	bl	800b906 <USBD_CtlError>
      break;
 800b214:	e000      	b.n	800b218 <USBD_StdEPReq+0x330>
      break;
 800b216:	bf00      	nop
  }

  return ret;
 800b218:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b22e:	2300      	movs	r3, #0
 800b230:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	885b      	ldrh	r3, [r3, #2]
 800b23e:	0a1b      	lsrs	r3, r3, #8
 800b240:	b29b      	uxth	r3, r3
 800b242:	3b01      	subs	r3, #1
 800b244:	2b0e      	cmp	r3, #14
 800b246:	f200 8152 	bhi.w	800b4ee <USBD_GetDescriptor+0x2ca>
 800b24a:	a201      	add	r2, pc, #4	@ (adr r2, 800b250 <USBD_GetDescriptor+0x2c>)
 800b24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b250:	0800b2c1 	.word	0x0800b2c1
 800b254:	0800b2d9 	.word	0x0800b2d9
 800b258:	0800b319 	.word	0x0800b319
 800b25c:	0800b4ef 	.word	0x0800b4ef
 800b260:	0800b4ef 	.word	0x0800b4ef
 800b264:	0800b48f 	.word	0x0800b48f
 800b268:	0800b4bb 	.word	0x0800b4bb
 800b26c:	0800b4ef 	.word	0x0800b4ef
 800b270:	0800b4ef 	.word	0x0800b4ef
 800b274:	0800b4ef 	.word	0x0800b4ef
 800b278:	0800b4ef 	.word	0x0800b4ef
 800b27c:	0800b4ef 	.word	0x0800b4ef
 800b280:	0800b4ef 	.word	0x0800b4ef
 800b284:	0800b4ef 	.word	0x0800b4ef
 800b288:	0800b28d 	.word	0x0800b28d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00b      	beq.n	800b2b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b29e:	69db      	ldr	r3, [r3, #28]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	7c12      	ldrb	r2, [r2, #16]
 800b2a4:	f107 0108 	add.w	r1, r7, #8
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4798      	blx	r3
 800b2ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2ae:	e126      	b.n	800b4fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fb27 	bl	800b906 <USBD_CtlError>
        err++;
 800b2b8:	7afb      	ldrb	r3, [r7, #11]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	72fb      	strb	r3, [r7, #11]
      break;
 800b2be:	e11e      	b.n	800b4fe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	7c12      	ldrb	r2, [r2, #16]
 800b2cc:	f107 0108 	add.w	r1, r7, #8
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	4798      	blx	r3
 800b2d4:	60f8      	str	r0, [r7, #12]
      break;
 800b2d6:	e112      	b.n	800b4fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	7c1b      	ldrb	r3, [r3, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10d      	bne.n	800b2fc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e8:	f107 0208 	add.w	r2, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b2fa:	e100      	b.n	800b4fe <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b304:	f107 0208 	add.w	r2, r7, #8
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3301      	adds	r3, #1
 800b312:	2202      	movs	r2, #2
 800b314:	701a      	strb	r2, [r3, #0]
      break;
 800b316:	e0f2      	b.n	800b4fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	885b      	ldrh	r3, [r3, #2]
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b05      	cmp	r3, #5
 800b320:	f200 80ac 	bhi.w	800b47c <USBD_GetDescriptor+0x258>
 800b324:	a201      	add	r2, pc, #4	@ (adr r2, 800b32c <USBD_GetDescriptor+0x108>)
 800b326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32a:	bf00      	nop
 800b32c:	0800b345 	.word	0x0800b345
 800b330:	0800b379 	.word	0x0800b379
 800b334:	0800b3ad 	.word	0x0800b3ad
 800b338:	0800b3e1 	.word	0x0800b3e1
 800b33c:	0800b415 	.word	0x0800b415
 800b340:	0800b449 	.word	0x0800b449
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00b      	beq.n	800b368 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	7c12      	ldrb	r2, [r2, #16]
 800b35c:	f107 0108 	add.w	r1, r7, #8
 800b360:	4610      	mov	r0, r2
 800b362:	4798      	blx	r3
 800b364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b366:	e091      	b.n	800b48c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 facb 	bl	800b906 <USBD_CtlError>
            err++;
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	3301      	adds	r3, #1
 800b374:	72fb      	strb	r3, [r7, #11]
          break;
 800b376:	e089      	b.n	800b48c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	7c12      	ldrb	r2, [r2, #16]
 800b390:	f107 0108 	add.w	r1, r7, #8
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b39a:	e077      	b.n	800b48c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fab1 	bl	800b906 <USBD_CtlError>
            err++;
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3aa:	e06f      	b.n	800b48c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	7c12      	ldrb	r2, [r2, #16]
 800b3c4:	f107 0108 	add.w	r1, r7, #8
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ce:	e05d      	b.n	800b48c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fa97 	bl	800b906 <USBD_CtlError>
            err++;
 800b3d8:	7afb      	ldrb	r3, [r7, #11]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b3de:	e055      	b.n	800b48c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00b      	beq.n	800b404 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	7c12      	ldrb	r2, [r2, #16]
 800b3f8:	f107 0108 	add.w	r1, r7, #8
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	4798      	blx	r3
 800b400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b402:	e043      	b.n	800b48c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fa7d 	bl	800b906 <USBD_CtlError>
            err++;
 800b40c:	7afb      	ldrb	r3, [r7, #11]
 800b40e:	3301      	adds	r3, #1
 800b410:	72fb      	strb	r3, [r7, #11]
          break;
 800b412:	e03b      	b.n	800b48c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	7c12      	ldrb	r2, [r2, #16]
 800b42c:	f107 0108 	add.w	r1, r7, #8
 800b430:	4610      	mov	r0, r2
 800b432:	4798      	blx	r3
 800b434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b436:	e029      	b.n	800b48c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fa63 	bl	800b906 <USBD_CtlError>
            err++;
 800b440:	7afb      	ldrb	r3, [r7, #11]
 800b442:	3301      	adds	r3, #1
 800b444:	72fb      	strb	r3, [r7, #11]
          break;
 800b446:	e021      	b.n	800b48c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	7c12      	ldrb	r2, [r2, #16]
 800b460:	f107 0108 	add.w	r1, r7, #8
 800b464:	4610      	mov	r0, r2
 800b466:	4798      	blx	r3
 800b468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b46a:	e00f      	b.n	800b48c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fa49 	bl	800b906 <USBD_CtlError>
            err++;
 800b474:	7afb      	ldrb	r3, [r7, #11]
 800b476:	3301      	adds	r3, #1
 800b478:	72fb      	strb	r3, [r7, #11]
          break;
 800b47a:	e007      	b.n	800b48c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fa41 	bl	800b906 <USBD_CtlError>
          err++;
 800b484:	7afb      	ldrb	r3, [r7, #11]
 800b486:	3301      	adds	r3, #1
 800b488:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b48a:	bf00      	nop
      }
      break;
 800b48c:	e037      	b.n	800b4fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	7c1b      	ldrb	r3, [r3, #16]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d109      	bne.n	800b4aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b49c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b49e:	f107 0208 	add.w	r2, r7, #8
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	4798      	blx	r3
 800b4a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4a8:	e029      	b.n	800b4fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fa2a 	bl	800b906 <USBD_CtlError>
        err++;
 800b4b2:	7afb      	ldrb	r3, [r7, #11]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	72fb      	strb	r3, [r7, #11]
      break;
 800b4b8:	e021      	b.n	800b4fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	7c1b      	ldrb	r3, [r3, #16]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10d      	bne.n	800b4de <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ca:	f107 0208 	add.w	r2, r7, #8
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	4798      	blx	r3
 800b4d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	2207      	movs	r2, #7
 800b4da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4dc:	e00f      	b.n	800b4fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fa10 	bl	800b906 <USBD_CtlError>
        err++;
 800b4e6:	7afb      	ldrb	r3, [r7, #11]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b4ec:	e007      	b.n	800b4fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fa08 	bl	800b906 <USBD_CtlError>
      err++;
 800b4f6:	7afb      	ldrb	r3, [r7, #11]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b4fc:	bf00      	nop
  }

  if (err != 0U)
 800b4fe:	7afb      	ldrb	r3, [r7, #11]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d11e      	bne.n	800b542 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	88db      	ldrh	r3, [r3, #6]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d016      	beq.n	800b53a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b50c:	893b      	ldrh	r3, [r7, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00e      	beq.n	800b530 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	88da      	ldrh	r2, [r3, #6]
 800b516:	893b      	ldrh	r3, [r7, #8]
 800b518:	4293      	cmp	r3, r2
 800b51a:	bf28      	it	cs
 800b51c:	4613      	movcs	r3, r2
 800b51e:	b29b      	uxth	r3, r3
 800b520:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b522:	893b      	ldrh	r3, [r7, #8]
 800b524:	461a      	mov	r2, r3
 800b526:	68f9      	ldr	r1, [r7, #12]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fa69 	bl	800ba00 <USBD_CtlSendData>
 800b52e:	e009      	b.n	800b544 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f9e7 	bl	800b906 <USBD_CtlError>
 800b538:	e004      	b.n	800b544 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 faba 	bl	800bab4 <USBD_CtlSendStatus>
 800b540:	e000      	b.n	800b544 <USBD_GetDescriptor+0x320>
    return;
 800b542:	bf00      	nop
  }
}
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop

0800b54c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	889b      	ldrh	r3, [r3, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d131      	bne.n	800b5c2 <USBD_SetAddress+0x76>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	88db      	ldrh	r3, [r3, #6]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d12d      	bne.n	800b5c2 <USBD_SetAddress+0x76>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	885b      	ldrh	r3, [r3, #2]
 800b56a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b56c:	d829      	bhi.n	800b5c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	885b      	ldrh	r3, [r3, #2]
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b03      	cmp	r3, #3
 800b584:	d104      	bne.n	800b590 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f9bc 	bl	800b906 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b58e:	e01d      	b.n	800b5cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	7bfa      	ldrb	r2, [r7, #15]
 800b594:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fff5 	bl	800c58c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fa86 	bl	800bab4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d004      	beq.n	800b5b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b6:	e009      	b.n	800b5cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c0:	e004      	b.n	800b5cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f99e 	bl	800b906 <USBD_CtlError>
  }
}
 800b5ca:	bf00      	nop
 800b5cc:	bf00      	nop
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	885b      	ldrh	r3, [r3, #2]
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	4b4e      	ldr	r3, [pc, #312]	@ (800b724 <USBD_SetConfig+0x150>)
 800b5ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5ec:	4b4d      	ldr	r3, [pc, #308]	@ (800b724 <USBD_SetConfig+0x150>)
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d905      	bls.n	800b600 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f985 	bl	800b906 <USBD_CtlError>
    return USBD_FAIL;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e08c      	b.n	800b71a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d002      	beq.n	800b612 <USBD_SetConfig+0x3e>
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d029      	beq.n	800b664 <USBD_SetConfig+0x90>
 800b610:	e075      	b.n	800b6fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b612:	4b44      	ldr	r3, [pc, #272]	@ (800b724 <USBD_SetConfig+0x150>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d020      	beq.n	800b65c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b61a:	4b42      	ldr	r3, [pc, #264]	@ (800b724 <USBD_SetConfig+0x150>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b624:	4b3f      	ldr	r3, [pc, #252]	@ (800b724 <USBD_SetConfig+0x150>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7fe ffb9 	bl	800a5a2 <USBD_SetClassConfig>
 800b630:	4603      	mov	r3, r0
 800b632:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d008      	beq.n	800b64c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f962 	bl	800b906 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2202      	movs	r2, #2
 800b646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b64a:	e065      	b.n	800b718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fa31 	bl	800bab4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2203      	movs	r2, #3
 800b656:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b65a:	e05d      	b.n	800b718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fa29 	bl	800bab4 <USBD_CtlSendStatus>
      break;
 800b662:	e059      	b.n	800b718 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b664:	4b2f      	ldr	r3, [pc, #188]	@ (800b724 <USBD_SetConfig+0x150>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d112      	bne.n	800b692 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2202      	movs	r2, #2
 800b670:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b674:	4b2b      	ldr	r3, [pc, #172]	@ (800b724 <USBD_SetConfig+0x150>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	461a      	mov	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b67e:	4b29      	ldr	r3, [pc, #164]	@ (800b724 <USBD_SetConfig+0x150>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7fe ffa8 	bl	800a5da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fa12 	bl	800bab4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b690:	e042      	b.n	800b718 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b692:	4b24      	ldr	r3, [pc, #144]	@ (800b724 <USBD_SetConfig+0x150>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d02a      	beq.n	800b6f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7fe ff96 	bl	800a5da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b724 <USBD_SetConfig+0x150>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b724 <USBD_SetConfig+0x150>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7fe ff6f 	bl	800a5a2 <USBD_SetClassConfig>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00f      	beq.n	800b6ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6ce:	6839      	ldr	r1, [r7, #0]
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f918 	bl	800b906 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7fe ff7b 	bl	800a5da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b6ec:	e014      	b.n	800b718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f9e0 	bl	800bab4 <USBD_CtlSendStatus>
      break;
 800b6f4:	e010      	b.n	800b718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f9dc 	bl	800bab4 <USBD_CtlSendStatus>
      break;
 800b6fc:	e00c      	b.n	800b718 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f900 	bl	800b906 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b706:	4b07      	ldr	r3, [pc, #28]	@ (800b724 <USBD_SetConfig+0x150>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7fe ff64 	bl	800a5da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b712:	2303      	movs	r3, #3
 800b714:	73fb      	strb	r3, [r7, #15]
      break;
 800b716:	bf00      	nop
  }

  return ret;
 800b718:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20000efc 	.word	0x20000efc

0800b728 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	88db      	ldrh	r3, [r3, #6]
 800b736:	2b01      	cmp	r3, #1
 800b738:	d004      	beq.n	800b744 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f8e2 	bl	800b906 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b742:	e023      	b.n	800b78c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	dc02      	bgt.n	800b756 <USBD_GetConfig+0x2e>
 800b750:	2b00      	cmp	r3, #0
 800b752:	dc03      	bgt.n	800b75c <USBD_GetConfig+0x34>
 800b754:	e015      	b.n	800b782 <USBD_GetConfig+0x5a>
 800b756:	2b03      	cmp	r3, #3
 800b758:	d00b      	beq.n	800b772 <USBD_GetConfig+0x4a>
 800b75a:	e012      	b.n	800b782 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3308      	adds	r3, #8
 800b766:	2201      	movs	r2, #1
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f948 	bl	800ba00 <USBD_CtlSendData>
        break;
 800b770:	e00c      	b.n	800b78c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	3304      	adds	r3, #4
 800b776:	2201      	movs	r2, #1
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f940 	bl	800ba00 <USBD_CtlSendData>
        break;
 800b780:	e004      	b.n	800b78c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f8be 	bl	800b906 <USBD_CtlError>
        break;
 800b78a:	bf00      	nop
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d81e      	bhi.n	800b7ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	88db      	ldrh	r3, [r3, #6]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d004      	beq.n	800b7be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f8a5 	bl	800b906 <USBD_CtlError>
        break;
 800b7bc:	e01a      	b.n	800b7f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d005      	beq.n	800b7da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	f043 0202 	orr.w	r2, r3, #2
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	330c      	adds	r3, #12
 800b7de:	2202      	movs	r2, #2
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f90c 	bl	800ba00 <USBD_CtlSendData>
      break;
 800b7e8:	e004      	b.n	800b7f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f88a 	bl	800b906 <USBD_CtlError>
      break;
 800b7f2:	bf00      	nop
  }
}
 800b7f4:	bf00      	nop
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	885b      	ldrh	r3, [r3, #2]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d107      	bne.n	800b81e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f94c 	bl	800bab4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b81c:	e013      	b.n	800b846 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	885b      	ldrh	r3, [r3, #2]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d10b      	bne.n	800b83e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	889b      	ldrh	r3, [r3, #4]
 800b82a:	0a1b      	lsrs	r3, r3, #8
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f93c 	bl	800bab4 <USBD_CtlSendStatus>
}
 800b83c:	e003      	b.n	800b846 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f860 	bl	800b906 <USBD_CtlError>
}
 800b846:	bf00      	nop
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b082      	sub	sp, #8
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	3b01      	subs	r3, #1
 800b862:	2b02      	cmp	r3, #2
 800b864:	d80b      	bhi.n	800b87e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	885b      	ldrh	r3, [r3, #2]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d10c      	bne.n	800b888 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f91c 	bl	800bab4 <USBD_CtlSendStatus>
      }
      break;
 800b87c:	e004      	b.n	800b888 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f840 	bl	800b906 <USBD_CtlError>
      break;
 800b886:	e000      	b.n	800b88a <USBD_ClrFeature+0x3c>
      break;
 800b888:	bf00      	nop
  }
}
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	781a      	ldrb	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	781a      	ldrb	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f7ff fa16 	bl	800acee <SWAPBYTE>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f7ff fa09 	bl	800acee <SWAPBYTE>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7ff f9fc 	bl	800acee <SWAPBYTE>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	80da      	strh	r2, [r3, #6]
}
 800b8fe:	bf00      	nop
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b082      	sub	sp, #8
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b910:	2180      	movs	r1, #128	@ 0x80
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fda2 	bl	800c45c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b918:	2100      	movs	r1, #0
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fd9e 	bl	800c45c <USBD_LL_StallEP>
}
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d042      	beq.n	800b9c4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b942:	6938      	ldr	r0, [r7, #16]
 800b944:	f000 f842 	bl	800b9cc <USBD_GetLen>
 800b948:	4603      	mov	r3, r0
 800b94a:	3301      	adds	r3, #1
 800b94c:	005b      	lsls	r3, r3, #1
 800b94e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b952:	d808      	bhi.n	800b966 <USBD_GetString+0x3e>
 800b954:	6938      	ldr	r0, [r7, #16]
 800b956:	f000 f839 	bl	800b9cc <USBD_GetLen>
 800b95a:	4603      	mov	r3, r0
 800b95c:	3301      	adds	r3, #1
 800b95e:	b29b      	uxth	r3, r3
 800b960:	005b      	lsls	r3, r3, #1
 800b962:	b29a      	uxth	r2, r3
 800b964:	e001      	b.n	800b96a <USBD_GetString+0x42>
 800b966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	4413      	add	r3, r2
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	7812      	ldrb	r2, [r2, #0]
 800b978:	701a      	strb	r2, [r3, #0]
  idx++;
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
 800b97c:	3301      	adds	r3, #1
 800b97e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b980:	7dfb      	ldrb	r3, [r7, #23]
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	4413      	add	r3, r2
 800b986:	2203      	movs	r2, #3
 800b988:	701a      	strb	r2, [r3, #0]
  idx++;
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
 800b98c:	3301      	adds	r3, #1
 800b98e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b990:	e013      	b.n	800b9ba <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	4413      	add	r3, r2
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	7812      	ldrb	r2, [r2, #0]
 800b99c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	613b      	str	r3, [r7, #16]
    idx++;
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1e7      	bne.n	800b992 <USBD_GetString+0x6a>
 800b9c2:	e000      	b.n	800b9c6 <USBD_GetString+0x9e>
    return;
 800b9c4:	bf00      	nop
  }
}
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9dc:	e005      	b.n	800b9ea <USBD_GetLen+0x1e>
  {
    len++;
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1f5      	bne.n	800b9de <USBD_GetLen+0x12>
  }

  return len;
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	2100      	movs	r1, #0
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 fde6 	bl	800c5f8 <USBD_LL_Transmit>

  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	2100      	movs	r1, #0
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 fdd5 	bl	800c5f8 <USBD_LL_Transmit>

  return USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2203      	movs	r2, #3
 800ba68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	2100      	movs	r1, #0
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 fdf0 	bl	800c668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	2100      	movs	r1, #0
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 fddf 	bl	800c668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2204      	movs	r2, #4
 800bac0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bac4:	2300      	movs	r3, #0
 800bac6:	2200      	movs	r2, #0
 800bac8:	2100      	movs	r1, #0
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fd94 	bl	800c5f8 <USBD_LL_Transmit>

  return USBD_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b082      	sub	sp, #8
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2205      	movs	r2, #5
 800bae6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baea:	2300      	movs	r3, #0
 800baec:	2200      	movs	r2, #0
 800baee:	2100      	movs	r1, #0
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fdb9 	bl	800c668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb04:	2200      	movs	r2, #0
 800bb06:	4912      	ldr	r1, [pc, #72]	@ (800bb50 <MX_USB_DEVICE_Init+0x50>)
 800bb08:	4812      	ldr	r0, [pc, #72]	@ (800bb54 <MX_USB_DEVICE_Init+0x54>)
 800bb0a:	f7fe fccd 	bl	800a4a8 <USBD_Init>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb14:	f7f6 f9ea 	bl	8001eec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb18:	490f      	ldr	r1, [pc, #60]	@ (800bb58 <MX_USB_DEVICE_Init+0x58>)
 800bb1a:	480e      	ldr	r0, [pc, #56]	@ (800bb54 <MX_USB_DEVICE_Init+0x54>)
 800bb1c:	f7fe fcf4 	bl	800a508 <USBD_RegisterClass>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb26:	f7f6 f9e1 	bl	8001eec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb2a:	490c      	ldr	r1, [pc, #48]	@ (800bb5c <MX_USB_DEVICE_Init+0x5c>)
 800bb2c:	4809      	ldr	r0, [pc, #36]	@ (800bb54 <MX_USB_DEVICE_Init+0x54>)
 800bb2e:	f7fe fbeb 	bl	800a308 <USBD_CDC_RegisterInterface>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb38:	f7f6 f9d8 	bl	8001eec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb3c:	4805      	ldr	r0, [pc, #20]	@ (800bb54 <MX_USB_DEVICE_Init+0x54>)
 800bb3e:	f7fe fd19 	bl	800a574 <USBD_Start>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb48:	f7f6 f9d0 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb4c:	bf00      	nop
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	2000019c 	.word	0x2000019c
 800bb54:	20000f00 	.word	0x20000f00
 800bb58:	20000108 	.word	0x20000108
 800bb5c:	20000188 	.word	0x20000188

0800bb60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb64:	2200      	movs	r2, #0
 800bb66:	4905      	ldr	r1, [pc, #20]	@ (800bb7c <CDC_Init_FS+0x1c>)
 800bb68:	4805      	ldr	r0, [pc, #20]	@ (800bb80 <CDC_Init_FS+0x20>)
 800bb6a:	f7fe fbe7 	bl	800a33c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb6e:	4905      	ldr	r1, [pc, #20]	@ (800bb84 <CDC_Init_FS+0x24>)
 800bb70:	4803      	ldr	r0, [pc, #12]	@ (800bb80 <CDC_Init_FS+0x20>)
 800bb72:	f7fe fc05 	bl	800a380 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	200019dc 	.word	0x200019dc
 800bb80:	20000f00 	.word	0x20000f00
 800bb84:	200011dc 	.word	0x200011dc

0800bb88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	4603      	mov	r3, r0
 800bba0:	6039      	str	r1, [r7, #0]
 800bba2:	71fb      	strb	r3, [r7, #7]
 800bba4:	4613      	mov	r3, r2
 800bba6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bba8:	79fb      	ldrb	r3, [r7, #7]
 800bbaa:	2b23      	cmp	r3, #35	@ 0x23
 800bbac:	d84a      	bhi.n	800bc44 <CDC_Control_FS+0xac>
 800bbae:	a201      	add	r2, pc, #4	@ (adr r2, 800bbb4 <CDC_Control_FS+0x1c>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bc45 	.word	0x0800bc45
 800bbb8:	0800bc45 	.word	0x0800bc45
 800bbbc:	0800bc45 	.word	0x0800bc45
 800bbc0:	0800bc45 	.word	0x0800bc45
 800bbc4:	0800bc45 	.word	0x0800bc45
 800bbc8:	0800bc45 	.word	0x0800bc45
 800bbcc:	0800bc45 	.word	0x0800bc45
 800bbd0:	0800bc45 	.word	0x0800bc45
 800bbd4:	0800bc45 	.word	0x0800bc45
 800bbd8:	0800bc45 	.word	0x0800bc45
 800bbdc:	0800bc45 	.word	0x0800bc45
 800bbe0:	0800bc45 	.word	0x0800bc45
 800bbe4:	0800bc45 	.word	0x0800bc45
 800bbe8:	0800bc45 	.word	0x0800bc45
 800bbec:	0800bc45 	.word	0x0800bc45
 800bbf0:	0800bc45 	.word	0x0800bc45
 800bbf4:	0800bc45 	.word	0x0800bc45
 800bbf8:	0800bc45 	.word	0x0800bc45
 800bbfc:	0800bc45 	.word	0x0800bc45
 800bc00:	0800bc45 	.word	0x0800bc45
 800bc04:	0800bc45 	.word	0x0800bc45
 800bc08:	0800bc45 	.word	0x0800bc45
 800bc0c:	0800bc45 	.word	0x0800bc45
 800bc10:	0800bc45 	.word	0x0800bc45
 800bc14:	0800bc45 	.word	0x0800bc45
 800bc18:	0800bc45 	.word	0x0800bc45
 800bc1c:	0800bc45 	.word	0x0800bc45
 800bc20:	0800bc45 	.word	0x0800bc45
 800bc24:	0800bc45 	.word	0x0800bc45
 800bc28:	0800bc45 	.word	0x0800bc45
 800bc2c:	0800bc45 	.word	0x0800bc45
 800bc30:	0800bc45 	.word	0x0800bc45
 800bc34:	0800bc45 	.word	0x0800bc45
 800bc38:	0800bc45 	.word	0x0800bc45
 800bc3c:	0800bc45 	.word	0x0800bc45
 800bc40:	0800bc45 	.word	0x0800bc45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc44:	bf00      	nop
  }

  return (USBD_OK);
 800bc46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	4805      	ldr	r0, [pc, #20]	@ (800bc78 <CDC_Receive_FS+0x24>)
 800bc62:	f7fe fb8d 	bl	800a380 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc66:	4804      	ldr	r0, [pc, #16]	@ (800bc78 <CDC_Receive_FS+0x24>)
 800bc68:	f7fe fbe8 	bl	800a43c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20000f00 	.word	0x20000f00

0800bc7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc8c:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc4 <CDC_Transmit_FS+0x48>)
 800bc8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e00b      	b.n	800bcba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bca2:	887b      	ldrh	r3, [r7, #2]
 800bca4:	461a      	mov	r2, r3
 800bca6:	6879      	ldr	r1, [r7, #4]
 800bca8:	4806      	ldr	r0, [pc, #24]	@ (800bcc4 <CDC_Transmit_FS+0x48>)
 800bcaa:	f7fe fb47 	bl	800a33c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bcae:	4805      	ldr	r0, [pc, #20]	@ (800bcc4 <CDC_Transmit_FS+0x48>)
 800bcb0:	f7fe fb84 	bl	800a3bc <USBD_CDC_TransmitPacket>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20000f00 	.word	0x20000f00

0800bcc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bcda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	371c      	adds	r7, #28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <_write>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int _write(int file, char *data, int len)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b084      	sub	sp, #16
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	60f8      	str	r0, [r7, #12]
 800bcf2:	60b9      	str	r1, [r7, #8]
 800bcf4:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*)data, len);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	68b8      	ldr	r0, [r7, #8]
 800bcfe:	f7ff ffbd 	bl	800bc7c <CDC_Transmit_FS>
    return len;
 800bd02:	687b      	ldr	r3, [r7, #4]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	6039      	str	r1, [r7, #0]
 800bd16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2212      	movs	r2, #18
 800bd1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd1e:	4b03      	ldr	r3, [pc, #12]	@ (800bd2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	200001bc 	.word	0x200001bc

0800bd30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	6039      	str	r1, [r7, #0]
 800bd3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	2204      	movs	r2, #4
 800bd40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd42:	4b03      	ldr	r3, [pc, #12]	@ (800bd50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	200001dc 	.word	0x200001dc

0800bd54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	6039      	str	r1, [r7, #0]
 800bd5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd60:	79fb      	ldrb	r3, [r7, #7]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d105      	bne.n	800bd72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	4907      	ldr	r1, [pc, #28]	@ (800bd88 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd6a:	4808      	ldr	r0, [pc, #32]	@ (800bd8c <USBD_FS_ProductStrDescriptor+0x38>)
 800bd6c:	f7ff fddc 	bl	800b928 <USBD_GetString>
 800bd70:	e004      	b.n	800bd7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4904      	ldr	r1, [pc, #16]	@ (800bd88 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd76:	4805      	ldr	r0, [pc, #20]	@ (800bd8c <USBD_FS_ProductStrDescriptor+0x38>)
 800bd78:	f7ff fdd6 	bl	800b928 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd7c:	4b02      	ldr	r3, [pc, #8]	@ (800bd88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	200021dc 	.word	0x200021dc
 800bd8c:	080108dc 	.word	0x080108dc

0800bd90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	6039      	str	r1, [r7, #0]
 800bd9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	4904      	ldr	r1, [pc, #16]	@ (800bdb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bda0:	4804      	ldr	r0, [pc, #16]	@ (800bdb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bda2:	f7ff fdc1 	bl	800b928 <USBD_GetString>
  return USBD_StrDesc;
 800bda6:	4b02      	ldr	r3, [pc, #8]	@ (800bdb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	200021dc 	.word	0x200021dc
 800bdb4:	080108f4 	.word	0x080108f4

0800bdb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	6039      	str	r1, [r7, #0]
 800bdc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	221a      	movs	r2, #26
 800bdc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdca:	f000 f855 	bl	800be78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdce:	4b02      	ldr	r3, [pc, #8]	@ (800bdd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	200001e0 	.word	0x200001e0

0800bddc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	6039      	str	r1, [r7, #0]
 800bde6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bde8:	79fb      	ldrb	r3, [r7, #7]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d105      	bne.n	800bdfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	4907      	ldr	r1, [pc, #28]	@ (800be10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdf2:	4808      	ldr	r0, [pc, #32]	@ (800be14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdf4:	f7ff fd98 	bl	800b928 <USBD_GetString>
 800bdf8:	e004      	b.n	800be04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	4904      	ldr	r1, [pc, #16]	@ (800be10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdfe:	4805      	ldr	r0, [pc, #20]	@ (800be14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be00:	f7ff fd92 	bl	800b928 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be04:	4b02      	ldr	r3, [pc, #8]	@ (800be10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	200021dc 	.word	0x200021dc
 800be14:	08010908 	.word	0x08010908

0800be18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	6039      	str	r1, [r7, #0]
 800be22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be24:	79fb      	ldrb	r3, [r7, #7]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d105      	bne.n	800be36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	4907      	ldr	r1, [pc, #28]	@ (800be4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be2e:	4808      	ldr	r0, [pc, #32]	@ (800be50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be30:	f7ff fd7a 	bl	800b928 <USBD_GetString>
 800be34:	e004      	b.n	800be40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	4904      	ldr	r1, [pc, #16]	@ (800be4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be3a:	4805      	ldr	r0, [pc, #20]	@ (800be50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be3c:	f7ff fd74 	bl	800b928 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be40:	4b02      	ldr	r3, [pc, #8]	@ (800be4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be42:	4618      	mov	r0, r3
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	200021dc 	.word	0x200021dc
 800be50:	08010914 	.word	0x08010914

0800be54 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	6039      	str	r1, [r7, #0]
 800be5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	220c      	movs	r2, #12
 800be64:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800be66:	4b03      	ldr	r3, [pc, #12]	@ (800be74 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800be68:	4618      	mov	r0, r3
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	200001d0 	.word	0x200001d0

0800be78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be7e:	4b0f      	ldr	r3, [pc, #60]	@ (800bebc <Get_SerialNum+0x44>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be84:	4b0e      	ldr	r3, [pc, #56]	@ (800bec0 <Get_SerialNum+0x48>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bec4 <Get_SerialNum+0x4c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4413      	add	r3, r2
 800be96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d009      	beq.n	800beb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be9e:	2208      	movs	r2, #8
 800bea0:	4909      	ldr	r1, [pc, #36]	@ (800bec8 <Get_SerialNum+0x50>)
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 f814 	bl	800bed0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bea8:	2204      	movs	r2, #4
 800beaa:	4908      	ldr	r1, [pc, #32]	@ (800becc <Get_SerialNum+0x54>)
 800beac:	68b8      	ldr	r0, [r7, #8]
 800beae:	f000 f80f 	bl	800bed0 <IntToUnicode>
  }
}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	1fff7590 	.word	0x1fff7590
 800bec0:	1fff7594 	.word	0x1fff7594
 800bec4:	1fff7598 	.word	0x1fff7598
 800bec8:	200001e2 	.word	0x200001e2
 800becc:	200001f2 	.word	0x200001f2

0800bed0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	4613      	mov	r3, r2
 800bedc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bee2:	2300      	movs	r3, #0
 800bee4:	75fb      	strb	r3, [r7, #23]
 800bee6:	e027      	b.n	800bf38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	0f1b      	lsrs	r3, r3, #28
 800beec:	2b09      	cmp	r3, #9
 800beee:	d80b      	bhi.n	800bf08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	0f1b      	lsrs	r3, r3, #28
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	4619      	mov	r1, r3
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	440b      	add	r3, r1
 800bf00:	3230      	adds	r2, #48	@ 0x30
 800bf02:	b2d2      	uxtb	r2, r2
 800bf04:	701a      	strb	r2, [r3, #0]
 800bf06:	e00a      	b.n	800bf1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	0f1b      	lsrs	r3, r3, #28
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	4619      	mov	r1, r3
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	440b      	add	r3, r1
 800bf18:	3237      	adds	r2, #55	@ 0x37
 800bf1a:	b2d2      	uxtb	r2, r2
 800bf1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	011b      	lsls	r3, r3, #4
 800bf22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
 800bf26:	005b      	lsls	r3, r3, #1
 800bf28:	3301      	adds	r3, #1
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	2200      	movs	r2, #0
 800bf30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf32:	7dfb      	ldrb	r3, [r7, #23]
 800bf34:	3301      	adds	r3, #1
 800bf36:	75fb      	strb	r3, [r7, #23]
 800bf38:	7dfa      	ldrb	r2, [r7, #23]
 800bf3a:	79fb      	ldrb	r3, [r7, #7]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d3d3      	bcc.n	800bee8 <IntToUnicode+0x18>
  }
}
 800bf40:	bf00      	nop
 800bf42:	bf00      	nop
 800bf44:	371c      	adds	r7, #28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
	...

0800bf50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b0ac      	sub	sp, #176	@ 0xb0
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	601a      	str	r2, [r3, #0]
 800bf60:	605a      	str	r2, [r3, #4]
 800bf62:	609a      	str	r2, [r3, #8]
 800bf64:	60da      	str	r2, [r3, #12]
 800bf66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bf68:	f107 0314 	add.w	r3, r7, #20
 800bf6c:	2288      	movs	r2, #136	@ 0x88
 800bf6e:	2100      	movs	r1, #0
 800bf70:	4618      	mov	r0, r3
 800bf72:	f002 f8ee 	bl	800e152 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf7e:	d173      	bne.n	800c068 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bf80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bf84:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800bf86:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800bf8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800bf92:	2301      	movs	r3, #1
 800bf94:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800bf96:	230c      	movs	r3, #12
 800bf98:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800bf9a:	2307      	movs	r3, #7
 800bf9c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800bf9e:	2304      	movs	r3, #4
 800bfa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800bfa6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bfaa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bfac:	f107 0314 	add.w	r3, r7, #20
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7f9 fbed 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800bfbc:	f7f5 ff96 	bl	8001eec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfc0:	4b2b      	ldr	r3, [pc, #172]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800bfc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfc4:	4a2a      	ldr	r2, [pc, #168]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800bfc6:	f043 0301 	orr.w	r3, r3, #1
 800bfca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bfcc:	4b28      	ldr	r3, [pc, #160]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800bfce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	613b      	str	r3, [r7, #16]
 800bfd6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bfd8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bfdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfe0:	2302      	movs	r3, #2
 800bfe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfec:	2303      	movs	r3, #3
 800bfee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bff2:	230a      	movs	r3, #10
 800bff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bff8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800bffc:	4619      	mov	r1, r3
 800bffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c002:	f7f7 f897 	bl	8003134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c006:	4b1a      	ldr	r3, [pc, #104]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800c008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c00a:	4a19      	ldr	r2, [pc, #100]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800c00c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c012:	4b17      	ldr	r3, [pc, #92]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800c014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c01e:	4b14      	ldr	r3, [pc, #80]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800c020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c026:	2b00      	cmp	r3, #0
 800c028:	d114      	bne.n	800c054 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c02a:	4b11      	ldr	r3, [pc, #68]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800c02c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c02e:	4a10      	ldr	r2, [pc, #64]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800c030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c034:	6593      	str	r3, [r2, #88]	@ 0x58
 800c036:	4b0e      	ldr	r3, [pc, #56]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800c038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c03a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c03e:	60bb      	str	r3, [r7, #8]
 800c040:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800c042:	f7f8 fd97 	bl	8004b74 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c046:	4b0a      	ldr	r3, [pc, #40]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800c048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c04a:	4a09      	ldr	r2, [pc, #36]	@ (800c070 <HAL_PCD_MspInit+0x120>)
 800c04c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c050:	6593      	str	r3, [r2, #88]	@ 0x58
 800c052:	e001      	b.n	800c058 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c054:	f7f8 fd8e 	bl	8004b74 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c058:	2200      	movs	r2, #0
 800c05a:	2100      	movs	r1, #0
 800c05c:	2043      	movs	r0, #67	@ 0x43
 800c05e:	f7f6 fe2c 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c062:	2043      	movs	r0, #67	@ 0x43
 800c064:	f7f6 fe45 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c068:	bf00      	nop
 800c06a:	37b0      	adds	r7, #176	@ 0xb0
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	40021000 	.word	0x40021000

0800c074 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c088:	4619      	mov	r1, r3
 800c08a:	4610      	mov	r0, r2
 800c08c:	f7fe fabf 	bl	800a60e <USBD_LL_SetupStage>
}
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c0aa:	78fa      	ldrb	r2, [r7, #3]
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	440b      	add	r3, r1
 800c0b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	78fb      	ldrb	r3, [r7, #3]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	f7fe faf9 	bl	800a6b8 <USBD_LL_DataOutStage>
}
 800c0c6:	bf00      	nop
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c0e0:	78fa      	ldrb	r2, [r7, #3]
 800c0e2:	6879      	ldr	r1, [r7, #4]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	4413      	add	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	440b      	add	r3, r1
 800c0ee:	3320      	adds	r3, #32
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	78fb      	ldrb	r3, [r7, #3]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	f7fe fb92 	bl	800a81e <USBD_LL_DataInStage>
}
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b082      	sub	sp, #8
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe fccc 	bl	800aaae <USBD_LL_SOF>
}
 800c116:	bf00      	nop
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c126:	2301      	movs	r3, #1
 800c128:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	79db      	ldrb	r3, [r3, #7]
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d001      	beq.n	800c136 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c132:	f7f5 fedb 	bl	8001eec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c13c:	7bfa      	ldrb	r2, [r7, #15]
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe fc70 	bl	800aa26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fe fc18 	bl	800a982 <USBD_LL_Reset>
}
 800c152:	bf00      	nop
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	6812      	ldr	r2, [r2, #0]
 800c172:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c176:	f043 0301 	orr.w	r3, r3, #1
 800c17a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c182:	4618      	mov	r0, r3
 800c184:	f7fe fc5f 	bl	800aa46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	7adb      	ldrb	r3, [r3, #11]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c190:	4b04      	ldr	r3, [pc, #16]	@ (800c1a4 <HAL_PCD_SuspendCallback+0x48>)
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	4a03      	ldr	r2, [pc, #12]	@ (800c1a4 <HAL_PCD_SuspendCallback+0x48>)
 800c196:	f043 0306 	orr.w	r3, r3, #6
 800c19a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	e000ed00 	.word	0xe000ed00

0800c1a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	6812      	ldr	r2, [r2, #0]
 800c1be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c1c2:	f023 0301 	bic.w	r3, r3, #1
 800c1c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	7adb      	ldrb	r3, [r3, #11]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d007      	beq.n	800c1e0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1d0:	4b08      	ldr	r3, [pc, #32]	@ (800c1f4 <HAL_PCD_ResumeCallback+0x4c>)
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	4a07      	ldr	r2, [pc, #28]	@ (800c1f4 <HAL_PCD_ResumeCallback+0x4c>)
 800c1d6:	f023 0306 	bic.w	r3, r3, #6
 800c1da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c1dc:	f000 faf6 	bl	800c7cc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe fc49 	bl	800aa7e <USBD_LL_Resume>
}
 800c1ec:	bf00      	nop
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	e000ed00 	.word	0xe000ed00

0800c1f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c20a:	78fa      	ldrb	r2, [r7, #3]
 800c20c:	4611      	mov	r1, r2
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe fc9f 	bl	800ab52 <USBD_LL_IsoOUTIncomplete>
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c22e:	78fa      	ldrb	r2, [r7, #3]
 800c230:	4611      	mov	r1, r2
 800c232:	4618      	mov	r0, r3
 800c234:	f7fe fc5b 	bl	800aaee <USBD_LL_IsoINIncomplete>
}
 800c238:	bf00      	nop
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fe fcb1 	bl	800abb6 <USBD_LL_DevConnected>
}
 800c254:	bf00      	nop
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fe fcae 	bl	800abcc <USBD_LL_DevDisconnected>
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d13c      	bne.n	800c302 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c288:	4a20      	ldr	r2, [pc, #128]	@ (800c30c <USBD_LL_Init+0x94>)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a1e      	ldr	r2, [pc, #120]	@ (800c30c <USBD_LL_Init+0x94>)
 800c294:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c298:	4b1c      	ldr	r3, [pc, #112]	@ (800c30c <USBD_LL_Init+0x94>)
 800c29a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c29e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c2a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2a2:	2206      	movs	r2, #6
 800c2a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c2a6:	4b19      	ldr	r3, [pc, #100]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c2ac:	4b17      	ldr	r3, [pc, #92]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2b2:	4b16      	ldr	r3, [pc, #88]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c2b8:	4b14      	ldr	r3, [pc, #80]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c2be:	4b13      	ldr	r3, [pc, #76]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c2c4:	4b11      	ldr	r3, [pc, #68]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c2ca:	4b10      	ldr	r3, [pc, #64]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c2d0:	4b0e      	ldr	r3, [pc, #56]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c2d6:	480d      	ldr	r0, [pc, #52]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2d8:	f7f7 fa52 	bl	8003780 <HAL_PCD_Init>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c2e2:	f7f5 fe03 	bl	8001eec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c2e6:	2180      	movs	r1, #128	@ 0x80
 800c2e8:	4808      	ldr	r0, [pc, #32]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2ea:	f7f8 fbaa 	bl	8004a42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c2ee:	2240      	movs	r2, #64	@ 0x40
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	4806      	ldr	r0, [pc, #24]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2f4:	f7f8 fb5e 	bl	80049b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c2f8:	2280      	movs	r2, #128	@ 0x80
 800c2fa:	2101      	movs	r1, #1
 800c2fc:	4803      	ldr	r0, [pc, #12]	@ (800c30c <USBD_LL_Init+0x94>)
 800c2fe:	f7f8 fb59 	bl	80049b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	200023dc 	.word	0x200023dc

0800c310 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c326:	4618      	mov	r0, r3
 800c328:	f7f7 fb39 	bl	800399e <HAL_PCD_Start>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	2b03      	cmp	r3, #3
 800c334:	d816      	bhi.n	800c364 <USBD_LL_Start+0x54>
 800c336:	a201      	add	r2, pc, #4	@ (adr r2, 800c33c <USBD_LL_Start+0x2c>)
 800c338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33c:	0800c34d 	.word	0x0800c34d
 800c340:	0800c353 	.word	0x0800c353
 800c344:	0800c359 	.word	0x0800c359
 800c348:	0800c35f 	.word	0x0800c35f
    case HAL_OK :
      usb_status = USBD_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	73fb      	strb	r3, [r7, #15]
    break;
 800c350:	e00b      	b.n	800c36a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c352:	2303      	movs	r3, #3
 800c354:	73fb      	strb	r3, [r7, #15]
    break;
 800c356:	e008      	b.n	800c36a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c358:	2301      	movs	r3, #1
 800c35a:	73fb      	strb	r3, [r7, #15]
    break;
 800c35c:	e005      	b.n	800c36a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c35e:	2303      	movs	r3, #3
 800c360:	73fb      	strb	r3, [r7, #15]
    break;
 800c362:	e002      	b.n	800c36a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c364:	2303      	movs	r3, #3
 800c366:	73fb      	strb	r3, [r7, #15]
    break;
 800c368:	bf00      	nop
  }
  return usb_status;
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	4608      	mov	r0, r1
 800c37e:	4611      	mov	r1, r2
 800c380:	461a      	mov	r2, r3
 800c382:	4603      	mov	r3, r0
 800c384:	70fb      	strb	r3, [r7, #3]
 800c386:	460b      	mov	r3, r1
 800c388:	70bb      	strb	r3, [r7, #2]
 800c38a:	4613      	mov	r3, r2
 800c38c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c39c:	78bb      	ldrb	r3, [r7, #2]
 800c39e:	883a      	ldrh	r2, [r7, #0]
 800c3a0:	78f9      	ldrb	r1, [r7, #3]
 800c3a2:	f7f7 ffe5 	bl	8004370 <HAL_PCD_EP_Open>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c3aa:	7bbb      	ldrb	r3, [r7, #14]
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d817      	bhi.n	800c3e0 <USBD_LL_OpenEP+0x6c>
 800c3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3b8 <USBD_LL_OpenEP+0x44>)
 800c3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b6:	bf00      	nop
 800c3b8:	0800c3c9 	.word	0x0800c3c9
 800c3bc:	0800c3cf 	.word	0x0800c3cf
 800c3c0:	0800c3d5 	.word	0x0800c3d5
 800c3c4:	0800c3db 	.word	0x0800c3db
    case HAL_OK :
      usb_status = USBD_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c3cc:	e00b      	b.n	800c3e6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d2:	e008      	b.n	800c3e6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d8:	e005      	b.n	800c3e6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3de:	e002      	b.n	800c3e6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3e4:	bf00      	nop
  }
  return usb_status;
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c40a:	78fa      	ldrb	r2, [r7, #3]
 800c40c:	4611      	mov	r1, r2
 800c40e:	4618      	mov	r0, r3
 800c410:	f7f8 f818 	bl	8004444 <HAL_PCD_EP_Close>
 800c414:	4603      	mov	r3, r0
 800c416:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c418:	7bbb      	ldrb	r3, [r7, #14]
 800c41a:	2b03      	cmp	r3, #3
 800c41c:	d816      	bhi.n	800c44c <USBD_LL_CloseEP+0x5c>
 800c41e:	a201      	add	r2, pc, #4	@ (adr r2, 800c424 <USBD_LL_CloseEP+0x34>)
 800c420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c424:	0800c435 	.word	0x0800c435
 800c428:	0800c43b 	.word	0x0800c43b
 800c42c:	0800c441 	.word	0x0800c441
 800c430:	0800c447 	.word	0x0800c447
    case HAL_OK :
      usb_status = USBD_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	73fb      	strb	r3, [r7, #15]
    break;
 800c438:	e00b      	b.n	800c452 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c43a:	2303      	movs	r3, #3
 800c43c:	73fb      	strb	r3, [r7, #15]
    break;
 800c43e:	e008      	b.n	800c452 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c440:	2301      	movs	r3, #1
 800c442:	73fb      	strb	r3, [r7, #15]
    break;
 800c444:	e005      	b.n	800c452 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c446:	2303      	movs	r3, #3
 800c448:	73fb      	strb	r3, [r7, #15]
    break;
 800c44a:	e002      	b.n	800c452 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c44c:	2303      	movs	r3, #3
 800c44e:	73fb      	strb	r3, [r7, #15]
    break;
 800c450:	bf00      	nop
  }
  return usb_status;
 800c452:	7bfb      	ldrb	r3, [r7, #15]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	460b      	mov	r3, r1
 800c466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c468:	2300      	movs	r3, #0
 800c46a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c476:	78fa      	ldrb	r2, [r7, #3]
 800c478:	4611      	mov	r1, r2
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7f8 f8a7 	bl	80045ce <HAL_PCD_EP_SetStall>
 800c480:	4603      	mov	r3, r0
 800c482:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	2b03      	cmp	r3, #3
 800c488:	d816      	bhi.n	800c4b8 <USBD_LL_StallEP+0x5c>
 800c48a:	a201      	add	r2, pc, #4	@ (adr r2, 800c490 <USBD_LL_StallEP+0x34>)
 800c48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c490:	0800c4a1 	.word	0x0800c4a1
 800c494:	0800c4a7 	.word	0x0800c4a7
 800c498:	0800c4ad 	.word	0x0800c4ad
 800c49c:	0800c4b3 	.word	0x0800c4b3
    case HAL_OK :
      usb_status = USBD_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a4:	e00b      	b.n	800c4be <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4aa:	e008      	b.n	800c4be <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b0:	e005      	b.n	800c4be <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b6:	e002      	b.n	800c4be <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c4bc:	bf00      	nop
  }
  return usb_status;
 800c4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4e2:	78fa      	ldrb	r2, [r7, #3]
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7f8 f8d3 	bl	8004692 <HAL_PCD_EP_ClrStall>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c4f0:	7bbb      	ldrb	r3, [r7, #14]
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d816      	bhi.n	800c524 <USBD_LL_ClearStallEP+0x5c>
 800c4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4fc <USBD_LL_ClearStallEP+0x34>)
 800c4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fc:	0800c50d 	.word	0x0800c50d
 800c500:	0800c513 	.word	0x0800c513
 800c504:	0800c519 	.word	0x0800c519
 800c508:	0800c51f 	.word	0x0800c51f
    case HAL_OK :
      usb_status = USBD_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	73fb      	strb	r3, [r7, #15]
    break;
 800c510:	e00b      	b.n	800c52a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c512:	2303      	movs	r3, #3
 800c514:	73fb      	strb	r3, [r7, #15]
    break;
 800c516:	e008      	b.n	800c52a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c518:	2301      	movs	r3, #1
 800c51a:	73fb      	strb	r3, [r7, #15]
    break;
 800c51c:	e005      	b.n	800c52a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c51e:	2303      	movs	r3, #3
 800c520:	73fb      	strb	r3, [r7, #15]
    break;
 800c522:	e002      	b.n	800c52a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c524:	2303      	movs	r3, #3
 800c526:	73fb      	strb	r3, [r7, #15]
    break;
 800c528:	bf00      	nop
  }
  return usb_status;
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	460b      	mov	r3, r1
 800c53e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c546:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	da0b      	bge.n	800c568 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c556:	68f9      	ldr	r1, [r7, #12]
 800c558:	4613      	mov	r3, r2
 800c55a:	00db      	lsls	r3, r3, #3
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	440b      	add	r3, r1
 800c562:	3316      	adds	r3, #22
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	e00b      	b.n	800c580 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c568:	78fb      	ldrb	r3, [r7, #3]
 800c56a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c56e:	68f9      	ldr	r1, [r7, #12]
 800c570:	4613      	mov	r3, r2
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	4413      	add	r3, r2
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	440b      	add	r3, r1
 800c57a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c57e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c580:	4618      	mov	r0, r3
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	460b      	mov	r3, r1
 800c596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c598:	2300      	movs	r3, #0
 800c59a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5a6:	78fa      	ldrb	r2, [r7, #3]
 800c5a8:	4611      	mov	r1, r2
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7f7 febc 	bl	8004328 <HAL_PCD_SetAddress>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c5b4:	7bbb      	ldrb	r3, [r7, #14]
 800c5b6:	2b03      	cmp	r3, #3
 800c5b8:	d816      	bhi.n	800c5e8 <USBD_LL_SetUSBAddress+0x5c>
 800c5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c0 <USBD_LL_SetUSBAddress+0x34>)
 800c5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c0:	0800c5d1 	.word	0x0800c5d1
 800c5c4:	0800c5d7 	.word	0x0800c5d7
 800c5c8:	0800c5dd 	.word	0x0800c5dd
 800c5cc:	0800c5e3 	.word	0x0800c5e3
    case HAL_OK :
      usb_status = USBD_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d4:	e00b      	b.n	800c5ee <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5d6:	2303      	movs	r3, #3
 800c5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5da:	e008      	b.n	800c5ee <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e0:	e005      	b.n	800c5ee <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e6:	e002      	b.n	800c5ee <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ec:	bf00      	nop
  }
  return usb_status;
 800c5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	607a      	str	r2, [r7, #4]
 800c602:	603b      	str	r3, [r7, #0]
 800c604:	460b      	mov	r3, r1
 800c606:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c616:	7af9      	ldrb	r1, [r7, #11]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	f7f7 ffa6 	bl	800456c <HAL_PCD_EP_Transmit>
 800c620:	4603      	mov	r3, r0
 800c622:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c624:	7dbb      	ldrb	r3, [r7, #22]
 800c626:	2b03      	cmp	r3, #3
 800c628:	d816      	bhi.n	800c658 <USBD_LL_Transmit+0x60>
 800c62a:	a201      	add	r2, pc, #4	@ (adr r2, 800c630 <USBD_LL_Transmit+0x38>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c641 	.word	0x0800c641
 800c634:	0800c647 	.word	0x0800c647
 800c638:	0800c64d 	.word	0x0800c64d
 800c63c:	0800c653 	.word	0x0800c653
    case HAL_OK :
      usb_status = USBD_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	75fb      	strb	r3, [r7, #23]
    break;
 800c644:	e00b      	b.n	800c65e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c646:	2303      	movs	r3, #3
 800c648:	75fb      	strb	r3, [r7, #23]
    break;
 800c64a:	e008      	b.n	800c65e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c64c:	2301      	movs	r3, #1
 800c64e:	75fb      	strb	r3, [r7, #23]
    break;
 800c650:	e005      	b.n	800c65e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c652:	2303      	movs	r3, #3
 800c654:	75fb      	strb	r3, [r7, #23]
    break;
 800c656:	e002      	b.n	800c65e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c658:	2303      	movs	r3, #3
 800c65a:	75fb      	strb	r3, [r7, #23]
    break;
 800c65c:	bf00      	nop
  }
  return usb_status;
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3718      	adds	r7, #24
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b086      	sub	sp, #24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	607a      	str	r2, [r7, #4]
 800c672:	603b      	str	r3, [r7, #0]
 800c674:	460b      	mov	r3, r1
 800c676:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c678:	2300      	movs	r3, #0
 800c67a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c686:	7af9      	ldrb	r1, [r7, #11]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	f7f7 ff24 	bl	80044d8 <HAL_PCD_EP_Receive>
 800c690:	4603      	mov	r3, r0
 800c692:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c694:	7dbb      	ldrb	r3, [r7, #22]
 800c696:	2b03      	cmp	r3, #3
 800c698:	d816      	bhi.n	800c6c8 <USBD_LL_PrepareReceive+0x60>
 800c69a:	a201      	add	r2, pc, #4	@ (adr r2, 800c6a0 <USBD_LL_PrepareReceive+0x38>)
 800c69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a0:	0800c6b1 	.word	0x0800c6b1
 800c6a4:	0800c6b7 	.word	0x0800c6b7
 800c6a8:	0800c6bd 	.word	0x0800c6bd
 800c6ac:	0800c6c3 	.word	0x0800c6c3
    case HAL_OK :
      usb_status = USBD_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	75fb      	strb	r3, [r7, #23]
    break;
 800c6b4:	e00b      	b.n	800c6ce <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	75fb      	strb	r3, [r7, #23]
    break;
 800c6ba:	e008      	b.n	800c6ce <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	75fb      	strb	r3, [r7, #23]
    break;
 800c6c0:	e005      	b.n	800c6ce <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	75fb      	strb	r3, [r7, #23]
    break;
 800c6c6:	e002      	b.n	800c6ce <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	75fb      	strb	r3, [r7, #23]
    break;
 800c6cc:	bf00      	nop
  }
  return usb_status;
 800c6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6ea:	78fa      	ldrb	r2, [r7, #3]
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7f7 ff24 	bl	800453c <HAL_PCD_EP_GetRxCount>
 800c6f4:	4603      	mov	r3, r0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
	...

0800c700 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	460b      	mov	r3, r1
 800c70a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c70c:	78fb      	ldrb	r3, [r7, #3]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <HAL_PCDEx_LPM_Callback+0x18>
 800c712:	2b01      	cmp	r3, #1
 800c714:	d01f      	beq.n	800c756 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c716:	e03b      	b.n	800c790 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	7adb      	ldrb	r3, [r3, #11]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d007      	beq.n	800c730 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c720:	f000 f854 	bl	800c7cc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c724:	4b1c      	ldr	r3, [pc, #112]	@ (800c798 <HAL_PCDEx_LPM_Callback+0x98>)
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	4a1b      	ldr	r2, [pc, #108]	@ (800c798 <HAL_PCDEx_LPM_Callback+0x98>)
 800c72a:	f023 0306 	bic.w	r3, r3, #6
 800c72e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	6812      	ldr	r2, [r2, #0]
 800c73e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c742:	f023 0301 	bic.w	r3, r3, #1
 800c746:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fe f995 	bl	800aa7e <USBD_LL_Resume>
    break;
 800c754:	e01c      	b.n	800c790 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	6812      	ldr	r2, [r2, #0]
 800c764:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c768:	f043 0301 	orr.w	r3, r3, #1
 800c76c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c774:	4618      	mov	r0, r3
 800c776:	f7fe f966 	bl	800aa46 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	7adb      	ldrb	r3, [r3, #11]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d005      	beq.n	800c78e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c782:	4b05      	ldr	r3, [pc, #20]	@ (800c798 <HAL_PCDEx_LPM_Callback+0x98>)
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	4a04      	ldr	r2, [pc, #16]	@ (800c798 <HAL_PCDEx_LPM_Callback+0x98>)
 800c788:	f043 0306 	orr.w	r3, r3, #6
 800c78c:	6113      	str	r3, [r2, #16]
    break;
 800c78e:	bf00      	nop
}
 800c790:	bf00      	nop
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	e000ed00 	.word	0xe000ed00

0800c79c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c7a4:	4b03      	ldr	r3, [pc, #12]	@ (800c7b4 <USBD_static_malloc+0x18>)
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	370c      	adds	r7, #12
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	200028c0 	.word	0x200028c0

0800c7b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]

}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c7d0:	f7f4 fec0 	bl	8001554 <SystemClock_Config>
}
 800c7d4:	bf00      	nop
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <atof>:
 800c7d8:	2100      	movs	r1, #0
 800c7da:	f000 bebd 	b.w	800d558 <strtod>

0800c7de <atoi>:
 800c7de:	220a      	movs	r2, #10
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	f000 bf3f 	b.w	800d664 <strtol>
	...

0800c7e8 <malloc>:
 800c7e8:	4b02      	ldr	r3, [pc, #8]	@ (800c7f4 <malloc+0xc>)
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	6818      	ldr	r0, [r3, #0]
 800c7ee:	f000 b825 	b.w	800c83c <_malloc_r>
 800c7f2:	bf00      	nop
 800c7f4:	20000374 	.word	0x20000374

0800c7f8 <sbrk_aligned>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	4e0f      	ldr	r6, [pc, #60]	@ (800c838 <sbrk_aligned+0x40>)
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	6831      	ldr	r1, [r6, #0]
 800c800:	4605      	mov	r5, r0
 800c802:	b911      	cbnz	r1, 800c80a <sbrk_aligned+0x12>
 800c804:	f001 fd84 	bl	800e310 <_sbrk_r>
 800c808:	6030      	str	r0, [r6, #0]
 800c80a:	4621      	mov	r1, r4
 800c80c:	4628      	mov	r0, r5
 800c80e:	f001 fd7f 	bl	800e310 <_sbrk_r>
 800c812:	1c43      	adds	r3, r0, #1
 800c814:	d103      	bne.n	800c81e <sbrk_aligned+0x26>
 800c816:	f04f 34ff 	mov.w	r4, #4294967295
 800c81a:	4620      	mov	r0, r4
 800c81c:	bd70      	pop	{r4, r5, r6, pc}
 800c81e:	1cc4      	adds	r4, r0, #3
 800c820:	f024 0403 	bic.w	r4, r4, #3
 800c824:	42a0      	cmp	r0, r4
 800c826:	d0f8      	beq.n	800c81a <sbrk_aligned+0x22>
 800c828:	1a21      	subs	r1, r4, r0
 800c82a:	4628      	mov	r0, r5
 800c82c:	f001 fd70 	bl	800e310 <_sbrk_r>
 800c830:	3001      	adds	r0, #1
 800c832:	d1f2      	bne.n	800c81a <sbrk_aligned+0x22>
 800c834:	e7ef      	b.n	800c816 <sbrk_aligned+0x1e>
 800c836:	bf00      	nop
 800c838:	20002ae0 	.word	0x20002ae0

0800c83c <_malloc_r>:
 800c83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c840:	1ccd      	adds	r5, r1, #3
 800c842:	f025 0503 	bic.w	r5, r5, #3
 800c846:	3508      	adds	r5, #8
 800c848:	2d0c      	cmp	r5, #12
 800c84a:	bf38      	it	cc
 800c84c:	250c      	movcc	r5, #12
 800c84e:	2d00      	cmp	r5, #0
 800c850:	4606      	mov	r6, r0
 800c852:	db01      	blt.n	800c858 <_malloc_r+0x1c>
 800c854:	42a9      	cmp	r1, r5
 800c856:	d904      	bls.n	800c862 <_malloc_r+0x26>
 800c858:	230c      	movs	r3, #12
 800c85a:	6033      	str	r3, [r6, #0]
 800c85c:	2000      	movs	r0, #0
 800c85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c862:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c938 <_malloc_r+0xfc>
 800c866:	f000 f869 	bl	800c93c <__malloc_lock>
 800c86a:	f8d8 3000 	ldr.w	r3, [r8]
 800c86e:	461c      	mov	r4, r3
 800c870:	bb44      	cbnz	r4, 800c8c4 <_malloc_r+0x88>
 800c872:	4629      	mov	r1, r5
 800c874:	4630      	mov	r0, r6
 800c876:	f7ff ffbf 	bl	800c7f8 <sbrk_aligned>
 800c87a:	1c43      	adds	r3, r0, #1
 800c87c:	4604      	mov	r4, r0
 800c87e:	d158      	bne.n	800c932 <_malloc_r+0xf6>
 800c880:	f8d8 4000 	ldr.w	r4, [r8]
 800c884:	4627      	mov	r7, r4
 800c886:	2f00      	cmp	r7, #0
 800c888:	d143      	bne.n	800c912 <_malloc_r+0xd6>
 800c88a:	2c00      	cmp	r4, #0
 800c88c:	d04b      	beq.n	800c926 <_malloc_r+0xea>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	4639      	mov	r1, r7
 800c892:	4630      	mov	r0, r6
 800c894:	eb04 0903 	add.w	r9, r4, r3
 800c898:	f001 fd3a 	bl	800e310 <_sbrk_r>
 800c89c:	4581      	cmp	r9, r0
 800c89e:	d142      	bne.n	800c926 <_malloc_r+0xea>
 800c8a0:	6821      	ldr	r1, [r4, #0]
 800c8a2:	1a6d      	subs	r5, r5, r1
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f7ff ffa6 	bl	800c7f8 <sbrk_aligned>
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	d03a      	beq.n	800c926 <_malloc_r+0xea>
 800c8b0:	6823      	ldr	r3, [r4, #0]
 800c8b2:	442b      	add	r3, r5
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c8ba:	685a      	ldr	r2, [r3, #4]
 800c8bc:	bb62      	cbnz	r2, 800c918 <_malloc_r+0xdc>
 800c8be:	f8c8 7000 	str.w	r7, [r8]
 800c8c2:	e00f      	b.n	800c8e4 <_malloc_r+0xa8>
 800c8c4:	6822      	ldr	r2, [r4, #0]
 800c8c6:	1b52      	subs	r2, r2, r5
 800c8c8:	d420      	bmi.n	800c90c <_malloc_r+0xd0>
 800c8ca:	2a0b      	cmp	r2, #11
 800c8cc:	d917      	bls.n	800c8fe <_malloc_r+0xc2>
 800c8ce:	1961      	adds	r1, r4, r5
 800c8d0:	42a3      	cmp	r3, r4
 800c8d2:	6025      	str	r5, [r4, #0]
 800c8d4:	bf18      	it	ne
 800c8d6:	6059      	strne	r1, [r3, #4]
 800c8d8:	6863      	ldr	r3, [r4, #4]
 800c8da:	bf08      	it	eq
 800c8dc:	f8c8 1000 	streq.w	r1, [r8]
 800c8e0:	5162      	str	r2, [r4, r5]
 800c8e2:	604b      	str	r3, [r1, #4]
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f000 f82f 	bl	800c948 <__malloc_unlock>
 800c8ea:	f104 000b 	add.w	r0, r4, #11
 800c8ee:	1d23      	adds	r3, r4, #4
 800c8f0:	f020 0007 	bic.w	r0, r0, #7
 800c8f4:	1ac2      	subs	r2, r0, r3
 800c8f6:	bf1c      	itt	ne
 800c8f8:	1a1b      	subne	r3, r3, r0
 800c8fa:	50a3      	strne	r3, [r4, r2]
 800c8fc:	e7af      	b.n	800c85e <_malloc_r+0x22>
 800c8fe:	6862      	ldr	r2, [r4, #4]
 800c900:	42a3      	cmp	r3, r4
 800c902:	bf0c      	ite	eq
 800c904:	f8c8 2000 	streq.w	r2, [r8]
 800c908:	605a      	strne	r2, [r3, #4]
 800c90a:	e7eb      	b.n	800c8e4 <_malloc_r+0xa8>
 800c90c:	4623      	mov	r3, r4
 800c90e:	6864      	ldr	r4, [r4, #4]
 800c910:	e7ae      	b.n	800c870 <_malloc_r+0x34>
 800c912:	463c      	mov	r4, r7
 800c914:	687f      	ldr	r7, [r7, #4]
 800c916:	e7b6      	b.n	800c886 <_malloc_r+0x4a>
 800c918:	461a      	mov	r2, r3
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	42a3      	cmp	r3, r4
 800c91e:	d1fb      	bne.n	800c918 <_malloc_r+0xdc>
 800c920:	2300      	movs	r3, #0
 800c922:	6053      	str	r3, [r2, #4]
 800c924:	e7de      	b.n	800c8e4 <_malloc_r+0xa8>
 800c926:	230c      	movs	r3, #12
 800c928:	6033      	str	r3, [r6, #0]
 800c92a:	4630      	mov	r0, r6
 800c92c:	f000 f80c 	bl	800c948 <__malloc_unlock>
 800c930:	e794      	b.n	800c85c <_malloc_r+0x20>
 800c932:	6005      	str	r5, [r0, #0]
 800c934:	e7d6      	b.n	800c8e4 <_malloc_r+0xa8>
 800c936:	bf00      	nop
 800c938:	20002ae4 	.word	0x20002ae4

0800c93c <__malloc_lock>:
 800c93c:	4801      	ldr	r0, [pc, #4]	@ (800c944 <__malloc_lock+0x8>)
 800c93e:	f001 bd34 	b.w	800e3aa <__retarget_lock_acquire_recursive>
 800c942:	bf00      	nop
 800c944:	20002c28 	.word	0x20002c28

0800c948 <__malloc_unlock>:
 800c948:	4801      	ldr	r0, [pc, #4]	@ (800c950 <__malloc_unlock+0x8>)
 800c94a:	f001 bd2f 	b.w	800e3ac <__retarget_lock_release_recursive>
 800c94e:	bf00      	nop
 800c950:	20002c28 	.word	0x20002c28

0800c954 <sulp>:
 800c954:	b570      	push	{r4, r5, r6, lr}
 800c956:	4604      	mov	r4, r0
 800c958:	460d      	mov	r5, r1
 800c95a:	ec45 4b10 	vmov	d0, r4, r5
 800c95e:	4616      	mov	r6, r2
 800c960:	f003 fab8 	bl	800fed4 <__ulp>
 800c964:	ec51 0b10 	vmov	r0, r1, d0
 800c968:	b17e      	cbz	r6, 800c98a <sulp+0x36>
 800c96a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c96e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c972:	2b00      	cmp	r3, #0
 800c974:	dd09      	ble.n	800c98a <sulp+0x36>
 800c976:	051b      	lsls	r3, r3, #20
 800c978:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c97c:	2400      	movs	r4, #0
 800c97e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c982:	4622      	mov	r2, r4
 800c984:	462b      	mov	r3, r5
 800c986:	f7f3 fe47 	bl	8000618 <__aeabi_dmul>
 800c98a:	ec41 0b10 	vmov	d0, r0, r1
 800c98e:	bd70      	pop	{r4, r5, r6, pc}

0800c990 <_strtod_l>:
 800c990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c994:	b09f      	sub	sp, #124	@ 0x7c
 800c996:	460c      	mov	r4, r1
 800c998:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c99a:	2200      	movs	r2, #0
 800c99c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c99e:	9005      	str	r0, [sp, #20]
 800c9a0:	f04f 0a00 	mov.w	sl, #0
 800c9a4:	f04f 0b00 	mov.w	fp, #0
 800c9a8:	460a      	mov	r2, r1
 800c9aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9ac:	7811      	ldrb	r1, [r2, #0]
 800c9ae:	292b      	cmp	r1, #43	@ 0x2b
 800c9b0:	d04a      	beq.n	800ca48 <_strtod_l+0xb8>
 800c9b2:	d838      	bhi.n	800ca26 <_strtod_l+0x96>
 800c9b4:	290d      	cmp	r1, #13
 800c9b6:	d832      	bhi.n	800ca1e <_strtod_l+0x8e>
 800c9b8:	2908      	cmp	r1, #8
 800c9ba:	d832      	bhi.n	800ca22 <_strtod_l+0x92>
 800c9bc:	2900      	cmp	r1, #0
 800c9be:	d03b      	beq.n	800ca38 <_strtod_l+0xa8>
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c9c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c9c6:	782a      	ldrb	r2, [r5, #0]
 800c9c8:	2a30      	cmp	r2, #48	@ 0x30
 800c9ca:	f040 80b2 	bne.w	800cb32 <_strtod_l+0x1a2>
 800c9ce:	786a      	ldrb	r2, [r5, #1]
 800c9d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c9d4:	2a58      	cmp	r2, #88	@ 0x58
 800c9d6:	d16e      	bne.n	800cab6 <_strtod_l+0x126>
 800c9d8:	9302      	str	r3, [sp, #8]
 800c9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	ab1a      	add	r3, sp, #104	@ 0x68
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	4a8f      	ldr	r2, [pc, #572]	@ (800cc20 <_strtod_l+0x290>)
 800c9e4:	9805      	ldr	r0, [sp, #20]
 800c9e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c9e8:	a919      	add	r1, sp, #100	@ 0x64
 800c9ea:	f002 fc23 	bl	800f234 <__gethex>
 800c9ee:	f010 060f 	ands.w	r6, r0, #15
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	d005      	beq.n	800ca02 <_strtod_l+0x72>
 800c9f6:	2e06      	cmp	r6, #6
 800c9f8:	d128      	bne.n	800ca4c <_strtod_l+0xbc>
 800c9fa:	3501      	adds	r5, #1
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800ca00:	930e      	str	r3, [sp, #56]	@ 0x38
 800ca02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f040 858e 	bne.w	800d526 <_strtod_l+0xb96>
 800ca0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca0c:	b1cb      	cbz	r3, 800ca42 <_strtod_l+0xb2>
 800ca0e:	4652      	mov	r2, sl
 800ca10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ca14:	ec43 2b10 	vmov	d0, r2, r3
 800ca18:	b01f      	add	sp, #124	@ 0x7c
 800ca1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1e:	2920      	cmp	r1, #32
 800ca20:	d1ce      	bne.n	800c9c0 <_strtod_l+0x30>
 800ca22:	3201      	adds	r2, #1
 800ca24:	e7c1      	b.n	800c9aa <_strtod_l+0x1a>
 800ca26:	292d      	cmp	r1, #45	@ 0x2d
 800ca28:	d1ca      	bne.n	800c9c0 <_strtod_l+0x30>
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	910e      	str	r1, [sp, #56]	@ 0x38
 800ca2e:	1c51      	adds	r1, r2, #1
 800ca30:	9119      	str	r1, [sp, #100]	@ 0x64
 800ca32:	7852      	ldrb	r2, [r2, #1]
 800ca34:	2a00      	cmp	r2, #0
 800ca36:	d1c5      	bne.n	800c9c4 <_strtod_l+0x34>
 800ca38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca3a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f040 8570 	bne.w	800d522 <_strtod_l+0xb92>
 800ca42:	4652      	mov	r2, sl
 800ca44:	465b      	mov	r3, fp
 800ca46:	e7e5      	b.n	800ca14 <_strtod_l+0x84>
 800ca48:	2100      	movs	r1, #0
 800ca4a:	e7ef      	b.n	800ca2c <_strtod_l+0x9c>
 800ca4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ca4e:	b13a      	cbz	r2, 800ca60 <_strtod_l+0xd0>
 800ca50:	2135      	movs	r1, #53	@ 0x35
 800ca52:	a81c      	add	r0, sp, #112	@ 0x70
 800ca54:	f003 fb38 	bl	80100c8 <__copybits>
 800ca58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca5a:	9805      	ldr	r0, [sp, #20]
 800ca5c:	f002 ff0e 	bl	800f87c <_Bfree>
 800ca60:	3e01      	subs	r6, #1
 800ca62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ca64:	2e04      	cmp	r6, #4
 800ca66:	d806      	bhi.n	800ca76 <_strtod_l+0xe6>
 800ca68:	e8df f006 	tbb	[pc, r6]
 800ca6c:	201d0314 	.word	0x201d0314
 800ca70:	14          	.byte	0x14
 800ca71:	00          	.byte	0x00
 800ca72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ca76:	05e1      	lsls	r1, r4, #23
 800ca78:	bf48      	it	mi
 800ca7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ca7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca82:	0d1b      	lsrs	r3, r3, #20
 800ca84:	051b      	lsls	r3, r3, #20
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1bb      	bne.n	800ca02 <_strtod_l+0x72>
 800ca8a:	f001 fc63 	bl	800e354 <__errno>
 800ca8e:	2322      	movs	r3, #34	@ 0x22
 800ca90:	6003      	str	r3, [r0, #0]
 800ca92:	e7b6      	b.n	800ca02 <_strtod_l+0x72>
 800ca94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ca98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ca9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800caa0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800caa4:	e7e7      	b.n	800ca76 <_strtod_l+0xe6>
 800caa6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cc28 <_strtod_l+0x298>
 800caaa:	e7e4      	b.n	800ca76 <_strtod_l+0xe6>
 800caac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cab0:	f04f 3aff 	mov.w	sl, #4294967295
 800cab4:	e7df      	b.n	800ca76 <_strtod_l+0xe6>
 800cab6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cab8:	1c5a      	adds	r2, r3, #1
 800caba:	9219      	str	r2, [sp, #100]	@ 0x64
 800cabc:	785b      	ldrb	r3, [r3, #1]
 800cabe:	2b30      	cmp	r3, #48	@ 0x30
 800cac0:	d0f9      	beq.n	800cab6 <_strtod_l+0x126>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d09d      	beq.n	800ca02 <_strtod_l+0x72>
 800cac6:	2301      	movs	r3, #1
 800cac8:	2700      	movs	r7, #0
 800caca:	9308      	str	r3, [sp, #32]
 800cacc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cace:	930c      	str	r3, [sp, #48]	@ 0x30
 800cad0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cad2:	46b9      	mov	r9, r7
 800cad4:	220a      	movs	r2, #10
 800cad6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cad8:	7805      	ldrb	r5, [r0, #0]
 800cada:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cade:	b2d9      	uxtb	r1, r3
 800cae0:	2909      	cmp	r1, #9
 800cae2:	d928      	bls.n	800cb36 <_strtod_l+0x1a6>
 800cae4:	494f      	ldr	r1, [pc, #316]	@ (800cc24 <_strtod_l+0x294>)
 800cae6:	2201      	movs	r2, #1
 800cae8:	f001 fb58 	bl	800e19c <strncmp>
 800caec:	2800      	cmp	r0, #0
 800caee:	d032      	beq.n	800cb56 <_strtod_l+0x1c6>
 800caf0:	2000      	movs	r0, #0
 800caf2:	462a      	mov	r2, r5
 800caf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800caf6:	464d      	mov	r5, r9
 800caf8:	4603      	mov	r3, r0
 800cafa:	2a65      	cmp	r2, #101	@ 0x65
 800cafc:	d001      	beq.n	800cb02 <_strtod_l+0x172>
 800cafe:	2a45      	cmp	r2, #69	@ 0x45
 800cb00:	d114      	bne.n	800cb2c <_strtod_l+0x19c>
 800cb02:	b91d      	cbnz	r5, 800cb0c <_strtod_l+0x17c>
 800cb04:	9a08      	ldr	r2, [sp, #32]
 800cb06:	4302      	orrs	r2, r0
 800cb08:	d096      	beq.n	800ca38 <_strtod_l+0xa8>
 800cb0a:	2500      	movs	r5, #0
 800cb0c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cb0e:	1c62      	adds	r2, r4, #1
 800cb10:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb12:	7862      	ldrb	r2, [r4, #1]
 800cb14:	2a2b      	cmp	r2, #43	@ 0x2b
 800cb16:	d07a      	beq.n	800cc0e <_strtod_l+0x27e>
 800cb18:	2a2d      	cmp	r2, #45	@ 0x2d
 800cb1a:	d07e      	beq.n	800cc1a <_strtod_l+0x28a>
 800cb1c:	f04f 0c00 	mov.w	ip, #0
 800cb20:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cb24:	2909      	cmp	r1, #9
 800cb26:	f240 8085 	bls.w	800cc34 <_strtod_l+0x2a4>
 800cb2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb2c:	f04f 0800 	mov.w	r8, #0
 800cb30:	e0a5      	b.n	800cc7e <_strtod_l+0x2ee>
 800cb32:	2300      	movs	r3, #0
 800cb34:	e7c8      	b.n	800cac8 <_strtod_l+0x138>
 800cb36:	f1b9 0f08 	cmp.w	r9, #8
 800cb3a:	bfd8      	it	le
 800cb3c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cb3e:	f100 0001 	add.w	r0, r0, #1
 800cb42:	bfda      	itte	le
 800cb44:	fb02 3301 	mlale	r3, r2, r1, r3
 800cb48:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800cb4a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800cb4e:	f109 0901 	add.w	r9, r9, #1
 800cb52:	9019      	str	r0, [sp, #100]	@ 0x64
 800cb54:	e7bf      	b.n	800cad6 <_strtod_l+0x146>
 800cb56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb5c:	785a      	ldrb	r2, [r3, #1]
 800cb5e:	f1b9 0f00 	cmp.w	r9, #0
 800cb62:	d03b      	beq.n	800cbdc <_strtod_l+0x24c>
 800cb64:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb66:	464d      	mov	r5, r9
 800cb68:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cb6c:	2b09      	cmp	r3, #9
 800cb6e:	d912      	bls.n	800cb96 <_strtod_l+0x206>
 800cb70:	2301      	movs	r3, #1
 800cb72:	e7c2      	b.n	800cafa <_strtod_l+0x16a>
 800cb74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb7a:	785a      	ldrb	r2, [r3, #1]
 800cb7c:	3001      	adds	r0, #1
 800cb7e:	2a30      	cmp	r2, #48	@ 0x30
 800cb80:	d0f8      	beq.n	800cb74 <_strtod_l+0x1e4>
 800cb82:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cb86:	2b08      	cmp	r3, #8
 800cb88:	f200 84d2 	bhi.w	800d530 <_strtod_l+0xba0>
 800cb8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb8e:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb90:	2000      	movs	r0, #0
 800cb92:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb94:	4605      	mov	r5, r0
 800cb96:	3a30      	subs	r2, #48	@ 0x30
 800cb98:	f100 0301 	add.w	r3, r0, #1
 800cb9c:	d018      	beq.n	800cbd0 <_strtod_l+0x240>
 800cb9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cba0:	4419      	add	r1, r3
 800cba2:	910a      	str	r1, [sp, #40]	@ 0x28
 800cba4:	462e      	mov	r6, r5
 800cba6:	f04f 0e0a 	mov.w	lr, #10
 800cbaa:	1c71      	adds	r1, r6, #1
 800cbac:	eba1 0c05 	sub.w	ip, r1, r5
 800cbb0:	4563      	cmp	r3, ip
 800cbb2:	dc15      	bgt.n	800cbe0 <_strtod_l+0x250>
 800cbb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cbb8:	182b      	adds	r3, r5, r0
 800cbba:	2b08      	cmp	r3, #8
 800cbbc:	f105 0501 	add.w	r5, r5, #1
 800cbc0:	4405      	add	r5, r0
 800cbc2:	dc1a      	bgt.n	800cbfa <_strtod_l+0x26a>
 800cbc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cbc6:	230a      	movs	r3, #10
 800cbc8:	fb03 2301 	mla	r3, r3, r1, r2
 800cbcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbce:	2300      	movs	r3, #0
 800cbd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbd2:	1c51      	adds	r1, r2, #1
 800cbd4:	9119      	str	r1, [sp, #100]	@ 0x64
 800cbd6:	7852      	ldrb	r2, [r2, #1]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	e7c5      	b.n	800cb68 <_strtod_l+0x1d8>
 800cbdc:	4648      	mov	r0, r9
 800cbde:	e7ce      	b.n	800cb7e <_strtod_l+0x1ee>
 800cbe0:	2e08      	cmp	r6, #8
 800cbe2:	dc05      	bgt.n	800cbf0 <_strtod_l+0x260>
 800cbe4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cbe6:	fb0e f606 	mul.w	r6, lr, r6
 800cbea:	960b      	str	r6, [sp, #44]	@ 0x2c
 800cbec:	460e      	mov	r6, r1
 800cbee:	e7dc      	b.n	800cbaa <_strtod_l+0x21a>
 800cbf0:	2910      	cmp	r1, #16
 800cbf2:	bfd8      	it	le
 800cbf4:	fb0e f707 	mulle.w	r7, lr, r7
 800cbf8:	e7f8      	b.n	800cbec <_strtod_l+0x25c>
 800cbfa:	2b0f      	cmp	r3, #15
 800cbfc:	bfdc      	itt	le
 800cbfe:	230a      	movle	r3, #10
 800cc00:	fb03 2707 	mlale	r7, r3, r7, r2
 800cc04:	e7e3      	b.n	800cbce <_strtod_l+0x23e>
 800cc06:	2300      	movs	r3, #0
 800cc08:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e77a      	b.n	800cb04 <_strtod_l+0x174>
 800cc0e:	f04f 0c00 	mov.w	ip, #0
 800cc12:	1ca2      	adds	r2, r4, #2
 800cc14:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc16:	78a2      	ldrb	r2, [r4, #2]
 800cc18:	e782      	b.n	800cb20 <_strtod_l+0x190>
 800cc1a:	f04f 0c01 	mov.w	ip, #1
 800cc1e:	e7f8      	b.n	800cc12 <_strtod_l+0x282>
 800cc20:	08010bac 	.word	0x08010bac
 800cc24:	0801096c 	.word	0x0801096c
 800cc28:	7ff00000 	.word	0x7ff00000
 800cc2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc2e:	1c51      	adds	r1, r2, #1
 800cc30:	9119      	str	r1, [sp, #100]	@ 0x64
 800cc32:	7852      	ldrb	r2, [r2, #1]
 800cc34:	2a30      	cmp	r2, #48	@ 0x30
 800cc36:	d0f9      	beq.n	800cc2c <_strtod_l+0x29c>
 800cc38:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cc3c:	2908      	cmp	r1, #8
 800cc3e:	f63f af75 	bhi.w	800cb2c <_strtod_l+0x19c>
 800cc42:	3a30      	subs	r2, #48	@ 0x30
 800cc44:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc48:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cc4a:	f04f 080a 	mov.w	r8, #10
 800cc4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc50:	1c56      	adds	r6, r2, #1
 800cc52:	9619      	str	r6, [sp, #100]	@ 0x64
 800cc54:	7852      	ldrb	r2, [r2, #1]
 800cc56:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cc5a:	f1be 0f09 	cmp.w	lr, #9
 800cc5e:	d939      	bls.n	800ccd4 <_strtod_l+0x344>
 800cc60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cc62:	1a76      	subs	r6, r6, r1
 800cc64:	2e08      	cmp	r6, #8
 800cc66:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cc6a:	dc03      	bgt.n	800cc74 <_strtod_l+0x2e4>
 800cc6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc6e:	4588      	cmp	r8, r1
 800cc70:	bfa8      	it	ge
 800cc72:	4688      	movge	r8, r1
 800cc74:	f1bc 0f00 	cmp.w	ip, #0
 800cc78:	d001      	beq.n	800cc7e <_strtod_l+0x2ee>
 800cc7a:	f1c8 0800 	rsb	r8, r8, #0
 800cc7e:	2d00      	cmp	r5, #0
 800cc80:	d14e      	bne.n	800cd20 <_strtod_l+0x390>
 800cc82:	9908      	ldr	r1, [sp, #32]
 800cc84:	4308      	orrs	r0, r1
 800cc86:	f47f aebc 	bne.w	800ca02 <_strtod_l+0x72>
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f47f aed4 	bne.w	800ca38 <_strtod_l+0xa8>
 800cc90:	2a69      	cmp	r2, #105	@ 0x69
 800cc92:	d028      	beq.n	800cce6 <_strtod_l+0x356>
 800cc94:	dc25      	bgt.n	800cce2 <_strtod_l+0x352>
 800cc96:	2a49      	cmp	r2, #73	@ 0x49
 800cc98:	d025      	beq.n	800cce6 <_strtod_l+0x356>
 800cc9a:	2a4e      	cmp	r2, #78	@ 0x4e
 800cc9c:	f47f aecc 	bne.w	800ca38 <_strtod_l+0xa8>
 800cca0:	499a      	ldr	r1, [pc, #616]	@ (800cf0c <_strtod_l+0x57c>)
 800cca2:	a819      	add	r0, sp, #100	@ 0x64
 800cca4:	f002 fce8 	bl	800f678 <__match>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	f43f aec5 	beq.w	800ca38 <_strtod_l+0xa8>
 800ccae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b28      	cmp	r3, #40	@ 0x28
 800ccb4:	d12e      	bne.n	800cd14 <_strtod_l+0x384>
 800ccb6:	4996      	ldr	r1, [pc, #600]	@ (800cf10 <_strtod_l+0x580>)
 800ccb8:	aa1c      	add	r2, sp, #112	@ 0x70
 800ccba:	a819      	add	r0, sp, #100	@ 0x64
 800ccbc:	f002 fcf0 	bl	800f6a0 <__hexnan>
 800ccc0:	2805      	cmp	r0, #5
 800ccc2:	d127      	bne.n	800cd14 <_strtod_l+0x384>
 800ccc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ccc6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ccca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ccce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ccd2:	e696      	b.n	800ca02 <_strtod_l+0x72>
 800ccd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccd6:	fb08 2101 	mla	r1, r8, r1, r2
 800ccda:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ccde:	9209      	str	r2, [sp, #36]	@ 0x24
 800cce0:	e7b5      	b.n	800cc4e <_strtod_l+0x2be>
 800cce2:	2a6e      	cmp	r2, #110	@ 0x6e
 800cce4:	e7da      	b.n	800cc9c <_strtod_l+0x30c>
 800cce6:	498b      	ldr	r1, [pc, #556]	@ (800cf14 <_strtod_l+0x584>)
 800cce8:	a819      	add	r0, sp, #100	@ 0x64
 800ccea:	f002 fcc5 	bl	800f678 <__match>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	f43f aea2 	beq.w	800ca38 <_strtod_l+0xa8>
 800ccf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccf6:	4988      	ldr	r1, [pc, #544]	@ (800cf18 <_strtod_l+0x588>)
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	a819      	add	r0, sp, #100	@ 0x64
 800ccfc:	9319      	str	r3, [sp, #100]	@ 0x64
 800ccfe:	f002 fcbb 	bl	800f678 <__match>
 800cd02:	b910      	cbnz	r0, 800cd0a <_strtod_l+0x37a>
 800cd04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd06:	3301      	adds	r3, #1
 800cd08:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd0a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800cf28 <_strtod_l+0x598>
 800cd0e:	f04f 0a00 	mov.w	sl, #0
 800cd12:	e676      	b.n	800ca02 <_strtod_l+0x72>
 800cd14:	4881      	ldr	r0, [pc, #516]	@ (800cf1c <_strtod_l+0x58c>)
 800cd16:	f001 fb5b 	bl	800e3d0 <nan>
 800cd1a:	ec5b ab10 	vmov	sl, fp, d0
 800cd1e:	e670      	b.n	800ca02 <_strtod_l+0x72>
 800cd20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd22:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cd24:	eba8 0303 	sub.w	r3, r8, r3
 800cd28:	f1b9 0f00 	cmp.w	r9, #0
 800cd2c:	bf08      	it	eq
 800cd2e:	46a9      	moveq	r9, r5
 800cd30:	2d10      	cmp	r5, #16
 800cd32:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd34:	462c      	mov	r4, r5
 800cd36:	bfa8      	it	ge
 800cd38:	2410      	movge	r4, #16
 800cd3a:	f7f3 fbf3 	bl	8000524 <__aeabi_ui2d>
 800cd3e:	2d09      	cmp	r5, #9
 800cd40:	4682      	mov	sl, r0
 800cd42:	468b      	mov	fp, r1
 800cd44:	dc13      	bgt.n	800cd6e <_strtod_l+0x3de>
 800cd46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f43f ae5a 	beq.w	800ca02 <_strtod_l+0x72>
 800cd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd50:	dd78      	ble.n	800ce44 <_strtod_l+0x4b4>
 800cd52:	2b16      	cmp	r3, #22
 800cd54:	dc5f      	bgt.n	800ce16 <_strtod_l+0x486>
 800cd56:	4972      	ldr	r1, [pc, #456]	@ (800cf20 <_strtod_l+0x590>)
 800cd58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd60:	4652      	mov	r2, sl
 800cd62:	465b      	mov	r3, fp
 800cd64:	f7f3 fc58 	bl	8000618 <__aeabi_dmul>
 800cd68:	4682      	mov	sl, r0
 800cd6a:	468b      	mov	fp, r1
 800cd6c:	e649      	b.n	800ca02 <_strtod_l+0x72>
 800cd6e:	4b6c      	ldr	r3, [pc, #432]	@ (800cf20 <_strtod_l+0x590>)
 800cd70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cd78:	f7f3 fc4e 	bl	8000618 <__aeabi_dmul>
 800cd7c:	4682      	mov	sl, r0
 800cd7e:	4638      	mov	r0, r7
 800cd80:	468b      	mov	fp, r1
 800cd82:	f7f3 fbcf 	bl	8000524 <__aeabi_ui2d>
 800cd86:	4602      	mov	r2, r0
 800cd88:	460b      	mov	r3, r1
 800cd8a:	4650      	mov	r0, sl
 800cd8c:	4659      	mov	r1, fp
 800cd8e:	f7f3 fa8d 	bl	80002ac <__adddf3>
 800cd92:	2d0f      	cmp	r5, #15
 800cd94:	4682      	mov	sl, r0
 800cd96:	468b      	mov	fp, r1
 800cd98:	ddd5      	ble.n	800cd46 <_strtod_l+0x3b6>
 800cd9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9c:	1b2c      	subs	r4, r5, r4
 800cd9e:	441c      	add	r4, r3
 800cda0:	2c00      	cmp	r4, #0
 800cda2:	f340 8093 	ble.w	800cecc <_strtod_l+0x53c>
 800cda6:	f014 030f 	ands.w	r3, r4, #15
 800cdaa:	d00a      	beq.n	800cdc2 <_strtod_l+0x432>
 800cdac:	495c      	ldr	r1, [pc, #368]	@ (800cf20 <_strtod_l+0x590>)
 800cdae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cdb2:	4652      	mov	r2, sl
 800cdb4:	465b      	mov	r3, fp
 800cdb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdba:	f7f3 fc2d 	bl	8000618 <__aeabi_dmul>
 800cdbe:	4682      	mov	sl, r0
 800cdc0:	468b      	mov	fp, r1
 800cdc2:	f034 040f 	bics.w	r4, r4, #15
 800cdc6:	d073      	beq.n	800ceb0 <_strtod_l+0x520>
 800cdc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cdcc:	dd49      	ble.n	800ce62 <_strtod_l+0x4d2>
 800cdce:	2400      	movs	r4, #0
 800cdd0:	46a0      	mov	r8, r4
 800cdd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cdd4:	46a1      	mov	r9, r4
 800cdd6:	9a05      	ldr	r2, [sp, #20]
 800cdd8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800cf28 <_strtod_l+0x598>
 800cddc:	2322      	movs	r3, #34	@ 0x22
 800cdde:	6013      	str	r3, [r2, #0]
 800cde0:	f04f 0a00 	mov.w	sl, #0
 800cde4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f43f ae0b 	beq.w	800ca02 <_strtod_l+0x72>
 800cdec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdee:	9805      	ldr	r0, [sp, #20]
 800cdf0:	f002 fd44 	bl	800f87c <_Bfree>
 800cdf4:	9805      	ldr	r0, [sp, #20]
 800cdf6:	4649      	mov	r1, r9
 800cdf8:	f002 fd40 	bl	800f87c <_Bfree>
 800cdfc:	9805      	ldr	r0, [sp, #20]
 800cdfe:	4641      	mov	r1, r8
 800ce00:	f002 fd3c 	bl	800f87c <_Bfree>
 800ce04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce06:	9805      	ldr	r0, [sp, #20]
 800ce08:	f002 fd38 	bl	800f87c <_Bfree>
 800ce0c:	9805      	ldr	r0, [sp, #20]
 800ce0e:	4621      	mov	r1, r4
 800ce10:	f002 fd34 	bl	800f87c <_Bfree>
 800ce14:	e5f5      	b.n	800ca02 <_strtod_l+0x72>
 800ce16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	dbbc      	blt.n	800cd9a <_strtod_l+0x40a>
 800ce20:	4c3f      	ldr	r4, [pc, #252]	@ (800cf20 <_strtod_l+0x590>)
 800ce22:	f1c5 050f 	rsb	r5, r5, #15
 800ce26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ce2a:	4652      	mov	r2, sl
 800ce2c:	465b      	mov	r3, fp
 800ce2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce32:	f7f3 fbf1 	bl	8000618 <__aeabi_dmul>
 800ce36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce38:	1b5d      	subs	r5, r3, r5
 800ce3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ce3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce42:	e78f      	b.n	800cd64 <_strtod_l+0x3d4>
 800ce44:	3316      	adds	r3, #22
 800ce46:	dba8      	blt.n	800cd9a <_strtod_l+0x40a>
 800ce48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce4a:	eba3 0808 	sub.w	r8, r3, r8
 800ce4e:	4b34      	ldr	r3, [pc, #208]	@ (800cf20 <_strtod_l+0x590>)
 800ce50:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ce54:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ce58:	4650      	mov	r0, sl
 800ce5a:	4659      	mov	r1, fp
 800ce5c:	f7f3 fd06 	bl	800086c <__aeabi_ddiv>
 800ce60:	e782      	b.n	800cd68 <_strtod_l+0x3d8>
 800ce62:	2300      	movs	r3, #0
 800ce64:	4f2f      	ldr	r7, [pc, #188]	@ (800cf24 <_strtod_l+0x594>)
 800ce66:	1124      	asrs	r4, r4, #4
 800ce68:	4650      	mov	r0, sl
 800ce6a:	4659      	mov	r1, fp
 800ce6c:	461e      	mov	r6, r3
 800ce6e:	2c01      	cmp	r4, #1
 800ce70:	dc21      	bgt.n	800ceb6 <_strtod_l+0x526>
 800ce72:	b10b      	cbz	r3, 800ce78 <_strtod_l+0x4e8>
 800ce74:	4682      	mov	sl, r0
 800ce76:	468b      	mov	fp, r1
 800ce78:	492a      	ldr	r1, [pc, #168]	@ (800cf24 <_strtod_l+0x594>)
 800ce7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ce7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ce82:	4652      	mov	r2, sl
 800ce84:	465b      	mov	r3, fp
 800ce86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce8a:	f7f3 fbc5 	bl	8000618 <__aeabi_dmul>
 800ce8e:	4b26      	ldr	r3, [pc, #152]	@ (800cf28 <_strtod_l+0x598>)
 800ce90:	460a      	mov	r2, r1
 800ce92:	400b      	ands	r3, r1
 800ce94:	4925      	ldr	r1, [pc, #148]	@ (800cf2c <_strtod_l+0x59c>)
 800ce96:	428b      	cmp	r3, r1
 800ce98:	4682      	mov	sl, r0
 800ce9a:	d898      	bhi.n	800cdce <_strtod_l+0x43e>
 800ce9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cea0:	428b      	cmp	r3, r1
 800cea2:	bf86      	itte	hi
 800cea4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800cf30 <_strtod_l+0x5a0>
 800cea8:	f04f 3aff 	movhi.w	sl, #4294967295
 800ceac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	9308      	str	r3, [sp, #32]
 800ceb4:	e076      	b.n	800cfa4 <_strtod_l+0x614>
 800ceb6:	07e2      	lsls	r2, r4, #31
 800ceb8:	d504      	bpl.n	800cec4 <_strtod_l+0x534>
 800ceba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cebe:	f7f3 fbab 	bl	8000618 <__aeabi_dmul>
 800cec2:	2301      	movs	r3, #1
 800cec4:	3601      	adds	r6, #1
 800cec6:	1064      	asrs	r4, r4, #1
 800cec8:	3708      	adds	r7, #8
 800ceca:	e7d0      	b.n	800ce6e <_strtod_l+0x4de>
 800cecc:	d0f0      	beq.n	800ceb0 <_strtod_l+0x520>
 800cece:	4264      	negs	r4, r4
 800ced0:	f014 020f 	ands.w	r2, r4, #15
 800ced4:	d00a      	beq.n	800ceec <_strtod_l+0x55c>
 800ced6:	4b12      	ldr	r3, [pc, #72]	@ (800cf20 <_strtod_l+0x590>)
 800ced8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cedc:	4650      	mov	r0, sl
 800cede:	4659      	mov	r1, fp
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f7f3 fcc2 	bl	800086c <__aeabi_ddiv>
 800cee8:	4682      	mov	sl, r0
 800ceea:	468b      	mov	fp, r1
 800ceec:	1124      	asrs	r4, r4, #4
 800ceee:	d0df      	beq.n	800ceb0 <_strtod_l+0x520>
 800cef0:	2c1f      	cmp	r4, #31
 800cef2:	dd1f      	ble.n	800cf34 <_strtod_l+0x5a4>
 800cef4:	2400      	movs	r4, #0
 800cef6:	46a0      	mov	r8, r4
 800cef8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cefa:	46a1      	mov	r9, r4
 800cefc:	9a05      	ldr	r2, [sp, #20]
 800cefe:	2322      	movs	r3, #34	@ 0x22
 800cf00:	f04f 0a00 	mov.w	sl, #0
 800cf04:	f04f 0b00 	mov.w	fp, #0
 800cf08:	6013      	str	r3, [r2, #0]
 800cf0a:	e76b      	b.n	800cde4 <_strtod_l+0x454>
 800cf0c:	0801097b 	.word	0x0801097b
 800cf10:	08010b98 	.word	0x08010b98
 800cf14:	08010973 	.word	0x08010973
 800cf18:	08010a5a 	.word	0x08010a5a
 800cf1c:	08010a56 	.word	0x08010a56
 800cf20:	08010d20 	.word	0x08010d20
 800cf24:	08010cf8 	.word	0x08010cf8
 800cf28:	7ff00000 	.word	0x7ff00000
 800cf2c:	7ca00000 	.word	0x7ca00000
 800cf30:	7fefffff 	.word	0x7fefffff
 800cf34:	f014 0310 	ands.w	r3, r4, #16
 800cf38:	bf18      	it	ne
 800cf3a:	236a      	movne	r3, #106	@ 0x6a
 800cf3c:	4ea9      	ldr	r6, [pc, #676]	@ (800d1e4 <_strtod_l+0x854>)
 800cf3e:	9308      	str	r3, [sp, #32]
 800cf40:	4650      	mov	r0, sl
 800cf42:	4659      	mov	r1, fp
 800cf44:	2300      	movs	r3, #0
 800cf46:	07e7      	lsls	r7, r4, #31
 800cf48:	d504      	bpl.n	800cf54 <_strtod_l+0x5c4>
 800cf4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf4e:	f7f3 fb63 	bl	8000618 <__aeabi_dmul>
 800cf52:	2301      	movs	r3, #1
 800cf54:	1064      	asrs	r4, r4, #1
 800cf56:	f106 0608 	add.w	r6, r6, #8
 800cf5a:	d1f4      	bne.n	800cf46 <_strtod_l+0x5b6>
 800cf5c:	b10b      	cbz	r3, 800cf62 <_strtod_l+0x5d2>
 800cf5e:	4682      	mov	sl, r0
 800cf60:	468b      	mov	fp, r1
 800cf62:	9b08      	ldr	r3, [sp, #32]
 800cf64:	b1b3      	cbz	r3, 800cf94 <_strtod_l+0x604>
 800cf66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cf6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	4659      	mov	r1, fp
 800cf72:	dd0f      	ble.n	800cf94 <_strtod_l+0x604>
 800cf74:	2b1f      	cmp	r3, #31
 800cf76:	dd56      	ble.n	800d026 <_strtod_l+0x696>
 800cf78:	2b34      	cmp	r3, #52	@ 0x34
 800cf7a:	bfde      	ittt	le
 800cf7c:	f04f 33ff 	movle.w	r3, #4294967295
 800cf80:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cf84:	4093      	lslle	r3, r2
 800cf86:	f04f 0a00 	mov.w	sl, #0
 800cf8a:	bfcc      	ite	gt
 800cf8c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cf90:	ea03 0b01 	andle.w	fp, r3, r1
 800cf94:	2200      	movs	r2, #0
 800cf96:	2300      	movs	r3, #0
 800cf98:	4650      	mov	r0, sl
 800cf9a:	4659      	mov	r1, fp
 800cf9c:	f7f3 fda4 	bl	8000ae8 <__aeabi_dcmpeq>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d1a7      	bne.n	800cef4 <_strtod_l+0x564>
 800cfa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cfaa:	9805      	ldr	r0, [sp, #20]
 800cfac:	462b      	mov	r3, r5
 800cfae:	464a      	mov	r2, r9
 800cfb0:	f002 fccc 	bl	800f94c <__s2b>
 800cfb4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	f43f af09 	beq.w	800cdce <_strtod_l+0x43e>
 800cfbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	eba3 0308 	sub.w	r3, r3, r8
 800cfc6:	bfa8      	it	ge
 800cfc8:	2300      	movge	r3, #0
 800cfca:	9312      	str	r3, [sp, #72]	@ 0x48
 800cfcc:	2400      	movs	r4, #0
 800cfce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cfd2:	9316      	str	r3, [sp, #88]	@ 0x58
 800cfd4:	46a0      	mov	r8, r4
 800cfd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfd8:	9805      	ldr	r0, [sp, #20]
 800cfda:	6859      	ldr	r1, [r3, #4]
 800cfdc:	f002 fc0e 	bl	800f7fc <_Balloc>
 800cfe0:	4681      	mov	r9, r0
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	f43f aef7 	beq.w	800cdd6 <_strtod_l+0x446>
 800cfe8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfea:	691a      	ldr	r2, [r3, #16]
 800cfec:	3202      	adds	r2, #2
 800cfee:	f103 010c 	add.w	r1, r3, #12
 800cff2:	0092      	lsls	r2, r2, #2
 800cff4:	300c      	adds	r0, #12
 800cff6:	f001 f9da 	bl	800e3ae <memcpy>
 800cffa:	ec4b ab10 	vmov	d0, sl, fp
 800cffe:	9805      	ldr	r0, [sp, #20]
 800d000:	aa1c      	add	r2, sp, #112	@ 0x70
 800d002:	a91b      	add	r1, sp, #108	@ 0x6c
 800d004:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d008:	f002 ffd4 	bl	800ffb4 <__d2b>
 800d00c:	901a      	str	r0, [sp, #104]	@ 0x68
 800d00e:	2800      	cmp	r0, #0
 800d010:	f43f aee1 	beq.w	800cdd6 <_strtod_l+0x446>
 800d014:	9805      	ldr	r0, [sp, #20]
 800d016:	2101      	movs	r1, #1
 800d018:	f002 fd2e 	bl	800fa78 <__i2b>
 800d01c:	4680      	mov	r8, r0
 800d01e:	b948      	cbnz	r0, 800d034 <_strtod_l+0x6a4>
 800d020:	f04f 0800 	mov.w	r8, #0
 800d024:	e6d7      	b.n	800cdd6 <_strtod_l+0x446>
 800d026:	f04f 32ff 	mov.w	r2, #4294967295
 800d02a:	fa02 f303 	lsl.w	r3, r2, r3
 800d02e:	ea03 0a0a 	and.w	sl, r3, sl
 800d032:	e7af      	b.n	800cf94 <_strtod_l+0x604>
 800d034:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d036:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d038:	2d00      	cmp	r5, #0
 800d03a:	bfab      	itete	ge
 800d03c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d03e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d040:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d042:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d044:	bfac      	ite	ge
 800d046:	18ef      	addge	r7, r5, r3
 800d048:	1b5e      	sublt	r6, r3, r5
 800d04a:	9b08      	ldr	r3, [sp, #32]
 800d04c:	1aed      	subs	r5, r5, r3
 800d04e:	4415      	add	r5, r2
 800d050:	4b65      	ldr	r3, [pc, #404]	@ (800d1e8 <_strtod_l+0x858>)
 800d052:	3d01      	subs	r5, #1
 800d054:	429d      	cmp	r5, r3
 800d056:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d05a:	da50      	bge.n	800d0fe <_strtod_l+0x76e>
 800d05c:	1b5b      	subs	r3, r3, r5
 800d05e:	2b1f      	cmp	r3, #31
 800d060:	eba2 0203 	sub.w	r2, r2, r3
 800d064:	f04f 0101 	mov.w	r1, #1
 800d068:	dc3d      	bgt.n	800d0e6 <_strtod_l+0x756>
 800d06a:	fa01 f303 	lsl.w	r3, r1, r3
 800d06e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d070:	2300      	movs	r3, #0
 800d072:	9310      	str	r3, [sp, #64]	@ 0x40
 800d074:	18bd      	adds	r5, r7, r2
 800d076:	9b08      	ldr	r3, [sp, #32]
 800d078:	42af      	cmp	r7, r5
 800d07a:	4416      	add	r6, r2
 800d07c:	441e      	add	r6, r3
 800d07e:	463b      	mov	r3, r7
 800d080:	bfa8      	it	ge
 800d082:	462b      	movge	r3, r5
 800d084:	42b3      	cmp	r3, r6
 800d086:	bfa8      	it	ge
 800d088:	4633      	movge	r3, r6
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	bfc2      	ittt	gt
 800d08e:	1aed      	subgt	r5, r5, r3
 800d090:	1af6      	subgt	r6, r6, r3
 800d092:	1aff      	subgt	r7, r7, r3
 800d094:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d096:	2b00      	cmp	r3, #0
 800d098:	dd16      	ble.n	800d0c8 <_strtod_l+0x738>
 800d09a:	4641      	mov	r1, r8
 800d09c:	9805      	ldr	r0, [sp, #20]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f002 fda2 	bl	800fbe8 <__pow5mult>
 800d0a4:	4680      	mov	r8, r0
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d0ba      	beq.n	800d020 <_strtod_l+0x690>
 800d0aa:	4601      	mov	r1, r0
 800d0ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d0ae:	9805      	ldr	r0, [sp, #20]
 800d0b0:	f002 fcf8 	bl	800faa4 <__multiply>
 800d0b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	f43f ae8d 	beq.w	800cdd6 <_strtod_l+0x446>
 800d0bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0be:	9805      	ldr	r0, [sp, #20]
 800d0c0:	f002 fbdc 	bl	800f87c <_Bfree>
 800d0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0c8:	2d00      	cmp	r5, #0
 800d0ca:	dc1d      	bgt.n	800d108 <_strtod_l+0x778>
 800d0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	dd23      	ble.n	800d11a <_strtod_l+0x78a>
 800d0d2:	4649      	mov	r1, r9
 800d0d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d0d6:	9805      	ldr	r0, [sp, #20]
 800d0d8:	f002 fd86 	bl	800fbe8 <__pow5mult>
 800d0dc:	4681      	mov	r9, r0
 800d0de:	b9e0      	cbnz	r0, 800d11a <_strtod_l+0x78a>
 800d0e0:	f04f 0900 	mov.w	r9, #0
 800d0e4:	e677      	b.n	800cdd6 <_strtod_l+0x446>
 800d0e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d0ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d0ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d0f2:	35e2      	adds	r5, #226	@ 0xe2
 800d0f4:	fa01 f305 	lsl.w	r3, r1, r5
 800d0f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d0fc:	e7ba      	b.n	800d074 <_strtod_l+0x6e4>
 800d0fe:	2300      	movs	r3, #0
 800d100:	9310      	str	r3, [sp, #64]	@ 0x40
 800d102:	2301      	movs	r3, #1
 800d104:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d106:	e7b5      	b.n	800d074 <_strtod_l+0x6e4>
 800d108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d10a:	9805      	ldr	r0, [sp, #20]
 800d10c:	462a      	mov	r2, r5
 800d10e:	f002 fdc5 	bl	800fc9c <__lshift>
 800d112:	901a      	str	r0, [sp, #104]	@ 0x68
 800d114:	2800      	cmp	r0, #0
 800d116:	d1d9      	bne.n	800d0cc <_strtod_l+0x73c>
 800d118:	e65d      	b.n	800cdd6 <_strtod_l+0x446>
 800d11a:	2e00      	cmp	r6, #0
 800d11c:	dd07      	ble.n	800d12e <_strtod_l+0x79e>
 800d11e:	4649      	mov	r1, r9
 800d120:	9805      	ldr	r0, [sp, #20]
 800d122:	4632      	mov	r2, r6
 800d124:	f002 fdba 	bl	800fc9c <__lshift>
 800d128:	4681      	mov	r9, r0
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d0d8      	beq.n	800d0e0 <_strtod_l+0x750>
 800d12e:	2f00      	cmp	r7, #0
 800d130:	dd08      	ble.n	800d144 <_strtod_l+0x7b4>
 800d132:	4641      	mov	r1, r8
 800d134:	9805      	ldr	r0, [sp, #20]
 800d136:	463a      	mov	r2, r7
 800d138:	f002 fdb0 	bl	800fc9c <__lshift>
 800d13c:	4680      	mov	r8, r0
 800d13e:	2800      	cmp	r0, #0
 800d140:	f43f ae49 	beq.w	800cdd6 <_strtod_l+0x446>
 800d144:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d146:	9805      	ldr	r0, [sp, #20]
 800d148:	464a      	mov	r2, r9
 800d14a:	f002 fe2f 	bl	800fdac <__mdiff>
 800d14e:	4604      	mov	r4, r0
 800d150:	2800      	cmp	r0, #0
 800d152:	f43f ae40 	beq.w	800cdd6 <_strtod_l+0x446>
 800d156:	68c3      	ldr	r3, [r0, #12]
 800d158:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d15a:	2300      	movs	r3, #0
 800d15c:	60c3      	str	r3, [r0, #12]
 800d15e:	4641      	mov	r1, r8
 800d160:	f002 fe08 	bl	800fd74 <__mcmp>
 800d164:	2800      	cmp	r0, #0
 800d166:	da45      	bge.n	800d1f4 <_strtod_l+0x864>
 800d168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d16a:	ea53 030a 	orrs.w	r3, r3, sl
 800d16e:	d16b      	bne.n	800d248 <_strtod_l+0x8b8>
 800d170:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d174:	2b00      	cmp	r3, #0
 800d176:	d167      	bne.n	800d248 <_strtod_l+0x8b8>
 800d178:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d17c:	0d1b      	lsrs	r3, r3, #20
 800d17e:	051b      	lsls	r3, r3, #20
 800d180:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d184:	d960      	bls.n	800d248 <_strtod_l+0x8b8>
 800d186:	6963      	ldr	r3, [r4, #20]
 800d188:	b913      	cbnz	r3, 800d190 <_strtod_l+0x800>
 800d18a:	6923      	ldr	r3, [r4, #16]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	dd5b      	ble.n	800d248 <_strtod_l+0x8b8>
 800d190:	4621      	mov	r1, r4
 800d192:	2201      	movs	r2, #1
 800d194:	9805      	ldr	r0, [sp, #20]
 800d196:	f002 fd81 	bl	800fc9c <__lshift>
 800d19a:	4641      	mov	r1, r8
 800d19c:	4604      	mov	r4, r0
 800d19e:	f002 fde9 	bl	800fd74 <__mcmp>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	dd50      	ble.n	800d248 <_strtod_l+0x8b8>
 800d1a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1aa:	9a08      	ldr	r2, [sp, #32]
 800d1ac:	0d1b      	lsrs	r3, r3, #20
 800d1ae:	051b      	lsls	r3, r3, #20
 800d1b0:	2a00      	cmp	r2, #0
 800d1b2:	d06a      	beq.n	800d28a <_strtod_l+0x8fa>
 800d1b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d1b8:	d867      	bhi.n	800d28a <_strtod_l+0x8fa>
 800d1ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d1be:	f67f ae9d 	bls.w	800cefc <_strtod_l+0x56c>
 800d1c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d1ec <_strtod_l+0x85c>)
 800d1c4:	4650      	mov	r0, sl
 800d1c6:	4659      	mov	r1, fp
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f7f3 fa25 	bl	8000618 <__aeabi_dmul>
 800d1ce:	4b08      	ldr	r3, [pc, #32]	@ (800d1f0 <_strtod_l+0x860>)
 800d1d0:	400b      	ands	r3, r1
 800d1d2:	4682      	mov	sl, r0
 800d1d4:	468b      	mov	fp, r1
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f47f ae08 	bne.w	800cdec <_strtod_l+0x45c>
 800d1dc:	9a05      	ldr	r2, [sp, #20]
 800d1de:	2322      	movs	r3, #34	@ 0x22
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	e603      	b.n	800cdec <_strtod_l+0x45c>
 800d1e4:	08010bc0 	.word	0x08010bc0
 800d1e8:	fffffc02 	.word	0xfffffc02
 800d1ec:	39500000 	.word	0x39500000
 800d1f0:	7ff00000 	.word	0x7ff00000
 800d1f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d1f8:	d165      	bne.n	800d2c6 <_strtod_l+0x936>
 800d1fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d1fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d200:	b35a      	cbz	r2, 800d25a <_strtod_l+0x8ca>
 800d202:	4a9f      	ldr	r2, [pc, #636]	@ (800d480 <_strtod_l+0xaf0>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d12b      	bne.n	800d260 <_strtod_l+0x8d0>
 800d208:	9b08      	ldr	r3, [sp, #32]
 800d20a:	4651      	mov	r1, sl
 800d20c:	b303      	cbz	r3, 800d250 <_strtod_l+0x8c0>
 800d20e:	4b9d      	ldr	r3, [pc, #628]	@ (800d484 <_strtod_l+0xaf4>)
 800d210:	465a      	mov	r2, fp
 800d212:	4013      	ands	r3, r2
 800d214:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d218:	f04f 32ff 	mov.w	r2, #4294967295
 800d21c:	d81b      	bhi.n	800d256 <_strtod_l+0x8c6>
 800d21e:	0d1b      	lsrs	r3, r3, #20
 800d220:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d224:	fa02 f303 	lsl.w	r3, r2, r3
 800d228:	4299      	cmp	r1, r3
 800d22a:	d119      	bne.n	800d260 <_strtod_l+0x8d0>
 800d22c:	4b96      	ldr	r3, [pc, #600]	@ (800d488 <_strtod_l+0xaf8>)
 800d22e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d230:	429a      	cmp	r2, r3
 800d232:	d102      	bne.n	800d23a <_strtod_l+0x8aa>
 800d234:	3101      	adds	r1, #1
 800d236:	f43f adce 	beq.w	800cdd6 <_strtod_l+0x446>
 800d23a:	4b92      	ldr	r3, [pc, #584]	@ (800d484 <_strtod_l+0xaf4>)
 800d23c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d23e:	401a      	ands	r2, r3
 800d240:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d244:	f04f 0a00 	mov.w	sl, #0
 800d248:	9b08      	ldr	r3, [sp, #32]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1b9      	bne.n	800d1c2 <_strtod_l+0x832>
 800d24e:	e5cd      	b.n	800cdec <_strtod_l+0x45c>
 800d250:	f04f 33ff 	mov.w	r3, #4294967295
 800d254:	e7e8      	b.n	800d228 <_strtod_l+0x898>
 800d256:	4613      	mov	r3, r2
 800d258:	e7e6      	b.n	800d228 <_strtod_l+0x898>
 800d25a:	ea53 030a 	orrs.w	r3, r3, sl
 800d25e:	d0a2      	beq.n	800d1a6 <_strtod_l+0x816>
 800d260:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d262:	b1db      	cbz	r3, 800d29c <_strtod_l+0x90c>
 800d264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d266:	4213      	tst	r3, r2
 800d268:	d0ee      	beq.n	800d248 <_strtod_l+0x8b8>
 800d26a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d26c:	9a08      	ldr	r2, [sp, #32]
 800d26e:	4650      	mov	r0, sl
 800d270:	4659      	mov	r1, fp
 800d272:	b1bb      	cbz	r3, 800d2a4 <_strtod_l+0x914>
 800d274:	f7ff fb6e 	bl	800c954 <sulp>
 800d278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d27c:	ec53 2b10 	vmov	r2, r3, d0
 800d280:	f7f3 f814 	bl	80002ac <__adddf3>
 800d284:	4682      	mov	sl, r0
 800d286:	468b      	mov	fp, r1
 800d288:	e7de      	b.n	800d248 <_strtod_l+0x8b8>
 800d28a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d28e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d292:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d296:	f04f 3aff 	mov.w	sl, #4294967295
 800d29a:	e7d5      	b.n	800d248 <_strtod_l+0x8b8>
 800d29c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d29e:	ea13 0f0a 	tst.w	r3, sl
 800d2a2:	e7e1      	b.n	800d268 <_strtod_l+0x8d8>
 800d2a4:	f7ff fb56 	bl	800c954 <sulp>
 800d2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2ac:	ec53 2b10 	vmov	r2, r3, d0
 800d2b0:	f7f2 fffa 	bl	80002a8 <__aeabi_dsub>
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	4682      	mov	sl, r0
 800d2ba:	468b      	mov	fp, r1
 800d2bc:	f7f3 fc14 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	d0c1      	beq.n	800d248 <_strtod_l+0x8b8>
 800d2c4:	e61a      	b.n	800cefc <_strtod_l+0x56c>
 800d2c6:	4641      	mov	r1, r8
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f002 fecb 	bl	8010064 <__ratio>
 800d2ce:	ec57 6b10 	vmov	r6, r7, d0
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d2d8:	4630      	mov	r0, r6
 800d2da:	4639      	mov	r1, r7
 800d2dc:	f7f3 fc18 	bl	8000b10 <__aeabi_dcmple>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d06f      	beq.n	800d3c4 <_strtod_l+0xa34>
 800d2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d17a      	bne.n	800d3e0 <_strtod_l+0xa50>
 800d2ea:	f1ba 0f00 	cmp.w	sl, #0
 800d2ee:	d158      	bne.n	800d3a2 <_strtod_l+0xa12>
 800d2f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d15a      	bne.n	800d3b0 <_strtod_l+0xa20>
 800d2fa:	4b64      	ldr	r3, [pc, #400]	@ (800d48c <_strtod_l+0xafc>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	4630      	mov	r0, r6
 800d300:	4639      	mov	r1, r7
 800d302:	f7f3 fbfb 	bl	8000afc <__aeabi_dcmplt>
 800d306:	2800      	cmp	r0, #0
 800d308:	d159      	bne.n	800d3be <_strtod_l+0xa2e>
 800d30a:	4630      	mov	r0, r6
 800d30c:	4639      	mov	r1, r7
 800d30e:	4b60      	ldr	r3, [pc, #384]	@ (800d490 <_strtod_l+0xb00>)
 800d310:	2200      	movs	r2, #0
 800d312:	f7f3 f981 	bl	8000618 <__aeabi_dmul>
 800d316:	4606      	mov	r6, r0
 800d318:	460f      	mov	r7, r1
 800d31a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d31e:	9606      	str	r6, [sp, #24]
 800d320:	9307      	str	r3, [sp, #28]
 800d322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d326:	4d57      	ldr	r5, [pc, #348]	@ (800d484 <_strtod_l+0xaf4>)
 800d328:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d32e:	401d      	ands	r5, r3
 800d330:	4b58      	ldr	r3, [pc, #352]	@ (800d494 <_strtod_l+0xb04>)
 800d332:	429d      	cmp	r5, r3
 800d334:	f040 80b2 	bne.w	800d49c <_strtod_l+0xb0c>
 800d338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d33a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d33e:	ec4b ab10 	vmov	d0, sl, fp
 800d342:	f002 fdc7 	bl	800fed4 <__ulp>
 800d346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d34a:	ec51 0b10 	vmov	r0, r1, d0
 800d34e:	f7f3 f963 	bl	8000618 <__aeabi_dmul>
 800d352:	4652      	mov	r2, sl
 800d354:	465b      	mov	r3, fp
 800d356:	f7f2 ffa9 	bl	80002ac <__adddf3>
 800d35a:	460b      	mov	r3, r1
 800d35c:	4949      	ldr	r1, [pc, #292]	@ (800d484 <_strtod_l+0xaf4>)
 800d35e:	4a4e      	ldr	r2, [pc, #312]	@ (800d498 <_strtod_l+0xb08>)
 800d360:	4019      	ands	r1, r3
 800d362:	4291      	cmp	r1, r2
 800d364:	4682      	mov	sl, r0
 800d366:	d942      	bls.n	800d3ee <_strtod_l+0xa5e>
 800d368:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d36a:	4b47      	ldr	r3, [pc, #284]	@ (800d488 <_strtod_l+0xaf8>)
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d103      	bne.n	800d378 <_strtod_l+0x9e8>
 800d370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d372:	3301      	adds	r3, #1
 800d374:	f43f ad2f 	beq.w	800cdd6 <_strtod_l+0x446>
 800d378:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d488 <_strtod_l+0xaf8>
 800d37c:	f04f 3aff 	mov.w	sl, #4294967295
 800d380:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d382:	9805      	ldr	r0, [sp, #20]
 800d384:	f002 fa7a 	bl	800f87c <_Bfree>
 800d388:	9805      	ldr	r0, [sp, #20]
 800d38a:	4649      	mov	r1, r9
 800d38c:	f002 fa76 	bl	800f87c <_Bfree>
 800d390:	9805      	ldr	r0, [sp, #20]
 800d392:	4641      	mov	r1, r8
 800d394:	f002 fa72 	bl	800f87c <_Bfree>
 800d398:	9805      	ldr	r0, [sp, #20]
 800d39a:	4621      	mov	r1, r4
 800d39c:	f002 fa6e 	bl	800f87c <_Bfree>
 800d3a0:	e619      	b.n	800cfd6 <_strtod_l+0x646>
 800d3a2:	f1ba 0f01 	cmp.w	sl, #1
 800d3a6:	d103      	bne.n	800d3b0 <_strtod_l+0xa20>
 800d3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f43f ada6 	beq.w	800cefc <_strtod_l+0x56c>
 800d3b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d460 <_strtod_l+0xad0>
 800d3b4:	4f35      	ldr	r7, [pc, #212]	@ (800d48c <_strtod_l+0xafc>)
 800d3b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d3ba:	2600      	movs	r6, #0
 800d3bc:	e7b1      	b.n	800d322 <_strtod_l+0x992>
 800d3be:	4f34      	ldr	r7, [pc, #208]	@ (800d490 <_strtod_l+0xb00>)
 800d3c0:	2600      	movs	r6, #0
 800d3c2:	e7aa      	b.n	800d31a <_strtod_l+0x98a>
 800d3c4:	4b32      	ldr	r3, [pc, #200]	@ (800d490 <_strtod_l+0xb00>)
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	4639      	mov	r1, r7
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f7f3 f924 	bl	8000618 <__aeabi_dmul>
 800d3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	460f      	mov	r7, r1
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d09f      	beq.n	800d31a <_strtod_l+0x98a>
 800d3da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d3de:	e7a0      	b.n	800d322 <_strtod_l+0x992>
 800d3e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d468 <_strtod_l+0xad8>
 800d3e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d3e8:	ec57 6b17 	vmov	r6, r7, d7
 800d3ec:	e799      	b.n	800d322 <_strtod_l+0x992>
 800d3ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d3f2:	9b08      	ldr	r3, [sp, #32]
 800d3f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1c1      	bne.n	800d380 <_strtod_l+0x9f0>
 800d3fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d400:	0d1b      	lsrs	r3, r3, #20
 800d402:	051b      	lsls	r3, r3, #20
 800d404:	429d      	cmp	r5, r3
 800d406:	d1bb      	bne.n	800d380 <_strtod_l+0x9f0>
 800d408:	4630      	mov	r0, r6
 800d40a:	4639      	mov	r1, r7
 800d40c:	f7f3 fc64 	bl	8000cd8 <__aeabi_d2lz>
 800d410:	f7f3 f8d4 	bl	80005bc <__aeabi_l2d>
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	4630      	mov	r0, r6
 800d41a:	4639      	mov	r1, r7
 800d41c:	f7f2 ff44 	bl	80002a8 <__aeabi_dsub>
 800d420:	460b      	mov	r3, r1
 800d422:	4602      	mov	r2, r0
 800d424:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d428:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d42e:	ea46 060a 	orr.w	r6, r6, sl
 800d432:	431e      	orrs	r6, r3
 800d434:	d06f      	beq.n	800d516 <_strtod_l+0xb86>
 800d436:	a30e      	add	r3, pc, #56	@ (adr r3, 800d470 <_strtod_l+0xae0>)
 800d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43c:	f7f3 fb5e 	bl	8000afc <__aeabi_dcmplt>
 800d440:	2800      	cmp	r0, #0
 800d442:	f47f acd3 	bne.w	800cdec <_strtod_l+0x45c>
 800d446:	a30c      	add	r3, pc, #48	@ (adr r3, 800d478 <_strtod_l+0xae8>)
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d450:	f7f3 fb72 	bl	8000b38 <__aeabi_dcmpgt>
 800d454:	2800      	cmp	r0, #0
 800d456:	d093      	beq.n	800d380 <_strtod_l+0x9f0>
 800d458:	e4c8      	b.n	800cdec <_strtod_l+0x45c>
 800d45a:	bf00      	nop
 800d45c:	f3af 8000 	nop.w
 800d460:	00000000 	.word	0x00000000
 800d464:	bff00000 	.word	0xbff00000
 800d468:	00000000 	.word	0x00000000
 800d46c:	3ff00000 	.word	0x3ff00000
 800d470:	94a03595 	.word	0x94a03595
 800d474:	3fdfffff 	.word	0x3fdfffff
 800d478:	35afe535 	.word	0x35afe535
 800d47c:	3fe00000 	.word	0x3fe00000
 800d480:	000fffff 	.word	0x000fffff
 800d484:	7ff00000 	.word	0x7ff00000
 800d488:	7fefffff 	.word	0x7fefffff
 800d48c:	3ff00000 	.word	0x3ff00000
 800d490:	3fe00000 	.word	0x3fe00000
 800d494:	7fe00000 	.word	0x7fe00000
 800d498:	7c9fffff 	.word	0x7c9fffff
 800d49c:	9b08      	ldr	r3, [sp, #32]
 800d49e:	b323      	cbz	r3, 800d4ea <_strtod_l+0xb5a>
 800d4a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d4a4:	d821      	bhi.n	800d4ea <_strtod_l+0xb5a>
 800d4a6:	a328      	add	r3, pc, #160	@ (adr r3, 800d548 <_strtod_l+0xbb8>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	4639      	mov	r1, r7
 800d4b0:	f7f3 fb2e 	bl	8000b10 <__aeabi_dcmple>
 800d4b4:	b1a0      	cbz	r0, 800d4e0 <_strtod_l+0xb50>
 800d4b6:	4639      	mov	r1, r7
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	f7f3 fb85 	bl	8000bc8 <__aeabi_d2uiz>
 800d4be:	2801      	cmp	r0, #1
 800d4c0:	bf38      	it	cc
 800d4c2:	2001      	movcc	r0, #1
 800d4c4:	f7f3 f82e 	bl	8000524 <__aeabi_ui2d>
 800d4c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	460f      	mov	r7, r1
 800d4ce:	b9fb      	cbnz	r3, 800d510 <_strtod_l+0xb80>
 800d4d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d4d4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d4d6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d4d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d4dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d4e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d4e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d4e6:	1b5b      	subs	r3, r3, r5
 800d4e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d4ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d4ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d4f2:	f002 fcef 	bl	800fed4 <__ulp>
 800d4f6:	4650      	mov	r0, sl
 800d4f8:	ec53 2b10 	vmov	r2, r3, d0
 800d4fc:	4659      	mov	r1, fp
 800d4fe:	f7f3 f88b 	bl	8000618 <__aeabi_dmul>
 800d502:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d506:	f7f2 fed1 	bl	80002ac <__adddf3>
 800d50a:	4682      	mov	sl, r0
 800d50c:	468b      	mov	fp, r1
 800d50e:	e770      	b.n	800d3f2 <_strtod_l+0xa62>
 800d510:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d514:	e7e0      	b.n	800d4d8 <_strtod_l+0xb48>
 800d516:	a30e      	add	r3, pc, #56	@ (adr r3, 800d550 <_strtod_l+0xbc0>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	f7f3 faee 	bl	8000afc <__aeabi_dcmplt>
 800d520:	e798      	b.n	800d454 <_strtod_l+0xac4>
 800d522:	2300      	movs	r3, #0
 800d524:	930e      	str	r3, [sp, #56]	@ 0x38
 800d526:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d528:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	f7ff ba6d 	b.w	800ca0a <_strtod_l+0x7a>
 800d530:	2a65      	cmp	r2, #101	@ 0x65
 800d532:	f43f ab68 	beq.w	800cc06 <_strtod_l+0x276>
 800d536:	2a45      	cmp	r2, #69	@ 0x45
 800d538:	f43f ab65 	beq.w	800cc06 <_strtod_l+0x276>
 800d53c:	2301      	movs	r3, #1
 800d53e:	f7ff bba0 	b.w	800cc82 <_strtod_l+0x2f2>
 800d542:	bf00      	nop
 800d544:	f3af 8000 	nop.w
 800d548:	ffc00000 	.word	0xffc00000
 800d54c:	41dfffff 	.word	0x41dfffff
 800d550:	94a03595 	.word	0x94a03595
 800d554:	3fcfffff 	.word	0x3fcfffff

0800d558 <strtod>:
 800d558:	460a      	mov	r2, r1
 800d55a:	4601      	mov	r1, r0
 800d55c:	4802      	ldr	r0, [pc, #8]	@ (800d568 <strtod+0x10>)
 800d55e:	4b03      	ldr	r3, [pc, #12]	@ (800d56c <strtod+0x14>)
 800d560:	6800      	ldr	r0, [r0, #0]
 800d562:	f7ff ba15 	b.w	800c990 <_strtod_l>
 800d566:	bf00      	nop
 800d568:	20000374 	.word	0x20000374
 800d56c:	20000208 	.word	0x20000208

0800d570 <_strtol_l.isra.0>:
 800d570:	2b24      	cmp	r3, #36	@ 0x24
 800d572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d576:	4686      	mov	lr, r0
 800d578:	4690      	mov	r8, r2
 800d57a:	d801      	bhi.n	800d580 <_strtol_l.isra.0+0x10>
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d106      	bne.n	800d58e <_strtol_l.isra.0+0x1e>
 800d580:	f000 fee8 	bl	800e354 <__errno>
 800d584:	2316      	movs	r3, #22
 800d586:	6003      	str	r3, [r0, #0]
 800d588:	2000      	movs	r0, #0
 800d58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d58e:	4834      	ldr	r0, [pc, #208]	@ (800d660 <_strtol_l.isra.0+0xf0>)
 800d590:	460d      	mov	r5, r1
 800d592:	462a      	mov	r2, r5
 800d594:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d598:	5d06      	ldrb	r6, [r0, r4]
 800d59a:	f016 0608 	ands.w	r6, r6, #8
 800d59e:	d1f8      	bne.n	800d592 <_strtol_l.isra.0+0x22>
 800d5a0:	2c2d      	cmp	r4, #45	@ 0x2d
 800d5a2:	d110      	bne.n	800d5c6 <_strtol_l.isra.0+0x56>
 800d5a4:	782c      	ldrb	r4, [r5, #0]
 800d5a6:	2601      	movs	r6, #1
 800d5a8:	1c95      	adds	r5, r2, #2
 800d5aa:	f033 0210 	bics.w	r2, r3, #16
 800d5ae:	d115      	bne.n	800d5dc <_strtol_l.isra.0+0x6c>
 800d5b0:	2c30      	cmp	r4, #48	@ 0x30
 800d5b2:	d10d      	bne.n	800d5d0 <_strtol_l.isra.0+0x60>
 800d5b4:	782a      	ldrb	r2, [r5, #0]
 800d5b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d5ba:	2a58      	cmp	r2, #88	@ 0x58
 800d5bc:	d108      	bne.n	800d5d0 <_strtol_l.isra.0+0x60>
 800d5be:	786c      	ldrb	r4, [r5, #1]
 800d5c0:	3502      	adds	r5, #2
 800d5c2:	2310      	movs	r3, #16
 800d5c4:	e00a      	b.n	800d5dc <_strtol_l.isra.0+0x6c>
 800d5c6:	2c2b      	cmp	r4, #43	@ 0x2b
 800d5c8:	bf04      	itt	eq
 800d5ca:	782c      	ldrbeq	r4, [r5, #0]
 800d5cc:	1c95      	addeq	r5, r2, #2
 800d5ce:	e7ec      	b.n	800d5aa <_strtol_l.isra.0+0x3a>
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1f6      	bne.n	800d5c2 <_strtol_l.isra.0+0x52>
 800d5d4:	2c30      	cmp	r4, #48	@ 0x30
 800d5d6:	bf14      	ite	ne
 800d5d8:	230a      	movne	r3, #10
 800d5da:	2308      	moveq	r3, #8
 800d5dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d5e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	fbbc f9f3 	udiv	r9, ip, r3
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	fb03 ca19 	mls	sl, r3, r9, ip
 800d5f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d5f4:	2f09      	cmp	r7, #9
 800d5f6:	d80f      	bhi.n	800d618 <_strtol_l.isra.0+0xa8>
 800d5f8:	463c      	mov	r4, r7
 800d5fa:	42a3      	cmp	r3, r4
 800d5fc:	dd1b      	ble.n	800d636 <_strtol_l.isra.0+0xc6>
 800d5fe:	1c57      	adds	r7, r2, #1
 800d600:	d007      	beq.n	800d612 <_strtol_l.isra.0+0xa2>
 800d602:	4581      	cmp	r9, r0
 800d604:	d314      	bcc.n	800d630 <_strtol_l.isra.0+0xc0>
 800d606:	d101      	bne.n	800d60c <_strtol_l.isra.0+0x9c>
 800d608:	45a2      	cmp	sl, r4
 800d60a:	db11      	blt.n	800d630 <_strtol_l.isra.0+0xc0>
 800d60c:	fb00 4003 	mla	r0, r0, r3, r4
 800d610:	2201      	movs	r2, #1
 800d612:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d616:	e7eb      	b.n	800d5f0 <_strtol_l.isra.0+0x80>
 800d618:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d61c:	2f19      	cmp	r7, #25
 800d61e:	d801      	bhi.n	800d624 <_strtol_l.isra.0+0xb4>
 800d620:	3c37      	subs	r4, #55	@ 0x37
 800d622:	e7ea      	b.n	800d5fa <_strtol_l.isra.0+0x8a>
 800d624:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d628:	2f19      	cmp	r7, #25
 800d62a:	d804      	bhi.n	800d636 <_strtol_l.isra.0+0xc6>
 800d62c:	3c57      	subs	r4, #87	@ 0x57
 800d62e:	e7e4      	b.n	800d5fa <_strtol_l.isra.0+0x8a>
 800d630:	f04f 32ff 	mov.w	r2, #4294967295
 800d634:	e7ed      	b.n	800d612 <_strtol_l.isra.0+0xa2>
 800d636:	1c53      	adds	r3, r2, #1
 800d638:	d108      	bne.n	800d64c <_strtol_l.isra.0+0xdc>
 800d63a:	2322      	movs	r3, #34	@ 0x22
 800d63c:	f8ce 3000 	str.w	r3, [lr]
 800d640:	4660      	mov	r0, ip
 800d642:	f1b8 0f00 	cmp.w	r8, #0
 800d646:	d0a0      	beq.n	800d58a <_strtol_l.isra.0+0x1a>
 800d648:	1e69      	subs	r1, r5, #1
 800d64a:	e006      	b.n	800d65a <_strtol_l.isra.0+0xea>
 800d64c:	b106      	cbz	r6, 800d650 <_strtol_l.isra.0+0xe0>
 800d64e:	4240      	negs	r0, r0
 800d650:	f1b8 0f00 	cmp.w	r8, #0
 800d654:	d099      	beq.n	800d58a <_strtol_l.isra.0+0x1a>
 800d656:	2a00      	cmp	r2, #0
 800d658:	d1f6      	bne.n	800d648 <_strtol_l.isra.0+0xd8>
 800d65a:	f8c8 1000 	str.w	r1, [r8]
 800d65e:	e794      	b.n	800d58a <_strtol_l.isra.0+0x1a>
 800d660:	08010be9 	.word	0x08010be9

0800d664 <strtol>:
 800d664:	4613      	mov	r3, r2
 800d666:	460a      	mov	r2, r1
 800d668:	4601      	mov	r1, r0
 800d66a:	4802      	ldr	r0, [pc, #8]	@ (800d674 <strtol+0x10>)
 800d66c:	6800      	ldr	r0, [r0, #0]
 800d66e:	f7ff bf7f 	b.w	800d570 <_strtol_l.isra.0>
 800d672:	bf00      	nop
 800d674:	20000374 	.word	0x20000374

0800d678 <__cvt>:
 800d678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d67c:	ec57 6b10 	vmov	r6, r7, d0
 800d680:	2f00      	cmp	r7, #0
 800d682:	460c      	mov	r4, r1
 800d684:	4619      	mov	r1, r3
 800d686:	463b      	mov	r3, r7
 800d688:	bfbb      	ittet	lt
 800d68a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d68e:	461f      	movlt	r7, r3
 800d690:	2300      	movge	r3, #0
 800d692:	232d      	movlt	r3, #45	@ 0x2d
 800d694:	700b      	strb	r3, [r1, #0]
 800d696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d698:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d69c:	4691      	mov	r9, r2
 800d69e:	f023 0820 	bic.w	r8, r3, #32
 800d6a2:	bfbc      	itt	lt
 800d6a4:	4632      	movlt	r2, r6
 800d6a6:	4616      	movlt	r6, r2
 800d6a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d6ac:	d005      	beq.n	800d6ba <__cvt+0x42>
 800d6ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d6b2:	d100      	bne.n	800d6b6 <__cvt+0x3e>
 800d6b4:	3401      	adds	r4, #1
 800d6b6:	2102      	movs	r1, #2
 800d6b8:	e000      	b.n	800d6bc <__cvt+0x44>
 800d6ba:	2103      	movs	r1, #3
 800d6bc:	ab03      	add	r3, sp, #12
 800d6be:	9301      	str	r3, [sp, #4]
 800d6c0:	ab02      	add	r3, sp, #8
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	ec47 6b10 	vmov	d0, r6, r7
 800d6c8:	4653      	mov	r3, sl
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	f000 ff30 	bl	800e530 <_dtoa_r>
 800d6d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	d119      	bne.n	800d70c <__cvt+0x94>
 800d6d8:	f019 0f01 	tst.w	r9, #1
 800d6dc:	d00e      	beq.n	800d6fc <__cvt+0x84>
 800d6de:	eb00 0904 	add.w	r9, r0, r4
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	4639      	mov	r1, r7
 800d6ea:	f7f3 f9fd 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6ee:	b108      	cbz	r0, 800d6f4 <__cvt+0x7c>
 800d6f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6f4:	2230      	movs	r2, #48	@ 0x30
 800d6f6:	9b03      	ldr	r3, [sp, #12]
 800d6f8:	454b      	cmp	r3, r9
 800d6fa:	d31e      	bcc.n	800d73a <__cvt+0xc2>
 800d6fc:	9b03      	ldr	r3, [sp, #12]
 800d6fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d700:	1b5b      	subs	r3, r3, r5
 800d702:	4628      	mov	r0, r5
 800d704:	6013      	str	r3, [r2, #0]
 800d706:	b004      	add	sp, #16
 800d708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d70c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d710:	eb00 0904 	add.w	r9, r0, r4
 800d714:	d1e5      	bne.n	800d6e2 <__cvt+0x6a>
 800d716:	7803      	ldrb	r3, [r0, #0]
 800d718:	2b30      	cmp	r3, #48	@ 0x30
 800d71a:	d10a      	bne.n	800d732 <__cvt+0xba>
 800d71c:	2200      	movs	r2, #0
 800d71e:	2300      	movs	r3, #0
 800d720:	4630      	mov	r0, r6
 800d722:	4639      	mov	r1, r7
 800d724:	f7f3 f9e0 	bl	8000ae8 <__aeabi_dcmpeq>
 800d728:	b918      	cbnz	r0, 800d732 <__cvt+0xba>
 800d72a:	f1c4 0401 	rsb	r4, r4, #1
 800d72e:	f8ca 4000 	str.w	r4, [sl]
 800d732:	f8da 3000 	ldr.w	r3, [sl]
 800d736:	4499      	add	r9, r3
 800d738:	e7d3      	b.n	800d6e2 <__cvt+0x6a>
 800d73a:	1c59      	adds	r1, r3, #1
 800d73c:	9103      	str	r1, [sp, #12]
 800d73e:	701a      	strb	r2, [r3, #0]
 800d740:	e7d9      	b.n	800d6f6 <__cvt+0x7e>

0800d742 <__exponent>:
 800d742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d744:	2900      	cmp	r1, #0
 800d746:	bfba      	itte	lt
 800d748:	4249      	neglt	r1, r1
 800d74a:	232d      	movlt	r3, #45	@ 0x2d
 800d74c:	232b      	movge	r3, #43	@ 0x2b
 800d74e:	2909      	cmp	r1, #9
 800d750:	7002      	strb	r2, [r0, #0]
 800d752:	7043      	strb	r3, [r0, #1]
 800d754:	dd29      	ble.n	800d7aa <__exponent+0x68>
 800d756:	f10d 0307 	add.w	r3, sp, #7
 800d75a:	461d      	mov	r5, r3
 800d75c:	270a      	movs	r7, #10
 800d75e:	461a      	mov	r2, r3
 800d760:	fbb1 f6f7 	udiv	r6, r1, r7
 800d764:	fb07 1416 	mls	r4, r7, r6, r1
 800d768:	3430      	adds	r4, #48	@ 0x30
 800d76a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d76e:	460c      	mov	r4, r1
 800d770:	2c63      	cmp	r4, #99	@ 0x63
 800d772:	f103 33ff 	add.w	r3, r3, #4294967295
 800d776:	4631      	mov	r1, r6
 800d778:	dcf1      	bgt.n	800d75e <__exponent+0x1c>
 800d77a:	3130      	adds	r1, #48	@ 0x30
 800d77c:	1e94      	subs	r4, r2, #2
 800d77e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d782:	1c41      	adds	r1, r0, #1
 800d784:	4623      	mov	r3, r4
 800d786:	42ab      	cmp	r3, r5
 800d788:	d30a      	bcc.n	800d7a0 <__exponent+0x5e>
 800d78a:	f10d 0309 	add.w	r3, sp, #9
 800d78e:	1a9b      	subs	r3, r3, r2
 800d790:	42ac      	cmp	r4, r5
 800d792:	bf88      	it	hi
 800d794:	2300      	movhi	r3, #0
 800d796:	3302      	adds	r3, #2
 800d798:	4403      	add	r3, r0
 800d79a:	1a18      	subs	r0, r3, r0
 800d79c:	b003      	add	sp, #12
 800d79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d7a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d7a8:	e7ed      	b.n	800d786 <__exponent+0x44>
 800d7aa:	2330      	movs	r3, #48	@ 0x30
 800d7ac:	3130      	adds	r1, #48	@ 0x30
 800d7ae:	7083      	strb	r3, [r0, #2]
 800d7b0:	70c1      	strb	r1, [r0, #3]
 800d7b2:	1d03      	adds	r3, r0, #4
 800d7b4:	e7f1      	b.n	800d79a <__exponent+0x58>
	...

0800d7b8 <_printf_float>:
 800d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7bc:	b08d      	sub	sp, #52	@ 0x34
 800d7be:	460c      	mov	r4, r1
 800d7c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d7c4:	4616      	mov	r6, r2
 800d7c6:	461f      	mov	r7, r3
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	f000 fd69 	bl	800e2a0 <_localeconv_r>
 800d7ce:	6803      	ldr	r3, [r0, #0]
 800d7d0:	9304      	str	r3, [sp, #16]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7f2 fd5c 	bl	8000290 <strlen>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d7e0:	9005      	str	r0, [sp, #20]
 800d7e2:	3307      	adds	r3, #7
 800d7e4:	f023 0307 	bic.w	r3, r3, #7
 800d7e8:	f103 0208 	add.w	r2, r3, #8
 800d7ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d7f0:	f8d4 b000 	ldr.w	fp, [r4]
 800d7f4:	f8c8 2000 	str.w	r2, [r8]
 800d7f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d800:	9307      	str	r3, [sp, #28]
 800d802:	f8cd 8018 	str.w	r8, [sp, #24]
 800d806:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d80a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d80e:	4b9c      	ldr	r3, [pc, #624]	@ (800da80 <_printf_float+0x2c8>)
 800d810:	f04f 32ff 	mov.w	r2, #4294967295
 800d814:	f7f3 f99a 	bl	8000b4c <__aeabi_dcmpun>
 800d818:	bb70      	cbnz	r0, 800d878 <_printf_float+0xc0>
 800d81a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d81e:	4b98      	ldr	r3, [pc, #608]	@ (800da80 <_printf_float+0x2c8>)
 800d820:	f04f 32ff 	mov.w	r2, #4294967295
 800d824:	f7f3 f974 	bl	8000b10 <__aeabi_dcmple>
 800d828:	bb30      	cbnz	r0, 800d878 <_printf_float+0xc0>
 800d82a:	2200      	movs	r2, #0
 800d82c:	2300      	movs	r3, #0
 800d82e:	4640      	mov	r0, r8
 800d830:	4649      	mov	r1, r9
 800d832:	f7f3 f963 	bl	8000afc <__aeabi_dcmplt>
 800d836:	b110      	cbz	r0, 800d83e <_printf_float+0x86>
 800d838:	232d      	movs	r3, #45	@ 0x2d
 800d83a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d83e:	4a91      	ldr	r2, [pc, #580]	@ (800da84 <_printf_float+0x2cc>)
 800d840:	4b91      	ldr	r3, [pc, #580]	@ (800da88 <_printf_float+0x2d0>)
 800d842:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d846:	bf8c      	ite	hi
 800d848:	4690      	movhi	r8, r2
 800d84a:	4698      	movls	r8, r3
 800d84c:	2303      	movs	r3, #3
 800d84e:	6123      	str	r3, [r4, #16]
 800d850:	f02b 0304 	bic.w	r3, fp, #4
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	f04f 0900 	mov.w	r9, #0
 800d85a:	9700      	str	r7, [sp, #0]
 800d85c:	4633      	mov	r3, r6
 800d85e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d860:	4621      	mov	r1, r4
 800d862:	4628      	mov	r0, r5
 800d864:	f000 f9d2 	bl	800dc0c <_printf_common>
 800d868:	3001      	adds	r0, #1
 800d86a:	f040 808d 	bne.w	800d988 <_printf_float+0x1d0>
 800d86e:	f04f 30ff 	mov.w	r0, #4294967295
 800d872:	b00d      	add	sp, #52	@ 0x34
 800d874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d878:	4642      	mov	r2, r8
 800d87a:	464b      	mov	r3, r9
 800d87c:	4640      	mov	r0, r8
 800d87e:	4649      	mov	r1, r9
 800d880:	f7f3 f964 	bl	8000b4c <__aeabi_dcmpun>
 800d884:	b140      	cbz	r0, 800d898 <_printf_float+0xe0>
 800d886:	464b      	mov	r3, r9
 800d888:	2b00      	cmp	r3, #0
 800d88a:	bfbc      	itt	lt
 800d88c:	232d      	movlt	r3, #45	@ 0x2d
 800d88e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d892:	4a7e      	ldr	r2, [pc, #504]	@ (800da8c <_printf_float+0x2d4>)
 800d894:	4b7e      	ldr	r3, [pc, #504]	@ (800da90 <_printf_float+0x2d8>)
 800d896:	e7d4      	b.n	800d842 <_printf_float+0x8a>
 800d898:	6863      	ldr	r3, [r4, #4]
 800d89a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d89e:	9206      	str	r2, [sp, #24]
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	d13b      	bne.n	800d91c <_printf_float+0x164>
 800d8a4:	2306      	movs	r3, #6
 800d8a6:	6063      	str	r3, [r4, #4]
 800d8a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	6022      	str	r2, [r4, #0]
 800d8b0:	9303      	str	r3, [sp, #12]
 800d8b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800d8b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d8b8:	ab09      	add	r3, sp, #36	@ 0x24
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	6861      	ldr	r1, [r4, #4]
 800d8be:	ec49 8b10 	vmov	d0, r8, r9
 800d8c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f7ff fed6 	bl	800d678 <__cvt>
 800d8cc:	9b06      	ldr	r3, [sp, #24]
 800d8ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8d0:	2b47      	cmp	r3, #71	@ 0x47
 800d8d2:	4680      	mov	r8, r0
 800d8d4:	d129      	bne.n	800d92a <_printf_float+0x172>
 800d8d6:	1cc8      	adds	r0, r1, #3
 800d8d8:	db02      	blt.n	800d8e0 <_printf_float+0x128>
 800d8da:	6863      	ldr	r3, [r4, #4]
 800d8dc:	4299      	cmp	r1, r3
 800d8de:	dd41      	ble.n	800d964 <_printf_float+0x1ac>
 800d8e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800d8e4:	fa5f fa8a 	uxtb.w	sl, sl
 800d8e8:	3901      	subs	r1, #1
 800d8ea:	4652      	mov	r2, sl
 800d8ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d8f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800d8f2:	f7ff ff26 	bl	800d742 <__exponent>
 800d8f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8f8:	1813      	adds	r3, r2, r0
 800d8fa:	2a01      	cmp	r2, #1
 800d8fc:	4681      	mov	r9, r0
 800d8fe:	6123      	str	r3, [r4, #16]
 800d900:	dc02      	bgt.n	800d908 <_printf_float+0x150>
 800d902:	6822      	ldr	r2, [r4, #0]
 800d904:	07d2      	lsls	r2, r2, #31
 800d906:	d501      	bpl.n	800d90c <_printf_float+0x154>
 800d908:	3301      	adds	r3, #1
 800d90a:	6123      	str	r3, [r4, #16]
 800d90c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0a2      	beq.n	800d85a <_printf_float+0xa2>
 800d914:	232d      	movs	r3, #45	@ 0x2d
 800d916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d91a:	e79e      	b.n	800d85a <_printf_float+0xa2>
 800d91c:	9a06      	ldr	r2, [sp, #24]
 800d91e:	2a47      	cmp	r2, #71	@ 0x47
 800d920:	d1c2      	bne.n	800d8a8 <_printf_float+0xf0>
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1c0      	bne.n	800d8a8 <_printf_float+0xf0>
 800d926:	2301      	movs	r3, #1
 800d928:	e7bd      	b.n	800d8a6 <_printf_float+0xee>
 800d92a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d92e:	d9db      	bls.n	800d8e8 <_printf_float+0x130>
 800d930:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d934:	d118      	bne.n	800d968 <_printf_float+0x1b0>
 800d936:	2900      	cmp	r1, #0
 800d938:	6863      	ldr	r3, [r4, #4]
 800d93a:	dd0b      	ble.n	800d954 <_printf_float+0x19c>
 800d93c:	6121      	str	r1, [r4, #16]
 800d93e:	b913      	cbnz	r3, 800d946 <_printf_float+0x18e>
 800d940:	6822      	ldr	r2, [r4, #0]
 800d942:	07d0      	lsls	r0, r2, #31
 800d944:	d502      	bpl.n	800d94c <_printf_float+0x194>
 800d946:	3301      	adds	r3, #1
 800d948:	440b      	add	r3, r1
 800d94a:	6123      	str	r3, [r4, #16]
 800d94c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d94e:	f04f 0900 	mov.w	r9, #0
 800d952:	e7db      	b.n	800d90c <_printf_float+0x154>
 800d954:	b913      	cbnz	r3, 800d95c <_printf_float+0x1a4>
 800d956:	6822      	ldr	r2, [r4, #0]
 800d958:	07d2      	lsls	r2, r2, #31
 800d95a:	d501      	bpl.n	800d960 <_printf_float+0x1a8>
 800d95c:	3302      	adds	r3, #2
 800d95e:	e7f4      	b.n	800d94a <_printf_float+0x192>
 800d960:	2301      	movs	r3, #1
 800d962:	e7f2      	b.n	800d94a <_printf_float+0x192>
 800d964:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d96a:	4299      	cmp	r1, r3
 800d96c:	db05      	blt.n	800d97a <_printf_float+0x1c2>
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	6121      	str	r1, [r4, #16]
 800d972:	07d8      	lsls	r0, r3, #31
 800d974:	d5ea      	bpl.n	800d94c <_printf_float+0x194>
 800d976:	1c4b      	adds	r3, r1, #1
 800d978:	e7e7      	b.n	800d94a <_printf_float+0x192>
 800d97a:	2900      	cmp	r1, #0
 800d97c:	bfd4      	ite	le
 800d97e:	f1c1 0202 	rsble	r2, r1, #2
 800d982:	2201      	movgt	r2, #1
 800d984:	4413      	add	r3, r2
 800d986:	e7e0      	b.n	800d94a <_printf_float+0x192>
 800d988:	6823      	ldr	r3, [r4, #0]
 800d98a:	055a      	lsls	r2, r3, #21
 800d98c:	d407      	bmi.n	800d99e <_printf_float+0x1e6>
 800d98e:	6923      	ldr	r3, [r4, #16]
 800d990:	4642      	mov	r2, r8
 800d992:	4631      	mov	r1, r6
 800d994:	4628      	mov	r0, r5
 800d996:	47b8      	blx	r7
 800d998:	3001      	adds	r0, #1
 800d99a:	d12b      	bne.n	800d9f4 <_printf_float+0x23c>
 800d99c:	e767      	b.n	800d86e <_printf_float+0xb6>
 800d99e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d9a2:	f240 80dd 	bls.w	800db60 <_printf_float+0x3a8>
 800d9a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	f7f3 f89b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d033      	beq.n	800da1e <_printf_float+0x266>
 800d9b6:	4a37      	ldr	r2, [pc, #220]	@ (800da94 <_printf_float+0x2dc>)
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	4631      	mov	r1, r6
 800d9bc:	4628      	mov	r0, r5
 800d9be:	47b8      	blx	r7
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	f43f af54 	beq.w	800d86e <_printf_float+0xb6>
 800d9c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d9ca:	4543      	cmp	r3, r8
 800d9cc:	db02      	blt.n	800d9d4 <_printf_float+0x21c>
 800d9ce:	6823      	ldr	r3, [r4, #0]
 800d9d0:	07d8      	lsls	r0, r3, #31
 800d9d2:	d50f      	bpl.n	800d9f4 <_printf_float+0x23c>
 800d9d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9d8:	4631      	mov	r1, r6
 800d9da:	4628      	mov	r0, r5
 800d9dc:	47b8      	blx	r7
 800d9de:	3001      	adds	r0, #1
 800d9e0:	f43f af45 	beq.w	800d86e <_printf_float+0xb6>
 800d9e4:	f04f 0900 	mov.w	r9, #0
 800d9e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d9ec:	f104 0a1a 	add.w	sl, r4, #26
 800d9f0:	45c8      	cmp	r8, r9
 800d9f2:	dc09      	bgt.n	800da08 <_printf_float+0x250>
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	079b      	lsls	r3, r3, #30
 800d9f8:	f100 8103 	bmi.w	800dc02 <_printf_float+0x44a>
 800d9fc:	68e0      	ldr	r0, [r4, #12]
 800d9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da00:	4298      	cmp	r0, r3
 800da02:	bfb8      	it	lt
 800da04:	4618      	movlt	r0, r3
 800da06:	e734      	b.n	800d872 <_printf_float+0xba>
 800da08:	2301      	movs	r3, #1
 800da0a:	4652      	mov	r2, sl
 800da0c:	4631      	mov	r1, r6
 800da0e:	4628      	mov	r0, r5
 800da10:	47b8      	blx	r7
 800da12:	3001      	adds	r0, #1
 800da14:	f43f af2b 	beq.w	800d86e <_printf_float+0xb6>
 800da18:	f109 0901 	add.w	r9, r9, #1
 800da1c:	e7e8      	b.n	800d9f0 <_printf_float+0x238>
 800da1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da20:	2b00      	cmp	r3, #0
 800da22:	dc39      	bgt.n	800da98 <_printf_float+0x2e0>
 800da24:	4a1b      	ldr	r2, [pc, #108]	@ (800da94 <_printf_float+0x2dc>)
 800da26:	2301      	movs	r3, #1
 800da28:	4631      	mov	r1, r6
 800da2a:	4628      	mov	r0, r5
 800da2c:	47b8      	blx	r7
 800da2e:	3001      	adds	r0, #1
 800da30:	f43f af1d 	beq.w	800d86e <_printf_float+0xb6>
 800da34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800da38:	ea59 0303 	orrs.w	r3, r9, r3
 800da3c:	d102      	bne.n	800da44 <_printf_float+0x28c>
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	07d9      	lsls	r1, r3, #31
 800da42:	d5d7      	bpl.n	800d9f4 <_printf_float+0x23c>
 800da44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da48:	4631      	mov	r1, r6
 800da4a:	4628      	mov	r0, r5
 800da4c:	47b8      	blx	r7
 800da4e:	3001      	adds	r0, #1
 800da50:	f43f af0d 	beq.w	800d86e <_printf_float+0xb6>
 800da54:	f04f 0a00 	mov.w	sl, #0
 800da58:	f104 0b1a 	add.w	fp, r4, #26
 800da5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da5e:	425b      	negs	r3, r3
 800da60:	4553      	cmp	r3, sl
 800da62:	dc01      	bgt.n	800da68 <_printf_float+0x2b0>
 800da64:	464b      	mov	r3, r9
 800da66:	e793      	b.n	800d990 <_printf_float+0x1d8>
 800da68:	2301      	movs	r3, #1
 800da6a:	465a      	mov	r2, fp
 800da6c:	4631      	mov	r1, r6
 800da6e:	4628      	mov	r0, r5
 800da70:	47b8      	blx	r7
 800da72:	3001      	adds	r0, #1
 800da74:	f43f aefb 	beq.w	800d86e <_printf_float+0xb6>
 800da78:	f10a 0a01 	add.w	sl, sl, #1
 800da7c:	e7ee      	b.n	800da5c <_printf_float+0x2a4>
 800da7e:	bf00      	nop
 800da80:	7fefffff 	.word	0x7fefffff
 800da84:	08010972 	.word	0x08010972
 800da88:	0801096e 	.word	0x0801096e
 800da8c:	0801097a 	.word	0x0801097a
 800da90:	08010976 	.word	0x08010976
 800da94:	0801097e 	.word	0x0801097e
 800da98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800da9e:	4553      	cmp	r3, sl
 800daa0:	bfa8      	it	ge
 800daa2:	4653      	movge	r3, sl
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	4699      	mov	r9, r3
 800daa8:	dc36      	bgt.n	800db18 <_printf_float+0x360>
 800daaa:	f04f 0b00 	mov.w	fp, #0
 800daae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dab2:	f104 021a 	add.w	r2, r4, #26
 800dab6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dab8:	9306      	str	r3, [sp, #24]
 800daba:	eba3 0309 	sub.w	r3, r3, r9
 800dabe:	455b      	cmp	r3, fp
 800dac0:	dc31      	bgt.n	800db26 <_printf_float+0x36e>
 800dac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac4:	459a      	cmp	sl, r3
 800dac6:	dc3a      	bgt.n	800db3e <_printf_float+0x386>
 800dac8:	6823      	ldr	r3, [r4, #0]
 800daca:	07da      	lsls	r2, r3, #31
 800dacc:	d437      	bmi.n	800db3e <_printf_float+0x386>
 800dace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dad0:	ebaa 0903 	sub.w	r9, sl, r3
 800dad4:	9b06      	ldr	r3, [sp, #24]
 800dad6:	ebaa 0303 	sub.w	r3, sl, r3
 800dada:	4599      	cmp	r9, r3
 800dadc:	bfa8      	it	ge
 800dade:	4699      	movge	r9, r3
 800dae0:	f1b9 0f00 	cmp.w	r9, #0
 800dae4:	dc33      	bgt.n	800db4e <_printf_float+0x396>
 800dae6:	f04f 0800 	mov.w	r8, #0
 800daea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800daee:	f104 0b1a 	add.w	fp, r4, #26
 800daf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daf4:	ebaa 0303 	sub.w	r3, sl, r3
 800daf8:	eba3 0309 	sub.w	r3, r3, r9
 800dafc:	4543      	cmp	r3, r8
 800dafe:	f77f af79 	ble.w	800d9f4 <_printf_float+0x23c>
 800db02:	2301      	movs	r3, #1
 800db04:	465a      	mov	r2, fp
 800db06:	4631      	mov	r1, r6
 800db08:	4628      	mov	r0, r5
 800db0a:	47b8      	blx	r7
 800db0c:	3001      	adds	r0, #1
 800db0e:	f43f aeae 	beq.w	800d86e <_printf_float+0xb6>
 800db12:	f108 0801 	add.w	r8, r8, #1
 800db16:	e7ec      	b.n	800daf2 <_printf_float+0x33a>
 800db18:	4642      	mov	r2, r8
 800db1a:	4631      	mov	r1, r6
 800db1c:	4628      	mov	r0, r5
 800db1e:	47b8      	blx	r7
 800db20:	3001      	adds	r0, #1
 800db22:	d1c2      	bne.n	800daaa <_printf_float+0x2f2>
 800db24:	e6a3      	b.n	800d86e <_printf_float+0xb6>
 800db26:	2301      	movs	r3, #1
 800db28:	4631      	mov	r1, r6
 800db2a:	4628      	mov	r0, r5
 800db2c:	9206      	str	r2, [sp, #24]
 800db2e:	47b8      	blx	r7
 800db30:	3001      	adds	r0, #1
 800db32:	f43f ae9c 	beq.w	800d86e <_printf_float+0xb6>
 800db36:	9a06      	ldr	r2, [sp, #24]
 800db38:	f10b 0b01 	add.w	fp, fp, #1
 800db3c:	e7bb      	b.n	800dab6 <_printf_float+0x2fe>
 800db3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db42:	4631      	mov	r1, r6
 800db44:	4628      	mov	r0, r5
 800db46:	47b8      	blx	r7
 800db48:	3001      	adds	r0, #1
 800db4a:	d1c0      	bne.n	800dace <_printf_float+0x316>
 800db4c:	e68f      	b.n	800d86e <_printf_float+0xb6>
 800db4e:	9a06      	ldr	r2, [sp, #24]
 800db50:	464b      	mov	r3, r9
 800db52:	4442      	add	r2, r8
 800db54:	4631      	mov	r1, r6
 800db56:	4628      	mov	r0, r5
 800db58:	47b8      	blx	r7
 800db5a:	3001      	adds	r0, #1
 800db5c:	d1c3      	bne.n	800dae6 <_printf_float+0x32e>
 800db5e:	e686      	b.n	800d86e <_printf_float+0xb6>
 800db60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800db64:	f1ba 0f01 	cmp.w	sl, #1
 800db68:	dc01      	bgt.n	800db6e <_printf_float+0x3b6>
 800db6a:	07db      	lsls	r3, r3, #31
 800db6c:	d536      	bpl.n	800dbdc <_printf_float+0x424>
 800db6e:	2301      	movs	r3, #1
 800db70:	4642      	mov	r2, r8
 800db72:	4631      	mov	r1, r6
 800db74:	4628      	mov	r0, r5
 800db76:	47b8      	blx	r7
 800db78:	3001      	adds	r0, #1
 800db7a:	f43f ae78 	beq.w	800d86e <_printf_float+0xb6>
 800db7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db82:	4631      	mov	r1, r6
 800db84:	4628      	mov	r0, r5
 800db86:	47b8      	blx	r7
 800db88:	3001      	adds	r0, #1
 800db8a:	f43f ae70 	beq.w	800d86e <_printf_float+0xb6>
 800db8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800db92:	2200      	movs	r2, #0
 800db94:	2300      	movs	r3, #0
 800db96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db9a:	f7f2 ffa5 	bl	8000ae8 <__aeabi_dcmpeq>
 800db9e:	b9c0      	cbnz	r0, 800dbd2 <_printf_float+0x41a>
 800dba0:	4653      	mov	r3, sl
 800dba2:	f108 0201 	add.w	r2, r8, #1
 800dba6:	4631      	mov	r1, r6
 800dba8:	4628      	mov	r0, r5
 800dbaa:	47b8      	blx	r7
 800dbac:	3001      	adds	r0, #1
 800dbae:	d10c      	bne.n	800dbca <_printf_float+0x412>
 800dbb0:	e65d      	b.n	800d86e <_printf_float+0xb6>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	465a      	mov	r2, fp
 800dbb6:	4631      	mov	r1, r6
 800dbb8:	4628      	mov	r0, r5
 800dbba:	47b8      	blx	r7
 800dbbc:	3001      	adds	r0, #1
 800dbbe:	f43f ae56 	beq.w	800d86e <_printf_float+0xb6>
 800dbc2:	f108 0801 	add.w	r8, r8, #1
 800dbc6:	45d0      	cmp	r8, sl
 800dbc8:	dbf3      	blt.n	800dbb2 <_printf_float+0x3fa>
 800dbca:	464b      	mov	r3, r9
 800dbcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dbd0:	e6df      	b.n	800d992 <_printf_float+0x1da>
 800dbd2:	f04f 0800 	mov.w	r8, #0
 800dbd6:	f104 0b1a 	add.w	fp, r4, #26
 800dbda:	e7f4      	b.n	800dbc6 <_printf_float+0x40e>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	4642      	mov	r2, r8
 800dbe0:	e7e1      	b.n	800dba6 <_printf_float+0x3ee>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	464a      	mov	r2, r9
 800dbe6:	4631      	mov	r1, r6
 800dbe8:	4628      	mov	r0, r5
 800dbea:	47b8      	blx	r7
 800dbec:	3001      	adds	r0, #1
 800dbee:	f43f ae3e 	beq.w	800d86e <_printf_float+0xb6>
 800dbf2:	f108 0801 	add.w	r8, r8, #1
 800dbf6:	68e3      	ldr	r3, [r4, #12]
 800dbf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dbfa:	1a5b      	subs	r3, r3, r1
 800dbfc:	4543      	cmp	r3, r8
 800dbfe:	dcf0      	bgt.n	800dbe2 <_printf_float+0x42a>
 800dc00:	e6fc      	b.n	800d9fc <_printf_float+0x244>
 800dc02:	f04f 0800 	mov.w	r8, #0
 800dc06:	f104 0919 	add.w	r9, r4, #25
 800dc0a:	e7f4      	b.n	800dbf6 <_printf_float+0x43e>

0800dc0c <_printf_common>:
 800dc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc10:	4616      	mov	r6, r2
 800dc12:	4698      	mov	r8, r3
 800dc14:	688a      	ldr	r2, [r1, #8]
 800dc16:	690b      	ldr	r3, [r1, #16]
 800dc18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	bfb8      	it	lt
 800dc20:	4613      	movlt	r3, r2
 800dc22:	6033      	str	r3, [r6, #0]
 800dc24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc28:	4607      	mov	r7, r0
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	b10a      	cbz	r2, 800dc32 <_printf_common+0x26>
 800dc2e:	3301      	adds	r3, #1
 800dc30:	6033      	str	r3, [r6, #0]
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	0699      	lsls	r1, r3, #26
 800dc36:	bf42      	ittt	mi
 800dc38:	6833      	ldrmi	r3, [r6, #0]
 800dc3a:	3302      	addmi	r3, #2
 800dc3c:	6033      	strmi	r3, [r6, #0]
 800dc3e:	6825      	ldr	r5, [r4, #0]
 800dc40:	f015 0506 	ands.w	r5, r5, #6
 800dc44:	d106      	bne.n	800dc54 <_printf_common+0x48>
 800dc46:	f104 0a19 	add.w	sl, r4, #25
 800dc4a:	68e3      	ldr	r3, [r4, #12]
 800dc4c:	6832      	ldr	r2, [r6, #0]
 800dc4e:	1a9b      	subs	r3, r3, r2
 800dc50:	42ab      	cmp	r3, r5
 800dc52:	dc26      	bgt.n	800dca2 <_printf_common+0x96>
 800dc54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc58:	6822      	ldr	r2, [r4, #0]
 800dc5a:	3b00      	subs	r3, #0
 800dc5c:	bf18      	it	ne
 800dc5e:	2301      	movne	r3, #1
 800dc60:	0692      	lsls	r2, r2, #26
 800dc62:	d42b      	bmi.n	800dcbc <_printf_common+0xb0>
 800dc64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc68:	4641      	mov	r1, r8
 800dc6a:	4638      	mov	r0, r7
 800dc6c:	47c8      	blx	r9
 800dc6e:	3001      	adds	r0, #1
 800dc70:	d01e      	beq.n	800dcb0 <_printf_common+0xa4>
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	6922      	ldr	r2, [r4, #16]
 800dc76:	f003 0306 	and.w	r3, r3, #6
 800dc7a:	2b04      	cmp	r3, #4
 800dc7c:	bf02      	ittt	eq
 800dc7e:	68e5      	ldreq	r5, [r4, #12]
 800dc80:	6833      	ldreq	r3, [r6, #0]
 800dc82:	1aed      	subeq	r5, r5, r3
 800dc84:	68a3      	ldr	r3, [r4, #8]
 800dc86:	bf0c      	ite	eq
 800dc88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc8c:	2500      	movne	r5, #0
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	bfc4      	itt	gt
 800dc92:	1a9b      	subgt	r3, r3, r2
 800dc94:	18ed      	addgt	r5, r5, r3
 800dc96:	2600      	movs	r6, #0
 800dc98:	341a      	adds	r4, #26
 800dc9a:	42b5      	cmp	r5, r6
 800dc9c:	d11a      	bne.n	800dcd4 <_printf_common+0xc8>
 800dc9e:	2000      	movs	r0, #0
 800dca0:	e008      	b.n	800dcb4 <_printf_common+0xa8>
 800dca2:	2301      	movs	r3, #1
 800dca4:	4652      	mov	r2, sl
 800dca6:	4641      	mov	r1, r8
 800dca8:	4638      	mov	r0, r7
 800dcaa:	47c8      	blx	r9
 800dcac:	3001      	adds	r0, #1
 800dcae:	d103      	bne.n	800dcb8 <_printf_common+0xac>
 800dcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcb8:	3501      	adds	r5, #1
 800dcba:	e7c6      	b.n	800dc4a <_printf_common+0x3e>
 800dcbc:	18e1      	adds	r1, r4, r3
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	2030      	movs	r0, #48	@ 0x30
 800dcc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dcc6:	4422      	add	r2, r4
 800dcc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dcd0:	3302      	adds	r3, #2
 800dcd2:	e7c7      	b.n	800dc64 <_printf_common+0x58>
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	4622      	mov	r2, r4
 800dcd8:	4641      	mov	r1, r8
 800dcda:	4638      	mov	r0, r7
 800dcdc:	47c8      	blx	r9
 800dcde:	3001      	adds	r0, #1
 800dce0:	d0e6      	beq.n	800dcb0 <_printf_common+0xa4>
 800dce2:	3601      	adds	r6, #1
 800dce4:	e7d9      	b.n	800dc9a <_printf_common+0x8e>
	...

0800dce8 <_printf_i>:
 800dce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcec:	7e0f      	ldrb	r7, [r1, #24]
 800dcee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dcf0:	2f78      	cmp	r7, #120	@ 0x78
 800dcf2:	4691      	mov	r9, r2
 800dcf4:	4680      	mov	r8, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	469a      	mov	sl, r3
 800dcfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dcfe:	d807      	bhi.n	800dd10 <_printf_i+0x28>
 800dd00:	2f62      	cmp	r7, #98	@ 0x62
 800dd02:	d80a      	bhi.n	800dd1a <_printf_i+0x32>
 800dd04:	2f00      	cmp	r7, #0
 800dd06:	f000 80d1 	beq.w	800deac <_printf_i+0x1c4>
 800dd0a:	2f58      	cmp	r7, #88	@ 0x58
 800dd0c:	f000 80b8 	beq.w	800de80 <_printf_i+0x198>
 800dd10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd18:	e03a      	b.n	800dd90 <_printf_i+0xa8>
 800dd1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd1e:	2b15      	cmp	r3, #21
 800dd20:	d8f6      	bhi.n	800dd10 <_printf_i+0x28>
 800dd22:	a101      	add	r1, pc, #4	@ (adr r1, 800dd28 <_printf_i+0x40>)
 800dd24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd28:	0800dd81 	.word	0x0800dd81
 800dd2c:	0800dd95 	.word	0x0800dd95
 800dd30:	0800dd11 	.word	0x0800dd11
 800dd34:	0800dd11 	.word	0x0800dd11
 800dd38:	0800dd11 	.word	0x0800dd11
 800dd3c:	0800dd11 	.word	0x0800dd11
 800dd40:	0800dd95 	.word	0x0800dd95
 800dd44:	0800dd11 	.word	0x0800dd11
 800dd48:	0800dd11 	.word	0x0800dd11
 800dd4c:	0800dd11 	.word	0x0800dd11
 800dd50:	0800dd11 	.word	0x0800dd11
 800dd54:	0800de93 	.word	0x0800de93
 800dd58:	0800ddbf 	.word	0x0800ddbf
 800dd5c:	0800de4d 	.word	0x0800de4d
 800dd60:	0800dd11 	.word	0x0800dd11
 800dd64:	0800dd11 	.word	0x0800dd11
 800dd68:	0800deb5 	.word	0x0800deb5
 800dd6c:	0800dd11 	.word	0x0800dd11
 800dd70:	0800ddbf 	.word	0x0800ddbf
 800dd74:	0800dd11 	.word	0x0800dd11
 800dd78:	0800dd11 	.word	0x0800dd11
 800dd7c:	0800de55 	.word	0x0800de55
 800dd80:	6833      	ldr	r3, [r6, #0]
 800dd82:	1d1a      	adds	r2, r3, #4
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6032      	str	r2, [r6, #0]
 800dd88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd90:	2301      	movs	r3, #1
 800dd92:	e09c      	b.n	800dece <_printf_i+0x1e6>
 800dd94:	6833      	ldr	r3, [r6, #0]
 800dd96:	6820      	ldr	r0, [r4, #0]
 800dd98:	1d19      	adds	r1, r3, #4
 800dd9a:	6031      	str	r1, [r6, #0]
 800dd9c:	0606      	lsls	r6, r0, #24
 800dd9e:	d501      	bpl.n	800dda4 <_printf_i+0xbc>
 800dda0:	681d      	ldr	r5, [r3, #0]
 800dda2:	e003      	b.n	800ddac <_printf_i+0xc4>
 800dda4:	0645      	lsls	r5, r0, #25
 800dda6:	d5fb      	bpl.n	800dda0 <_printf_i+0xb8>
 800dda8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ddac:	2d00      	cmp	r5, #0
 800ddae:	da03      	bge.n	800ddb8 <_printf_i+0xd0>
 800ddb0:	232d      	movs	r3, #45	@ 0x2d
 800ddb2:	426d      	negs	r5, r5
 800ddb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddb8:	4858      	ldr	r0, [pc, #352]	@ (800df1c <_printf_i+0x234>)
 800ddba:	230a      	movs	r3, #10
 800ddbc:	e011      	b.n	800dde2 <_printf_i+0xfa>
 800ddbe:	6821      	ldr	r1, [r4, #0]
 800ddc0:	6833      	ldr	r3, [r6, #0]
 800ddc2:	0608      	lsls	r0, r1, #24
 800ddc4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ddc8:	d402      	bmi.n	800ddd0 <_printf_i+0xe8>
 800ddca:	0649      	lsls	r1, r1, #25
 800ddcc:	bf48      	it	mi
 800ddce:	b2ad      	uxthmi	r5, r5
 800ddd0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ddd2:	4852      	ldr	r0, [pc, #328]	@ (800df1c <_printf_i+0x234>)
 800ddd4:	6033      	str	r3, [r6, #0]
 800ddd6:	bf14      	ite	ne
 800ddd8:	230a      	movne	r3, #10
 800ddda:	2308      	moveq	r3, #8
 800dddc:	2100      	movs	r1, #0
 800ddde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dde2:	6866      	ldr	r6, [r4, #4]
 800dde4:	60a6      	str	r6, [r4, #8]
 800dde6:	2e00      	cmp	r6, #0
 800dde8:	db05      	blt.n	800ddf6 <_printf_i+0x10e>
 800ddea:	6821      	ldr	r1, [r4, #0]
 800ddec:	432e      	orrs	r6, r5
 800ddee:	f021 0104 	bic.w	r1, r1, #4
 800ddf2:	6021      	str	r1, [r4, #0]
 800ddf4:	d04b      	beq.n	800de8e <_printf_i+0x1a6>
 800ddf6:	4616      	mov	r6, r2
 800ddf8:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddfc:	fb03 5711 	mls	r7, r3, r1, r5
 800de00:	5dc7      	ldrb	r7, [r0, r7]
 800de02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de06:	462f      	mov	r7, r5
 800de08:	42bb      	cmp	r3, r7
 800de0a:	460d      	mov	r5, r1
 800de0c:	d9f4      	bls.n	800ddf8 <_printf_i+0x110>
 800de0e:	2b08      	cmp	r3, #8
 800de10:	d10b      	bne.n	800de2a <_printf_i+0x142>
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	07df      	lsls	r7, r3, #31
 800de16:	d508      	bpl.n	800de2a <_printf_i+0x142>
 800de18:	6923      	ldr	r3, [r4, #16]
 800de1a:	6861      	ldr	r1, [r4, #4]
 800de1c:	4299      	cmp	r1, r3
 800de1e:	bfde      	ittt	le
 800de20:	2330      	movle	r3, #48	@ 0x30
 800de22:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de26:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de2a:	1b92      	subs	r2, r2, r6
 800de2c:	6122      	str	r2, [r4, #16]
 800de2e:	f8cd a000 	str.w	sl, [sp]
 800de32:	464b      	mov	r3, r9
 800de34:	aa03      	add	r2, sp, #12
 800de36:	4621      	mov	r1, r4
 800de38:	4640      	mov	r0, r8
 800de3a:	f7ff fee7 	bl	800dc0c <_printf_common>
 800de3e:	3001      	adds	r0, #1
 800de40:	d14a      	bne.n	800ded8 <_printf_i+0x1f0>
 800de42:	f04f 30ff 	mov.w	r0, #4294967295
 800de46:	b004      	add	sp, #16
 800de48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de4c:	6823      	ldr	r3, [r4, #0]
 800de4e:	f043 0320 	orr.w	r3, r3, #32
 800de52:	6023      	str	r3, [r4, #0]
 800de54:	4832      	ldr	r0, [pc, #200]	@ (800df20 <_printf_i+0x238>)
 800de56:	2778      	movs	r7, #120	@ 0x78
 800de58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de5c:	6823      	ldr	r3, [r4, #0]
 800de5e:	6831      	ldr	r1, [r6, #0]
 800de60:	061f      	lsls	r7, r3, #24
 800de62:	f851 5b04 	ldr.w	r5, [r1], #4
 800de66:	d402      	bmi.n	800de6e <_printf_i+0x186>
 800de68:	065f      	lsls	r7, r3, #25
 800de6a:	bf48      	it	mi
 800de6c:	b2ad      	uxthmi	r5, r5
 800de6e:	6031      	str	r1, [r6, #0]
 800de70:	07d9      	lsls	r1, r3, #31
 800de72:	bf44      	itt	mi
 800de74:	f043 0320 	orrmi.w	r3, r3, #32
 800de78:	6023      	strmi	r3, [r4, #0]
 800de7a:	b11d      	cbz	r5, 800de84 <_printf_i+0x19c>
 800de7c:	2310      	movs	r3, #16
 800de7e:	e7ad      	b.n	800dddc <_printf_i+0xf4>
 800de80:	4826      	ldr	r0, [pc, #152]	@ (800df1c <_printf_i+0x234>)
 800de82:	e7e9      	b.n	800de58 <_printf_i+0x170>
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	f023 0320 	bic.w	r3, r3, #32
 800de8a:	6023      	str	r3, [r4, #0]
 800de8c:	e7f6      	b.n	800de7c <_printf_i+0x194>
 800de8e:	4616      	mov	r6, r2
 800de90:	e7bd      	b.n	800de0e <_printf_i+0x126>
 800de92:	6833      	ldr	r3, [r6, #0]
 800de94:	6825      	ldr	r5, [r4, #0]
 800de96:	6961      	ldr	r1, [r4, #20]
 800de98:	1d18      	adds	r0, r3, #4
 800de9a:	6030      	str	r0, [r6, #0]
 800de9c:	062e      	lsls	r6, r5, #24
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	d501      	bpl.n	800dea6 <_printf_i+0x1be>
 800dea2:	6019      	str	r1, [r3, #0]
 800dea4:	e002      	b.n	800deac <_printf_i+0x1c4>
 800dea6:	0668      	lsls	r0, r5, #25
 800dea8:	d5fb      	bpl.n	800dea2 <_printf_i+0x1ba>
 800deaa:	8019      	strh	r1, [r3, #0]
 800deac:	2300      	movs	r3, #0
 800deae:	6123      	str	r3, [r4, #16]
 800deb0:	4616      	mov	r6, r2
 800deb2:	e7bc      	b.n	800de2e <_printf_i+0x146>
 800deb4:	6833      	ldr	r3, [r6, #0]
 800deb6:	1d1a      	adds	r2, r3, #4
 800deb8:	6032      	str	r2, [r6, #0]
 800deba:	681e      	ldr	r6, [r3, #0]
 800debc:	6862      	ldr	r2, [r4, #4]
 800debe:	2100      	movs	r1, #0
 800dec0:	4630      	mov	r0, r6
 800dec2:	f7f2 f995 	bl	80001f0 <memchr>
 800dec6:	b108      	cbz	r0, 800decc <_printf_i+0x1e4>
 800dec8:	1b80      	subs	r0, r0, r6
 800deca:	6060      	str	r0, [r4, #4]
 800decc:	6863      	ldr	r3, [r4, #4]
 800dece:	6123      	str	r3, [r4, #16]
 800ded0:	2300      	movs	r3, #0
 800ded2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ded6:	e7aa      	b.n	800de2e <_printf_i+0x146>
 800ded8:	6923      	ldr	r3, [r4, #16]
 800deda:	4632      	mov	r2, r6
 800dedc:	4649      	mov	r1, r9
 800dede:	4640      	mov	r0, r8
 800dee0:	47d0      	blx	sl
 800dee2:	3001      	adds	r0, #1
 800dee4:	d0ad      	beq.n	800de42 <_printf_i+0x15a>
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	079b      	lsls	r3, r3, #30
 800deea:	d413      	bmi.n	800df14 <_printf_i+0x22c>
 800deec:	68e0      	ldr	r0, [r4, #12]
 800deee:	9b03      	ldr	r3, [sp, #12]
 800def0:	4298      	cmp	r0, r3
 800def2:	bfb8      	it	lt
 800def4:	4618      	movlt	r0, r3
 800def6:	e7a6      	b.n	800de46 <_printf_i+0x15e>
 800def8:	2301      	movs	r3, #1
 800defa:	4632      	mov	r2, r6
 800defc:	4649      	mov	r1, r9
 800defe:	4640      	mov	r0, r8
 800df00:	47d0      	blx	sl
 800df02:	3001      	adds	r0, #1
 800df04:	d09d      	beq.n	800de42 <_printf_i+0x15a>
 800df06:	3501      	adds	r5, #1
 800df08:	68e3      	ldr	r3, [r4, #12]
 800df0a:	9903      	ldr	r1, [sp, #12]
 800df0c:	1a5b      	subs	r3, r3, r1
 800df0e:	42ab      	cmp	r3, r5
 800df10:	dcf2      	bgt.n	800def8 <_printf_i+0x210>
 800df12:	e7eb      	b.n	800deec <_printf_i+0x204>
 800df14:	2500      	movs	r5, #0
 800df16:	f104 0619 	add.w	r6, r4, #25
 800df1a:	e7f5      	b.n	800df08 <_printf_i+0x220>
 800df1c:	08010980 	.word	0x08010980
 800df20:	08010991 	.word	0x08010991

0800df24 <std>:
 800df24:	2300      	movs	r3, #0
 800df26:	b510      	push	{r4, lr}
 800df28:	4604      	mov	r4, r0
 800df2a:	e9c0 3300 	strd	r3, r3, [r0]
 800df2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df32:	6083      	str	r3, [r0, #8]
 800df34:	8181      	strh	r1, [r0, #12]
 800df36:	6643      	str	r3, [r0, #100]	@ 0x64
 800df38:	81c2      	strh	r2, [r0, #14]
 800df3a:	6183      	str	r3, [r0, #24]
 800df3c:	4619      	mov	r1, r3
 800df3e:	2208      	movs	r2, #8
 800df40:	305c      	adds	r0, #92	@ 0x5c
 800df42:	f000 f906 	bl	800e152 <memset>
 800df46:	4b0d      	ldr	r3, [pc, #52]	@ (800df7c <std+0x58>)
 800df48:	6263      	str	r3, [r4, #36]	@ 0x24
 800df4a:	4b0d      	ldr	r3, [pc, #52]	@ (800df80 <std+0x5c>)
 800df4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800df4e:	4b0d      	ldr	r3, [pc, #52]	@ (800df84 <std+0x60>)
 800df50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800df52:	4b0d      	ldr	r3, [pc, #52]	@ (800df88 <std+0x64>)
 800df54:	6323      	str	r3, [r4, #48]	@ 0x30
 800df56:	4b0d      	ldr	r3, [pc, #52]	@ (800df8c <std+0x68>)
 800df58:	6224      	str	r4, [r4, #32]
 800df5a:	429c      	cmp	r4, r3
 800df5c:	d006      	beq.n	800df6c <std+0x48>
 800df5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800df62:	4294      	cmp	r4, r2
 800df64:	d002      	beq.n	800df6c <std+0x48>
 800df66:	33d0      	adds	r3, #208	@ 0xd0
 800df68:	429c      	cmp	r4, r3
 800df6a:	d105      	bne.n	800df78 <std+0x54>
 800df6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800df70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df74:	f000 ba18 	b.w	800e3a8 <__retarget_lock_init_recursive>
 800df78:	bd10      	pop	{r4, pc}
 800df7a:	bf00      	nop
 800df7c:	0800e0cd 	.word	0x0800e0cd
 800df80:	0800e0ef 	.word	0x0800e0ef
 800df84:	0800e127 	.word	0x0800e127
 800df88:	0800e14b 	.word	0x0800e14b
 800df8c:	20002ae8 	.word	0x20002ae8

0800df90 <stdio_exit_handler>:
 800df90:	4a02      	ldr	r2, [pc, #8]	@ (800df9c <stdio_exit_handler+0xc>)
 800df92:	4903      	ldr	r1, [pc, #12]	@ (800dfa0 <stdio_exit_handler+0x10>)
 800df94:	4803      	ldr	r0, [pc, #12]	@ (800dfa4 <stdio_exit_handler+0x14>)
 800df96:	f000 b869 	b.w	800e06c <_fwalk_sglue>
 800df9a:	bf00      	nop
 800df9c:	200001fc 	.word	0x200001fc
 800dfa0:	080104f5 	.word	0x080104f5
 800dfa4:	20000378 	.word	0x20000378

0800dfa8 <cleanup_stdio>:
 800dfa8:	6841      	ldr	r1, [r0, #4]
 800dfaa:	4b0c      	ldr	r3, [pc, #48]	@ (800dfdc <cleanup_stdio+0x34>)
 800dfac:	4299      	cmp	r1, r3
 800dfae:	b510      	push	{r4, lr}
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	d001      	beq.n	800dfb8 <cleanup_stdio+0x10>
 800dfb4:	f002 fa9e 	bl	80104f4 <_fflush_r>
 800dfb8:	68a1      	ldr	r1, [r4, #8]
 800dfba:	4b09      	ldr	r3, [pc, #36]	@ (800dfe0 <cleanup_stdio+0x38>)
 800dfbc:	4299      	cmp	r1, r3
 800dfbe:	d002      	beq.n	800dfc6 <cleanup_stdio+0x1e>
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f002 fa97 	bl	80104f4 <_fflush_r>
 800dfc6:	68e1      	ldr	r1, [r4, #12]
 800dfc8:	4b06      	ldr	r3, [pc, #24]	@ (800dfe4 <cleanup_stdio+0x3c>)
 800dfca:	4299      	cmp	r1, r3
 800dfcc:	d004      	beq.n	800dfd8 <cleanup_stdio+0x30>
 800dfce:	4620      	mov	r0, r4
 800dfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfd4:	f002 ba8e 	b.w	80104f4 <_fflush_r>
 800dfd8:	bd10      	pop	{r4, pc}
 800dfda:	bf00      	nop
 800dfdc:	20002ae8 	.word	0x20002ae8
 800dfe0:	20002b50 	.word	0x20002b50
 800dfe4:	20002bb8 	.word	0x20002bb8

0800dfe8 <global_stdio_init.part.0>:
 800dfe8:	b510      	push	{r4, lr}
 800dfea:	4b0b      	ldr	r3, [pc, #44]	@ (800e018 <global_stdio_init.part.0+0x30>)
 800dfec:	4c0b      	ldr	r4, [pc, #44]	@ (800e01c <global_stdio_init.part.0+0x34>)
 800dfee:	4a0c      	ldr	r2, [pc, #48]	@ (800e020 <global_stdio_init.part.0+0x38>)
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	4620      	mov	r0, r4
 800dff4:	2200      	movs	r2, #0
 800dff6:	2104      	movs	r1, #4
 800dff8:	f7ff ff94 	bl	800df24 <std>
 800dffc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e000:	2201      	movs	r2, #1
 800e002:	2109      	movs	r1, #9
 800e004:	f7ff ff8e 	bl	800df24 <std>
 800e008:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e00c:	2202      	movs	r2, #2
 800e00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e012:	2112      	movs	r1, #18
 800e014:	f7ff bf86 	b.w	800df24 <std>
 800e018:	20002c20 	.word	0x20002c20
 800e01c:	20002ae8 	.word	0x20002ae8
 800e020:	0800df91 	.word	0x0800df91

0800e024 <__sfp_lock_acquire>:
 800e024:	4801      	ldr	r0, [pc, #4]	@ (800e02c <__sfp_lock_acquire+0x8>)
 800e026:	f000 b9c0 	b.w	800e3aa <__retarget_lock_acquire_recursive>
 800e02a:	bf00      	nop
 800e02c:	20002c29 	.word	0x20002c29

0800e030 <__sfp_lock_release>:
 800e030:	4801      	ldr	r0, [pc, #4]	@ (800e038 <__sfp_lock_release+0x8>)
 800e032:	f000 b9bb 	b.w	800e3ac <__retarget_lock_release_recursive>
 800e036:	bf00      	nop
 800e038:	20002c29 	.word	0x20002c29

0800e03c <__sinit>:
 800e03c:	b510      	push	{r4, lr}
 800e03e:	4604      	mov	r4, r0
 800e040:	f7ff fff0 	bl	800e024 <__sfp_lock_acquire>
 800e044:	6a23      	ldr	r3, [r4, #32]
 800e046:	b11b      	cbz	r3, 800e050 <__sinit+0x14>
 800e048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e04c:	f7ff bff0 	b.w	800e030 <__sfp_lock_release>
 800e050:	4b04      	ldr	r3, [pc, #16]	@ (800e064 <__sinit+0x28>)
 800e052:	6223      	str	r3, [r4, #32]
 800e054:	4b04      	ldr	r3, [pc, #16]	@ (800e068 <__sinit+0x2c>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1f5      	bne.n	800e048 <__sinit+0xc>
 800e05c:	f7ff ffc4 	bl	800dfe8 <global_stdio_init.part.0>
 800e060:	e7f2      	b.n	800e048 <__sinit+0xc>
 800e062:	bf00      	nop
 800e064:	0800dfa9 	.word	0x0800dfa9
 800e068:	20002c20 	.word	0x20002c20

0800e06c <_fwalk_sglue>:
 800e06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e070:	4607      	mov	r7, r0
 800e072:	4688      	mov	r8, r1
 800e074:	4614      	mov	r4, r2
 800e076:	2600      	movs	r6, #0
 800e078:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e07c:	f1b9 0901 	subs.w	r9, r9, #1
 800e080:	d505      	bpl.n	800e08e <_fwalk_sglue+0x22>
 800e082:	6824      	ldr	r4, [r4, #0]
 800e084:	2c00      	cmp	r4, #0
 800e086:	d1f7      	bne.n	800e078 <_fwalk_sglue+0xc>
 800e088:	4630      	mov	r0, r6
 800e08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e08e:	89ab      	ldrh	r3, [r5, #12]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d907      	bls.n	800e0a4 <_fwalk_sglue+0x38>
 800e094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e098:	3301      	adds	r3, #1
 800e09a:	d003      	beq.n	800e0a4 <_fwalk_sglue+0x38>
 800e09c:	4629      	mov	r1, r5
 800e09e:	4638      	mov	r0, r7
 800e0a0:	47c0      	blx	r8
 800e0a2:	4306      	orrs	r6, r0
 800e0a4:	3568      	adds	r5, #104	@ 0x68
 800e0a6:	e7e9      	b.n	800e07c <_fwalk_sglue+0x10>

0800e0a8 <iprintf>:
 800e0a8:	b40f      	push	{r0, r1, r2, r3}
 800e0aa:	b507      	push	{r0, r1, r2, lr}
 800e0ac:	4906      	ldr	r1, [pc, #24]	@ (800e0c8 <iprintf+0x20>)
 800e0ae:	ab04      	add	r3, sp, #16
 800e0b0:	6808      	ldr	r0, [r1, #0]
 800e0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0b6:	6881      	ldr	r1, [r0, #8]
 800e0b8:	9301      	str	r3, [sp, #4]
 800e0ba:	f002 f87f 	bl	80101bc <_vfiprintf_r>
 800e0be:	b003      	add	sp, #12
 800e0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0c4:	b004      	add	sp, #16
 800e0c6:	4770      	bx	lr
 800e0c8:	20000374 	.word	0x20000374

0800e0cc <__sread>:
 800e0cc:	b510      	push	{r4, lr}
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d4:	f000 f90a 	bl	800e2ec <_read_r>
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	bfab      	itete	ge
 800e0dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e0de:	89a3      	ldrhlt	r3, [r4, #12]
 800e0e0:	181b      	addge	r3, r3, r0
 800e0e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e0e6:	bfac      	ite	ge
 800e0e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e0ea:	81a3      	strhlt	r3, [r4, #12]
 800e0ec:	bd10      	pop	{r4, pc}

0800e0ee <__swrite>:
 800e0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f2:	461f      	mov	r7, r3
 800e0f4:	898b      	ldrh	r3, [r1, #12]
 800e0f6:	05db      	lsls	r3, r3, #23
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	4616      	mov	r6, r2
 800e0fe:	d505      	bpl.n	800e10c <__swrite+0x1e>
 800e100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e104:	2302      	movs	r3, #2
 800e106:	2200      	movs	r2, #0
 800e108:	f000 f8de 	bl	800e2c8 <_lseek_r>
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e112:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e116:	81a3      	strh	r3, [r4, #12]
 800e118:	4632      	mov	r2, r6
 800e11a:	463b      	mov	r3, r7
 800e11c:	4628      	mov	r0, r5
 800e11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e122:	f000 b905 	b.w	800e330 <_write_r>

0800e126 <__sseek>:
 800e126:	b510      	push	{r4, lr}
 800e128:	460c      	mov	r4, r1
 800e12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e12e:	f000 f8cb 	bl	800e2c8 <_lseek_r>
 800e132:	1c43      	adds	r3, r0, #1
 800e134:	89a3      	ldrh	r3, [r4, #12]
 800e136:	bf15      	itete	ne
 800e138:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e13a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e13e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e142:	81a3      	strheq	r3, [r4, #12]
 800e144:	bf18      	it	ne
 800e146:	81a3      	strhne	r3, [r4, #12]
 800e148:	bd10      	pop	{r4, pc}

0800e14a <__sclose>:
 800e14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e14e:	f000 b8ab 	b.w	800e2a8 <_close_r>

0800e152 <memset>:
 800e152:	4402      	add	r2, r0
 800e154:	4603      	mov	r3, r0
 800e156:	4293      	cmp	r3, r2
 800e158:	d100      	bne.n	800e15c <memset+0xa>
 800e15a:	4770      	bx	lr
 800e15c:	f803 1b01 	strb.w	r1, [r3], #1
 800e160:	e7f9      	b.n	800e156 <memset+0x4>
	...

0800e164 <strcasecmp>:
 800e164:	b530      	push	{r4, r5, lr}
 800e166:	4d0c      	ldr	r5, [pc, #48]	@ (800e198 <strcasecmp+0x34>)
 800e168:	4602      	mov	r2, r0
 800e16a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e16e:	5ce8      	ldrb	r0, [r5, r3]
 800e170:	f000 0003 	and.w	r0, r0, #3
 800e174:	2801      	cmp	r0, #1
 800e176:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e17a:	5c2c      	ldrb	r4, [r5, r0]
 800e17c:	f004 0403 	and.w	r4, r4, #3
 800e180:	bf08      	it	eq
 800e182:	3320      	addeq	r3, #32
 800e184:	2c01      	cmp	r4, #1
 800e186:	bf08      	it	eq
 800e188:	3020      	addeq	r0, #32
 800e18a:	1a1b      	subs	r3, r3, r0
 800e18c:	d102      	bne.n	800e194 <strcasecmp+0x30>
 800e18e:	2800      	cmp	r0, #0
 800e190:	d1eb      	bne.n	800e16a <strcasecmp+0x6>
 800e192:	bd30      	pop	{r4, r5, pc}
 800e194:	4618      	mov	r0, r3
 800e196:	e7fc      	b.n	800e192 <strcasecmp+0x2e>
 800e198:	08010be9 	.word	0x08010be9

0800e19c <strncmp>:
 800e19c:	b510      	push	{r4, lr}
 800e19e:	b16a      	cbz	r2, 800e1bc <strncmp+0x20>
 800e1a0:	3901      	subs	r1, #1
 800e1a2:	1884      	adds	r4, r0, r2
 800e1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d103      	bne.n	800e1b8 <strncmp+0x1c>
 800e1b0:	42a0      	cmp	r0, r4
 800e1b2:	d001      	beq.n	800e1b8 <strncmp+0x1c>
 800e1b4:	2a00      	cmp	r2, #0
 800e1b6:	d1f5      	bne.n	800e1a4 <strncmp+0x8>
 800e1b8:	1ad0      	subs	r0, r2, r3
 800e1ba:	bd10      	pop	{r4, pc}
 800e1bc:	4610      	mov	r0, r2
 800e1be:	e7fc      	b.n	800e1ba <strncmp+0x1e>

0800e1c0 <strncpy>:
 800e1c0:	b510      	push	{r4, lr}
 800e1c2:	3901      	subs	r1, #1
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	b132      	cbz	r2, 800e1d6 <strncpy+0x16>
 800e1c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e1cc:	f803 4b01 	strb.w	r4, [r3], #1
 800e1d0:	3a01      	subs	r2, #1
 800e1d2:	2c00      	cmp	r4, #0
 800e1d4:	d1f7      	bne.n	800e1c6 <strncpy+0x6>
 800e1d6:	441a      	add	r2, r3
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d100      	bne.n	800e1e0 <strncpy+0x20>
 800e1de:	bd10      	pop	{r4, pc}
 800e1e0:	f803 1b01 	strb.w	r1, [r3], #1
 800e1e4:	e7f9      	b.n	800e1da <strncpy+0x1a>
	...

0800e1e8 <strtok>:
 800e1e8:	4b16      	ldr	r3, [pc, #88]	@ (800e244 <strtok+0x5c>)
 800e1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ee:	681f      	ldr	r7, [r3, #0]
 800e1f0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e1f2:	4605      	mov	r5, r0
 800e1f4:	460e      	mov	r6, r1
 800e1f6:	b9ec      	cbnz	r4, 800e234 <strtok+0x4c>
 800e1f8:	2050      	movs	r0, #80	@ 0x50
 800e1fa:	f7fe faf5 	bl	800c7e8 <malloc>
 800e1fe:	4602      	mov	r2, r0
 800e200:	6478      	str	r0, [r7, #68]	@ 0x44
 800e202:	b920      	cbnz	r0, 800e20e <strtok+0x26>
 800e204:	4b10      	ldr	r3, [pc, #64]	@ (800e248 <strtok+0x60>)
 800e206:	4811      	ldr	r0, [pc, #68]	@ (800e24c <strtok+0x64>)
 800e208:	215b      	movs	r1, #91	@ 0x5b
 800e20a:	f000 f8e9 	bl	800e3e0 <__assert_func>
 800e20e:	e9c0 4400 	strd	r4, r4, [r0]
 800e212:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e216:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e21a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e21e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e222:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e226:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e22a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e22e:	6184      	str	r4, [r0, #24]
 800e230:	7704      	strb	r4, [r0, #28]
 800e232:	6244      	str	r4, [r0, #36]	@ 0x24
 800e234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e236:	4631      	mov	r1, r6
 800e238:	4628      	mov	r0, r5
 800e23a:	2301      	movs	r3, #1
 800e23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	f000 b806 	b.w	800e250 <__strtok_r>
 800e244:	20000374 	.word	0x20000374
 800e248:	080109a2 	.word	0x080109a2
 800e24c:	080109b9 	.word	0x080109b9

0800e250 <__strtok_r>:
 800e250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e252:	4604      	mov	r4, r0
 800e254:	b908      	cbnz	r0, 800e25a <__strtok_r+0xa>
 800e256:	6814      	ldr	r4, [r2, #0]
 800e258:	b144      	cbz	r4, 800e26c <__strtok_r+0x1c>
 800e25a:	4620      	mov	r0, r4
 800e25c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e260:	460f      	mov	r7, r1
 800e262:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e266:	b91e      	cbnz	r6, 800e270 <__strtok_r+0x20>
 800e268:	b965      	cbnz	r5, 800e284 <__strtok_r+0x34>
 800e26a:	6015      	str	r5, [r2, #0]
 800e26c:	2000      	movs	r0, #0
 800e26e:	e005      	b.n	800e27c <__strtok_r+0x2c>
 800e270:	42b5      	cmp	r5, r6
 800e272:	d1f6      	bne.n	800e262 <__strtok_r+0x12>
 800e274:	2b00      	cmp	r3, #0
 800e276:	d1f0      	bne.n	800e25a <__strtok_r+0xa>
 800e278:	6014      	str	r4, [r2, #0]
 800e27a:	7003      	strb	r3, [r0, #0]
 800e27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e27e:	461c      	mov	r4, r3
 800e280:	e00c      	b.n	800e29c <__strtok_r+0x4c>
 800e282:	b91d      	cbnz	r5, 800e28c <__strtok_r+0x3c>
 800e284:	4627      	mov	r7, r4
 800e286:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e28a:	460e      	mov	r6, r1
 800e28c:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e290:	42ab      	cmp	r3, r5
 800e292:	d1f6      	bne.n	800e282 <__strtok_r+0x32>
 800e294:	2b00      	cmp	r3, #0
 800e296:	d0f2      	beq.n	800e27e <__strtok_r+0x2e>
 800e298:	2300      	movs	r3, #0
 800e29a:	703b      	strb	r3, [r7, #0]
 800e29c:	6014      	str	r4, [r2, #0]
 800e29e:	e7ed      	b.n	800e27c <__strtok_r+0x2c>

0800e2a0 <_localeconv_r>:
 800e2a0:	4800      	ldr	r0, [pc, #0]	@ (800e2a4 <_localeconv_r+0x4>)
 800e2a2:	4770      	bx	lr
 800e2a4:	200002f8 	.word	0x200002f8

0800e2a8 <_close_r>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4d06      	ldr	r5, [pc, #24]	@ (800e2c4 <_close_r+0x1c>)
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	4608      	mov	r0, r1
 800e2b2:	602b      	str	r3, [r5, #0]
 800e2b4:	f7f4 fa90 	bl	80027d8 <_close>
 800e2b8:	1c43      	adds	r3, r0, #1
 800e2ba:	d102      	bne.n	800e2c2 <_close_r+0x1a>
 800e2bc:	682b      	ldr	r3, [r5, #0]
 800e2be:	b103      	cbz	r3, 800e2c2 <_close_r+0x1a>
 800e2c0:	6023      	str	r3, [r4, #0]
 800e2c2:	bd38      	pop	{r3, r4, r5, pc}
 800e2c4:	20002c24 	.word	0x20002c24

0800e2c8 <_lseek_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	4d07      	ldr	r5, [pc, #28]	@ (800e2e8 <_lseek_r+0x20>)
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	4608      	mov	r0, r1
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	602a      	str	r2, [r5, #0]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	f7f4 faa5 	bl	8002826 <_lseek>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	d102      	bne.n	800e2e6 <_lseek_r+0x1e>
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	b103      	cbz	r3, 800e2e6 <_lseek_r+0x1e>
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	20002c24 	.word	0x20002c24

0800e2ec <_read_r>:
 800e2ec:	b538      	push	{r3, r4, r5, lr}
 800e2ee:	4d07      	ldr	r5, [pc, #28]	@ (800e30c <_read_r+0x20>)
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	4608      	mov	r0, r1
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	602a      	str	r2, [r5, #0]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	f7f4 fa4f 	bl	800279e <_read>
 800e300:	1c43      	adds	r3, r0, #1
 800e302:	d102      	bne.n	800e30a <_read_r+0x1e>
 800e304:	682b      	ldr	r3, [r5, #0]
 800e306:	b103      	cbz	r3, 800e30a <_read_r+0x1e>
 800e308:	6023      	str	r3, [r4, #0]
 800e30a:	bd38      	pop	{r3, r4, r5, pc}
 800e30c:	20002c24 	.word	0x20002c24

0800e310 <_sbrk_r>:
 800e310:	b538      	push	{r3, r4, r5, lr}
 800e312:	4d06      	ldr	r5, [pc, #24]	@ (800e32c <_sbrk_r+0x1c>)
 800e314:	2300      	movs	r3, #0
 800e316:	4604      	mov	r4, r0
 800e318:	4608      	mov	r0, r1
 800e31a:	602b      	str	r3, [r5, #0]
 800e31c:	f7f4 fa90 	bl	8002840 <_sbrk>
 800e320:	1c43      	adds	r3, r0, #1
 800e322:	d102      	bne.n	800e32a <_sbrk_r+0x1a>
 800e324:	682b      	ldr	r3, [r5, #0]
 800e326:	b103      	cbz	r3, 800e32a <_sbrk_r+0x1a>
 800e328:	6023      	str	r3, [r4, #0]
 800e32a:	bd38      	pop	{r3, r4, r5, pc}
 800e32c:	20002c24 	.word	0x20002c24

0800e330 <_write_r>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4d07      	ldr	r5, [pc, #28]	@ (800e350 <_write_r+0x20>)
 800e334:	4604      	mov	r4, r0
 800e336:	4608      	mov	r0, r1
 800e338:	4611      	mov	r1, r2
 800e33a:	2200      	movs	r2, #0
 800e33c:	602a      	str	r2, [r5, #0]
 800e33e:	461a      	mov	r2, r3
 800e340:	f7fd fcd3 	bl	800bcea <_write>
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	d102      	bne.n	800e34e <_write_r+0x1e>
 800e348:	682b      	ldr	r3, [r5, #0]
 800e34a:	b103      	cbz	r3, 800e34e <_write_r+0x1e>
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	bd38      	pop	{r3, r4, r5, pc}
 800e350:	20002c24 	.word	0x20002c24

0800e354 <__errno>:
 800e354:	4b01      	ldr	r3, [pc, #4]	@ (800e35c <__errno+0x8>)
 800e356:	6818      	ldr	r0, [r3, #0]
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	20000374 	.word	0x20000374

0800e360 <__libc_init_array>:
 800e360:	b570      	push	{r4, r5, r6, lr}
 800e362:	4d0d      	ldr	r5, [pc, #52]	@ (800e398 <__libc_init_array+0x38>)
 800e364:	4c0d      	ldr	r4, [pc, #52]	@ (800e39c <__libc_init_array+0x3c>)
 800e366:	1b64      	subs	r4, r4, r5
 800e368:	10a4      	asrs	r4, r4, #2
 800e36a:	2600      	movs	r6, #0
 800e36c:	42a6      	cmp	r6, r4
 800e36e:	d109      	bne.n	800e384 <__libc_init_array+0x24>
 800e370:	4d0b      	ldr	r5, [pc, #44]	@ (800e3a0 <__libc_init_array+0x40>)
 800e372:	4c0c      	ldr	r4, [pc, #48]	@ (800e3a4 <__libc_init_array+0x44>)
 800e374:	f002 fa70 	bl	8010858 <_init>
 800e378:	1b64      	subs	r4, r4, r5
 800e37a:	10a4      	asrs	r4, r4, #2
 800e37c:	2600      	movs	r6, #0
 800e37e:	42a6      	cmp	r6, r4
 800e380:	d105      	bne.n	800e38e <__libc_init_array+0x2e>
 800e382:	bd70      	pop	{r4, r5, r6, pc}
 800e384:	f855 3b04 	ldr.w	r3, [r5], #4
 800e388:	4798      	blx	r3
 800e38a:	3601      	adds	r6, #1
 800e38c:	e7ee      	b.n	800e36c <__libc_init_array+0xc>
 800e38e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e392:	4798      	blx	r3
 800e394:	3601      	adds	r6, #1
 800e396:	e7f2      	b.n	800e37e <__libc_init_array+0x1e>
 800e398:	08010df0 	.word	0x08010df0
 800e39c:	08010df0 	.word	0x08010df0
 800e3a0:	08010df0 	.word	0x08010df0
 800e3a4:	08010df4 	.word	0x08010df4

0800e3a8 <__retarget_lock_init_recursive>:
 800e3a8:	4770      	bx	lr

0800e3aa <__retarget_lock_acquire_recursive>:
 800e3aa:	4770      	bx	lr

0800e3ac <__retarget_lock_release_recursive>:
 800e3ac:	4770      	bx	lr

0800e3ae <memcpy>:
 800e3ae:	440a      	add	r2, r1
 800e3b0:	4291      	cmp	r1, r2
 800e3b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3b6:	d100      	bne.n	800e3ba <memcpy+0xc>
 800e3b8:	4770      	bx	lr
 800e3ba:	b510      	push	{r4, lr}
 800e3bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3c4:	4291      	cmp	r1, r2
 800e3c6:	d1f9      	bne.n	800e3bc <memcpy+0xe>
 800e3c8:	bd10      	pop	{r4, pc}
 800e3ca:	0000      	movs	r0, r0
 800e3cc:	0000      	movs	r0, r0
	...

0800e3d0 <nan>:
 800e3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e3d8 <nan+0x8>
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	00000000 	.word	0x00000000
 800e3dc:	7ff80000 	.word	0x7ff80000

0800e3e0 <__assert_func>:
 800e3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3e2:	4614      	mov	r4, r2
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	4b09      	ldr	r3, [pc, #36]	@ (800e40c <__assert_func+0x2c>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	68d8      	ldr	r0, [r3, #12]
 800e3ee:	b14c      	cbz	r4, 800e404 <__assert_func+0x24>
 800e3f0:	4b07      	ldr	r3, [pc, #28]	@ (800e410 <__assert_func+0x30>)
 800e3f2:	9100      	str	r1, [sp, #0]
 800e3f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3f8:	4906      	ldr	r1, [pc, #24]	@ (800e414 <__assert_func+0x34>)
 800e3fa:	462b      	mov	r3, r5
 800e3fc:	f002 f8a2 	bl	8010544 <fiprintf>
 800e400:	f002 f946 	bl	8010690 <abort>
 800e404:	4b04      	ldr	r3, [pc, #16]	@ (800e418 <__assert_func+0x38>)
 800e406:	461c      	mov	r4, r3
 800e408:	e7f3      	b.n	800e3f2 <__assert_func+0x12>
 800e40a:	bf00      	nop
 800e40c:	20000374 	.word	0x20000374
 800e410:	08010a1b 	.word	0x08010a1b
 800e414:	08010a28 	.word	0x08010a28
 800e418:	08010a56 	.word	0x08010a56

0800e41c <quorem>:
 800e41c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e420:	6903      	ldr	r3, [r0, #16]
 800e422:	690c      	ldr	r4, [r1, #16]
 800e424:	42a3      	cmp	r3, r4
 800e426:	4607      	mov	r7, r0
 800e428:	db7e      	blt.n	800e528 <quorem+0x10c>
 800e42a:	3c01      	subs	r4, #1
 800e42c:	f101 0814 	add.w	r8, r1, #20
 800e430:	00a3      	lsls	r3, r4, #2
 800e432:	f100 0514 	add.w	r5, r0, #20
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e446:	3301      	adds	r3, #1
 800e448:	429a      	cmp	r2, r3
 800e44a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e44e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e452:	d32e      	bcc.n	800e4b2 <quorem+0x96>
 800e454:	f04f 0a00 	mov.w	sl, #0
 800e458:	46c4      	mov	ip, r8
 800e45a:	46ae      	mov	lr, r5
 800e45c:	46d3      	mov	fp, sl
 800e45e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e462:	b298      	uxth	r0, r3
 800e464:	fb06 a000 	mla	r0, r6, r0, sl
 800e468:	0c02      	lsrs	r2, r0, #16
 800e46a:	0c1b      	lsrs	r3, r3, #16
 800e46c:	fb06 2303 	mla	r3, r6, r3, r2
 800e470:	f8de 2000 	ldr.w	r2, [lr]
 800e474:	b280      	uxth	r0, r0
 800e476:	b292      	uxth	r2, r2
 800e478:	1a12      	subs	r2, r2, r0
 800e47a:	445a      	add	r2, fp
 800e47c:	f8de 0000 	ldr.w	r0, [lr]
 800e480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e484:	b29b      	uxth	r3, r3
 800e486:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e48a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e48e:	b292      	uxth	r2, r2
 800e490:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e494:	45e1      	cmp	r9, ip
 800e496:	f84e 2b04 	str.w	r2, [lr], #4
 800e49a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e49e:	d2de      	bcs.n	800e45e <quorem+0x42>
 800e4a0:	9b00      	ldr	r3, [sp, #0]
 800e4a2:	58eb      	ldr	r3, [r5, r3]
 800e4a4:	b92b      	cbnz	r3, 800e4b2 <quorem+0x96>
 800e4a6:	9b01      	ldr	r3, [sp, #4]
 800e4a8:	3b04      	subs	r3, #4
 800e4aa:	429d      	cmp	r5, r3
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	d32f      	bcc.n	800e510 <quorem+0xf4>
 800e4b0:	613c      	str	r4, [r7, #16]
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	f001 fc5e 	bl	800fd74 <__mcmp>
 800e4b8:	2800      	cmp	r0, #0
 800e4ba:	db25      	blt.n	800e508 <quorem+0xec>
 800e4bc:	4629      	mov	r1, r5
 800e4be:	2000      	movs	r0, #0
 800e4c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4c4:	f8d1 c000 	ldr.w	ip, [r1]
 800e4c8:	fa1f fe82 	uxth.w	lr, r2
 800e4cc:	fa1f f38c 	uxth.w	r3, ip
 800e4d0:	eba3 030e 	sub.w	r3, r3, lr
 800e4d4:	4403      	add	r3, r0
 800e4d6:	0c12      	lsrs	r2, r2, #16
 800e4d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e4dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4e6:	45c1      	cmp	r9, r8
 800e4e8:	f841 3b04 	str.w	r3, [r1], #4
 800e4ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e4f0:	d2e6      	bcs.n	800e4c0 <quorem+0xa4>
 800e4f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4fa:	b922      	cbnz	r2, 800e506 <quorem+0xea>
 800e4fc:	3b04      	subs	r3, #4
 800e4fe:	429d      	cmp	r5, r3
 800e500:	461a      	mov	r2, r3
 800e502:	d30b      	bcc.n	800e51c <quorem+0x100>
 800e504:	613c      	str	r4, [r7, #16]
 800e506:	3601      	adds	r6, #1
 800e508:	4630      	mov	r0, r6
 800e50a:	b003      	add	sp, #12
 800e50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e510:	6812      	ldr	r2, [r2, #0]
 800e512:	3b04      	subs	r3, #4
 800e514:	2a00      	cmp	r2, #0
 800e516:	d1cb      	bne.n	800e4b0 <quorem+0x94>
 800e518:	3c01      	subs	r4, #1
 800e51a:	e7c6      	b.n	800e4aa <quorem+0x8e>
 800e51c:	6812      	ldr	r2, [r2, #0]
 800e51e:	3b04      	subs	r3, #4
 800e520:	2a00      	cmp	r2, #0
 800e522:	d1ef      	bne.n	800e504 <quorem+0xe8>
 800e524:	3c01      	subs	r4, #1
 800e526:	e7ea      	b.n	800e4fe <quorem+0xe2>
 800e528:	2000      	movs	r0, #0
 800e52a:	e7ee      	b.n	800e50a <quorem+0xee>
 800e52c:	0000      	movs	r0, r0
	...

0800e530 <_dtoa_r>:
 800e530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e534:	69c7      	ldr	r7, [r0, #28]
 800e536:	b097      	sub	sp, #92	@ 0x5c
 800e538:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e53c:	ec55 4b10 	vmov	r4, r5, d0
 800e540:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e542:	9107      	str	r1, [sp, #28]
 800e544:	4681      	mov	r9, r0
 800e546:	920c      	str	r2, [sp, #48]	@ 0x30
 800e548:	9311      	str	r3, [sp, #68]	@ 0x44
 800e54a:	b97f      	cbnz	r7, 800e56c <_dtoa_r+0x3c>
 800e54c:	2010      	movs	r0, #16
 800e54e:	f7fe f94b 	bl	800c7e8 <malloc>
 800e552:	4602      	mov	r2, r0
 800e554:	f8c9 001c 	str.w	r0, [r9, #28]
 800e558:	b920      	cbnz	r0, 800e564 <_dtoa_r+0x34>
 800e55a:	4ba9      	ldr	r3, [pc, #676]	@ (800e800 <_dtoa_r+0x2d0>)
 800e55c:	21ef      	movs	r1, #239	@ 0xef
 800e55e:	48a9      	ldr	r0, [pc, #676]	@ (800e804 <_dtoa_r+0x2d4>)
 800e560:	f7ff ff3e 	bl	800e3e0 <__assert_func>
 800e564:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e568:	6007      	str	r7, [r0, #0]
 800e56a:	60c7      	str	r7, [r0, #12]
 800e56c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e570:	6819      	ldr	r1, [r3, #0]
 800e572:	b159      	cbz	r1, 800e58c <_dtoa_r+0x5c>
 800e574:	685a      	ldr	r2, [r3, #4]
 800e576:	604a      	str	r2, [r1, #4]
 800e578:	2301      	movs	r3, #1
 800e57a:	4093      	lsls	r3, r2
 800e57c:	608b      	str	r3, [r1, #8]
 800e57e:	4648      	mov	r0, r9
 800e580:	f001 f97c 	bl	800f87c <_Bfree>
 800e584:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e588:	2200      	movs	r2, #0
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	1e2b      	subs	r3, r5, #0
 800e58e:	bfb9      	ittee	lt
 800e590:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e594:	9305      	strlt	r3, [sp, #20]
 800e596:	2300      	movge	r3, #0
 800e598:	6033      	strge	r3, [r6, #0]
 800e59a:	9f05      	ldr	r7, [sp, #20]
 800e59c:	4b9a      	ldr	r3, [pc, #616]	@ (800e808 <_dtoa_r+0x2d8>)
 800e59e:	bfbc      	itt	lt
 800e5a0:	2201      	movlt	r2, #1
 800e5a2:	6032      	strlt	r2, [r6, #0]
 800e5a4:	43bb      	bics	r3, r7
 800e5a6:	d112      	bne.n	800e5ce <_dtoa_r+0x9e>
 800e5a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e5b4:	4323      	orrs	r3, r4
 800e5b6:	f000 855a 	beq.w	800f06e <_dtoa_r+0xb3e>
 800e5ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e5bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e81c <_dtoa_r+0x2ec>
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f000 855c 	beq.w	800f07e <_dtoa_r+0xb4e>
 800e5c6:	f10a 0303 	add.w	r3, sl, #3
 800e5ca:	f000 bd56 	b.w	800f07a <_dtoa_r+0xb4a>
 800e5ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	ec51 0b17 	vmov	r0, r1, d7
 800e5d8:	2300      	movs	r3, #0
 800e5da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e5de:	f7f2 fa83 	bl	8000ae8 <__aeabi_dcmpeq>
 800e5e2:	4680      	mov	r8, r0
 800e5e4:	b158      	cbz	r0, 800e5fe <_dtoa_r+0xce>
 800e5e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	6013      	str	r3, [r2, #0]
 800e5ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e5ee:	b113      	cbz	r3, 800e5f6 <_dtoa_r+0xc6>
 800e5f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e5f2:	4b86      	ldr	r3, [pc, #536]	@ (800e80c <_dtoa_r+0x2dc>)
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e820 <_dtoa_r+0x2f0>
 800e5fa:	f000 bd40 	b.w	800f07e <_dtoa_r+0xb4e>
 800e5fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e602:	aa14      	add	r2, sp, #80	@ 0x50
 800e604:	a915      	add	r1, sp, #84	@ 0x54
 800e606:	4648      	mov	r0, r9
 800e608:	f001 fcd4 	bl	800ffb4 <__d2b>
 800e60c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e610:	9002      	str	r0, [sp, #8]
 800e612:	2e00      	cmp	r6, #0
 800e614:	d078      	beq.n	800e708 <_dtoa_r+0x1d8>
 800e616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e618:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e61c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e624:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e628:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e62c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e630:	4619      	mov	r1, r3
 800e632:	2200      	movs	r2, #0
 800e634:	4b76      	ldr	r3, [pc, #472]	@ (800e810 <_dtoa_r+0x2e0>)
 800e636:	f7f1 fe37 	bl	80002a8 <__aeabi_dsub>
 800e63a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e7e8 <_dtoa_r+0x2b8>)
 800e63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e640:	f7f1 ffea 	bl	8000618 <__aeabi_dmul>
 800e644:	a36a      	add	r3, pc, #424	@ (adr r3, 800e7f0 <_dtoa_r+0x2c0>)
 800e646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64a:	f7f1 fe2f 	bl	80002ac <__adddf3>
 800e64e:	4604      	mov	r4, r0
 800e650:	4630      	mov	r0, r6
 800e652:	460d      	mov	r5, r1
 800e654:	f7f1 ff76 	bl	8000544 <__aeabi_i2d>
 800e658:	a367      	add	r3, pc, #412	@ (adr r3, 800e7f8 <_dtoa_r+0x2c8>)
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	f7f1 ffdb 	bl	8000618 <__aeabi_dmul>
 800e662:	4602      	mov	r2, r0
 800e664:	460b      	mov	r3, r1
 800e666:	4620      	mov	r0, r4
 800e668:	4629      	mov	r1, r5
 800e66a:	f7f1 fe1f 	bl	80002ac <__adddf3>
 800e66e:	4604      	mov	r4, r0
 800e670:	460d      	mov	r5, r1
 800e672:	f7f2 fa81 	bl	8000b78 <__aeabi_d2iz>
 800e676:	2200      	movs	r2, #0
 800e678:	4607      	mov	r7, r0
 800e67a:	2300      	movs	r3, #0
 800e67c:	4620      	mov	r0, r4
 800e67e:	4629      	mov	r1, r5
 800e680:	f7f2 fa3c 	bl	8000afc <__aeabi_dcmplt>
 800e684:	b140      	cbz	r0, 800e698 <_dtoa_r+0x168>
 800e686:	4638      	mov	r0, r7
 800e688:	f7f1 ff5c 	bl	8000544 <__aeabi_i2d>
 800e68c:	4622      	mov	r2, r4
 800e68e:	462b      	mov	r3, r5
 800e690:	f7f2 fa2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800e694:	b900      	cbnz	r0, 800e698 <_dtoa_r+0x168>
 800e696:	3f01      	subs	r7, #1
 800e698:	2f16      	cmp	r7, #22
 800e69a:	d852      	bhi.n	800e742 <_dtoa_r+0x212>
 800e69c:	4b5d      	ldr	r3, [pc, #372]	@ (800e814 <_dtoa_r+0x2e4>)
 800e69e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e6aa:	f7f2 fa27 	bl	8000afc <__aeabi_dcmplt>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d049      	beq.n	800e746 <_dtoa_r+0x216>
 800e6b2:	3f01      	subs	r7, #1
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e6ba:	1b9b      	subs	r3, r3, r6
 800e6bc:	1e5a      	subs	r2, r3, #1
 800e6be:	bf45      	ittet	mi
 800e6c0:	f1c3 0301 	rsbmi	r3, r3, #1
 800e6c4:	9300      	strmi	r3, [sp, #0]
 800e6c6:	2300      	movpl	r3, #0
 800e6c8:	2300      	movmi	r3, #0
 800e6ca:	9206      	str	r2, [sp, #24]
 800e6cc:	bf54      	ite	pl
 800e6ce:	9300      	strpl	r3, [sp, #0]
 800e6d0:	9306      	strmi	r3, [sp, #24]
 800e6d2:	2f00      	cmp	r7, #0
 800e6d4:	db39      	blt.n	800e74a <_dtoa_r+0x21a>
 800e6d6:	9b06      	ldr	r3, [sp, #24]
 800e6d8:	970d      	str	r7, [sp, #52]	@ 0x34
 800e6da:	443b      	add	r3, r7
 800e6dc:	9306      	str	r3, [sp, #24]
 800e6de:	2300      	movs	r3, #0
 800e6e0:	9308      	str	r3, [sp, #32]
 800e6e2:	9b07      	ldr	r3, [sp, #28]
 800e6e4:	2b09      	cmp	r3, #9
 800e6e6:	d863      	bhi.n	800e7b0 <_dtoa_r+0x280>
 800e6e8:	2b05      	cmp	r3, #5
 800e6ea:	bfc4      	itt	gt
 800e6ec:	3b04      	subgt	r3, #4
 800e6ee:	9307      	strgt	r3, [sp, #28]
 800e6f0:	9b07      	ldr	r3, [sp, #28]
 800e6f2:	f1a3 0302 	sub.w	r3, r3, #2
 800e6f6:	bfcc      	ite	gt
 800e6f8:	2400      	movgt	r4, #0
 800e6fa:	2401      	movle	r4, #1
 800e6fc:	2b03      	cmp	r3, #3
 800e6fe:	d863      	bhi.n	800e7c8 <_dtoa_r+0x298>
 800e700:	e8df f003 	tbb	[pc, r3]
 800e704:	2b375452 	.word	0x2b375452
 800e708:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e70c:	441e      	add	r6, r3
 800e70e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e712:	2b20      	cmp	r3, #32
 800e714:	bfc1      	itttt	gt
 800e716:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e71a:	409f      	lslgt	r7, r3
 800e71c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e720:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e724:	bfd6      	itet	le
 800e726:	f1c3 0320 	rsble	r3, r3, #32
 800e72a:	ea47 0003 	orrgt.w	r0, r7, r3
 800e72e:	fa04 f003 	lslle.w	r0, r4, r3
 800e732:	f7f1 fef7 	bl	8000524 <__aeabi_ui2d>
 800e736:	2201      	movs	r2, #1
 800e738:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e73c:	3e01      	subs	r6, #1
 800e73e:	9212      	str	r2, [sp, #72]	@ 0x48
 800e740:	e776      	b.n	800e630 <_dtoa_r+0x100>
 800e742:	2301      	movs	r3, #1
 800e744:	e7b7      	b.n	800e6b6 <_dtoa_r+0x186>
 800e746:	9010      	str	r0, [sp, #64]	@ 0x40
 800e748:	e7b6      	b.n	800e6b8 <_dtoa_r+0x188>
 800e74a:	9b00      	ldr	r3, [sp, #0]
 800e74c:	1bdb      	subs	r3, r3, r7
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	427b      	negs	r3, r7
 800e752:	9308      	str	r3, [sp, #32]
 800e754:	2300      	movs	r3, #0
 800e756:	930d      	str	r3, [sp, #52]	@ 0x34
 800e758:	e7c3      	b.n	800e6e2 <_dtoa_r+0x1b2>
 800e75a:	2301      	movs	r3, #1
 800e75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e75e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e760:	eb07 0b03 	add.w	fp, r7, r3
 800e764:	f10b 0301 	add.w	r3, fp, #1
 800e768:	2b01      	cmp	r3, #1
 800e76a:	9303      	str	r3, [sp, #12]
 800e76c:	bfb8      	it	lt
 800e76e:	2301      	movlt	r3, #1
 800e770:	e006      	b.n	800e780 <_dtoa_r+0x250>
 800e772:	2301      	movs	r3, #1
 800e774:	9309      	str	r3, [sp, #36]	@ 0x24
 800e776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e778:	2b00      	cmp	r3, #0
 800e77a:	dd28      	ble.n	800e7ce <_dtoa_r+0x29e>
 800e77c:	469b      	mov	fp, r3
 800e77e:	9303      	str	r3, [sp, #12]
 800e780:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e784:	2100      	movs	r1, #0
 800e786:	2204      	movs	r2, #4
 800e788:	f102 0514 	add.w	r5, r2, #20
 800e78c:	429d      	cmp	r5, r3
 800e78e:	d926      	bls.n	800e7de <_dtoa_r+0x2ae>
 800e790:	6041      	str	r1, [r0, #4]
 800e792:	4648      	mov	r0, r9
 800e794:	f001 f832 	bl	800f7fc <_Balloc>
 800e798:	4682      	mov	sl, r0
 800e79a:	2800      	cmp	r0, #0
 800e79c:	d142      	bne.n	800e824 <_dtoa_r+0x2f4>
 800e79e:	4b1e      	ldr	r3, [pc, #120]	@ (800e818 <_dtoa_r+0x2e8>)
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	f240 11af 	movw	r1, #431	@ 0x1af
 800e7a6:	e6da      	b.n	800e55e <_dtoa_r+0x2e>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e7e3      	b.n	800e774 <_dtoa_r+0x244>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	e7d5      	b.n	800e75c <_dtoa_r+0x22c>
 800e7b0:	2401      	movs	r4, #1
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	9307      	str	r3, [sp, #28]
 800e7b6:	9409      	str	r4, [sp, #36]	@ 0x24
 800e7b8:	f04f 3bff 	mov.w	fp, #4294967295
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f8cd b00c 	str.w	fp, [sp, #12]
 800e7c2:	2312      	movs	r3, #18
 800e7c4:	920c      	str	r2, [sp, #48]	@ 0x30
 800e7c6:	e7db      	b.n	800e780 <_dtoa_r+0x250>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7cc:	e7f4      	b.n	800e7b8 <_dtoa_r+0x288>
 800e7ce:	f04f 0b01 	mov.w	fp, #1
 800e7d2:	f8cd b00c 	str.w	fp, [sp, #12]
 800e7d6:	465b      	mov	r3, fp
 800e7d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e7dc:	e7d0      	b.n	800e780 <_dtoa_r+0x250>
 800e7de:	3101      	adds	r1, #1
 800e7e0:	0052      	lsls	r2, r2, #1
 800e7e2:	e7d1      	b.n	800e788 <_dtoa_r+0x258>
 800e7e4:	f3af 8000 	nop.w
 800e7e8:	636f4361 	.word	0x636f4361
 800e7ec:	3fd287a7 	.word	0x3fd287a7
 800e7f0:	8b60c8b3 	.word	0x8b60c8b3
 800e7f4:	3fc68a28 	.word	0x3fc68a28
 800e7f8:	509f79fb 	.word	0x509f79fb
 800e7fc:	3fd34413 	.word	0x3fd34413
 800e800:	080109a2 	.word	0x080109a2
 800e804:	08010a64 	.word	0x08010a64
 800e808:	7ff00000 	.word	0x7ff00000
 800e80c:	0801097f 	.word	0x0801097f
 800e810:	3ff80000 	.word	0x3ff80000
 800e814:	08010d20 	.word	0x08010d20
 800e818:	08010abc 	.word	0x08010abc
 800e81c:	08010a60 	.word	0x08010a60
 800e820:	0801097e 	.word	0x0801097e
 800e824:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e828:	6018      	str	r0, [r3, #0]
 800e82a:	9b03      	ldr	r3, [sp, #12]
 800e82c:	2b0e      	cmp	r3, #14
 800e82e:	f200 80a1 	bhi.w	800e974 <_dtoa_r+0x444>
 800e832:	2c00      	cmp	r4, #0
 800e834:	f000 809e 	beq.w	800e974 <_dtoa_r+0x444>
 800e838:	2f00      	cmp	r7, #0
 800e83a:	dd33      	ble.n	800e8a4 <_dtoa_r+0x374>
 800e83c:	4b9c      	ldr	r3, [pc, #624]	@ (800eab0 <_dtoa_r+0x580>)
 800e83e:	f007 020f 	and.w	r2, r7, #15
 800e842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e846:	ed93 7b00 	vldr	d7, [r3]
 800e84a:	05f8      	lsls	r0, r7, #23
 800e84c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e850:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e854:	d516      	bpl.n	800e884 <_dtoa_r+0x354>
 800e856:	4b97      	ldr	r3, [pc, #604]	@ (800eab4 <_dtoa_r+0x584>)
 800e858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e85c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e860:	f7f2 f804 	bl	800086c <__aeabi_ddiv>
 800e864:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e868:	f004 040f 	and.w	r4, r4, #15
 800e86c:	2603      	movs	r6, #3
 800e86e:	4d91      	ldr	r5, [pc, #580]	@ (800eab4 <_dtoa_r+0x584>)
 800e870:	b954      	cbnz	r4, 800e888 <_dtoa_r+0x358>
 800e872:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e87a:	f7f1 fff7 	bl	800086c <__aeabi_ddiv>
 800e87e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e882:	e028      	b.n	800e8d6 <_dtoa_r+0x3a6>
 800e884:	2602      	movs	r6, #2
 800e886:	e7f2      	b.n	800e86e <_dtoa_r+0x33e>
 800e888:	07e1      	lsls	r1, r4, #31
 800e88a:	d508      	bpl.n	800e89e <_dtoa_r+0x36e>
 800e88c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e890:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e894:	f7f1 fec0 	bl	8000618 <__aeabi_dmul>
 800e898:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e89c:	3601      	adds	r6, #1
 800e89e:	1064      	asrs	r4, r4, #1
 800e8a0:	3508      	adds	r5, #8
 800e8a2:	e7e5      	b.n	800e870 <_dtoa_r+0x340>
 800e8a4:	f000 80af 	beq.w	800ea06 <_dtoa_r+0x4d6>
 800e8a8:	427c      	negs	r4, r7
 800e8aa:	4b81      	ldr	r3, [pc, #516]	@ (800eab0 <_dtoa_r+0x580>)
 800e8ac:	4d81      	ldr	r5, [pc, #516]	@ (800eab4 <_dtoa_r+0x584>)
 800e8ae:	f004 020f 	and.w	r2, r4, #15
 800e8b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e8be:	f7f1 feab 	bl	8000618 <__aeabi_dmul>
 800e8c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8c6:	1124      	asrs	r4, r4, #4
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	2602      	movs	r6, #2
 800e8cc:	2c00      	cmp	r4, #0
 800e8ce:	f040 808f 	bne.w	800e9f0 <_dtoa_r+0x4c0>
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1d3      	bne.n	800e87e <_dtoa_r+0x34e>
 800e8d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f000 8094 	beq.w	800ea0a <_dtoa_r+0x4da>
 800e8e2:	4b75      	ldr	r3, [pc, #468]	@ (800eab8 <_dtoa_r+0x588>)
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	f7f2 f907 	bl	8000afc <__aeabi_dcmplt>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	f000 808b 	beq.w	800ea0a <_dtoa_r+0x4da>
 800e8f4:	9b03      	ldr	r3, [sp, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f000 8087 	beq.w	800ea0a <_dtoa_r+0x4da>
 800e8fc:	f1bb 0f00 	cmp.w	fp, #0
 800e900:	dd34      	ble.n	800e96c <_dtoa_r+0x43c>
 800e902:	4620      	mov	r0, r4
 800e904:	4b6d      	ldr	r3, [pc, #436]	@ (800eabc <_dtoa_r+0x58c>)
 800e906:	2200      	movs	r2, #0
 800e908:	4629      	mov	r1, r5
 800e90a:	f7f1 fe85 	bl	8000618 <__aeabi_dmul>
 800e90e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e912:	f107 38ff 	add.w	r8, r7, #4294967295
 800e916:	3601      	adds	r6, #1
 800e918:	465c      	mov	r4, fp
 800e91a:	4630      	mov	r0, r6
 800e91c:	f7f1 fe12 	bl	8000544 <__aeabi_i2d>
 800e920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e924:	f7f1 fe78 	bl	8000618 <__aeabi_dmul>
 800e928:	4b65      	ldr	r3, [pc, #404]	@ (800eac0 <_dtoa_r+0x590>)
 800e92a:	2200      	movs	r2, #0
 800e92c:	f7f1 fcbe 	bl	80002ac <__adddf3>
 800e930:	4605      	mov	r5, r0
 800e932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e936:	2c00      	cmp	r4, #0
 800e938:	d16a      	bne.n	800ea10 <_dtoa_r+0x4e0>
 800e93a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e93e:	4b61      	ldr	r3, [pc, #388]	@ (800eac4 <_dtoa_r+0x594>)
 800e940:	2200      	movs	r2, #0
 800e942:	f7f1 fcb1 	bl	80002a8 <__aeabi_dsub>
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e94e:	462a      	mov	r2, r5
 800e950:	4633      	mov	r3, r6
 800e952:	f7f2 f8f1 	bl	8000b38 <__aeabi_dcmpgt>
 800e956:	2800      	cmp	r0, #0
 800e958:	f040 8298 	bne.w	800ee8c <_dtoa_r+0x95c>
 800e95c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e960:	462a      	mov	r2, r5
 800e962:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e966:	f7f2 f8c9 	bl	8000afc <__aeabi_dcmplt>
 800e96a:	bb38      	cbnz	r0, 800e9bc <_dtoa_r+0x48c>
 800e96c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e970:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e974:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e976:	2b00      	cmp	r3, #0
 800e978:	f2c0 8157 	blt.w	800ec2a <_dtoa_r+0x6fa>
 800e97c:	2f0e      	cmp	r7, #14
 800e97e:	f300 8154 	bgt.w	800ec2a <_dtoa_r+0x6fa>
 800e982:	4b4b      	ldr	r3, [pc, #300]	@ (800eab0 <_dtoa_r+0x580>)
 800e984:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e988:	ed93 7b00 	vldr	d7, [r3]
 800e98c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e98e:	2b00      	cmp	r3, #0
 800e990:	ed8d 7b00 	vstr	d7, [sp]
 800e994:	f280 80e5 	bge.w	800eb62 <_dtoa_r+0x632>
 800e998:	9b03      	ldr	r3, [sp, #12]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f300 80e1 	bgt.w	800eb62 <_dtoa_r+0x632>
 800e9a0:	d10c      	bne.n	800e9bc <_dtoa_r+0x48c>
 800e9a2:	4b48      	ldr	r3, [pc, #288]	@ (800eac4 <_dtoa_r+0x594>)
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	ec51 0b17 	vmov	r0, r1, d7
 800e9aa:	f7f1 fe35 	bl	8000618 <__aeabi_dmul>
 800e9ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9b2:	f7f2 f8b7 	bl	8000b24 <__aeabi_dcmpge>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	f000 8266 	beq.w	800ee88 <_dtoa_r+0x958>
 800e9bc:	2400      	movs	r4, #0
 800e9be:	4625      	mov	r5, r4
 800e9c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9c2:	4656      	mov	r6, sl
 800e9c4:	ea6f 0803 	mvn.w	r8, r3
 800e9c8:	2700      	movs	r7, #0
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	4648      	mov	r0, r9
 800e9ce:	f000 ff55 	bl	800f87c <_Bfree>
 800e9d2:	2d00      	cmp	r5, #0
 800e9d4:	f000 80bd 	beq.w	800eb52 <_dtoa_r+0x622>
 800e9d8:	b12f      	cbz	r7, 800e9e6 <_dtoa_r+0x4b6>
 800e9da:	42af      	cmp	r7, r5
 800e9dc:	d003      	beq.n	800e9e6 <_dtoa_r+0x4b6>
 800e9de:	4639      	mov	r1, r7
 800e9e0:	4648      	mov	r0, r9
 800e9e2:	f000 ff4b 	bl	800f87c <_Bfree>
 800e9e6:	4629      	mov	r1, r5
 800e9e8:	4648      	mov	r0, r9
 800e9ea:	f000 ff47 	bl	800f87c <_Bfree>
 800e9ee:	e0b0      	b.n	800eb52 <_dtoa_r+0x622>
 800e9f0:	07e2      	lsls	r2, r4, #31
 800e9f2:	d505      	bpl.n	800ea00 <_dtoa_r+0x4d0>
 800e9f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9f8:	f7f1 fe0e 	bl	8000618 <__aeabi_dmul>
 800e9fc:	3601      	adds	r6, #1
 800e9fe:	2301      	movs	r3, #1
 800ea00:	1064      	asrs	r4, r4, #1
 800ea02:	3508      	adds	r5, #8
 800ea04:	e762      	b.n	800e8cc <_dtoa_r+0x39c>
 800ea06:	2602      	movs	r6, #2
 800ea08:	e765      	b.n	800e8d6 <_dtoa_r+0x3a6>
 800ea0a:	9c03      	ldr	r4, [sp, #12]
 800ea0c:	46b8      	mov	r8, r7
 800ea0e:	e784      	b.n	800e91a <_dtoa_r+0x3ea>
 800ea10:	4b27      	ldr	r3, [pc, #156]	@ (800eab0 <_dtoa_r+0x580>)
 800ea12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea1c:	4454      	add	r4, sl
 800ea1e:	2900      	cmp	r1, #0
 800ea20:	d054      	beq.n	800eacc <_dtoa_r+0x59c>
 800ea22:	4929      	ldr	r1, [pc, #164]	@ (800eac8 <_dtoa_r+0x598>)
 800ea24:	2000      	movs	r0, #0
 800ea26:	f7f1 ff21 	bl	800086c <__aeabi_ddiv>
 800ea2a:	4633      	mov	r3, r6
 800ea2c:	462a      	mov	r2, r5
 800ea2e:	f7f1 fc3b 	bl	80002a8 <__aeabi_dsub>
 800ea32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea36:	4656      	mov	r6, sl
 800ea38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea3c:	f7f2 f89c 	bl	8000b78 <__aeabi_d2iz>
 800ea40:	4605      	mov	r5, r0
 800ea42:	f7f1 fd7f 	bl	8000544 <__aeabi_i2d>
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea4e:	f7f1 fc2b 	bl	80002a8 <__aeabi_dsub>
 800ea52:	3530      	adds	r5, #48	@ 0x30
 800ea54:	4602      	mov	r2, r0
 800ea56:	460b      	mov	r3, r1
 800ea58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea5c:	f806 5b01 	strb.w	r5, [r6], #1
 800ea60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea64:	f7f2 f84a 	bl	8000afc <__aeabi_dcmplt>
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d172      	bne.n	800eb52 <_dtoa_r+0x622>
 800ea6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea70:	4911      	ldr	r1, [pc, #68]	@ (800eab8 <_dtoa_r+0x588>)
 800ea72:	2000      	movs	r0, #0
 800ea74:	f7f1 fc18 	bl	80002a8 <__aeabi_dsub>
 800ea78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea7c:	f7f2 f83e 	bl	8000afc <__aeabi_dcmplt>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	f040 80b4 	bne.w	800ebee <_dtoa_r+0x6be>
 800ea86:	42a6      	cmp	r6, r4
 800ea88:	f43f af70 	beq.w	800e96c <_dtoa_r+0x43c>
 800ea8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ea90:	4b0a      	ldr	r3, [pc, #40]	@ (800eabc <_dtoa_r+0x58c>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	f7f1 fdc0 	bl	8000618 <__aeabi_dmul>
 800ea98:	4b08      	ldr	r3, [pc, #32]	@ (800eabc <_dtoa_r+0x58c>)
 800ea9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaa4:	f7f1 fdb8 	bl	8000618 <__aeabi_dmul>
 800eaa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eaac:	e7c4      	b.n	800ea38 <_dtoa_r+0x508>
 800eaae:	bf00      	nop
 800eab0:	08010d20 	.word	0x08010d20
 800eab4:	08010cf8 	.word	0x08010cf8
 800eab8:	3ff00000 	.word	0x3ff00000
 800eabc:	40240000 	.word	0x40240000
 800eac0:	401c0000 	.word	0x401c0000
 800eac4:	40140000 	.word	0x40140000
 800eac8:	3fe00000 	.word	0x3fe00000
 800eacc:	4631      	mov	r1, r6
 800eace:	4628      	mov	r0, r5
 800ead0:	f7f1 fda2 	bl	8000618 <__aeabi_dmul>
 800ead4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ead8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eada:	4656      	mov	r6, sl
 800eadc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eae0:	f7f2 f84a 	bl	8000b78 <__aeabi_d2iz>
 800eae4:	4605      	mov	r5, r0
 800eae6:	f7f1 fd2d 	bl	8000544 <__aeabi_i2d>
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaf2:	f7f1 fbd9 	bl	80002a8 <__aeabi_dsub>
 800eaf6:	3530      	adds	r5, #48	@ 0x30
 800eaf8:	f806 5b01 	strb.w	r5, [r6], #1
 800eafc:	4602      	mov	r2, r0
 800eafe:	460b      	mov	r3, r1
 800eb00:	42a6      	cmp	r6, r4
 800eb02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb06:	f04f 0200 	mov.w	r2, #0
 800eb0a:	d124      	bne.n	800eb56 <_dtoa_r+0x626>
 800eb0c:	4baf      	ldr	r3, [pc, #700]	@ (800edcc <_dtoa_r+0x89c>)
 800eb0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eb12:	f7f1 fbcb 	bl	80002ac <__adddf3>
 800eb16:	4602      	mov	r2, r0
 800eb18:	460b      	mov	r3, r1
 800eb1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb1e:	f7f2 f80b 	bl	8000b38 <__aeabi_dcmpgt>
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d163      	bne.n	800ebee <_dtoa_r+0x6be>
 800eb26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eb2a:	49a8      	ldr	r1, [pc, #672]	@ (800edcc <_dtoa_r+0x89c>)
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	f7f1 fbbb 	bl	80002a8 <__aeabi_dsub>
 800eb32:	4602      	mov	r2, r0
 800eb34:	460b      	mov	r3, r1
 800eb36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb3a:	f7f1 ffdf 	bl	8000afc <__aeabi_dcmplt>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	f43f af14 	beq.w	800e96c <_dtoa_r+0x43c>
 800eb44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800eb46:	1e73      	subs	r3, r6, #1
 800eb48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb4e:	2b30      	cmp	r3, #48	@ 0x30
 800eb50:	d0f8      	beq.n	800eb44 <_dtoa_r+0x614>
 800eb52:	4647      	mov	r7, r8
 800eb54:	e03b      	b.n	800ebce <_dtoa_r+0x69e>
 800eb56:	4b9e      	ldr	r3, [pc, #632]	@ (800edd0 <_dtoa_r+0x8a0>)
 800eb58:	f7f1 fd5e 	bl	8000618 <__aeabi_dmul>
 800eb5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb60:	e7bc      	b.n	800eadc <_dtoa_r+0x5ac>
 800eb62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eb66:	4656      	mov	r6, sl
 800eb68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	4629      	mov	r1, r5
 800eb70:	f7f1 fe7c 	bl	800086c <__aeabi_ddiv>
 800eb74:	f7f2 f800 	bl	8000b78 <__aeabi_d2iz>
 800eb78:	4680      	mov	r8, r0
 800eb7a:	f7f1 fce3 	bl	8000544 <__aeabi_i2d>
 800eb7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb82:	f7f1 fd49 	bl	8000618 <__aeabi_dmul>
 800eb86:	4602      	mov	r2, r0
 800eb88:	460b      	mov	r3, r1
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	4629      	mov	r1, r5
 800eb8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eb92:	f7f1 fb89 	bl	80002a8 <__aeabi_dsub>
 800eb96:	f806 4b01 	strb.w	r4, [r6], #1
 800eb9a:	9d03      	ldr	r5, [sp, #12]
 800eb9c:	eba6 040a 	sub.w	r4, r6, sl
 800eba0:	42a5      	cmp	r5, r4
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	d133      	bne.n	800ec10 <_dtoa_r+0x6e0>
 800eba8:	f7f1 fb80 	bl	80002ac <__adddf3>
 800ebac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	460d      	mov	r5, r1
 800ebb4:	f7f1 ffc0 	bl	8000b38 <__aeabi_dcmpgt>
 800ebb8:	b9c0      	cbnz	r0, 800ebec <_dtoa_r+0x6bc>
 800ebba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	f7f1 ff91 	bl	8000ae8 <__aeabi_dcmpeq>
 800ebc6:	b110      	cbz	r0, 800ebce <_dtoa_r+0x69e>
 800ebc8:	f018 0f01 	tst.w	r8, #1
 800ebcc:	d10e      	bne.n	800ebec <_dtoa_r+0x6bc>
 800ebce:	9902      	ldr	r1, [sp, #8]
 800ebd0:	4648      	mov	r0, r9
 800ebd2:	f000 fe53 	bl	800f87c <_Bfree>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	7033      	strb	r3, [r6, #0]
 800ebda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ebdc:	3701      	adds	r7, #1
 800ebde:	601f      	str	r7, [r3, #0]
 800ebe0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f000 824b 	beq.w	800f07e <_dtoa_r+0xb4e>
 800ebe8:	601e      	str	r6, [r3, #0]
 800ebea:	e248      	b.n	800f07e <_dtoa_r+0xb4e>
 800ebec:	46b8      	mov	r8, r7
 800ebee:	4633      	mov	r3, r6
 800ebf0:	461e      	mov	r6, r3
 800ebf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ebf6:	2a39      	cmp	r2, #57	@ 0x39
 800ebf8:	d106      	bne.n	800ec08 <_dtoa_r+0x6d8>
 800ebfa:	459a      	cmp	sl, r3
 800ebfc:	d1f8      	bne.n	800ebf0 <_dtoa_r+0x6c0>
 800ebfe:	2230      	movs	r2, #48	@ 0x30
 800ec00:	f108 0801 	add.w	r8, r8, #1
 800ec04:	f88a 2000 	strb.w	r2, [sl]
 800ec08:	781a      	ldrb	r2, [r3, #0]
 800ec0a:	3201      	adds	r2, #1
 800ec0c:	701a      	strb	r2, [r3, #0]
 800ec0e:	e7a0      	b.n	800eb52 <_dtoa_r+0x622>
 800ec10:	4b6f      	ldr	r3, [pc, #444]	@ (800edd0 <_dtoa_r+0x8a0>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	f7f1 fd00 	bl	8000618 <__aeabi_dmul>
 800ec18:	2200      	movs	r2, #0
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	460d      	mov	r5, r1
 800ec20:	f7f1 ff62 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d09f      	beq.n	800eb68 <_dtoa_r+0x638>
 800ec28:	e7d1      	b.n	800ebce <_dtoa_r+0x69e>
 800ec2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec2c:	2a00      	cmp	r2, #0
 800ec2e:	f000 80ea 	beq.w	800ee06 <_dtoa_r+0x8d6>
 800ec32:	9a07      	ldr	r2, [sp, #28]
 800ec34:	2a01      	cmp	r2, #1
 800ec36:	f300 80cd 	bgt.w	800edd4 <_dtoa_r+0x8a4>
 800ec3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ec3c:	2a00      	cmp	r2, #0
 800ec3e:	f000 80c1 	beq.w	800edc4 <_dtoa_r+0x894>
 800ec42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec46:	9c08      	ldr	r4, [sp, #32]
 800ec48:	9e00      	ldr	r6, [sp, #0]
 800ec4a:	9a00      	ldr	r2, [sp, #0]
 800ec4c:	441a      	add	r2, r3
 800ec4e:	9200      	str	r2, [sp, #0]
 800ec50:	9a06      	ldr	r2, [sp, #24]
 800ec52:	2101      	movs	r1, #1
 800ec54:	441a      	add	r2, r3
 800ec56:	4648      	mov	r0, r9
 800ec58:	9206      	str	r2, [sp, #24]
 800ec5a:	f000 ff0d 	bl	800fa78 <__i2b>
 800ec5e:	4605      	mov	r5, r0
 800ec60:	b166      	cbz	r6, 800ec7c <_dtoa_r+0x74c>
 800ec62:	9b06      	ldr	r3, [sp, #24]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	dd09      	ble.n	800ec7c <_dtoa_r+0x74c>
 800ec68:	42b3      	cmp	r3, r6
 800ec6a:	9a00      	ldr	r2, [sp, #0]
 800ec6c:	bfa8      	it	ge
 800ec6e:	4633      	movge	r3, r6
 800ec70:	1ad2      	subs	r2, r2, r3
 800ec72:	9200      	str	r2, [sp, #0]
 800ec74:	9a06      	ldr	r2, [sp, #24]
 800ec76:	1af6      	subs	r6, r6, r3
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	9306      	str	r3, [sp, #24]
 800ec7c:	9b08      	ldr	r3, [sp, #32]
 800ec7e:	b30b      	cbz	r3, 800ecc4 <_dtoa_r+0x794>
 800ec80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f000 80c6 	beq.w	800ee14 <_dtoa_r+0x8e4>
 800ec88:	2c00      	cmp	r4, #0
 800ec8a:	f000 80c0 	beq.w	800ee0e <_dtoa_r+0x8de>
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4622      	mov	r2, r4
 800ec92:	4648      	mov	r0, r9
 800ec94:	f000 ffa8 	bl	800fbe8 <__pow5mult>
 800ec98:	9a02      	ldr	r2, [sp, #8]
 800ec9a:	4601      	mov	r1, r0
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	4648      	mov	r0, r9
 800eca0:	f000 ff00 	bl	800faa4 <__multiply>
 800eca4:	9902      	ldr	r1, [sp, #8]
 800eca6:	4680      	mov	r8, r0
 800eca8:	4648      	mov	r0, r9
 800ecaa:	f000 fde7 	bl	800f87c <_Bfree>
 800ecae:	9b08      	ldr	r3, [sp, #32]
 800ecb0:	1b1b      	subs	r3, r3, r4
 800ecb2:	9308      	str	r3, [sp, #32]
 800ecb4:	f000 80b1 	beq.w	800ee1a <_dtoa_r+0x8ea>
 800ecb8:	9a08      	ldr	r2, [sp, #32]
 800ecba:	4641      	mov	r1, r8
 800ecbc:	4648      	mov	r0, r9
 800ecbe:	f000 ff93 	bl	800fbe8 <__pow5mult>
 800ecc2:	9002      	str	r0, [sp, #8]
 800ecc4:	2101      	movs	r1, #1
 800ecc6:	4648      	mov	r0, r9
 800ecc8:	f000 fed6 	bl	800fa78 <__i2b>
 800eccc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ecce:	4604      	mov	r4, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f000 81d8 	beq.w	800f086 <_dtoa_r+0xb56>
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	4601      	mov	r1, r0
 800ecda:	4648      	mov	r0, r9
 800ecdc:	f000 ff84 	bl	800fbe8 <__pow5mult>
 800ece0:	9b07      	ldr	r3, [sp, #28]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	4604      	mov	r4, r0
 800ece6:	f300 809f 	bgt.w	800ee28 <_dtoa_r+0x8f8>
 800ecea:	9b04      	ldr	r3, [sp, #16]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f040 8097 	bne.w	800ee20 <_dtoa_r+0x8f0>
 800ecf2:	9b05      	ldr	r3, [sp, #20]
 800ecf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f040 8093 	bne.w	800ee24 <_dtoa_r+0x8f4>
 800ecfe:	9b05      	ldr	r3, [sp, #20]
 800ed00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed04:	0d1b      	lsrs	r3, r3, #20
 800ed06:	051b      	lsls	r3, r3, #20
 800ed08:	b133      	cbz	r3, 800ed18 <_dtoa_r+0x7e8>
 800ed0a:	9b00      	ldr	r3, [sp, #0]
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	9b06      	ldr	r3, [sp, #24]
 800ed12:	3301      	adds	r3, #1
 800ed14:	9306      	str	r3, [sp, #24]
 800ed16:	2301      	movs	r3, #1
 800ed18:	9308      	str	r3, [sp, #32]
 800ed1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f000 81b8 	beq.w	800f092 <_dtoa_r+0xb62>
 800ed22:	6923      	ldr	r3, [r4, #16]
 800ed24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed28:	6918      	ldr	r0, [r3, #16]
 800ed2a:	f000 fe59 	bl	800f9e0 <__hi0bits>
 800ed2e:	f1c0 0020 	rsb	r0, r0, #32
 800ed32:	9b06      	ldr	r3, [sp, #24]
 800ed34:	4418      	add	r0, r3
 800ed36:	f010 001f 	ands.w	r0, r0, #31
 800ed3a:	f000 8082 	beq.w	800ee42 <_dtoa_r+0x912>
 800ed3e:	f1c0 0320 	rsb	r3, r0, #32
 800ed42:	2b04      	cmp	r3, #4
 800ed44:	dd73      	ble.n	800ee2e <_dtoa_r+0x8fe>
 800ed46:	9b00      	ldr	r3, [sp, #0]
 800ed48:	f1c0 001c 	rsb	r0, r0, #28
 800ed4c:	4403      	add	r3, r0
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	9b06      	ldr	r3, [sp, #24]
 800ed52:	4403      	add	r3, r0
 800ed54:	4406      	add	r6, r0
 800ed56:	9306      	str	r3, [sp, #24]
 800ed58:	9b00      	ldr	r3, [sp, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	dd05      	ble.n	800ed6a <_dtoa_r+0x83a>
 800ed5e:	9902      	ldr	r1, [sp, #8]
 800ed60:	461a      	mov	r2, r3
 800ed62:	4648      	mov	r0, r9
 800ed64:	f000 ff9a 	bl	800fc9c <__lshift>
 800ed68:	9002      	str	r0, [sp, #8]
 800ed6a:	9b06      	ldr	r3, [sp, #24]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	dd05      	ble.n	800ed7c <_dtoa_r+0x84c>
 800ed70:	4621      	mov	r1, r4
 800ed72:	461a      	mov	r2, r3
 800ed74:	4648      	mov	r0, r9
 800ed76:	f000 ff91 	bl	800fc9c <__lshift>
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d061      	beq.n	800ee46 <_dtoa_r+0x916>
 800ed82:	9802      	ldr	r0, [sp, #8]
 800ed84:	4621      	mov	r1, r4
 800ed86:	f000 fff5 	bl	800fd74 <__mcmp>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	da5b      	bge.n	800ee46 <_dtoa_r+0x916>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	9902      	ldr	r1, [sp, #8]
 800ed92:	220a      	movs	r2, #10
 800ed94:	4648      	mov	r0, r9
 800ed96:	f000 fd93 	bl	800f8c0 <__multadd>
 800ed9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed9c:	9002      	str	r0, [sp, #8]
 800ed9e:	f107 38ff 	add.w	r8, r7, #4294967295
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f000 8177 	beq.w	800f096 <_dtoa_r+0xb66>
 800eda8:	4629      	mov	r1, r5
 800edaa:	2300      	movs	r3, #0
 800edac:	220a      	movs	r2, #10
 800edae:	4648      	mov	r0, r9
 800edb0:	f000 fd86 	bl	800f8c0 <__multadd>
 800edb4:	f1bb 0f00 	cmp.w	fp, #0
 800edb8:	4605      	mov	r5, r0
 800edba:	dc6f      	bgt.n	800ee9c <_dtoa_r+0x96c>
 800edbc:	9b07      	ldr	r3, [sp, #28]
 800edbe:	2b02      	cmp	r3, #2
 800edc0:	dc49      	bgt.n	800ee56 <_dtoa_r+0x926>
 800edc2:	e06b      	b.n	800ee9c <_dtoa_r+0x96c>
 800edc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800edc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800edca:	e73c      	b.n	800ec46 <_dtoa_r+0x716>
 800edcc:	3fe00000 	.word	0x3fe00000
 800edd0:	40240000 	.word	0x40240000
 800edd4:	9b03      	ldr	r3, [sp, #12]
 800edd6:	1e5c      	subs	r4, r3, #1
 800edd8:	9b08      	ldr	r3, [sp, #32]
 800edda:	42a3      	cmp	r3, r4
 800eddc:	db09      	blt.n	800edf2 <_dtoa_r+0x8c2>
 800edde:	1b1c      	subs	r4, r3, r4
 800ede0:	9b03      	ldr	r3, [sp, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f6bf af30 	bge.w	800ec48 <_dtoa_r+0x718>
 800ede8:	9b00      	ldr	r3, [sp, #0]
 800edea:	9a03      	ldr	r2, [sp, #12]
 800edec:	1a9e      	subs	r6, r3, r2
 800edee:	2300      	movs	r3, #0
 800edf0:	e72b      	b.n	800ec4a <_dtoa_r+0x71a>
 800edf2:	9b08      	ldr	r3, [sp, #32]
 800edf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800edf6:	9408      	str	r4, [sp, #32]
 800edf8:	1ae3      	subs	r3, r4, r3
 800edfa:	441a      	add	r2, r3
 800edfc:	9e00      	ldr	r6, [sp, #0]
 800edfe:	9b03      	ldr	r3, [sp, #12]
 800ee00:	920d      	str	r2, [sp, #52]	@ 0x34
 800ee02:	2400      	movs	r4, #0
 800ee04:	e721      	b.n	800ec4a <_dtoa_r+0x71a>
 800ee06:	9c08      	ldr	r4, [sp, #32]
 800ee08:	9e00      	ldr	r6, [sp, #0]
 800ee0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ee0c:	e728      	b.n	800ec60 <_dtoa_r+0x730>
 800ee0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ee12:	e751      	b.n	800ecb8 <_dtoa_r+0x788>
 800ee14:	9a08      	ldr	r2, [sp, #32]
 800ee16:	9902      	ldr	r1, [sp, #8]
 800ee18:	e750      	b.n	800ecbc <_dtoa_r+0x78c>
 800ee1a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ee1e:	e751      	b.n	800ecc4 <_dtoa_r+0x794>
 800ee20:	2300      	movs	r3, #0
 800ee22:	e779      	b.n	800ed18 <_dtoa_r+0x7e8>
 800ee24:	9b04      	ldr	r3, [sp, #16]
 800ee26:	e777      	b.n	800ed18 <_dtoa_r+0x7e8>
 800ee28:	2300      	movs	r3, #0
 800ee2a:	9308      	str	r3, [sp, #32]
 800ee2c:	e779      	b.n	800ed22 <_dtoa_r+0x7f2>
 800ee2e:	d093      	beq.n	800ed58 <_dtoa_r+0x828>
 800ee30:	9a00      	ldr	r2, [sp, #0]
 800ee32:	331c      	adds	r3, #28
 800ee34:	441a      	add	r2, r3
 800ee36:	9200      	str	r2, [sp, #0]
 800ee38:	9a06      	ldr	r2, [sp, #24]
 800ee3a:	441a      	add	r2, r3
 800ee3c:	441e      	add	r6, r3
 800ee3e:	9206      	str	r2, [sp, #24]
 800ee40:	e78a      	b.n	800ed58 <_dtoa_r+0x828>
 800ee42:	4603      	mov	r3, r0
 800ee44:	e7f4      	b.n	800ee30 <_dtoa_r+0x900>
 800ee46:	9b03      	ldr	r3, [sp, #12]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	46b8      	mov	r8, r7
 800ee4c:	dc20      	bgt.n	800ee90 <_dtoa_r+0x960>
 800ee4e:	469b      	mov	fp, r3
 800ee50:	9b07      	ldr	r3, [sp, #28]
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	dd1e      	ble.n	800ee94 <_dtoa_r+0x964>
 800ee56:	f1bb 0f00 	cmp.w	fp, #0
 800ee5a:	f47f adb1 	bne.w	800e9c0 <_dtoa_r+0x490>
 800ee5e:	4621      	mov	r1, r4
 800ee60:	465b      	mov	r3, fp
 800ee62:	2205      	movs	r2, #5
 800ee64:	4648      	mov	r0, r9
 800ee66:	f000 fd2b 	bl	800f8c0 <__multadd>
 800ee6a:	4601      	mov	r1, r0
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	9802      	ldr	r0, [sp, #8]
 800ee70:	f000 ff80 	bl	800fd74 <__mcmp>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	f77f ada3 	ble.w	800e9c0 <_dtoa_r+0x490>
 800ee7a:	4656      	mov	r6, sl
 800ee7c:	2331      	movs	r3, #49	@ 0x31
 800ee7e:	f806 3b01 	strb.w	r3, [r6], #1
 800ee82:	f108 0801 	add.w	r8, r8, #1
 800ee86:	e59f      	b.n	800e9c8 <_dtoa_r+0x498>
 800ee88:	9c03      	ldr	r4, [sp, #12]
 800ee8a:	46b8      	mov	r8, r7
 800ee8c:	4625      	mov	r5, r4
 800ee8e:	e7f4      	b.n	800ee7a <_dtoa_r+0x94a>
 800ee90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ee94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f000 8101 	beq.w	800f09e <_dtoa_r+0xb6e>
 800ee9c:	2e00      	cmp	r6, #0
 800ee9e:	dd05      	ble.n	800eeac <_dtoa_r+0x97c>
 800eea0:	4629      	mov	r1, r5
 800eea2:	4632      	mov	r2, r6
 800eea4:	4648      	mov	r0, r9
 800eea6:	f000 fef9 	bl	800fc9c <__lshift>
 800eeaa:	4605      	mov	r5, r0
 800eeac:	9b08      	ldr	r3, [sp, #32]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d05c      	beq.n	800ef6c <_dtoa_r+0xa3c>
 800eeb2:	6869      	ldr	r1, [r5, #4]
 800eeb4:	4648      	mov	r0, r9
 800eeb6:	f000 fca1 	bl	800f7fc <_Balloc>
 800eeba:	4606      	mov	r6, r0
 800eebc:	b928      	cbnz	r0, 800eeca <_dtoa_r+0x99a>
 800eebe:	4b82      	ldr	r3, [pc, #520]	@ (800f0c8 <_dtoa_r+0xb98>)
 800eec0:	4602      	mov	r2, r0
 800eec2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eec6:	f7ff bb4a 	b.w	800e55e <_dtoa_r+0x2e>
 800eeca:	692a      	ldr	r2, [r5, #16]
 800eecc:	3202      	adds	r2, #2
 800eece:	0092      	lsls	r2, r2, #2
 800eed0:	f105 010c 	add.w	r1, r5, #12
 800eed4:	300c      	adds	r0, #12
 800eed6:	f7ff fa6a 	bl	800e3ae <memcpy>
 800eeda:	2201      	movs	r2, #1
 800eedc:	4631      	mov	r1, r6
 800eede:	4648      	mov	r0, r9
 800eee0:	f000 fedc 	bl	800fc9c <__lshift>
 800eee4:	f10a 0301 	add.w	r3, sl, #1
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	eb0a 030b 	add.w	r3, sl, fp
 800eeee:	9308      	str	r3, [sp, #32]
 800eef0:	9b04      	ldr	r3, [sp, #16]
 800eef2:	f003 0301 	and.w	r3, r3, #1
 800eef6:	462f      	mov	r7, r5
 800eef8:	9306      	str	r3, [sp, #24]
 800eefa:	4605      	mov	r5, r0
 800eefc:	9b00      	ldr	r3, [sp, #0]
 800eefe:	9802      	ldr	r0, [sp, #8]
 800ef00:	4621      	mov	r1, r4
 800ef02:	f103 3bff 	add.w	fp, r3, #4294967295
 800ef06:	f7ff fa89 	bl	800e41c <quorem>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	3330      	adds	r3, #48	@ 0x30
 800ef0e:	9003      	str	r0, [sp, #12]
 800ef10:	4639      	mov	r1, r7
 800ef12:	9802      	ldr	r0, [sp, #8]
 800ef14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef16:	f000 ff2d 	bl	800fd74 <__mcmp>
 800ef1a:	462a      	mov	r2, r5
 800ef1c:	9004      	str	r0, [sp, #16]
 800ef1e:	4621      	mov	r1, r4
 800ef20:	4648      	mov	r0, r9
 800ef22:	f000 ff43 	bl	800fdac <__mdiff>
 800ef26:	68c2      	ldr	r2, [r0, #12]
 800ef28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef2a:	4606      	mov	r6, r0
 800ef2c:	bb02      	cbnz	r2, 800ef70 <_dtoa_r+0xa40>
 800ef2e:	4601      	mov	r1, r0
 800ef30:	9802      	ldr	r0, [sp, #8]
 800ef32:	f000 ff1f 	bl	800fd74 <__mcmp>
 800ef36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef38:	4602      	mov	r2, r0
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	4648      	mov	r0, r9
 800ef3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ef40:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef42:	f000 fc9b 	bl	800f87c <_Bfree>
 800ef46:	9b07      	ldr	r3, [sp, #28]
 800ef48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ef4a:	9e00      	ldr	r6, [sp, #0]
 800ef4c:	ea42 0103 	orr.w	r1, r2, r3
 800ef50:	9b06      	ldr	r3, [sp, #24]
 800ef52:	4319      	orrs	r1, r3
 800ef54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef56:	d10d      	bne.n	800ef74 <_dtoa_r+0xa44>
 800ef58:	2b39      	cmp	r3, #57	@ 0x39
 800ef5a:	d027      	beq.n	800efac <_dtoa_r+0xa7c>
 800ef5c:	9a04      	ldr	r2, [sp, #16]
 800ef5e:	2a00      	cmp	r2, #0
 800ef60:	dd01      	ble.n	800ef66 <_dtoa_r+0xa36>
 800ef62:	9b03      	ldr	r3, [sp, #12]
 800ef64:	3331      	adds	r3, #49	@ 0x31
 800ef66:	f88b 3000 	strb.w	r3, [fp]
 800ef6a:	e52e      	b.n	800e9ca <_dtoa_r+0x49a>
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	e7b9      	b.n	800eee4 <_dtoa_r+0x9b4>
 800ef70:	2201      	movs	r2, #1
 800ef72:	e7e2      	b.n	800ef3a <_dtoa_r+0xa0a>
 800ef74:	9904      	ldr	r1, [sp, #16]
 800ef76:	2900      	cmp	r1, #0
 800ef78:	db04      	blt.n	800ef84 <_dtoa_r+0xa54>
 800ef7a:	9807      	ldr	r0, [sp, #28]
 800ef7c:	4301      	orrs	r1, r0
 800ef7e:	9806      	ldr	r0, [sp, #24]
 800ef80:	4301      	orrs	r1, r0
 800ef82:	d120      	bne.n	800efc6 <_dtoa_r+0xa96>
 800ef84:	2a00      	cmp	r2, #0
 800ef86:	ddee      	ble.n	800ef66 <_dtoa_r+0xa36>
 800ef88:	9902      	ldr	r1, [sp, #8]
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	4648      	mov	r0, r9
 800ef90:	f000 fe84 	bl	800fc9c <__lshift>
 800ef94:	4621      	mov	r1, r4
 800ef96:	9002      	str	r0, [sp, #8]
 800ef98:	f000 feec 	bl	800fd74 <__mcmp>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	9b00      	ldr	r3, [sp, #0]
 800efa0:	dc02      	bgt.n	800efa8 <_dtoa_r+0xa78>
 800efa2:	d1e0      	bne.n	800ef66 <_dtoa_r+0xa36>
 800efa4:	07da      	lsls	r2, r3, #31
 800efa6:	d5de      	bpl.n	800ef66 <_dtoa_r+0xa36>
 800efa8:	2b39      	cmp	r3, #57	@ 0x39
 800efaa:	d1da      	bne.n	800ef62 <_dtoa_r+0xa32>
 800efac:	2339      	movs	r3, #57	@ 0x39
 800efae:	f88b 3000 	strb.w	r3, [fp]
 800efb2:	4633      	mov	r3, r6
 800efb4:	461e      	mov	r6, r3
 800efb6:	3b01      	subs	r3, #1
 800efb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800efbc:	2a39      	cmp	r2, #57	@ 0x39
 800efbe:	d04e      	beq.n	800f05e <_dtoa_r+0xb2e>
 800efc0:	3201      	adds	r2, #1
 800efc2:	701a      	strb	r2, [r3, #0]
 800efc4:	e501      	b.n	800e9ca <_dtoa_r+0x49a>
 800efc6:	2a00      	cmp	r2, #0
 800efc8:	dd03      	ble.n	800efd2 <_dtoa_r+0xaa2>
 800efca:	2b39      	cmp	r3, #57	@ 0x39
 800efcc:	d0ee      	beq.n	800efac <_dtoa_r+0xa7c>
 800efce:	3301      	adds	r3, #1
 800efd0:	e7c9      	b.n	800ef66 <_dtoa_r+0xa36>
 800efd2:	9a00      	ldr	r2, [sp, #0]
 800efd4:	9908      	ldr	r1, [sp, #32]
 800efd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800efda:	428a      	cmp	r2, r1
 800efdc:	d028      	beq.n	800f030 <_dtoa_r+0xb00>
 800efde:	9902      	ldr	r1, [sp, #8]
 800efe0:	2300      	movs	r3, #0
 800efe2:	220a      	movs	r2, #10
 800efe4:	4648      	mov	r0, r9
 800efe6:	f000 fc6b 	bl	800f8c0 <__multadd>
 800efea:	42af      	cmp	r7, r5
 800efec:	9002      	str	r0, [sp, #8]
 800efee:	f04f 0300 	mov.w	r3, #0
 800eff2:	f04f 020a 	mov.w	r2, #10
 800eff6:	4639      	mov	r1, r7
 800eff8:	4648      	mov	r0, r9
 800effa:	d107      	bne.n	800f00c <_dtoa_r+0xadc>
 800effc:	f000 fc60 	bl	800f8c0 <__multadd>
 800f000:	4607      	mov	r7, r0
 800f002:	4605      	mov	r5, r0
 800f004:	9b00      	ldr	r3, [sp, #0]
 800f006:	3301      	adds	r3, #1
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	e777      	b.n	800eefc <_dtoa_r+0x9cc>
 800f00c:	f000 fc58 	bl	800f8c0 <__multadd>
 800f010:	4629      	mov	r1, r5
 800f012:	4607      	mov	r7, r0
 800f014:	2300      	movs	r3, #0
 800f016:	220a      	movs	r2, #10
 800f018:	4648      	mov	r0, r9
 800f01a:	f000 fc51 	bl	800f8c0 <__multadd>
 800f01e:	4605      	mov	r5, r0
 800f020:	e7f0      	b.n	800f004 <_dtoa_r+0xad4>
 800f022:	f1bb 0f00 	cmp.w	fp, #0
 800f026:	bfcc      	ite	gt
 800f028:	465e      	movgt	r6, fp
 800f02a:	2601      	movle	r6, #1
 800f02c:	4456      	add	r6, sl
 800f02e:	2700      	movs	r7, #0
 800f030:	9902      	ldr	r1, [sp, #8]
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	2201      	movs	r2, #1
 800f036:	4648      	mov	r0, r9
 800f038:	f000 fe30 	bl	800fc9c <__lshift>
 800f03c:	4621      	mov	r1, r4
 800f03e:	9002      	str	r0, [sp, #8]
 800f040:	f000 fe98 	bl	800fd74 <__mcmp>
 800f044:	2800      	cmp	r0, #0
 800f046:	dcb4      	bgt.n	800efb2 <_dtoa_r+0xa82>
 800f048:	d102      	bne.n	800f050 <_dtoa_r+0xb20>
 800f04a:	9b00      	ldr	r3, [sp, #0]
 800f04c:	07db      	lsls	r3, r3, #31
 800f04e:	d4b0      	bmi.n	800efb2 <_dtoa_r+0xa82>
 800f050:	4633      	mov	r3, r6
 800f052:	461e      	mov	r6, r3
 800f054:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f058:	2a30      	cmp	r2, #48	@ 0x30
 800f05a:	d0fa      	beq.n	800f052 <_dtoa_r+0xb22>
 800f05c:	e4b5      	b.n	800e9ca <_dtoa_r+0x49a>
 800f05e:	459a      	cmp	sl, r3
 800f060:	d1a8      	bne.n	800efb4 <_dtoa_r+0xa84>
 800f062:	2331      	movs	r3, #49	@ 0x31
 800f064:	f108 0801 	add.w	r8, r8, #1
 800f068:	f88a 3000 	strb.w	r3, [sl]
 800f06c:	e4ad      	b.n	800e9ca <_dtoa_r+0x49a>
 800f06e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f070:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f0cc <_dtoa_r+0xb9c>
 800f074:	b11b      	cbz	r3, 800f07e <_dtoa_r+0xb4e>
 800f076:	f10a 0308 	add.w	r3, sl, #8
 800f07a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f07c:	6013      	str	r3, [r2, #0]
 800f07e:	4650      	mov	r0, sl
 800f080:	b017      	add	sp, #92	@ 0x5c
 800f082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f086:	9b07      	ldr	r3, [sp, #28]
 800f088:	2b01      	cmp	r3, #1
 800f08a:	f77f ae2e 	ble.w	800ecea <_dtoa_r+0x7ba>
 800f08e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f090:	9308      	str	r3, [sp, #32]
 800f092:	2001      	movs	r0, #1
 800f094:	e64d      	b.n	800ed32 <_dtoa_r+0x802>
 800f096:	f1bb 0f00 	cmp.w	fp, #0
 800f09a:	f77f aed9 	ble.w	800ee50 <_dtoa_r+0x920>
 800f09e:	4656      	mov	r6, sl
 800f0a0:	9802      	ldr	r0, [sp, #8]
 800f0a2:	4621      	mov	r1, r4
 800f0a4:	f7ff f9ba 	bl	800e41c <quorem>
 800f0a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f0ac:	f806 3b01 	strb.w	r3, [r6], #1
 800f0b0:	eba6 020a 	sub.w	r2, r6, sl
 800f0b4:	4593      	cmp	fp, r2
 800f0b6:	ddb4      	ble.n	800f022 <_dtoa_r+0xaf2>
 800f0b8:	9902      	ldr	r1, [sp, #8]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	220a      	movs	r2, #10
 800f0be:	4648      	mov	r0, r9
 800f0c0:	f000 fbfe 	bl	800f8c0 <__multadd>
 800f0c4:	9002      	str	r0, [sp, #8]
 800f0c6:	e7eb      	b.n	800f0a0 <_dtoa_r+0xb70>
 800f0c8:	08010abc 	.word	0x08010abc
 800f0cc:	08010a57 	.word	0x08010a57

0800f0d0 <_free_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	4605      	mov	r5, r0
 800f0d4:	2900      	cmp	r1, #0
 800f0d6:	d041      	beq.n	800f15c <_free_r+0x8c>
 800f0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0dc:	1f0c      	subs	r4, r1, #4
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	bfb8      	it	lt
 800f0e2:	18e4      	addlt	r4, r4, r3
 800f0e4:	f7fd fc2a 	bl	800c93c <__malloc_lock>
 800f0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f160 <_free_r+0x90>)
 800f0ea:	6813      	ldr	r3, [r2, #0]
 800f0ec:	b933      	cbnz	r3, 800f0fc <_free_r+0x2c>
 800f0ee:	6063      	str	r3, [r4, #4]
 800f0f0:	6014      	str	r4, [r2, #0]
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0f8:	f7fd bc26 	b.w	800c948 <__malloc_unlock>
 800f0fc:	42a3      	cmp	r3, r4
 800f0fe:	d908      	bls.n	800f112 <_free_r+0x42>
 800f100:	6820      	ldr	r0, [r4, #0]
 800f102:	1821      	adds	r1, r4, r0
 800f104:	428b      	cmp	r3, r1
 800f106:	bf01      	itttt	eq
 800f108:	6819      	ldreq	r1, [r3, #0]
 800f10a:	685b      	ldreq	r3, [r3, #4]
 800f10c:	1809      	addeq	r1, r1, r0
 800f10e:	6021      	streq	r1, [r4, #0]
 800f110:	e7ed      	b.n	800f0ee <_free_r+0x1e>
 800f112:	461a      	mov	r2, r3
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	b10b      	cbz	r3, 800f11c <_free_r+0x4c>
 800f118:	42a3      	cmp	r3, r4
 800f11a:	d9fa      	bls.n	800f112 <_free_r+0x42>
 800f11c:	6811      	ldr	r1, [r2, #0]
 800f11e:	1850      	adds	r0, r2, r1
 800f120:	42a0      	cmp	r0, r4
 800f122:	d10b      	bne.n	800f13c <_free_r+0x6c>
 800f124:	6820      	ldr	r0, [r4, #0]
 800f126:	4401      	add	r1, r0
 800f128:	1850      	adds	r0, r2, r1
 800f12a:	4283      	cmp	r3, r0
 800f12c:	6011      	str	r1, [r2, #0]
 800f12e:	d1e0      	bne.n	800f0f2 <_free_r+0x22>
 800f130:	6818      	ldr	r0, [r3, #0]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	6053      	str	r3, [r2, #4]
 800f136:	4408      	add	r0, r1
 800f138:	6010      	str	r0, [r2, #0]
 800f13a:	e7da      	b.n	800f0f2 <_free_r+0x22>
 800f13c:	d902      	bls.n	800f144 <_free_r+0x74>
 800f13e:	230c      	movs	r3, #12
 800f140:	602b      	str	r3, [r5, #0]
 800f142:	e7d6      	b.n	800f0f2 <_free_r+0x22>
 800f144:	6820      	ldr	r0, [r4, #0]
 800f146:	1821      	adds	r1, r4, r0
 800f148:	428b      	cmp	r3, r1
 800f14a:	bf04      	itt	eq
 800f14c:	6819      	ldreq	r1, [r3, #0]
 800f14e:	685b      	ldreq	r3, [r3, #4]
 800f150:	6063      	str	r3, [r4, #4]
 800f152:	bf04      	itt	eq
 800f154:	1809      	addeq	r1, r1, r0
 800f156:	6021      	streq	r1, [r4, #0]
 800f158:	6054      	str	r4, [r2, #4]
 800f15a:	e7ca      	b.n	800f0f2 <_free_r+0x22>
 800f15c:	bd38      	pop	{r3, r4, r5, pc}
 800f15e:	bf00      	nop
 800f160:	20002ae4 	.word	0x20002ae4

0800f164 <rshift>:
 800f164:	6903      	ldr	r3, [r0, #16]
 800f166:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f16a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f16e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f172:	f100 0414 	add.w	r4, r0, #20
 800f176:	dd45      	ble.n	800f204 <rshift+0xa0>
 800f178:	f011 011f 	ands.w	r1, r1, #31
 800f17c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f180:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f184:	d10c      	bne.n	800f1a0 <rshift+0x3c>
 800f186:	f100 0710 	add.w	r7, r0, #16
 800f18a:	4629      	mov	r1, r5
 800f18c:	42b1      	cmp	r1, r6
 800f18e:	d334      	bcc.n	800f1fa <rshift+0x96>
 800f190:	1a9b      	subs	r3, r3, r2
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	1eea      	subs	r2, r5, #3
 800f196:	4296      	cmp	r6, r2
 800f198:	bf38      	it	cc
 800f19a:	2300      	movcc	r3, #0
 800f19c:	4423      	add	r3, r4
 800f19e:	e015      	b.n	800f1cc <rshift+0x68>
 800f1a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f1a4:	f1c1 0820 	rsb	r8, r1, #32
 800f1a8:	40cf      	lsrs	r7, r1
 800f1aa:	f105 0e04 	add.w	lr, r5, #4
 800f1ae:	46a1      	mov	r9, r4
 800f1b0:	4576      	cmp	r6, lr
 800f1b2:	46f4      	mov	ip, lr
 800f1b4:	d815      	bhi.n	800f1e2 <rshift+0x7e>
 800f1b6:	1a9a      	subs	r2, r3, r2
 800f1b8:	0092      	lsls	r2, r2, #2
 800f1ba:	3a04      	subs	r2, #4
 800f1bc:	3501      	adds	r5, #1
 800f1be:	42ae      	cmp	r6, r5
 800f1c0:	bf38      	it	cc
 800f1c2:	2200      	movcc	r2, #0
 800f1c4:	18a3      	adds	r3, r4, r2
 800f1c6:	50a7      	str	r7, [r4, r2]
 800f1c8:	b107      	cbz	r7, 800f1cc <rshift+0x68>
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	1b1a      	subs	r2, r3, r4
 800f1ce:	42a3      	cmp	r3, r4
 800f1d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f1d4:	bf08      	it	eq
 800f1d6:	2300      	moveq	r3, #0
 800f1d8:	6102      	str	r2, [r0, #16]
 800f1da:	bf08      	it	eq
 800f1dc:	6143      	streq	r3, [r0, #20]
 800f1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1e2:	f8dc c000 	ldr.w	ip, [ip]
 800f1e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800f1ea:	ea4c 0707 	orr.w	r7, ip, r7
 800f1ee:	f849 7b04 	str.w	r7, [r9], #4
 800f1f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f1f6:	40cf      	lsrs	r7, r1
 800f1f8:	e7da      	b.n	800f1b0 <rshift+0x4c>
 800f1fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800f1fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800f202:	e7c3      	b.n	800f18c <rshift+0x28>
 800f204:	4623      	mov	r3, r4
 800f206:	e7e1      	b.n	800f1cc <rshift+0x68>

0800f208 <__hexdig_fun>:
 800f208:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f20c:	2b09      	cmp	r3, #9
 800f20e:	d802      	bhi.n	800f216 <__hexdig_fun+0xe>
 800f210:	3820      	subs	r0, #32
 800f212:	b2c0      	uxtb	r0, r0
 800f214:	4770      	bx	lr
 800f216:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f21a:	2b05      	cmp	r3, #5
 800f21c:	d801      	bhi.n	800f222 <__hexdig_fun+0x1a>
 800f21e:	3847      	subs	r0, #71	@ 0x47
 800f220:	e7f7      	b.n	800f212 <__hexdig_fun+0xa>
 800f222:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f226:	2b05      	cmp	r3, #5
 800f228:	d801      	bhi.n	800f22e <__hexdig_fun+0x26>
 800f22a:	3827      	subs	r0, #39	@ 0x27
 800f22c:	e7f1      	b.n	800f212 <__hexdig_fun+0xa>
 800f22e:	2000      	movs	r0, #0
 800f230:	4770      	bx	lr
	...

0800f234 <__gethex>:
 800f234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f238:	b085      	sub	sp, #20
 800f23a:	468a      	mov	sl, r1
 800f23c:	9302      	str	r3, [sp, #8]
 800f23e:	680b      	ldr	r3, [r1, #0]
 800f240:	9001      	str	r0, [sp, #4]
 800f242:	4690      	mov	r8, r2
 800f244:	1c9c      	adds	r4, r3, #2
 800f246:	46a1      	mov	r9, r4
 800f248:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f24c:	2830      	cmp	r0, #48	@ 0x30
 800f24e:	d0fa      	beq.n	800f246 <__gethex+0x12>
 800f250:	eba9 0303 	sub.w	r3, r9, r3
 800f254:	f1a3 0b02 	sub.w	fp, r3, #2
 800f258:	f7ff ffd6 	bl	800f208 <__hexdig_fun>
 800f25c:	4605      	mov	r5, r0
 800f25e:	2800      	cmp	r0, #0
 800f260:	d168      	bne.n	800f334 <__gethex+0x100>
 800f262:	49a0      	ldr	r1, [pc, #640]	@ (800f4e4 <__gethex+0x2b0>)
 800f264:	2201      	movs	r2, #1
 800f266:	4648      	mov	r0, r9
 800f268:	f7fe ff98 	bl	800e19c <strncmp>
 800f26c:	4607      	mov	r7, r0
 800f26e:	2800      	cmp	r0, #0
 800f270:	d167      	bne.n	800f342 <__gethex+0x10e>
 800f272:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f276:	4626      	mov	r6, r4
 800f278:	f7ff ffc6 	bl	800f208 <__hexdig_fun>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d062      	beq.n	800f346 <__gethex+0x112>
 800f280:	4623      	mov	r3, r4
 800f282:	7818      	ldrb	r0, [r3, #0]
 800f284:	2830      	cmp	r0, #48	@ 0x30
 800f286:	4699      	mov	r9, r3
 800f288:	f103 0301 	add.w	r3, r3, #1
 800f28c:	d0f9      	beq.n	800f282 <__gethex+0x4e>
 800f28e:	f7ff ffbb 	bl	800f208 <__hexdig_fun>
 800f292:	fab0 f580 	clz	r5, r0
 800f296:	096d      	lsrs	r5, r5, #5
 800f298:	f04f 0b01 	mov.w	fp, #1
 800f29c:	464a      	mov	r2, r9
 800f29e:	4616      	mov	r6, r2
 800f2a0:	3201      	adds	r2, #1
 800f2a2:	7830      	ldrb	r0, [r6, #0]
 800f2a4:	f7ff ffb0 	bl	800f208 <__hexdig_fun>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d1f8      	bne.n	800f29e <__gethex+0x6a>
 800f2ac:	498d      	ldr	r1, [pc, #564]	@ (800f4e4 <__gethex+0x2b0>)
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	f7fe ff73 	bl	800e19c <strncmp>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	d13f      	bne.n	800f33a <__gethex+0x106>
 800f2ba:	b944      	cbnz	r4, 800f2ce <__gethex+0x9a>
 800f2bc:	1c74      	adds	r4, r6, #1
 800f2be:	4622      	mov	r2, r4
 800f2c0:	4616      	mov	r6, r2
 800f2c2:	3201      	adds	r2, #1
 800f2c4:	7830      	ldrb	r0, [r6, #0]
 800f2c6:	f7ff ff9f 	bl	800f208 <__hexdig_fun>
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	d1f8      	bne.n	800f2c0 <__gethex+0x8c>
 800f2ce:	1ba4      	subs	r4, r4, r6
 800f2d0:	00a7      	lsls	r7, r4, #2
 800f2d2:	7833      	ldrb	r3, [r6, #0]
 800f2d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f2d8:	2b50      	cmp	r3, #80	@ 0x50
 800f2da:	d13e      	bne.n	800f35a <__gethex+0x126>
 800f2dc:	7873      	ldrb	r3, [r6, #1]
 800f2de:	2b2b      	cmp	r3, #43	@ 0x2b
 800f2e0:	d033      	beq.n	800f34a <__gethex+0x116>
 800f2e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800f2e4:	d034      	beq.n	800f350 <__gethex+0x11c>
 800f2e6:	1c71      	adds	r1, r6, #1
 800f2e8:	2400      	movs	r4, #0
 800f2ea:	7808      	ldrb	r0, [r1, #0]
 800f2ec:	f7ff ff8c 	bl	800f208 <__hexdig_fun>
 800f2f0:	1e43      	subs	r3, r0, #1
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	2b18      	cmp	r3, #24
 800f2f6:	d830      	bhi.n	800f35a <__gethex+0x126>
 800f2f8:	f1a0 0210 	sub.w	r2, r0, #16
 800f2fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f300:	f7ff ff82 	bl	800f208 <__hexdig_fun>
 800f304:	f100 3cff 	add.w	ip, r0, #4294967295
 800f308:	fa5f fc8c 	uxtb.w	ip, ip
 800f30c:	f1bc 0f18 	cmp.w	ip, #24
 800f310:	f04f 030a 	mov.w	r3, #10
 800f314:	d91e      	bls.n	800f354 <__gethex+0x120>
 800f316:	b104      	cbz	r4, 800f31a <__gethex+0xe6>
 800f318:	4252      	negs	r2, r2
 800f31a:	4417      	add	r7, r2
 800f31c:	f8ca 1000 	str.w	r1, [sl]
 800f320:	b1ed      	cbz	r5, 800f35e <__gethex+0x12a>
 800f322:	f1bb 0f00 	cmp.w	fp, #0
 800f326:	bf0c      	ite	eq
 800f328:	2506      	moveq	r5, #6
 800f32a:	2500      	movne	r5, #0
 800f32c:	4628      	mov	r0, r5
 800f32e:	b005      	add	sp, #20
 800f330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f334:	2500      	movs	r5, #0
 800f336:	462c      	mov	r4, r5
 800f338:	e7b0      	b.n	800f29c <__gethex+0x68>
 800f33a:	2c00      	cmp	r4, #0
 800f33c:	d1c7      	bne.n	800f2ce <__gethex+0x9a>
 800f33e:	4627      	mov	r7, r4
 800f340:	e7c7      	b.n	800f2d2 <__gethex+0x9e>
 800f342:	464e      	mov	r6, r9
 800f344:	462f      	mov	r7, r5
 800f346:	2501      	movs	r5, #1
 800f348:	e7c3      	b.n	800f2d2 <__gethex+0x9e>
 800f34a:	2400      	movs	r4, #0
 800f34c:	1cb1      	adds	r1, r6, #2
 800f34e:	e7cc      	b.n	800f2ea <__gethex+0xb6>
 800f350:	2401      	movs	r4, #1
 800f352:	e7fb      	b.n	800f34c <__gethex+0x118>
 800f354:	fb03 0002 	mla	r0, r3, r2, r0
 800f358:	e7ce      	b.n	800f2f8 <__gethex+0xc4>
 800f35a:	4631      	mov	r1, r6
 800f35c:	e7de      	b.n	800f31c <__gethex+0xe8>
 800f35e:	eba6 0309 	sub.w	r3, r6, r9
 800f362:	3b01      	subs	r3, #1
 800f364:	4629      	mov	r1, r5
 800f366:	2b07      	cmp	r3, #7
 800f368:	dc0a      	bgt.n	800f380 <__gethex+0x14c>
 800f36a:	9801      	ldr	r0, [sp, #4]
 800f36c:	f000 fa46 	bl	800f7fc <_Balloc>
 800f370:	4604      	mov	r4, r0
 800f372:	b940      	cbnz	r0, 800f386 <__gethex+0x152>
 800f374:	4b5c      	ldr	r3, [pc, #368]	@ (800f4e8 <__gethex+0x2b4>)
 800f376:	4602      	mov	r2, r0
 800f378:	21e4      	movs	r1, #228	@ 0xe4
 800f37a:	485c      	ldr	r0, [pc, #368]	@ (800f4ec <__gethex+0x2b8>)
 800f37c:	f7ff f830 	bl	800e3e0 <__assert_func>
 800f380:	3101      	adds	r1, #1
 800f382:	105b      	asrs	r3, r3, #1
 800f384:	e7ef      	b.n	800f366 <__gethex+0x132>
 800f386:	f100 0a14 	add.w	sl, r0, #20
 800f38a:	2300      	movs	r3, #0
 800f38c:	4655      	mov	r5, sl
 800f38e:	469b      	mov	fp, r3
 800f390:	45b1      	cmp	r9, r6
 800f392:	d337      	bcc.n	800f404 <__gethex+0x1d0>
 800f394:	f845 bb04 	str.w	fp, [r5], #4
 800f398:	eba5 050a 	sub.w	r5, r5, sl
 800f39c:	10ad      	asrs	r5, r5, #2
 800f39e:	6125      	str	r5, [r4, #16]
 800f3a0:	4658      	mov	r0, fp
 800f3a2:	f000 fb1d 	bl	800f9e0 <__hi0bits>
 800f3a6:	016d      	lsls	r5, r5, #5
 800f3a8:	f8d8 6000 	ldr.w	r6, [r8]
 800f3ac:	1a2d      	subs	r5, r5, r0
 800f3ae:	42b5      	cmp	r5, r6
 800f3b0:	dd54      	ble.n	800f45c <__gethex+0x228>
 800f3b2:	1bad      	subs	r5, r5, r6
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f000 fea9 	bl	801010e <__any_on>
 800f3bc:	4681      	mov	r9, r0
 800f3be:	b178      	cbz	r0, 800f3e0 <__gethex+0x1ac>
 800f3c0:	1e6b      	subs	r3, r5, #1
 800f3c2:	1159      	asrs	r1, r3, #5
 800f3c4:	f003 021f 	and.w	r2, r3, #31
 800f3c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f3cc:	f04f 0901 	mov.w	r9, #1
 800f3d0:	fa09 f202 	lsl.w	r2, r9, r2
 800f3d4:	420a      	tst	r2, r1
 800f3d6:	d003      	beq.n	800f3e0 <__gethex+0x1ac>
 800f3d8:	454b      	cmp	r3, r9
 800f3da:	dc36      	bgt.n	800f44a <__gethex+0x216>
 800f3dc:	f04f 0902 	mov.w	r9, #2
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	f7ff febe 	bl	800f164 <rshift>
 800f3e8:	442f      	add	r7, r5
 800f3ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3ee:	42bb      	cmp	r3, r7
 800f3f0:	da42      	bge.n	800f478 <__gethex+0x244>
 800f3f2:	9801      	ldr	r0, [sp, #4]
 800f3f4:	4621      	mov	r1, r4
 800f3f6:	f000 fa41 	bl	800f87c <_Bfree>
 800f3fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	6013      	str	r3, [r2, #0]
 800f400:	25a3      	movs	r5, #163	@ 0xa3
 800f402:	e793      	b.n	800f32c <__gethex+0xf8>
 800f404:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f408:	2a2e      	cmp	r2, #46	@ 0x2e
 800f40a:	d012      	beq.n	800f432 <__gethex+0x1fe>
 800f40c:	2b20      	cmp	r3, #32
 800f40e:	d104      	bne.n	800f41a <__gethex+0x1e6>
 800f410:	f845 bb04 	str.w	fp, [r5], #4
 800f414:	f04f 0b00 	mov.w	fp, #0
 800f418:	465b      	mov	r3, fp
 800f41a:	7830      	ldrb	r0, [r6, #0]
 800f41c:	9303      	str	r3, [sp, #12]
 800f41e:	f7ff fef3 	bl	800f208 <__hexdig_fun>
 800f422:	9b03      	ldr	r3, [sp, #12]
 800f424:	f000 000f 	and.w	r0, r0, #15
 800f428:	4098      	lsls	r0, r3
 800f42a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f42e:	3304      	adds	r3, #4
 800f430:	e7ae      	b.n	800f390 <__gethex+0x15c>
 800f432:	45b1      	cmp	r9, r6
 800f434:	d8ea      	bhi.n	800f40c <__gethex+0x1d8>
 800f436:	492b      	ldr	r1, [pc, #172]	@ (800f4e4 <__gethex+0x2b0>)
 800f438:	9303      	str	r3, [sp, #12]
 800f43a:	2201      	movs	r2, #1
 800f43c:	4630      	mov	r0, r6
 800f43e:	f7fe fead 	bl	800e19c <strncmp>
 800f442:	9b03      	ldr	r3, [sp, #12]
 800f444:	2800      	cmp	r0, #0
 800f446:	d1e1      	bne.n	800f40c <__gethex+0x1d8>
 800f448:	e7a2      	b.n	800f390 <__gethex+0x15c>
 800f44a:	1ea9      	subs	r1, r5, #2
 800f44c:	4620      	mov	r0, r4
 800f44e:	f000 fe5e 	bl	801010e <__any_on>
 800f452:	2800      	cmp	r0, #0
 800f454:	d0c2      	beq.n	800f3dc <__gethex+0x1a8>
 800f456:	f04f 0903 	mov.w	r9, #3
 800f45a:	e7c1      	b.n	800f3e0 <__gethex+0x1ac>
 800f45c:	da09      	bge.n	800f472 <__gethex+0x23e>
 800f45e:	1b75      	subs	r5, r6, r5
 800f460:	4621      	mov	r1, r4
 800f462:	9801      	ldr	r0, [sp, #4]
 800f464:	462a      	mov	r2, r5
 800f466:	f000 fc19 	bl	800fc9c <__lshift>
 800f46a:	1b7f      	subs	r7, r7, r5
 800f46c:	4604      	mov	r4, r0
 800f46e:	f100 0a14 	add.w	sl, r0, #20
 800f472:	f04f 0900 	mov.w	r9, #0
 800f476:	e7b8      	b.n	800f3ea <__gethex+0x1b6>
 800f478:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f47c:	42bd      	cmp	r5, r7
 800f47e:	dd6f      	ble.n	800f560 <__gethex+0x32c>
 800f480:	1bed      	subs	r5, r5, r7
 800f482:	42ae      	cmp	r6, r5
 800f484:	dc34      	bgt.n	800f4f0 <__gethex+0x2bc>
 800f486:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f48a:	2b02      	cmp	r3, #2
 800f48c:	d022      	beq.n	800f4d4 <__gethex+0x2a0>
 800f48e:	2b03      	cmp	r3, #3
 800f490:	d024      	beq.n	800f4dc <__gethex+0x2a8>
 800f492:	2b01      	cmp	r3, #1
 800f494:	d115      	bne.n	800f4c2 <__gethex+0x28e>
 800f496:	42ae      	cmp	r6, r5
 800f498:	d113      	bne.n	800f4c2 <__gethex+0x28e>
 800f49a:	2e01      	cmp	r6, #1
 800f49c:	d10b      	bne.n	800f4b6 <__gethex+0x282>
 800f49e:	9a02      	ldr	r2, [sp, #8]
 800f4a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f4a4:	6013      	str	r3, [r2, #0]
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	6123      	str	r3, [r4, #16]
 800f4aa:	f8ca 3000 	str.w	r3, [sl]
 800f4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4b0:	2562      	movs	r5, #98	@ 0x62
 800f4b2:	601c      	str	r4, [r3, #0]
 800f4b4:	e73a      	b.n	800f32c <__gethex+0xf8>
 800f4b6:	1e71      	subs	r1, r6, #1
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f000 fe28 	bl	801010e <__any_on>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d1ed      	bne.n	800f49e <__gethex+0x26a>
 800f4c2:	9801      	ldr	r0, [sp, #4]
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	f000 f9d9 	bl	800f87c <_Bfree>
 800f4ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	6013      	str	r3, [r2, #0]
 800f4d0:	2550      	movs	r5, #80	@ 0x50
 800f4d2:	e72b      	b.n	800f32c <__gethex+0xf8>
 800f4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d1f3      	bne.n	800f4c2 <__gethex+0x28e>
 800f4da:	e7e0      	b.n	800f49e <__gethex+0x26a>
 800f4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1dd      	bne.n	800f49e <__gethex+0x26a>
 800f4e2:	e7ee      	b.n	800f4c2 <__gethex+0x28e>
 800f4e4:	0801096c 	.word	0x0801096c
 800f4e8:	08010abc 	.word	0x08010abc
 800f4ec:	08010acd 	.word	0x08010acd
 800f4f0:	1e6f      	subs	r7, r5, #1
 800f4f2:	f1b9 0f00 	cmp.w	r9, #0
 800f4f6:	d130      	bne.n	800f55a <__gethex+0x326>
 800f4f8:	b127      	cbz	r7, 800f504 <__gethex+0x2d0>
 800f4fa:	4639      	mov	r1, r7
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f000 fe06 	bl	801010e <__any_on>
 800f502:	4681      	mov	r9, r0
 800f504:	117a      	asrs	r2, r7, #5
 800f506:	2301      	movs	r3, #1
 800f508:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f50c:	f007 071f 	and.w	r7, r7, #31
 800f510:	40bb      	lsls	r3, r7
 800f512:	4213      	tst	r3, r2
 800f514:	4629      	mov	r1, r5
 800f516:	4620      	mov	r0, r4
 800f518:	bf18      	it	ne
 800f51a:	f049 0902 	orrne.w	r9, r9, #2
 800f51e:	f7ff fe21 	bl	800f164 <rshift>
 800f522:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f526:	1b76      	subs	r6, r6, r5
 800f528:	2502      	movs	r5, #2
 800f52a:	f1b9 0f00 	cmp.w	r9, #0
 800f52e:	d047      	beq.n	800f5c0 <__gethex+0x38c>
 800f530:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f534:	2b02      	cmp	r3, #2
 800f536:	d015      	beq.n	800f564 <__gethex+0x330>
 800f538:	2b03      	cmp	r3, #3
 800f53a:	d017      	beq.n	800f56c <__gethex+0x338>
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d109      	bne.n	800f554 <__gethex+0x320>
 800f540:	f019 0f02 	tst.w	r9, #2
 800f544:	d006      	beq.n	800f554 <__gethex+0x320>
 800f546:	f8da 3000 	ldr.w	r3, [sl]
 800f54a:	ea49 0903 	orr.w	r9, r9, r3
 800f54e:	f019 0f01 	tst.w	r9, #1
 800f552:	d10e      	bne.n	800f572 <__gethex+0x33e>
 800f554:	f045 0510 	orr.w	r5, r5, #16
 800f558:	e032      	b.n	800f5c0 <__gethex+0x38c>
 800f55a:	f04f 0901 	mov.w	r9, #1
 800f55e:	e7d1      	b.n	800f504 <__gethex+0x2d0>
 800f560:	2501      	movs	r5, #1
 800f562:	e7e2      	b.n	800f52a <__gethex+0x2f6>
 800f564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f566:	f1c3 0301 	rsb	r3, r3, #1
 800f56a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d0f0      	beq.n	800f554 <__gethex+0x320>
 800f572:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f576:	f104 0314 	add.w	r3, r4, #20
 800f57a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f57e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f582:	f04f 0c00 	mov.w	ip, #0
 800f586:	4618      	mov	r0, r3
 800f588:	f853 2b04 	ldr.w	r2, [r3], #4
 800f58c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f590:	d01b      	beq.n	800f5ca <__gethex+0x396>
 800f592:	3201      	adds	r2, #1
 800f594:	6002      	str	r2, [r0, #0]
 800f596:	2d02      	cmp	r5, #2
 800f598:	f104 0314 	add.w	r3, r4, #20
 800f59c:	d13c      	bne.n	800f618 <__gethex+0x3e4>
 800f59e:	f8d8 2000 	ldr.w	r2, [r8]
 800f5a2:	3a01      	subs	r2, #1
 800f5a4:	42b2      	cmp	r2, r6
 800f5a6:	d109      	bne.n	800f5bc <__gethex+0x388>
 800f5a8:	1171      	asrs	r1, r6, #5
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5b0:	f006 061f 	and.w	r6, r6, #31
 800f5b4:	fa02 f606 	lsl.w	r6, r2, r6
 800f5b8:	421e      	tst	r6, r3
 800f5ba:	d13a      	bne.n	800f632 <__gethex+0x3fe>
 800f5bc:	f045 0520 	orr.w	r5, r5, #32
 800f5c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5c2:	601c      	str	r4, [r3, #0]
 800f5c4:	9b02      	ldr	r3, [sp, #8]
 800f5c6:	601f      	str	r7, [r3, #0]
 800f5c8:	e6b0      	b.n	800f32c <__gethex+0xf8>
 800f5ca:	4299      	cmp	r1, r3
 800f5cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f5d0:	d8d9      	bhi.n	800f586 <__gethex+0x352>
 800f5d2:	68a3      	ldr	r3, [r4, #8]
 800f5d4:	459b      	cmp	fp, r3
 800f5d6:	db17      	blt.n	800f608 <__gethex+0x3d4>
 800f5d8:	6861      	ldr	r1, [r4, #4]
 800f5da:	9801      	ldr	r0, [sp, #4]
 800f5dc:	3101      	adds	r1, #1
 800f5de:	f000 f90d 	bl	800f7fc <_Balloc>
 800f5e2:	4681      	mov	r9, r0
 800f5e4:	b918      	cbnz	r0, 800f5ee <__gethex+0x3ba>
 800f5e6:	4b1a      	ldr	r3, [pc, #104]	@ (800f650 <__gethex+0x41c>)
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	2184      	movs	r1, #132	@ 0x84
 800f5ec:	e6c5      	b.n	800f37a <__gethex+0x146>
 800f5ee:	6922      	ldr	r2, [r4, #16]
 800f5f0:	3202      	adds	r2, #2
 800f5f2:	f104 010c 	add.w	r1, r4, #12
 800f5f6:	0092      	lsls	r2, r2, #2
 800f5f8:	300c      	adds	r0, #12
 800f5fa:	f7fe fed8 	bl	800e3ae <memcpy>
 800f5fe:	4621      	mov	r1, r4
 800f600:	9801      	ldr	r0, [sp, #4]
 800f602:	f000 f93b 	bl	800f87c <_Bfree>
 800f606:	464c      	mov	r4, r9
 800f608:	6923      	ldr	r3, [r4, #16]
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f610:	6122      	str	r2, [r4, #16]
 800f612:	2201      	movs	r2, #1
 800f614:	615a      	str	r2, [r3, #20]
 800f616:	e7be      	b.n	800f596 <__gethex+0x362>
 800f618:	6922      	ldr	r2, [r4, #16]
 800f61a:	455a      	cmp	r2, fp
 800f61c:	dd0b      	ble.n	800f636 <__gethex+0x402>
 800f61e:	2101      	movs	r1, #1
 800f620:	4620      	mov	r0, r4
 800f622:	f7ff fd9f 	bl	800f164 <rshift>
 800f626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f62a:	3701      	adds	r7, #1
 800f62c:	42bb      	cmp	r3, r7
 800f62e:	f6ff aee0 	blt.w	800f3f2 <__gethex+0x1be>
 800f632:	2501      	movs	r5, #1
 800f634:	e7c2      	b.n	800f5bc <__gethex+0x388>
 800f636:	f016 061f 	ands.w	r6, r6, #31
 800f63a:	d0fa      	beq.n	800f632 <__gethex+0x3fe>
 800f63c:	4453      	add	r3, sl
 800f63e:	f1c6 0620 	rsb	r6, r6, #32
 800f642:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f646:	f000 f9cb 	bl	800f9e0 <__hi0bits>
 800f64a:	42b0      	cmp	r0, r6
 800f64c:	dbe7      	blt.n	800f61e <__gethex+0x3ea>
 800f64e:	e7f0      	b.n	800f632 <__gethex+0x3fe>
 800f650:	08010abc 	.word	0x08010abc

0800f654 <L_shift>:
 800f654:	f1c2 0208 	rsb	r2, r2, #8
 800f658:	0092      	lsls	r2, r2, #2
 800f65a:	b570      	push	{r4, r5, r6, lr}
 800f65c:	f1c2 0620 	rsb	r6, r2, #32
 800f660:	6843      	ldr	r3, [r0, #4]
 800f662:	6804      	ldr	r4, [r0, #0]
 800f664:	fa03 f506 	lsl.w	r5, r3, r6
 800f668:	432c      	orrs	r4, r5
 800f66a:	40d3      	lsrs	r3, r2
 800f66c:	6004      	str	r4, [r0, #0]
 800f66e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f672:	4288      	cmp	r0, r1
 800f674:	d3f4      	bcc.n	800f660 <L_shift+0xc>
 800f676:	bd70      	pop	{r4, r5, r6, pc}

0800f678 <__match>:
 800f678:	b530      	push	{r4, r5, lr}
 800f67a:	6803      	ldr	r3, [r0, #0]
 800f67c:	3301      	adds	r3, #1
 800f67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f682:	b914      	cbnz	r4, 800f68a <__match+0x12>
 800f684:	6003      	str	r3, [r0, #0]
 800f686:	2001      	movs	r0, #1
 800f688:	bd30      	pop	{r4, r5, pc}
 800f68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f68e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f692:	2d19      	cmp	r5, #25
 800f694:	bf98      	it	ls
 800f696:	3220      	addls	r2, #32
 800f698:	42a2      	cmp	r2, r4
 800f69a:	d0f0      	beq.n	800f67e <__match+0x6>
 800f69c:	2000      	movs	r0, #0
 800f69e:	e7f3      	b.n	800f688 <__match+0x10>

0800f6a0 <__hexnan>:
 800f6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a4:	680b      	ldr	r3, [r1, #0]
 800f6a6:	6801      	ldr	r1, [r0, #0]
 800f6a8:	115e      	asrs	r6, r3, #5
 800f6aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f6ae:	f013 031f 	ands.w	r3, r3, #31
 800f6b2:	b087      	sub	sp, #28
 800f6b4:	bf18      	it	ne
 800f6b6:	3604      	addne	r6, #4
 800f6b8:	2500      	movs	r5, #0
 800f6ba:	1f37      	subs	r7, r6, #4
 800f6bc:	4682      	mov	sl, r0
 800f6be:	4690      	mov	r8, r2
 800f6c0:	9301      	str	r3, [sp, #4]
 800f6c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f6c6:	46b9      	mov	r9, r7
 800f6c8:	463c      	mov	r4, r7
 800f6ca:	9502      	str	r5, [sp, #8]
 800f6cc:	46ab      	mov	fp, r5
 800f6ce:	784a      	ldrb	r2, [r1, #1]
 800f6d0:	1c4b      	adds	r3, r1, #1
 800f6d2:	9303      	str	r3, [sp, #12]
 800f6d4:	b342      	cbz	r2, 800f728 <__hexnan+0x88>
 800f6d6:	4610      	mov	r0, r2
 800f6d8:	9105      	str	r1, [sp, #20]
 800f6da:	9204      	str	r2, [sp, #16]
 800f6dc:	f7ff fd94 	bl	800f208 <__hexdig_fun>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d151      	bne.n	800f788 <__hexnan+0xe8>
 800f6e4:	9a04      	ldr	r2, [sp, #16]
 800f6e6:	9905      	ldr	r1, [sp, #20]
 800f6e8:	2a20      	cmp	r2, #32
 800f6ea:	d818      	bhi.n	800f71e <__hexnan+0x7e>
 800f6ec:	9b02      	ldr	r3, [sp, #8]
 800f6ee:	459b      	cmp	fp, r3
 800f6f0:	dd13      	ble.n	800f71a <__hexnan+0x7a>
 800f6f2:	454c      	cmp	r4, r9
 800f6f4:	d206      	bcs.n	800f704 <__hexnan+0x64>
 800f6f6:	2d07      	cmp	r5, #7
 800f6f8:	dc04      	bgt.n	800f704 <__hexnan+0x64>
 800f6fa:	462a      	mov	r2, r5
 800f6fc:	4649      	mov	r1, r9
 800f6fe:	4620      	mov	r0, r4
 800f700:	f7ff ffa8 	bl	800f654 <L_shift>
 800f704:	4544      	cmp	r4, r8
 800f706:	d952      	bls.n	800f7ae <__hexnan+0x10e>
 800f708:	2300      	movs	r3, #0
 800f70a:	f1a4 0904 	sub.w	r9, r4, #4
 800f70e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f712:	f8cd b008 	str.w	fp, [sp, #8]
 800f716:	464c      	mov	r4, r9
 800f718:	461d      	mov	r5, r3
 800f71a:	9903      	ldr	r1, [sp, #12]
 800f71c:	e7d7      	b.n	800f6ce <__hexnan+0x2e>
 800f71e:	2a29      	cmp	r2, #41	@ 0x29
 800f720:	d157      	bne.n	800f7d2 <__hexnan+0x132>
 800f722:	3102      	adds	r1, #2
 800f724:	f8ca 1000 	str.w	r1, [sl]
 800f728:	f1bb 0f00 	cmp.w	fp, #0
 800f72c:	d051      	beq.n	800f7d2 <__hexnan+0x132>
 800f72e:	454c      	cmp	r4, r9
 800f730:	d206      	bcs.n	800f740 <__hexnan+0xa0>
 800f732:	2d07      	cmp	r5, #7
 800f734:	dc04      	bgt.n	800f740 <__hexnan+0xa0>
 800f736:	462a      	mov	r2, r5
 800f738:	4649      	mov	r1, r9
 800f73a:	4620      	mov	r0, r4
 800f73c:	f7ff ff8a 	bl	800f654 <L_shift>
 800f740:	4544      	cmp	r4, r8
 800f742:	d936      	bls.n	800f7b2 <__hexnan+0x112>
 800f744:	f1a8 0204 	sub.w	r2, r8, #4
 800f748:	4623      	mov	r3, r4
 800f74a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f74e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f752:	429f      	cmp	r7, r3
 800f754:	d2f9      	bcs.n	800f74a <__hexnan+0xaa>
 800f756:	1b3b      	subs	r3, r7, r4
 800f758:	f023 0303 	bic.w	r3, r3, #3
 800f75c:	3304      	adds	r3, #4
 800f75e:	3401      	adds	r4, #1
 800f760:	3e03      	subs	r6, #3
 800f762:	42b4      	cmp	r4, r6
 800f764:	bf88      	it	hi
 800f766:	2304      	movhi	r3, #4
 800f768:	4443      	add	r3, r8
 800f76a:	2200      	movs	r2, #0
 800f76c:	f843 2b04 	str.w	r2, [r3], #4
 800f770:	429f      	cmp	r7, r3
 800f772:	d2fb      	bcs.n	800f76c <__hexnan+0xcc>
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	b91b      	cbnz	r3, 800f780 <__hexnan+0xe0>
 800f778:	4547      	cmp	r7, r8
 800f77a:	d128      	bne.n	800f7ce <__hexnan+0x12e>
 800f77c:	2301      	movs	r3, #1
 800f77e:	603b      	str	r3, [r7, #0]
 800f780:	2005      	movs	r0, #5
 800f782:	b007      	add	sp, #28
 800f784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f788:	3501      	adds	r5, #1
 800f78a:	2d08      	cmp	r5, #8
 800f78c:	f10b 0b01 	add.w	fp, fp, #1
 800f790:	dd06      	ble.n	800f7a0 <__hexnan+0x100>
 800f792:	4544      	cmp	r4, r8
 800f794:	d9c1      	bls.n	800f71a <__hexnan+0x7a>
 800f796:	2300      	movs	r3, #0
 800f798:	f844 3c04 	str.w	r3, [r4, #-4]
 800f79c:	2501      	movs	r5, #1
 800f79e:	3c04      	subs	r4, #4
 800f7a0:	6822      	ldr	r2, [r4, #0]
 800f7a2:	f000 000f 	and.w	r0, r0, #15
 800f7a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f7aa:	6020      	str	r0, [r4, #0]
 800f7ac:	e7b5      	b.n	800f71a <__hexnan+0x7a>
 800f7ae:	2508      	movs	r5, #8
 800f7b0:	e7b3      	b.n	800f71a <__hexnan+0x7a>
 800f7b2:	9b01      	ldr	r3, [sp, #4]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d0dd      	beq.n	800f774 <__hexnan+0xd4>
 800f7b8:	f1c3 0320 	rsb	r3, r3, #32
 800f7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c0:	40da      	lsrs	r2, r3
 800f7c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f7c6:	4013      	ands	r3, r2
 800f7c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f7cc:	e7d2      	b.n	800f774 <__hexnan+0xd4>
 800f7ce:	3f04      	subs	r7, #4
 800f7d0:	e7d0      	b.n	800f774 <__hexnan+0xd4>
 800f7d2:	2004      	movs	r0, #4
 800f7d4:	e7d5      	b.n	800f782 <__hexnan+0xe2>

0800f7d6 <__ascii_mbtowc>:
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	b901      	cbnz	r1, 800f7dc <__ascii_mbtowc+0x6>
 800f7da:	a901      	add	r1, sp, #4
 800f7dc:	b142      	cbz	r2, 800f7f0 <__ascii_mbtowc+0x1a>
 800f7de:	b14b      	cbz	r3, 800f7f4 <__ascii_mbtowc+0x1e>
 800f7e0:	7813      	ldrb	r3, [r2, #0]
 800f7e2:	600b      	str	r3, [r1, #0]
 800f7e4:	7812      	ldrb	r2, [r2, #0]
 800f7e6:	1e10      	subs	r0, r2, #0
 800f7e8:	bf18      	it	ne
 800f7ea:	2001      	movne	r0, #1
 800f7ec:	b002      	add	sp, #8
 800f7ee:	4770      	bx	lr
 800f7f0:	4610      	mov	r0, r2
 800f7f2:	e7fb      	b.n	800f7ec <__ascii_mbtowc+0x16>
 800f7f4:	f06f 0001 	mvn.w	r0, #1
 800f7f8:	e7f8      	b.n	800f7ec <__ascii_mbtowc+0x16>
	...

0800f7fc <_Balloc>:
 800f7fc:	b570      	push	{r4, r5, r6, lr}
 800f7fe:	69c6      	ldr	r6, [r0, #28]
 800f800:	4604      	mov	r4, r0
 800f802:	460d      	mov	r5, r1
 800f804:	b976      	cbnz	r6, 800f824 <_Balloc+0x28>
 800f806:	2010      	movs	r0, #16
 800f808:	f7fc ffee 	bl	800c7e8 <malloc>
 800f80c:	4602      	mov	r2, r0
 800f80e:	61e0      	str	r0, [r4, #28]
 800f810:	b920      	cbnz	r0, 800f81c <_Balloc+0x20>
 800f812:	4b18      	ldr	r3, [pc, #96]	@ (800f874 <_Balloc+0x78>)
 800f814:	4818      	ldr	r0, [pc, #96]	@ (800f878 <_Balloc+0x7c>)
 800f816:	216b      	movs	r1, #107	@ 0x6b
 800f818:	f7fe fde2 	bl	800e3e0 <__assert_func>
 800f81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f820:	6006      	str	r6, [r0, #0]
 800f822:	60c6      	str	r6, [r0, #12]
 800f824:	69e6      	ldr	r6, [r4, #28]
 800f826:	68f3      	ldr	r3, [r6, #12]
 800f828:	b183      	cbz	r3, 800f84c <_Balloc+0x50>
 800f82a:	69e3      	ldr	r3, [r4, #28]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f832:	b9b8      	cbnz	r0, 800f864 <_Balloc+0x68>
 800f834:	2101      	movs	r1, #1
 800f836:	fa01 f605 	lsl.w	r6, r1, r5
 800f83a:	1d72      	adds	r2, r6, #5
 800f83c:	0092      	lsls	r2, r2, #2
 800f83e:	4620      	mov	r0, r4
 800f840:	f000 ff2d 	bl	801069e <_calloc_r>
 800f844:	b160      	cbz	r0, 800f860 <_Balloc+0x64>
 800f846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f84a:	e00e      	b.n	800f86a <_Balloc+0x6e>
 800f84c:	2221      	movs	r2, #33	@ 0x21
 800f84e:	2104      	movs	r1, #4
 800f850:	4620      	mov	r0, r4
 800f852:	f000 ff24 	bl	801069e <_calloc_r>
 800f856:	69e3      	ldr	r3, [r4, #28]
 800f858:	60f0      	str	r0, [r6, #12]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1e4      	bne.n	800f82a <_Balloc+0x2e>
 800f860:	2000      	movs	r0, #0
 800f862:	bd70      	pop	{r4, r5, r6, pc}
 800f864:	6802      	ldr	r2, [r0, #0]
 800f866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f86a:	2300      	movs	r3, #0
 800f86c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f870:	e7f7      	b.n	800f862 <_Balloc+0x66>
 800f872:	bf00      	nop
 800f874:	080109a2 	.word	0x080109a2
 800f878:	08010b2d 	.word	0x08010b2d

0800f87c <_Bfree>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	69c6      	ldr	r6, [r0, #28]
 800f880:	4605      	mov	r5, r0
 800f882:	460c      	mov	r4, r1
 800f884:	b976      	cbnz	r6, 800f8a4 <_Bfree+0x28>
 800f886:	2010      	movs	r0, #16
 800f888:	f7fc ffae 	bl	800c7e8 <malloc>
 800f88c:	4602      	mov	r2, r0
 800f88e:	61e8      	str	r0, [r5, #28]
 800f890:	b920      	cbnz	r0, 800f89c <_Bfree+0x20>
 800f892:	4b09      	ldr	r3, [pc, #36]	@ (800f8b8 <_Bfree+0x3c>)
 800f894:	4809      	ldr	r0, [pc, #36]	@ (800f8bc <_Bfree+0x40>)
 800f896:	218f      	movs	r1, #143	@ 0x8f
 800f898:	f7fe fda2 	bl	800e3e0 <__assert_func>
 800f89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8a0:	6006      	str	r6, [r0, #0]
 800f8a2:	60c6      	str	r6, [r0, #12]
 800f8a4:	b13c      	cbz	r4, 800f8b6 <_Bfree+0x3a>
 800f8a6:	69eb      	ldr	r3, [r5, #28]
 800f8a8:	6862      	ldr	r2, [r4, #4]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8b0:	6021      	str	r1, [r4, #0]
 800f8b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8b6:	bd70      	pop	{r4, r5, r6, pc}
 800f8b8:	080109a2 	.word	0x080109a2
 800f8bc:	08010b2d 	.word	0x08010b2d

0800f8c0 <__multadd>:
 800f8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c4:	690d      	ldr	r5, [r1, #16]
 800f8c6:	4607      	mov	r7, r0
 800f8c8:	460c      	mov	r4, r1
 800f8ca:	461e      	mov	r6, r3
 800f8cc:	f101 0c14 	add.w	ip, r1, #20
 800f8d0:	2000      	movs	r0, #0
 800f8d2:	f8dc 3000 	ldr.w	r3, [ip]
 800f8d6:	b299      	uxth	r1, r3
 800f8d8:	fb02 6101 	mla	r1, r2, r1, r6
 800f8dc:	0c1e      	lsrs	r6, r3, #16
 800f8de:	0c0b      	lsrs	r3, r1, #16
 800f8e0:	fb02 3306 	mla	r3, r2, r6, r3
 800f8e4:	b289      	uxth	r1, r1
 800f8e6:	3001      	adds	r0, #1
 800f8e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8ec:	4285      	cmp	r5, r0
 800f8ee:	f84c 1b04 	str.w	r1, [ip], #4
 800f8f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8f6:	dcec      	bgt.n	800f8d2 <__multadd+0x12>
 800f8f8:	b30e      	cbz	r6, 800f93e <__multadd+0x7e>
 800f8fa:	68a3      	ldr	r3, [r4, #8]
 800f8fc:	42ab      	cmp	r3, r5
 800f8fe:	dc19      	bgt.n	800f934 <__multadd+0x74>
 800f900:	6861      	ldr	r1, [r4, #4]
 800f902:	4638      	mov	r0, r7
 800f904:	3101      	adds	r1, #1
 800f906:	f7ff ff79 	bl	800f7fc <_Balloc>
 800f90a:	4680      	mov	r8, r0
 800f90c:	b928      	cbnz	r0, 800f91a <__multadd+0x5a>
 800f90e:	4602      	mov	r2, r0
 800f910:	4b0c      	ldr	r3, [pc, #48]	@ (800f944 <__multadd+0x84>)
 800f912:	480d      	ldr	r0, [pc, #52]	@ (800f948 <__multadd+0x88>)
 800f914:	21ba      	movs	r1, #186	@ 0xba
 800f916:	f7fe fd63 	bl	800e3e0 <__assert_func>
 800f91a:	6922      	ldr	r2, [r4, #16]
 800f91c:	3202      	adds	r2, #2
 800f91e:	f104 010c 	add.w	r1, r4, #12
 800f922:	0092      	lsls	r2, r2, #2
 800f924:	300c      	adds	r0, #12
 800f926:	f7fe fd42 	bl	800e3ae <memcpy>
 800f92a:	4621      	mov	r1, r4
 800f92c:	4638      	mov	r0, r7
 800f92e:	f7ff ffa5 	bl	800f87c <_Bfree>
 800f932:	4644      	mov	r4, r8
 800f934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f938:	3501      	adds	r5, #1
 800f93a:	615e      	str	r6, [r3, #20]
 800f93c:	6125      	str	r5, [r4, #16]
 800f93e:	4620      	mov	r0, r4
 800f940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f944:	08010abc 	.word	0x08010abc
 800f948:	08010b2d 	.word	0x08010b2d

0800f94c <__s2b>:
 800f94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f950:	460c      	mov	r4, r1
 800f952:	4615      	mov	r5, r2
 800f954:	461f      	mov	r7, r3
 800f956:	2209      	movs	r2, #9
 800f958:	3308      	adds	r3, #8
 800f95a:	4606      	mov	r6, r0
 800f95c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f960:	2100      	movs	r1, #0
 800f962:	2201      	movs	r2, #1
 800f964:	429a      	cmp	r2, r3
 800f966:	db09      	blt.n	800f97c <__s2b+0x30>
 800f968:	4630      	mov	r0, r6
 800f96a:	f7ff ff47 	bl	800f7fc <_Balloc>
 800f96e:	b940      	cbnz	r0, 800f982 <__s2b+0x36>
 800f970:	4602      	mov	r2, r0
 800f972:	4b19      	ldr	r3, [pc, #100]	@ (800f9d8 <__s2b+0x8c>)
 800f974:	4819      	ldr	r0, [pc, #100]	@ (800f9dc <__s2b+0x90>)
 800f976:	21d3      	movs	r1, #211	@ 0xd3
 800f978:	f7fe fd32 	bl	800e3e0 <__assert_func>
 800f97c:	0052      	lsls	r2, r2, #1
 800f97e:	3101      	adds	r1, #1
 800f980:	e7f0      	b.n	800f964 <__s2b+0x18>
 800f982:	9b08      	ldr	r3, [sp, #32]
 800f984:	6143      	str	r3, [r0, #20]
 800f986:	2d09      	cmp	r5, #9
 800f988:	f04f 0301 	mov.w	r3, #1
 800f98c:	6103      	str	r3, [r0, #16]
 800f98e:	dd16      	ble.n	800f9be <__s2b+0x72>
 800f990:	f104 0909 	add.w	r9, r4, #9
 800f994:	46c8      	mov	r8, r9
 800f996:	442c      	add	r4, r5
 800f998:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f99c:	4601      	mov	r1, r0
 800f99e:	3b30      	subs	r3, #48	@ 0x30
 800f9a0:	220a      	movs	r2, #10
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	f7ff ff8c 	bl	800f8c0 <__multadd>
 800f9a8:	45a0      	cmp	r8, r4
 800f9aa:	d1f5      	bne.n	800f998 <__s2b+0x4c>
 800f9ac:	f1a5 0408 	sub.w	r4, r5, #8
 800f9b0:	444c      	add	r4, r9
 800f9b2:	1b2d      	subs	r5, r5, r4
 800f9b4:	1963      	adds	r3, r4, r5
 800f9b6:	42bb      	cmp	r3, r7
 800f9b8:	db04      	blt.n	800f9c4 <__s2b+0x78>
 800f9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9be:	340a      	adds	r4, #10
 800f9c0:	2509      	movs	r5, #9
 800f9c2:	e7f6      	b.n	800f9b2 <__s2b+0x66>
 800f9c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9c8:	4601      	mov	r1, r0
 800f9ca:	3b30      	subs	r3, #48	@ 0x30
 800f9cc:	220a      	movs	r2, #10
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f7ff ff76 	bl	800f8c0 <__multadd>
 800f9d4:	e7ee      	b.n	800f9b4 <__s2b+0x68>
 800f9d6:	bf00      	nop
 800f9d8:	08010abc 	.word	0x08010abc
 800f9dc:	08010b2d 	.word	0x08010b2d

0800f9e0 <__hi0bits>:
 800f9e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	bf36      	itet	cc
 800f9e8:	0403      	lslcc	r3, r0, #16
 800f9ea:	2000      	movcs	r0, #0
 800f9ec:	2010      	movcc	r0, #16
 800f9ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f9f2:	bf3c      	itt	cc
 800f9f4:	021b      	lslcc	r3, r3, #8
 800f9f6:	3008      	addcc	r0, #8
 800f9f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f9fc:	bf3c      	itt	cc
 800f9fe:	011b      	lslcc	r3, r3, #4
 800fa00:	3004      	addcc	r0, #4
 800fa02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa06:	bf3c      	itt	cc
 800fa08:	009b      	lslcc	r3, r3, #2
 800fa0a:	3002      	addcc	r0, #2
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	db05      	blt.n	800fa1c <__hi0bits+0x3c>
 800fa10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fa14:	f100 0001 	add.w	r0, r0, #1
 800fa18:	bf08      	it	eq
 800fa1a:	2020      	moveq	r0, #32
 800fa1c:	4770      	bx	lr

0800fa1e <__lo0bits>:
 800fa1e:	6803      	ldr	r3, [r0, #0]
 800fa20:	4602      	mov	r2, r0
 800fa22:	f013 0007 	ands.w	r0, r3, #7
 800fa26:	d00b      	beq.n	800fa40 <__lo0bits+0x22>
 800fa28:	07d9      	lsls	r1, r3, #31
 800fa2a:	d421      	bmi.n	800fa70 <__lo0bits+0x52>
 800fa2c:	0798      	lsls	r0, r3, #30
 800fa2e:	bf49      	itett	mi
 800fa30:	085b      	lsrmi	r3, r3, #1
 800fa32:	089b      	lsrpl	r3, r3, #2
 800fa34:	2001      	movmi	r0, #1
 800fa36:	6013      	strmi	r3, [r2, #0]
 800fa38:	bf5c      	itt	pl
 800fa3a:	6013      	strpl	r3, [r2, #0]
 800fa3c:	2002      	movpl	r0, #2
 800fa3e:	4770      	bx	lr
 800fa40:	b299      	uxth	r1, r3
 800fa42:	b909      	cbnz	r1, 800fa48 <__lo0bits+0x2a>
 800fa44:	0c1b      	lsrs	r3, r3, #16
 800fa46:	2010      	movs	r0, #16
 800fa48:	b2d9      	uxtb	r1, r3
 800fa4a:	b909      	cbnz	r1, 800fa50 <__lo0bits+0x32>
 800fa4c:	3008      	adds	r0, #8
 800fa4e:	0a1b      	lsrs	r3, r3, #8
 800fa50:	0719      	lsls	r1, r3, #28
 800fa52:	bf04      	itt	eq
 800fa54:	091b      	lsreq	r3, r3, #4
 800fa56:	3004      	addeq	r0, #4
 800fa58:	0799      	lsls	r1, r3, #30
 800fa5a:	bf04      	itt	eq
 800fa5c:	089b      	lsreq	r3, r3, #2
 800fa5e:	3002      	addeq	r0, #2
 800fa60:	07d9      	lsls	r1, r3, #31
 800fa62:	d403      	bmi.n	800fa6c <__lo0bits+0x4e>
 800fa64:	085b      	lsrs	r3, r3, #1
 800fa66:	f100 0001 	add.w	r0, r0, #1
 800fa6a:	d003      	beq.n	800fa74 <__lo0bits+0x56>
 800fa6c:	6013      	str	r3, [r2, #0]
 800fa6e:	4770      	bx	lr
 800fa70:	2000      	movs	r0, #0
 800fa72:	4770      	bx	lr
 800fa74:	2020      	movs	r0, #32
 800fa76:	4770      	bx	lr

0800fa78 <__i2b>:
 800fa78:	b510      	push	{r4, lr}
 800fa7a:	460c      	mov	r4, r1
 800fa7c:	2101      	movs	r1, #1
 800fa7e:	f7ff febd 	bl	800f7fc <_Balloc>
 800fa82:	4602      	mov	r2, r0
 800fa84:	b928      	cbnz	r0, 800fa92 <__i2b+0x1a>
 800fa86:	4b05      	ldr	r3, [pc, #20]	@ (800fa9c <__i2b+0x24>)
 800fa88:	4805      	ldr	r0, [pc, #20]	@ (800faa0 <__i2b+0x28>)
 800fa8a:	f240 1145 	movw	r1, #325	@ 0x145
 800fa8e:	f7fe fca7 	bl	800e3e0 <__assert_func>
 800fa92:	2301      	movs	r3, #1
 800fa94:	6144      	str	r4, [r0, #20]
 800fa96:	6103      	str	r3, [r0, #16]
 800fa98:	bd10      	pop	{r4, pc}
 800fa9a:	bf00      	nop
 800fa9c:	08010abc 	.word	0x08010abc
 800faa0:	08010b2d 	.word	0x08010b2d

0800faa4 <__multiply>:
 800faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa8:	4617      	mov	r7, r2
 800faaa:	690a      	ldr	r2, [r1, #16]
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	429a      	cmp	r2, r3
 800fab0:	bfa8      	it	ge
 800fab2:	463b      	movge	r3, r7
 800fab4:	4689      	mov	r9, r1
 800fab6:	bfa4      	itt	ge
 800fab8:	460f      	movge	r7, r1
 800faba:	4699      	movge	r9, r3
 800fabc:	693d      	ldr	r5, [r7, #16]
 800fabe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	6879      	ldr	r1, [r7, #4]
 800fac6:	eb05 060a 	add.w	r6, r5, sl
 800faca:	42b3      	cmp	r3, r6
 800facc:	b085      	sub	sp, #20
 800face:	bfb8      	it	lt
 800fad0:	3101      	addlt	r1, #1
 800fad2:	f7ff fe93 	bl	800f7fc <_Balloc>
 800fad6:	b930      	cbnz	r0, 800fae6 <__multiply+0x42>
 800fad8:	4602      	mov	r2, r0
 800fada:	4b41      	ldr	r3, [pc, #260]	@ (800fbe0 <__multiply+0x13c>)
 800fadc:	4841      	ldr	r0, [pc, #260]	@ (800fbe4 <__multiply+0x140>)
 800fade:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fae2:	f7fe fc7d 	bl	800e3e0 <__assert_func>
 800fae6:	f100 0414 	add.w	r4, r0, #20
 800faea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800faee:	4623      	mov	r3, r4
 800faf0:	2200      	movs	r2, #0
 800faf2:	4573      	cmp	r3, lr
 800faf4:	d320      	bcc.n	800fb38 <__multiply+0x94>
 800faf6:	f107 0814 	add.w	r8, r7, #20
 800fafa:	f109 0114 	add.w	r1, r9, #20
 800fafe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fb02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fb06:	9302      	str	r3, [sp, #8]
 800fb08:	1beb      	subs	r3, r5, r7
 800fb0a:	3b15      	subs	r3, #21
 800fb0c:	f023 0303 	bic.w	r3, r3, #3
 800fb10:	3304      	adds	r3, #4
 800fb12:	3715      	adds	r7, #21
 800fb14:	42bd      	cmp	r5, r7
 800fb16:	bf38      	it	cc
 800fb18:	2304      	movcc	r3, #4
 800fb1a:	9301      	str	r3, [sp, #4]
 800fb1c:	9b02      	ldr	r3, [sp, #8]
 800fb1e:	9103      	str	r1, [sp, #12]
 800fb20:	428b      	cmp	r3, r1
 800fb22:	d80c      	bhi.n	800fb3e <__multiply+0x9a>
 800fb24:	2e00      	cmp	r6, #0
 800fb26:	dd03      	ble.n	800fb30 <__multiply+0x8c>
 800fb28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d055      	beq.n	800fbdc <__multiply+0x138>
 800fb30:	6106      	str	r6, [r0, #16]
 800fb32:	b005      	add	sp, #20
 800fb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb38:	f843 2b04 	str.w	r2, [r3], #4
 800fb3c:	e7d9      	b.n	800faf2 <__multiply+0x4e>
 800fb3e:	f8b1 a000 	ldrh.w	sl, [r1]
 800fb42:	f1ba 0f00 	cmp.w	sl, #0
 800fb46:	d01f      	beq.n	800fb88 <__multiply+0xe4>
 800fb48:	46c4      	mov	ip, r8
 800fb4a:	46a1      	mov	r9, r4
 800fb4c:	2700      	movs	r7, #0
 800fb4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fb52:	f8d9 3000 	ldr.w	r3, [r9]
 800fb56:	fa1f fb82 	uxth.w	fp, r2
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800fb60:	443b      	add	r3, r7
 800fb62:	f8d9 7000 	ldr.w	r7, [r9]
 800fb66:	0c12      	lsrs	r2, r2, #16
 800fb68:	0c3f      	lsrs	r7, r7, #16
 800fb6a:	fb0a 7202 	mla	r2, sl, r2, r7
 800fb6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb78:	4565      	cmp	r5, ip
 800fb7a:	f849 3b04 	str.w	r3, [r9], #4
 800fb7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fb82:	d8e4      	bhi.n	800fb4e <__multiply+0xaa>
 800fb84:	9b01      	ldr	r3, [sp, #4]
 800fb86:	50e7      	str	r7, [r4, r3]
 800fb88:	9b03      	ldr	r3, [sp, #12]
 800fb8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fb8e:	3104      	adds	r1, #4
 800fb90:	f1b9 0f00 	cmp.w	r9, #0
 800fb94:	d020      	beq.n	800fbd8 <__multiply+0x134>
 800fb96:	6823      	ldr	r3, [r4, #0]
 800fb98:	4647      	mov	r7, r8
 800fb9a:	46a4      	mov	ip, r4
 800fb9c:	f04f 0a00 	mov.w	sl, #0
 800fba0:	f8b7 b000 	ldrh.w	fp, [r7]
 800fba4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fba8:	fb09 220b 	mla	r2, r9, fp, r2
 800fbac:	4452      	add	r2, sl
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbb4:	f84c 3b04 	str.w	r3, [ip], #4
 800fbb8:	f857 3b04 	ldr.w	r3, [r7], #4
 800fbbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbc0:	f8bc 3000 	ldrh.w	r3, [ip]
 800fbc4:	fb09 330a 	mla	r3, r9, sl, r3
 800fbc8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fbcc:	42bd      	cmp	r5, r7
 800fbce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbd2:	d8e5      	bhi.n	800fba0 <__multiply+0xfc>
 800fbd4:	9a01      	ldr	r2, [sp, #4]
 800fbd6:	50a3      	str	r3, [r4, r2]
 800fbd8:	3404      	adds	r4, #4
 800fbda:	e79f      	b.n	800fb1c <__multiply+0x78>
 800fbdc:	3e01      	subs	r6, #1
 800fbde:	e7a1      	b.n	800fb24 <__multiply+0x80>
 800fbe0:	08010abc 	.word	0x08010abc
 800fbe4:	08010b2d 	.word	0x08010b2d

0800fbe8 <__pow5mult>:
 800fbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbec:	4615      	mov	r5, r2
 800fbee:	f012 0203 	ands.w	r2, r2, #3
 800fbf2:	4607      	mov	r7, r0
 800fbf4:	460e      	mov	r6, r1
 800fbf6:	d007      	beq.n	800fc08 <__pow5mult+0x20>
 800fbf8:	4c25      	ldr	r4, [pc, #148]	@ (800fc90 <__pow5mult+0xa8>)
 800fbfa:	3a01      	subs	r2, #1
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc02:	f7ff fe5d 	bl	800f8c0 <__multadd>
 800fc06:	4606      	mov	r6, r0
 800fc08:	10ad      	asrs	r5, r5, #2
 800fc0a:	d03d      	beq.n	800fc88 <__pow5mult+0xa0>
 800fc0c:	69fc      	ldr	r4, [r7, #28]
 800fc0e:	b97c      	cbnz	r4, 800fc30 <__pow5mult+0x48>
 800fc10:	2010      	movs	r0, #16
 800fc12:	f7fc fde9 	bl	800c7e8 <malloc>
 800fc16:	4602      	mov	r2, r0
 800fc18:	61f8      	str	r0, [r7, #28]
 800fc1a:	b928      	cbnz	r0, 800fc28 <__pow5mult+0x40>
 800fc1c:	4b1d      	ldr	r3, [pc, #116]	@ (800fc94 <__pow5mult+0xac>)
 800fc1e:	481e      	ldr	r0, [pc, #120]	@ (800fc98 <__pow5mult+0xb0>)
 800fc20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fc24:	f7fe fbdc 	bl	800e3e0 <__assert_func>
 800fc28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc2c:	6004      	str	r4, [r0, #0]
 800fc2e:	60c4      	str	r4, [r0, #12]
 800fc30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fc34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc38:	b94c      	cbnz	r4, 800fc4e <__pow5mult+0x66>
 800fc3a:	f240 2171 	movw	r1, #625	@ 0x271
 800fc3e:	4638      	mov	r0, r7
 800fc40:	f7ff ff1a 	bl	800fa78 <__i2b>
 800fc44:	2300      	movs	r3, #0
 800fc46:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	6003      	str	r3, [r0, #0]
 800fc4e:	f04f 0900 	mov.w	r9, #0
 800fc52:	07eb      	lsls	r3, r5, #31
 800fc54:	d50a      	bpl.n	800fc6c <__pow5mult+0x84>
 800fc56:	4631      	mov	r1, r6
 800fc58:	4622      	mov	r2, r4
 800fc5a:	4638      	mov	r0, r7
 800fc5c:	f7ff ff22 	bl	800faa4 <__multiply>
 800fc60:	4631      	mov	r1, r6
 800fc62:	4680      	mov	r8, r0
 800fc64:	4638      	mov	r0, r7
 800fc66:	f7ff fe09 	bl	800f87c <_Bfree>
 800fc6a:	4646      	mov	r6, r8
 800fc6c:	106d      	asrs	r5, r5, #1
 800fc6e:	d00b      	beq.n	800fc88 <__pow5mult+0xa0>
 800fc70:	6820      	ldr	r0, [r4, #0]
 800fc72:	b938      	cbnz	r0, 800fc84 <__pow5mult+0x9c>
 800fc74:	4622      	mov	r2, r4
 800fc76:	4621      	mov	r1, r4
 800fc78:	4638      	mov	r0, r7
 800fc7a:	f7ff ff13 	bl	800faa4 <__multiply>
 800fc7e:	6020      	str	r0, [r4, #0]
 800fc80:	f8c0 9000 	str.w	r9, [r0]
 800fc84:	4604      	mov	r4, r0
 800fc86:	e7e4      	b.n	800fc52 <__pow5mult+0x6a>
 800fc88:	4630      	mov	r0, r6
 800fc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc8e:	bf00      	nop
 800fc90:	08010cec 	.word	0x08010cec
 800fc94:	080109a2 	.word	0x080109a2
 800fc98:	08010b2d 	.word	0x08010b2d

0800fc9c <__lshift>:
 800fc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fca0:	460c      	mov	r4, r1
 800fca2:	6849      	ldr	r1, [r1, #4]
 800fca4:	6923      	ldr	r3, [r4, #16]
 800fca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fcaa:	68a3      	ldr	r3, [r4, #8]
 800fcac:	4607      	mov	r7, r0
 800fcae:	4691      	mov	r9, r2
 800fcb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fcb4:	f108 0601 	add.w	r6, r8, #1
 800fcb8:	42b3      	cmp	r3, r6
 800fcba:	db0b      	blt.n	800fcd4 <__lshift+0x38>
 800fcbc:	4638      	mov	r0, r7
 800fcbe:	f7ff fd9d 	bl	800f7fc <_Balloc>
 800fcc2:	4605      	mov	r5, r0
 800fcc4:	b948      	cbnz	r0, 800fcda <__lshift+0x3e>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	4b28      	ldr	r3, [pc, #160]	@ (800fd6c <__lshift+0xd0>)
 800fcca:	4829      	ldr	r0, [pc, #164]	@ (800fd70 <__lshift+0xd4>)
 800fccc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fcd0:	f7fe fb86 	bl	800e3e0 <__assert_func>
 800fcd4:	3101      	adds	r1, #1
 800fcd6:	005b      	lsls	r3, r3, #1
 800fcd8:	e7ee      	b.n	800fcb8 <__lshift+0x1c>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	f100 0114 	add.w	r1, r0, #20
 800fce0:	f100 0210 	add.w	r2, r0, #16
 800fce4:	4618      	mov	r0, r3
 800fce6:	4553      	cmp	r3, sl
 800fce8:	db33      	blt.n	800fd52 <__lshift+0xb6>
 800fcea:	6920      	ldr	r0, [r4, #16]
 800fcec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fcf0:	f104 0314 	add.w	r3, r4, #20
 800fcf4:	f019 091f 	ands.w	r9, r9, #31
 800fcf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fcfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd00:	d02b      	beq.n	800fd5a <__lshift+0xbe>
 800fd02:	f1c9 0e20 	rsb	lr, r9, #32
 800fd06:	468a      	mov	sl, r1
 800fd08:	2200      	movs	r2, #0
 800fd0a:	6818      	ldr	r0, [r3, #0]
 800fd0c:	fa00 f009 	lsl.w	r0, r0, r9
 800fd10:	4310      	orrs	r0, r2
 800fd12:	f84a 0b04 	str.w	r0, [sl], #4
 800fd16:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd1a:	459c      	cmp	ip, r3
 800fd1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd20:	d8f3      	bhi.n	800fd0a <__lshift+0x6e>
 800fd22:	ebac 0304 	sub.w	r3, ip, r4
 800fd26:	3b15      	subs	r3, #21
 800fd28:	f023 0303 	bic.w	r3, r3, #3
 800fd2c:	3304      	adds	r3, #4
 800fd2e:	f104 0015 	add.w	r0, r4, #21
 800fd32:	4560      	cmp	r0, ip
 800fd34:	bf88      	it	hi
 800fd36:	2304      	movhi	r3, #4
 800fd38:	50ca      	str	r2, [r1, r3]
 800fd3a:	b10a      	cbz	r2, 800fd40 <__lshift+0xa4>
 800fd3c:	f108 0602 	add.w	r6, r8, #2
 800fd40:	3e01      	subs	r6, #1
 800fd42:	4638      	mov	r0, r7
 800fd44:	612e      	str	r6, [r5, #16]
 800fd46:	4621      	mov	r1, r4
 800fd48:	f7ff fd98 	bl	800f87c <_Bfree>
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd52:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd56:	3301      	adds	r3, #1
 800fd58:	e7c5      	b.n	800fce6 <__lshift+0x4a>
 800fd5a:	3904      	subs	r1, #4
 800fd5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd60:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd64:	459c      	cmp	ip, r3
 800fd66:	d8f9      	bhi.n	800fd5c <__lshift+0xc0>
 800fd68:	e7ea      	b.n	800fd40 <__lshift+0xa4>
 800fd6a:	bf00      	nop
 800fd6c:	08010abc 	.word	0x08010abc
 800fd70:	08010b2d 	.word	0x08010b2d

0800fd74 <__mcmp>:
 800fd74:	690a      	ldr	r2, [r1, #16]
 800fd76:	4603      	mov	r3, r0
 800fd78:	6900      	ldr	r0, [r0, #16]
 800fd7a:	1a80      	subs	r0, r0, r2
 800fd7c:	b530      	push	{r4, r5, lr}
 800fd7e:	d10e      	bne.n	800fd9e <__mcmp+0x2a>
 800fd80:	3314      	adds	r3, #20
 800fd82:	3114      	adds	r1, #20
 800fd84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fd88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fd8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fd90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fd94:	4295      	cmp	r5, r2
 800fd96:	d003      	beq.n	800fda0 <__mcmp+0x2c>
 800fd98:	d205      	bcs.n	800fda6 <__mcmp+0x32>
 800fd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd9e:	bd30      	pop	{r4, r5, pc}
 800fda0:	42a3      	cmp	r3, r4
 800fda2:	d3f3      	bcc.n	800fd8c <__mcmp+0x18>
 800fda4:	e7fb      	b.n	800fd9e <__mcmp+0x2a>
 800fda6:	2001      	movs	r0, #1
 800fda8:	e7f9      	b.n	800fd9e <__mcmp+0x2a>
	...

0800fdac <__mdiff>:
 800fdac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb0:	4689      	mov	r9, r1
 800fdb2:	4606      	mov	r6, r0
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	4648      	mov	r0, r9
 800fdb8:	4614      	mov	r4, r2
 800fdba:	f7ff ffdb 	bl	800fd74 <__mcmp>
 800fdbe:	1e05      	subs	r5, r0, #0
 800fdc0:	d112      	bne.n	800fde8 <__mdiff+0x3c>
 800fdc2:	4629      	mov	r1, r5
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f7ff fd19 	bl	800f7fc <_Balloc>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	b928      	cbnz	r0, 800fdda <__mdiff+0x2e>
 800fdce:	4b3f      	ldr	r3, [pc, #252]	@ (800fecc <__mdiff+0x120>)
 800fdd0:	f240 2137 	movw	r1, #567	@ 0x237
 800fdd4:	483e      	ldr	r0, [pc, #248]	@ (800fed0 <__mdiff+0x124>)
 800fdd6:	f7fe fb03 	bl	800e3e0 <__assert_func>
 800fdda:	2301      	movs	r3, #1
 800fddc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fde0:	4610      	mov	r0, r2
 800fde2:	b003      	add	sp, #12
 800fde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde8:	bfbc      	itt	lt
 800fdea:	464b      	movlt	r3, r9
 800fdec:	46a1      	movlt	r9, r4
 800fdee:	4630      	mov	r0, r6
 800fdf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fdf4:	bfba      	itte	lt
 800fdf6:	461c      	movlt	r4, r3
 800fdf8:	2501      	movlt	r5, #1
 800fdfa:	2500      	movge	r5, #0
 800fdfc:	f7ff fcfe 	bl	800f7fc <_Balloc>
 800fe00:	4602      	mov	r2, r0
 800fe02:	b918      	cbnz	r0, 800fe0c <__mdiff+0x60>
 800fe04:	4b31      	ldr	r3, [pc, #196]	@ (800fecc <__mdiff+0x120>)
 800fe06:	f240 2145 	movw	r1, #581	@ 0x245
 800fe0a:	e7e3      	b.n	800fdd4 <__mdiff+0x28>
 800fe0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fe10:	6926      	ldr	r6, [r4, #16]
 800fe12:	60c5      	str	r5, [r0, #12]
 800fe14:	f109 0310 	add.w	r3, r9, #16
 800fe18:	f109 0514 	add.w	r5, r9, #20
 800fe1c:	f104 0e14 	add.w	lr, r4, #20
 800fe20:	f100 0b14 	add.w	fp, r0, #20
 800fe24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fe28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fe2c:	9301      	str	r3, [sp, #4]
 800fe2e:	46d9      	mov	r9, fp
 800fe30:	f04f 0c00 	mov.w	ip, #0
 800fe34:	9b01      	ldr	r3, [sp, #4]
 800fe36:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fe3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fe3e:	9301      	str	r3, [sp, #4]
 800fe40:	fa1f f38a 	uxth.w	r3, sl
 800fe44:	4619      	mov	r1, r3
 800fe46:	b283      	uxth	r3, r0
 800fe48:	1acb      	subs	r3, r1, r3
 800fe4a:	0c00      	lsrs	r0, r0, #16
 800fe4c:	4463      	add	r3, ip
 800fe4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fe52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fe5c:	4576      	cmp	r6, lr
 800fe5e:	f849 3b04 	str.w	r3, [r9], #4
 800fe62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe66:	d8e5      	bhi.n	800fe34 <__mdiff+0x88>
 800fe68:	1b33      	subs	r3, r6, r4
 800fe6a:	3b15      	subs	r3, #21
 800fe6c:	f023 0303 	bic.w	r3, r3, #3
 800fe70:	3415      	adds	r4, #21
 800fe72:	3304      	adds	r3, #4
 800fe74:	42a6      	cmp	r6, r4
 800fe76:	bf38      	it	cc
 800fe78:	2304      	movcc	r3, #4
 800fe7a:	441d      	add	r5, r3
 800fe7c:	445b      	add	r3, fp
 800fe7e:	461e      	mov	r6, r3
 800fe80:	462c      	mov	r4, r5
 800fe82:	4544      	cmp	r4, r8
 800fe84:	d30e      	bcc.n	800fea4 <__mdiff+0xf8>
 800fe86:	f108 0103 	add.w	r1, r8, #3
 800fe8a:	1b49      	subs	r1, r1, r5
 800fe8c:	f021 0103 	bic.w	r1, r1, #3
 800fe90:	3d03      	subs	r5, #3
 800fe92:	45a8      	cmp	r8, r5
 800fe94:	bf38      	it	cc
 800fe96:	2100      	movcc	r1, #0
 800fe98:	440b      	add	r3, r1
 800fe9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe9e:	b191      	cbz	r1, 800fec6 <__mdiff+0x11a>
 800fea0:	6117      	str	r7, [r2, #16]
 800fea2:	e79d      	b.n	800fde0 <__mdiff+0x34>
 800fea4:	f854 1b04 	ldr.w	r1, [r4], #4
 800fea8:	46e6      	mov	lr, ip
 800feaa:	0c08      	lsrs	r0, r1, #16
 800feac:	fa1c fc81 	uxtah	ip, ip, r1
 800feb0:	4471      	add	r1, lr
 800feb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800feb6:	b289      	uxth	r1, r1
 800feb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800febc:	f846 1b04 	str.w	r1, [r6], #4
 800fec0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fec4:	e7dd      	b.n	800fe82 <__mdiff+0xd6>
 800fec6:	3f01      	subs	r7, #1
 800fec8:	e7e7      	b.n	800fe9a <__mdiff+0xee>
 800feca:	bf00      	nop
 800fecc:	08010abc 	.word	0x08010abc
 800fed0:	08010b2d 	.word	0x08010b2d

0800fed4 <__ulp>:
 800fed4:	b082      	sub	sp, #8
 800fed6:	ed8d 0b00 	vstr	d0, [sp]
 800feda:	9a01      	ldr	r2, [sp, #4]
 800fedc:	4b0f      	ldr	r3, [pc, #60]	@ (800ff1c <__ulp+0x48>)
 800fede:	4013      	ands	r3, r2
 800fee0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	dc08      	bgt.n	800fefa <__ulp+0x26>
 800fee8:	425b      	negs	r3, r3
 800feea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800feee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fef2:	da04      	bge.n	800fefe <__ulp+0x2a>
 800fef4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fef8:	4113      	asrs	r3, r2
 800fefa:	2200      	movs	r2, #0
 800fefc:	e008      	b.n	800ff10 <__ulp+0x3c>
 800fefe:	f1a2 0314 	sub.w	r3, r2, #20
 800ff02:	2b1e      	cmp	r3, #30
 800ff04:	bfda      	itte	le
 800ff06:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ff0a:	40da      	lsrle	r2, r3
 800ff0c:	2201      	movgt	r2, #1
 800ff0e:	2300      	movs	r3, #0
 800ff10:	4619      	mov	r1, r3
 800ff12:	4610      	mov	r0, r2
 800ff14:	ec41 0b10 	vmov	d0, r0, r1
 800ff18:	b002      	add	sp, #8
 800ff1a:	4770      	bx	lr
 800ff1c:	7ff00000 	.word	0x7ff00000

0800ff20 <__b2d>:
 800ff20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff24:	6906      	ldr	r6, [r0, #16]
 800ff26:	f100 0814 	add.w	r8, r0, #20
 800ff2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ff2e:	1f37      	subs	r7, r6, #4
 800ff30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff34:	4610      	mov	r0, r2
 800ff36:	f7ff fd53 	bl	800f9e0 <__hi0bits>
 800ff3a:	f1c0 0320 	rsb	r3, r0, #32
 800ff3e:	280a      	cmp	r0, #10
 800ff40:	600b      	str	r3, [r1, #0]
 800ff42:	491b      	ldr	r1, [pc, #108]	@ (800ffb0 <__b2d+0x90>)
 800ff44:	dc15      	bgt.n	800ff72 <__b2d+0x52>
 800ff46:	f1c0 0c0b 	rsb	ip, r0, #11
 800ff4a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ff4e:	45b8      	cmp	r8, r7
 800ff50:	ea43 0501 	orr.w	r5, r3, r1
 800ff54:	bf34      	ite	cc
 800ff56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff5a:	2300      	movcs	r3, #0
 800ff5c:	3015      	adds	r0, #21
 800ff5e:	fa02 f000 	lsl.w	r0, r2, r0
 800ff62:	fa23 f30c 	lsr.w	r3, r3, ip
 800ff66:	4303      	orrs	r3, r0
 800ff68:	461c      	mov	r4, r3
 800ff6a:	ec45 4b10 	vmov	d0, r4, r5
 800ff6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff72:	45b8      	cmp	r8, r7
 800ff74:	bf3a      	itte	cc
 800ff76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff7a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ff7e:	2300      	movcs	r3, #0
 800ff80:	380b      	subs	r0, #11
 800ff82:	d012      	beq.n	800ffaa <__b2d+0x8a>
 800ff84:	f1c0 0120 	rsb	r1, r0, #32
 800ff88:	fa23 f401 	lsr.w	r4, r3, r1
 800ff8c:	4082      	lsls	r2, r0
 800ff8e:	4322      	orrs	r2, r4
 800ff90:	4547      	cmp	r7, r8
 800ff92:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ff96:	bf8c      	ite	hi
 800ff98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ff9c:	2200      	movls	r2, #0
 800ff9e:	4083      	lsls	r3, r0
 800ffa0:	40ca      	lsrs	r2, r1
 800ffa2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ffa6:	4313      	orrs	r3, r2
 800ffa8:	e7de      	b.n	800ff68 <__b2d+0x48>
 800ffaa:	ea42 0501 	orr.w	r5, r2, r1
 800ffae:	e7db      	b.n	800ff68 <__b2d+0x48>
 800ffb0:	3ff00000 	.word	0x3ff00000

0800ffb4 <__d2b>:
 800ffb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffb8:	460f      	mov	r7, r1
 800ffba:	2101      	movs	r1, #1
 800ffbc:	ec59 8b10 	vmov	r8, r9, d0
 800ffc0:	4616      	mov	r6, r2
 800ffc2:	f7ff fc1b 	bl	800f7fc <_Balloc>
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	b930      	cbnz	r0, 800ffd8 <__d2b+0x24>
 800ffca:	4602      	mov	r2, r0
 800ffcc:	4b23      	ldr	r3, [pc, #140]	@ (801005c <__d2b+0xa8>)
 800ffce:	4824      	ldr	r0, [pc, #144]	@ (8010060 <__d2b+0xac>)
 800ffd0:	f240 310f 	movw	r1, #783	@ 0x30f
 800ffd4:	f7fe fa04 	bl	800e3e0 <__assert_func>
 800ffd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ffdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ffe0:	b10d      	cbz	r5, 800ffe6 <__d2b+0x32>
 800ffe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ffe6:	9301      	str	r3, [sp, #4]
 800ffe8:	f1b8 0300 	subs.w	r3, r8, #0
 800ffec:	d023      	beq.n	8010036 <__d2b+0x82>
 800ffee:	4668      	mov	r0, sp
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	f7ff fd14 	bl	800fa1e <__lo0bits>
 800fff6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fffa:	b1d0      	cbz	r0, 8010032 <__d2b+0x7e>
 800fffc:	f1c0 0320 	rsb	r3, r0, #32
 8010000:	fa02 f303 	lsl.w	r3, r2, r3
 8010004:	430b      	orrs	r3, r1
 8010006:	40c2      	lsrs	r2, r0
 8010008:	6163      	str	r3, [r4, #20]
 801000a:	9201      	str	r2, [sp, #4]
 801000c:	9b01      	ldr	r3, [sp, #4]
 801000e:	61a3      	str	r3, [r4, #24]
 8010010:	2b00      	cmp	r3, #0
 8010012:	bf0c      	ite	eq
 8010014:	2201      	moveq	r2, #1
 8010016:	2202      	movne	r2, #2
 8010018:	6122      	str	r2, [r4, #16]
 801001a:	b1a5      	cbz	r5, 8010046 <__d2b+0x92>
 801001c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010020:	4405      	add	r5, r0
 8010022:	603d      	str	r5, [r7, #0]
 8010024:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010028:	6030      	str	r0, [r6, #0]
 801002a:	4620      	mov	r0, r4
 801002c:	b003      	add	sp, #12
 801002e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010032:	6161      	str	r1, [r4, #20]
 8010034:	e7ea      	b.n	801000c <__d2b+0x58>
 8010036:	a801      	add	r0, sp, #4
 8010038:	f7ff fcf1 	bl	800fa1e <__lo0bits>
 801003c:	9b01      	ldr	r3, [sp, #4]
 801003e:	6163      	str	r3, [r4, #20]
 8010040:	3020      	adds	r0, #32
 8010042:	2201      	movs	r2, #1
 8010044:	e7e8      	b.n	8010018 <__d2b+0x64>
 8010046:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801004a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801004e:	6038      	str	r0, [r7, #0]
 8010050:	6918      	ldr	r0, [r3, #16]
 8010052:	f7ff fcc5 	bl	800f9e0 <__hi0bits>
 8010056:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801005a:	e7e5      	b.n	8010028 <__d2b+0x74>
 801005c:	08010abc 	.word	0x08010abc
 8010060:	08010b2d 	.word	0x08010b2d

08010064 <__ratio>:
 8010064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010068:	b085      	sub	sp, #20
 801006a:	e9cd 1000 	strd	r1, r0, [sp]
 801006e:	a902      	add	r1, sp, #8
 8010070:	f7ff ff56 	bl	800ff20 <__b2d>
 8010074:	9800      	ldr	r0, [sp, #0]
 8010076:	a903      	add	r1, sp, #12
 8010078:	ec55 4b10 	vmov	r4, r5, d0
 801007c:	f7ff ff50 	bl	800ff20 <__b2d>
 8010080:	9b01      	ldr	r3, [sp, #4]
 8010082:	6919      	ldr	r1, [r3, #16]
 8010084:	9b00      	ldr	r3, [sp, #0]
 8010086:	691b      	ldr	r3, [r3, #16]
 8010088:	1ac9      	subs	r1, r1, r3
 801008a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801008e:	1a9b      	subs	r3, r3, r2
 8010090:	ec5b ab10 	vmov	sl, fp, d0
 8010094:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010098:	2b00      	cmp	r3, #0
 801009a:	bfce      	itee	gt
 801009c:	462a      	movgt	r2, r5
 801009e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80100a2:	465a      	movle	r2, fp
 80100a4:	462f      	mov	r7, r5
 80100a6:	46d9      	mov	r9, fp
 80100a8:	bfcc      	ite	gt
 80100aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80100ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80100b2:	464b      	mov	r3, r9
 80100b4:	4652      	mov	r2, sl
 80100b6:	4620      	mov	r0, r4
 80100b8:	4639      	mov	r1, r7
 80100ba:	f7f0 fbd7 	bl	800086c <__aeabi_ddiv>
 80100be:	ec41 0b10 	vmov	d0, r0, r1
 80100c2:	b005      	add	sp, #20
 80100c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100c8 <__copybits>:
 80100c8:	3901      	subs	r1, #1
 80100ca:	b570      	push	{r4, r5, r6, lr}
 80100cc:	1149      	asrs	r1, r1, #5
 80100ce:	6914      	ldr	r4, [r2, #16]
 80100d0:	3101      	adds	r1, #1
 80100d2:	f102 0314 	add.w	r3, r2, #20
 80100d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80100da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80100de:	1f05      	subs	r5, r0, #4
 80100e0:	42a3      	cmp	r3, r4
 80100e2:	d30c      	bcc.n	80100fe <__copybits+0x36>
 80100e4:	1aa3      	subs	r3, r4, r2
 80100e6:	3b11      	subs	r3, #17
 80100e8:	f023 0303 	bic.w	r3, r3, #3
 80100ec:	3211      	adds	r2, #17
 80100ee:	42a2      	cmp	r2, r4
 80100f0:	bf88      	it	hi
 80100f2:	2300      	movhi	r3, #0
 80100f4:	4418      	add	r0, r3
 80100f6:	2300      	movs	r3, #0
 80100f8:	4288      	cmp	r0, r1
 80100fa:	d305      	bcc.n	8010108 <__copybits+0x40>
 80100fc:	bd70      	pop	{r4, r5, r6, pc}
 80100fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8010102:	f845 6f04 	str.w	r6, [r5, #4]!
 8010106:	e7eb      	b.n	80100e0 <__copybits+0x18>
 8010108:	f840 3b04 	str.w	r3, [r0], #4
 801010c:	e7f4      	b.n	80100f8 <__copybits+0x30>

0801010e <__any_on>:
 801010e:	f100 0214 	add.w	r2, r0, #20
 8010112:	6900      	ldr	r0, [r0, #16]
 8010114:	114b      	asrs	r3, r1, #5
 8010116:	4298      	cmp	r0, r3
 8010118:	b510      	push	{r4, lr}
 801011a:	db11      	blt.n	8010140 <__any_on+0x32>
 801011c:	dd0a      	ble.n	8010134 <__any_on+0x26>
 801011e:	f011 011f 	ands.w	r1, r1, #31
 8010122:	d007      	beq.n	8010134 <__any_on+0x26>
 8010124:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010128:	fa24 f001 	lsr.w	r0, r4, r1
 801012c:	fa00 f101 	lsl.w	r1, r0, r1
 8010130:	428c      	cmp	r4, r1
 8010132:	d10b      	bne.n	801014c <__any_on+0x3e>
 8010134:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010138:	4293      	cmp	r3, r2
 801013a:	d803      	bhi.n	8010144 <__any_on+0x36>
 801013c:	2000      	movs	r0, #0
 801013e:	bd10      	pop	{r4, pc}
 8010140:	4603      	mov	r3, r0
 8010142:	e7f7      	b.n	8010134 <__any_on+0x26>
 8010144:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010148:	2900      	cmp	r1, #0
 801014a:	d0f5      	beq.n	8010138 <__any_on+0x2a>
 801014c:	2001      	movs	r0, #1
 801014e:	e7f6      	b.n	801013e <__any_on+0x30>

08010150 <__ascii_wctomb>:
 8010150:	4603      	mov	r3, r0
 8010152:	4608      	mov	r0, r1
 8010154:	b141      	cbz	r1, 8010168 <__ascii_wctomb+0x18>
 8010156:	2aff      	cmp	r2, #255	@ 0xff
 8010158:	d904      	bls.n	8010164 <__ascii_wctomb+0x14>
 801015a:	228a      	movs	r2, #138	@ 0x8a
 801015c:	601a      	str	r2, [r3, #0]
 801015e:	f04f 30ff 	mov.w	r0, #4294967295
 8010162:	4770      	bx	lr
 8010164:	700a      	strb	r2, [r1, #0]
 8010166:	2001      	movs	r0, #1
 8010168:	4770      	bx	lr

0801016a <__sfputc_r>:
 801016a:	6893      	ldr	r3, [r2, #8]
 801016c:	3b01      	subs	r3, #1
 801016e:	2b00      	cmp	r3, #0
 8010170:	b410      	push	{r4}
 8010172:	6093      	str	r3, [r2, #8]
 8010174:	da08      	bge.n	8010188 <__sfputc_r+0x1e>
 8010176:	6994      	ldr	r4, [r2, #24]
 8010178:	42a3      	cmp	r3, r4
 801017a:	db01      	blt.n	8010180 <__sfputc_r+0x16>
 801017c:	290a      	cmp	r1, #10
 801017e:	d103      	bne.n	8010188 <__sfputc_r+0x1e>
 8010180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010184:	f000 b9f0 	b.w	8010568 <__swbuf_r>
 8010188:	6813      	ldr	r3, [r2, #0]
 801018a:	1c58      	adds	r0, r3, #1
 801018c:	6010      	str	r0, [r2, #0]
 801018e:	7019      	strb	r1, [r3, #0]
 8010190:	4608      	mov	r0, r1
 8010192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010196:	4770      	bx	lr

08010198 <__sfputs_r>:
 8010198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019a:	4606      	mov	r6, r0
 801019c:	460f      	mov	r7, r1
 801019e:	4614      	mov	r4, r2
 80101a0:	18d5      	adds	r5, r2, r3
 80101a2:	42ac      	cmp	r4, r5
 80101a4:	d101      	bne.n	80101aa <__sfputs_r+0x12>
 80101a6:	2000      	movs	r0, #0
 80101a8:	e007      	b.n	80101ba <__sfputs_r+0x22>
 80101aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ae:	463a      	mov	r2, r7
 80101b0:	4630      	mov	r0, r6
 80101b2:	f7ff ffda 	bl	801016a <__sfputc_r>
 80101b6:	1c43      	adds	r3, r0, #1
 80101b8:	d1f3      	bne.n	80101a2 <__sfputs_r+0xa>
 80101ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101bc <_vfiprintf_r>:
 80101bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c0:	460d      	mov	r5, r1
 80101c2:	b09d      	sub	sp, #116	@ 0x74
 80101c4:	4614      	mov	r4, r2
 80101c6:	4698      	mov	r8, r3
 80101c8:	4606      	mov	r6, r0
 80101ca:	b118      	cbz	r0, 80101d4 <_vfiprintf_r+0x18>
 80101cc:	6a03      	ldr	r3, [r0, #32]
 80101ce:	b90b      	cbnz	r3, 80101d4 <_vfiprintf_r+0x18>
 80101d0:	f7fd ff34 	bl	800e03c <__sinit>
 80101d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101d6:	07d9      	lsls	r1, r3, #31
 80101d8:	d405      	bmi.n	80101e6 <_vfiprintf_r+0x2a>
 80101da:	89ab      	ldrh	r3, [r5, #12]
 80101dc:	059a      	lsls	r2, r3, #22
 80101de:	d402      	bmi.n	80101e6 <_vfiprintf_r+0x2a>
 80101e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101e2:	f7fe f8e2 	bl	800e3aa <__retarget_lock_acquire_recursive>
 80101e6:	89ab      	ldrh	r3, [r5, #12]
 80101e8:	071b      	lsls	r3, r3, #28
 80101ea:	d501      	bpl.n	80101f0 <_vfiprintf_r+0x34>
 80101ec:	692b      	ldr	r3, [r5, #16]
 80101ee:	b99b      	cbnz	r3, 8010218 <_vfiprintf_r+0x5c>
 80101f0:	4629      	mov	r1, r5
 80101f2:	4630      	mov	r0, r6
 80101f4:	f000 f9f6 	bl	80105e4 <__swsetup_r>
 80101f8:	b170      	cbz	r0, 8010218 <_vfiprintf_r+0x5c>
 80101fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101fc:	07dc      	lsls	r4, r3, #31
 80101fe:	d504      	bpl.n	801020a <_vfiprintf_r+0x4e>
 8010200:	f04f 30ff 	mov.w	r0, #4294967295
 8010204:	b01d      	add	sp, #116	@ 0x74
 8010206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801020a:	89ab      	ldrh	r3, [r5, #12]
 801020c:	0598      	lsls	r0, r3, #22
 801020e:	d4f7      	bmi.n	8010200 <_vfiprintf_r+0x44>
 8010210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010212:	f7fe f8cb 	bl	800e3ac <__retarget_lock_release_recursive>
 8010216:	e7f3      	b.n	8010200 <_vfiprintf_r+0x44>
 8010218:	2300      	movs	r3, #0
 801021a:	9309      	str	r3, [sp, #36]	@ 0x24
 801021c:	2320      	movs	r3, #32
 801021e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010222:	f8cd 800c 	str.w	r8, [sp, #12]
 8010226:	2330      	movs	r3, #48	@ 0x30
 8010228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80103d8 <_vfiprintf_r+0x21c>
 801022c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010230:	f04f 0901 	mov.w	r9, #1
 8010234:	4623      	mov	r3, r4
 8010236:	469a      	mov	sl, r3
 8010238:	f813 2b01 	ldrb.w	r2, [r3], #1
 801023c:	b10a      	cbz	r2, 8010242 <_vfiprintf_r+0x86>
 801023e:	2a25      	cmp	r2, #37	@ 0x25
 8010240:	d1f9      	bne.n	8010236 <_vfiprintf_r+0x7a>
 8010242:	ebba 0b04 	subs.w	fp, sl, r4
 8010246:	d00b      	beq.n	8010260 <_vfiprintf_r+0xa4>
 8010248:	465b      	mov	r3, fp
 801024a:	4622      	mov	r2, r4
 801024c:	4629      	mov	r1, r5
 801024e:	4630      	mov	r0, r6
 8010250:	f7ff ffa2 	bl	8010198 <__sfputs_r>
 8010254:	3001      	adds	r0, #1
 8010256:	f000 80a7 	beq.w	80103a8 <_vfiprintf_r+0x1ec>
 801025a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801025c:	445a      	add	r2, fp
 801025e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010260:	f89a 3000 	ldrb.w	r3, [sl]
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 809f 	beq.w	80103a8 <_vfiprintf_r+0x1ec>
 801026a:	2300      	movs	r3, #0
 801026c:	f04f 32ff 	mov.w	r2, #4294967295
 8010270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010274:	f10a 0a01 	add.w	sl, sl, #1
 8010278:	9304      	str	r3, [sp, #16]
 801027a:	9307      	str	r3, [sp, #28]
 801027c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010280:	931a      	str	r3, [sp, #104]	@ 0x68
 8010282:	4654      	mov	r4, sl
 8010284:	2205      	movs	r2, #5
 8010286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801028a:	4853      	ldr	r0, [pc, #332]	@ (80103d8 <_vfiprintf_r+0x21c>)
 801028c:	f7ef ffb0 	bl	80001f0 <memchr>
 8010290:	9a04      	ldr	r2, [sp, #16]
 8010292:	b9d8      	cbnz	r0, 80102cc <_vfiprintf_r+0x110>
 8010294:	06d1      	lsls	r1, r2, #27
 8010296:	bf44      	itt	mi
 8010298:	2320      	movmi	r3, #32
 801029a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801029e:	0713      	lsls	r3, r2, #28
 80102a0:	bf44      	itt	mi
 80102a2:	232b      	movmi	r3, #43	@ 0x2b
 80102a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102a8:	f89a 3000 	ldrb.w	r3, [sl]
 80102ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80102ae:	d015      	beq.n	80102dc <_vfiprintf_r+0x120>
 80102b0:	9a07      	ldr	r2, [sp, #28]
 80102b2:	4654      	mov	r4, sl
 80102b4:	2000      	movs	r0, #0
 80102b6:	f04f 0c0a 	mov.w	ip, #10
 80102ba:	4621      	mov	r1, r4
 80102bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102c0:	3b30      	subs	r3, #48	@ 0x30
 80102c2:	2b09      	cmp	r3, #9
 80102c4:	d94b      	bls.n	801035e <_vfiprintf_r+0x1a2>
 80102c6:	b1b0      	cbz	r0, 80102f6 <_vfiprintf_r+0x13a>
 80102c8:	9207      	str	r2, [sp, #28]
 80102ca:	e014      	b.n	80102f6 <_vfiprintf_r+0x13a>
 80102cc:	eba0 0308 	sub.w	r3, r0, r8
 80102d0:	fa09 f303 	lsl.w	r3, r9, r3
 80102d4:	4313      	orrs	r3, r2
 80102d6:	9304      	str	r3, [sp, #16]
 80102d8:	46a2      	mov	sl, r4
 80102da:	e7d2      	b.n	8010282 <_vfiprintf_r+0xc6>
 80102dc:	9b03      	ldr	r3, [sp, #12]
 80102de:	1d19      	adds	r1, r3, #4
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	9103      	str	r1, [sp, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	bfbb      	ittet	lt
 80102e8:	425b      	neglt	r3, r3
 80102ea:	f042 0202 	orrlt.w	r2, r2, #2
 80102ee:	9307      	strge	r3, [sp, #28]
 80102f0:	9307      	strlt	r3, [sp, #28]
 80102f2:	bfb8      	it	lt
 80102f4:	9204      	strlt	r2, [sp, #16]
 80102f6:	7823      	ldrb	r3, [r4, #0]
 80102f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80102fa:	d10a      	bne.n	8010312 <_vfiprintf_r+0x156>
 80102fc:	7863      	ldrb	r3, [r4, #1]
 80102fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010300:	d132      	bne.n	8010368 <_vfiprintf_r+0x1ac>
 8010302:	9b03      	ldr	r3, [sp, #12]
 8010304:	1d1a      	adds	r2, r3, #4
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	9203      	str	r2, [sp, #12]
 801030a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801030e:	3402      	adds	r4, #2
 8010310:	9305      	str	r3, [sp, #20]
 8010312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80103e8 <_vfiprintf_r+0x22c>
 8010316:	7821      	ldrb	r1, [r4, #0]
 8010318:	2203      	movs	r2, #3
 801031a:	4650      	mov	r0, sl
 801031c:	f7ef ff68 	bl	80001f0 <memchr>
 8010320:	b138      	cbz	r0, 8010332 <_vfiprintf_r+0x176>
 8010322:	9b04      	ldr	r3, [sp, #16]
 8010324:	eba0 000a 	sub.w	r0, r0, sl
 8010328:	2240      	movs	r2, #64	@ 0x40
 801032a:	4082      	lsls	r2, r0
 801032c:	4313      	orrs	r3, r2
 801032e:	3401      	adds	r4, #1
 8010330:	9304      	str	r3, [sp, #16]
 8010332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010336:	4829      	ldr	r0, [pc, #164]	@ (80103dc <_vfiprintf_r+0x220>)
 8010338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801033c:	2206      	movs	r2, #6
 801033e:	f7ef ff57 	bl	80001f0 <memchr>
 8010342:	2800      	cmp	r0, #0
 8010344:	d03f      	beq.n	80103c6 <_vfiprintf_r+0x20a>
 8010346:	4b26      	ldr	r3, [pc, #152]	@ (80103e0 <_vfiprintf_r+0x224>)
 8010348:	bb1b      	cbnz	r3, 8010392 <_vfiprintf_r+0x1d6>
 801034a:	9b03      	ldr	r3, [sp, #12]
 801034c:	3307      	adds	r3, #7
 801034e:	f023 0307 	bic.w	r3, r3, #7
 8010352:	3308      	adds	r3, #8
 8010354:	9303      	str	r3, [sp, #12]
 8010356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010358:	443b      	add	r3, r7
 801035a:	9309      	str	r3, [sp, #36]	@ 0x24
 801035c:	e76a      	b.n	8010234 <_vfiprintf_r+0x78>
 801035e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010362:	460c      	mov	r4, r1
 8010364:	2001      	movs	r0, #1
 8010366:	e7a8      	b.n	80102ba <_vfiprintf_r+0xfe>
 8010368:	2300      	movs	r3, #0
 801036a:	3401      	adds	r4, #1
 801036c:	9305      	str	r3, [sp, #20]
 801036e:	4619      	mov	r1, r3
 8010370:	f04f 0c0a 	mov.w	ip, #10
 8010374:	4620      	mov	r0, r4
 8010376:	f810 2b01 	ldrb.w	r2, [r0], #1
 801037a:	3a30      	subs	r2, #48	@ 0x30
 801037c:	2a09      	cmp	r2, #9
 801037e:	d903      	bls.n	8010388 <_vfiprintf_r+0x1cc>
 8010380:	2b00      	cmp	r3, #0
 8010382:	d0c6      	beq.n	8010312 <_vfiprintf_r+0x156>
 8010384:	9105      	str	r1, [sp, #20]
 8010386:	e7c4      	b.n	8010312 <_vfiprintf_r+0x156>
 8010388:	fb0c 2101 	mla	r1, ip, r1, r2
 801038c:	4604      	mov	r4, r0
 801038e:	2301      	movs	r3, #1
 8010390:	e7f0      	b.n	8010374 <_vfiprintf_r+0x1b8>
 8010392:	ab03      	add	r3, sp, #12
 8010394:	9300      	str	r3, [sp, #0]
 8010396:	462a      	mov	r2, r5
 8010398:	4b12      	ldr	r3, [pc, #72]	@ (80103e4 <_vfiprintf_r+0x228>)
 801039a:	a904      	add	r1, sp, #16
 801039c:	4630      	mov	r0, r6
 801039e:	f7fd fa0b 	bl	800d7b8 <_printf_float>
 80103a2:	4607      	mov	r7, r0
 80103a4:	1c78      	adds	r0, r7, #1
 80103a6:	d1d6      	bne.n	8010356 <_vfiprintf_r+0x19a>
 80103a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103aa:	07d9      	lsls	r1, r3, #31
 80103ac:	d405      	bmi.n	80103ba <_vfiprintf_r+0x1fe>
 80103ae:	89ab      	ldrh	r3, [r5, #12]
 80103b0:	059a      	lsls	r2, r3, #22
 80103b2:	d402      	bmi.n	80103ba <_vfiprintf_r+0x1fe>
 80103b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103b6:	f7fd fff9 	bl	800e3ac <__retarget_lock_release_recursive>
 80103ba:	89ab      	ldrh	r3, [r5, #12]
 80103bc:	065b      	lsls	r3, r3, #25
 80103be:	f53f af1f 	bmi.w	8010200 <_vfiprintf_r+0x44>
 80103c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103c4:	e71e      	b.n	8010204 <_vfiprintf_r+0x48>
 80103c6:	ab03      	add	r3, sp, #12
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	462a      	mov	r2, r5
 80103cc:	4b05      	ldr	r3, [pc, #20]	@ (80103e4 <_vfiprintf_r+0x228>)
 80103ce:	a904      	add	r1, sp, #16
 80103d0:	4630      	mov	r0, r6
 80103d2:	f7fd fc89 	bl	800dce8 <_printf_i>
 80103d6:	e7e4      	b.n	80103a2 <_vfiprintf_r+0x1e6>
 80103d8:	08010b86 	.word	0x08010b86
 80103dc:	08010b90 	.word	0x08010b90
 80103e0:	0800d7b9 	.word	0x0800d7b9
 80103e4:	08010199 	.word	0x08010199
 80103e8:	08010b8c 	.word	0x08010b8c

080103ec <__sflush_r>:
 80103ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f4:	0716      	lsls	r6, r2, #28
 80103f6:	4605      	mov	r5, r0
 80103f8:	460c      	mov	r4, r1
 80103fa:	d454      	bmi.n	80104a6 <__sflush_r+0xba>
 80103fc:	684b      	ldr	r3, [r1, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	dc02      	bgt.n	8010408 <__sflush_r+0x1c>
 8010402:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010404:	2b00      	cmp	r3, #0
 8010406:	dd48      	ble.n	801049a <__sflush_r+0xae>
 8010408:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801040a:	2e00      	cmp	r6, #0
 801040c:	d045      	beq.n	801049a <__sflush_r+0xae>
 801040e:	2300      	movs	r3, #0
 8010410:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010414:	682f      	ldr	r7, [r5, #0]
 8010416:	6a21      	ldr	r1, [r4, #32]
 8010418:	602b      	str	r3, [r5, #0]
 801041a:	d030      	beq.n	801047e <__sflush_r+0x92>
 801041c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801041e:	89a3      	ldrh	r3, [r4, #12]
 8010420:	0759      	lsls	r1, r3, #29
 8010422:	d505      	bpl.n	8010430 <__sflush_r+0x44>
 8010424:	6863      	ldr	r3, [r4, #4]
 8010426:	1ad2      	subs	r2, r2, r3
 8010428:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801042a:	b10b      	cbz	r3, 8010430 <__sflush_r+0x44>
 801042c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801042e:	1ad2      	subs	r2, r2, r3
 8010430:	2300      	movs	r3, #0
 8010432:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010434:	6a21      	ldr	r1, [r4, #32]
 8010436:	4628      	mov	r0, r5
 8010438:	47b0      	blx	r6
 801043a:	1c43      	adds	r3, r0, #1
 801043c:	89a3      	ldrh	r3, [r4, #12]
 801043e:	d106      	bne.n	801044e <__sflush_r+0x62>
 8010440:	6829      	ldr	r1, [r5, #0]
 8010442:	291d      	cmp	r1, #29
 8010444:	d82b      	bhi.n	801049e <__sflush_r+0xb2>
 8010446:	4a2a      	ldr	r2, [pc, #168]	@ (80104f0 <__sflush_r+0x104>)
 8010448:	40ca      	lsrs	r2, r1
 801044a:	07d6      	lsls	r6, r2, #31
 801044c:	d527      	bpl.n	801049e <__sflush_r+0xb2>
 801044e:	2200      	movs	r2, #0
 8010450:	6062      	str	r2, [r4, #4]
 8010452:	04d9      	lsls	r1, r3, #19
 8010454:	6922      	ldr	r2, [r4, #16]
 8010456:	6022      	str	r2, [r4, #0]
 8010458:	d504      	bpl.n	8010464 <__sflush_r+0x78>
 801045a:	1c42      	adds	r2, r0, #1
 801045c:	d101      	bne.n	8010462 <__sflush_r+0x76>
 801045e:	682b      	ldr	r3, [r5, #0]
 8010460:	b903      	cbnz	r3, 8010464 <__sflush_r+0x78>
 8010462:	6560      	str	r0, [r4, #84]	@ 0x54
 8010464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010466:	602f      	str	r7, [r5, #0]
 8010468:	b1b9      	cbz	r1, 801049a <__sflush_r+0xae>
 801046a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801046e:	4299      	cmp	r1, r3
 8010470:	d002      	beq.n	8010478 <__sflush_r+0x8c>
 8010472:	4628      	mov	r0, r5
 8010474:	f7fe fe2c 	bl	800f0d0 <_free_r>
 8010478:	2300      	movs	r3, #0
 801047a:	6363      	str	r3, [r4, #52]	@ 0x34
 801047c:	e00d      	b.n	801049a <__sflush_r+0xae>
 801047e:	2301      	movs	r3, #1
 8010480:	4628      	mov	r0, r5
 8010482:	47b0      	blx	r6
 8010484:	4602      	mov	r2, r0
 8010486:	1c50      	adds	r0, r2, #1
 8010488:	d1c9      	bne.n	801041e <__sflush_r+0x32>
 801048a:	682b      	ldr	r3, [r5, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d0c6      	beq.n	801041e <__sflush_r+0x32>
 8010490:	2b1d      	cmp	r3, #29
 8010492:	d001      	beq.n	8010498 <__sflush_r+0xac>
 8010494:	2b16      	cmp	r3, #22
 8010496:	d11e      	bne.n	80104d6 <__sflush_r+0xea>
 8010498:	602f      	str	r7, [r5, #0]
 801049a:	2000      	movs	r0, #0
 801049c:	e022      	b.n	80104e4 <__sflush_r+0xf8>
 801049e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104a2:	b21b      	sxth	r3, r3
 80104a4:	e01b      	b.n	80104de <__sflush_r+0xf2>
 80104a6:	690f      	ldr	r7, [r1, #16]
 80104a8:	2f00      	cmp	r7, #0
 80104aa:	d0f6      	beq.n	801049a <__sflush_r+0xae>
 80104ac:	0793      	lsls	r3, r2, #30
 80104ae:	680e      	ldr	r6, [r1, #0]
 80104b0:	bf08      	it	eq
 80104b2:	694b      	ldreq	r3, [r1, #20]
 80104b4:	600f      	str	r7, [r1, #0]
 80104b6:	bf18      	it	ne
 80104b8:	2300      	movne	r3, #0
 80104ba:	eba6 0807 	sub.w	r8, r6, r7
 80104be:	608b      	str	r3, [r1, #8]
 80104c0:	f1b8 0f00 	cmp.w	r8, #0
 80104c4:	dde9      	ble.n	801049a <__sflush_r+0xae>
 80104c6:	6a21      	ldr	r1, [r4, #32]
 80104c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80104ca:	4643      	mov	r3, r8
 80104cc:	463a      	mov	r2, r7
 80104ce:	4628      	mov	r0, r5
 80104d0:	47b0      	blx	r6
 80104d2:	2800      	cmp	r0, #0
 80104d4:	dc08      	bgt.n	80104e8 <__sflush_r+0xfc>
 80104d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104de:	81a3      	strh	r3, [r4, #12]
 80104e0:	f04f 30ff 	mov.w	r0, #4294967295
 80104e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104e8:	4407      	add	r7, r0
 80104ea:	eba8 0800 	sub.w	r8, r8, r0
 80104ee:	e7e7      	b.n	80104c0 <__sflush_r+0xd4>
 80104f0:	20400001 	.word	0x20400001

080104f4 <_fflush_r>:
 80104f4:	b538      	push	{r3, r4, r5, lr}
 80104f6:	690b      	ldr	r3, [r1, #16]
 80104f8:	4605      	mov	r5, r0
 80104fa:	460c      	mov	r4, r1
 80104fc:	b913      	cbnz	r3, 8010504 <_fflush_r+0x10>
 80104fe:	2500      	movs	r5, #0
 8010500:	4628      	mov	r0, r5
 8010502:	bd38      	pop	{r3, r4, r5, pc}
 8010504:	b118      	cbz	r0, 801050e <_fflush_r+0x1a>
 8010506:	6a03      	ldr	r3, [r0, #32]
 8010508:	b90b      	cbnz	r3, 801050e <_fflush_r+0x1a>
 801050a:	f7fd fd97 	bl	800e03c <__sinit>
 801050e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d0f3      	beq.n	80104fe <_fflush_r+0xa>
 8010516:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010518:	07d0      	lsls	r0, r2, #31
 801051a:	d404      	bmi.n	8010526 <_fflush_r+0x32>
 801051c:	0599      	lsls	r1, r3, #22
 801051e:	d402      	bmi.n	8010526 <_fflush_r+0x32>
 8010520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010522:	f7fd ff42 	bl	800e3aa <__retarget_lock_acquire_recursive>
 8010526:	4628      	mov	r0, r5
 8010528:	4621      	mov	r1, r4
 801052a:	f7ff ff5f 	bl	80103ec <__sflush_r>
 801052e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010530:	07da      	lsls	r2, r3, #31
 8010532:	4605      	mov	r5, r0
 8010534:	d4e4      	bmi.n	8010500 <_fflush_r+0xc>
 8010536:	89a3      	ldrh	r3, [r4, #12]
 8010538:	059b      	lsls	r3, r3, #22
 801053a:	d4e1      	bmi.n	8010500 <_fflush_r+0xc>
 801053c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801053e:	f7fd ff35 	bl	800e3ac <__retarget_lock_release_recursive>
 8010542:	e7dd      	b.n	8010500 <_fflush_r+0xc>

08010544 <fiprintf>:
 8010544:	b40e      	push	{r1, r2, r3}
 8010546:	b503      	push	{r0, r1, lr}
 8010548:	4601      	mov	r1, r0
 801054a:	ab03      	add	r3, sp, #12
 801054c:	4805      	ldr	r0, [pc, #20]	@ (8010564 <fiprintf+0x20>)
 801054e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010552:	6800      	ldr	r0, [r0, #0]
 8010554:	9301      	str	r3, [sp, #4]
 8010556:	f7ff fe31 	bl	80101bc <_vfiprintf_r>
 801055a:	b002      	add	sp, #8
 801055c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010560:	b003      	add	sp, #12
 8010562:	4770      	bx	lr
 8010564:	20000374 	.word	0x20000374

08010568 <__swbuf_r>:
 8010568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801056a:	460e      	mov	r6, r1
 801056c:	4614      	mov	r4, r2
 801056e:	4605      	mov	r5, r0
 8010570:	b118      	cbz	r0, 801057a <__swbuf_r+0x12>
 8010572:	6a03      	ldr	r3, [r0, #32]
 8010574:	b90b      	cbnz	r3, 801057a <__swbuf_r+0x12>
 8010576:	f7fd fd61 	bl	800e03c <__sinit>
 801057a:	69a3      	ldr	r3, [r4, #24]
 801057c:	60a3      	str	r3, [r4, #8]
 801057e:	89a3      	ldrh	r3, [r4, #12]
 8010580:	071a      	lsls	r2, r3, #28
 8010582:	d501      	bpl.n	8010588 <__swbuf_r+0x20>
 8010584:	6923      	ldr	r3, [r4, #16]
 8010586:	b943      	cbnz	r3, 801059a <__swbuf_r+0x32>
 8010588:	4621      	mov	r1, r4
 801058a:	4628      	mov	r0, r5
 801058c:	f000 f82a 	bl	80105e4 <__swsetup_r>
 8010590:	b118      	cbz	r0, 801059a <__swbuf_r+0x32>
 8010592:	f04f 37ff 	mov.w	r7, #4294967295
 8010596:	4638      	mov	r0, r7
 8010598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801059a:	6823      	ldr	r3, [r4, #0]
 801059c:	6922      	ldr	r2, [r4, #16]
 801059e:	1a98      	subs	r0, r3, r2
 80105a0:	6963      	ldr	r3, [r4, #20]
 80105a2:	b2f6      	uxtb	r6, r6
 80105a4:	4283      	cmp	r3, r0
 80105a6:	4637      	mov	r7, r6
 80105a8:	dc05      	bgt.n	80105b6 <__swbuf_r+0x4e>
 80105aa:	4621      	mov	r1, r4
 80105ac:	4628      	mov	r0, r5
 80105ae:	f7ff ffa1 	bl	80104f4 <_fflush_r>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	d1ed      	bne.n	8010592 <__swbuf_r+0x2a>
 80105b6:	68a3      	ldr	r3, [r4, #8]
 80105b8:	3b01      	subs	r3, #1
 80105ba:	60a3      	str	r3, [r4, #8]
 80105bc:	6823      	ldr	r3, [r4, #0]
 80105be:	1c5a      	adds	r2, r3, #1
 80105c0:	6022      	str	r2, [r4, #0]
 80105c2:	701e      	strb	r6, [r3, #0]
 80105c4:	6962      	ldr	r2, [r4, #20]
 80105c6:	1c43      	adds	r3, r0, #1
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d004      	beq.n	80105d6 <__swbuf_r+0x6e>
 80105cc:	89a3      	ldrh	r3, [r4, #12]
 80105ce:	07db      	lsls	r3, r3, #31
 80105d0:	d5e1      	bpl.n	8010596 <__swbuf_r+0x2e>
 80105d2:	2e0a      	cmp	r6, #10
 80105d4:	d1df      	bne.n	8010596 <__swbuf_r+0x2e>
 80105d6:	4621      	mov	r1, r4
 80105d8:	4628      	mov	r0, r5
 80105da:	f7ff ff8b 	bl	80104f4 <_fflush_r>
 80105de:	2800      	cmp	r0, #0
 80105e0:	d0d9      	beq.n	8010596 <__swbuf_r+0x2e>
 80105e2:	e7d6      	b.n	8010592 <__swbuf_r+0x2a>

080105e4 <__swsetup_r>:
 80105e4:	b538      	push	{r3, r4, r5, lr}
 80105e6:	4b29      	ldr	r3, [pc, #164]	@ (801068c <__swsetup_r+0xa8>)
 80105e8:	4605      	mov	r5, r0
 80105ea:	6818      	ldr	r0, [r3, #0]
 80105ec:	460c      	mov	r4, r1
 80105ee:	b118      	cbz	r0, 80105f8 <__swsetup_r+0x14>
 80105f0:	6a03      	ldr	r3, [r0, #32]
 80105f2:	b90b      	cbnz	r3, 80105f8 <__swsetup_r+0x14>
 80105f4:	f7fd fd22 	bl	800e03c <__sinit>
 80105f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105fc:	0719      	lsls	r1, r3, #28
 80105fe:	d422      	bmi.n	8010646 <__swsetup_r+0x62>
 8010600:	06da      	lsls	r2, r3, #27
 8010602:	d407      	bmi.n	8010614 <__swsetup_r+0x30>
 8010604:	2209      	movs	r2, #9
 8010606:	602a      	str	r2, [r5, #0]
 8010608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801060c:	81a3      	strh	r3, [r4, #12]
 801060e:	f04f 30ff 	mov.w	r0, #4294967295
 8010612:	e033      	b.n	801067c <__swsetup_r+0x98>
 8010614:	0758      	lsls	r0, r3, #29
 8010616:	d512      	bpl.n	801063e <__swsetup_r+0x5a>
 8010618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801061a:	b141      	cbz	r1, 801062e <__swsetup_r+0x4a>
 801061c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010620:	4299      	cmp	r1, r3
 8010622:	d002      	beq.n	801062a <__swsetup_r+0x46>
 8010624:	4628      	mov	r0, r5
 8010626:	f7fe fd53 	bl	800f0d0 <_free_r>
 801062a:	2300      	movs	r3, #0
 801062c:	6363      	str	r3, [r4, #52]	@ 0x34
 801062e:	89a3      	ldrh	r3, [r4, #12]
 8010630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010634:	81a3      	strh	r3, [r4, #12]
 8010636:	2300      	movs	r3, #0
 8010638:	6063      	str	r3, [r4, #4]
 801063a:	6923      	ldr	r3, [r4, #16]
 801063c:	6023      	str	r3, [r4, #0]
 801063e:	89a3      	ldrh	r3, [r4, #12]
 8010640:	f043 0308 	orr.w	r3, r3, #8
 8010644:	81a3      	strh	r3, [r4, #12]
 8010646:	6923      	ldr	r3, [r4, #16]
 8010648:	b94b      	cbnz	r3, 801065e <__swsetup_r+0x7a>
 801064a:	89a3      	ldrh	r3, [r4, #12]
 801064c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010654:	d003      	beq.n	801065e <__swsetup_r+0x7a>
 8010656:	4621      	mov	r1, r4
 8010658:	4628      	mov	r0, r5
 801065a:	f000 f85a 	bl	8010712 <__smakebuf_r>
 801065e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010662:	f013 0201 	ands.w	r2, r3, #1
 8010666:	d00a      	beq.n	801067e <__swsetup_r+0x9a>
 8010668:	2200      	movs	r2, #0
 801066a:	60a2      	str	r2, [r4, #8]
 801066c:	6962      	ldr	r2, [r4, #20]
 801066e:	4252      	negs	r2, r2
 8010670:	61a2      	str	r2, [r4, #24]
 8010672:	6922      	ldr	r2, [r4, #16]
 8010674:	b942      	cbnz	r2, 8010688 <__swsetup_r+0xa4>
 8010676:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801067a:	d1c5      	bne.n	8010608 <__swsetup_r+0x24>
 801067c:	bd38      	pop	{r3, r4, r5, pc}
 801067e:	0799      	lsls	r1, r3, #30
 8010680:	bf58      	it	pl
 8010682:	6962      	ldrpl	r2, [r4, #20]
 8010684:	60a2      	str	r2, [r4, #8]
 8010686:	e7f4      	b.n	8010672 <__swsetup_r+0x8e>
 8010688:	2000      	movs	r0, #0
 801068a:	e7f7      	b.n	801067c <__swsetup_r+0x98>
 801068c:	20000374 	.word	0x20000374

08010690 <abort>:
 8010690:	b508      	push	{r3, lr}
 8010692:	2006      	movs	r0, #6
 8010694:	f000 f8a2 	bl	80107dc <raise>
 8010698:	2001      	movs	r0, #1
 801069a:	f7f2 f875 	bl	8002788 <_exit>

0801069e <_calloc_r>:
 801069e:	b570      	push	{r4, r5, r6, lr}
 80106a0:	fba1 5402 	umull	r5, r4, r1, r2
 80106a4:	b934      	cbnz	r4, 80106b4 <_calloc_r+0x16>
 80106a6:	4629      	mov	r1, r5
 80106a8:	f7fc f8c8 	bl	800c83c <_malloc_r>
 80106ac:	4606      	mov	r6, r0
 80106ae:	b928      	cbnz	r0, 80106bc <_calloc_r+0x1e>
 80106b0:	4630      	mov	r0, r6
 80106b2:	bd70      	pop	{r4, r5, r6, pc}
 80106b4:	220c      	movs	r2, #12
 80106b6:	6002      	str	r2, [r0, #0]
 80106b8:	2600      	movs	r6, #0
 80106ba:	e7f9      	b.n	80106b0 <_calloc_r+0x12>
 80106bc:	462a      	mov	r2, r5
 80106be:	4621      	mov	r1, r4
 80106c0:	f7fd fd47 	bl	800e152 <memset>
 80106c4:	e7f4      	b.n	80106b0 <_calloc_r+0x12>

080106c6 <__swhatbuf_r>:
 80106c6:	b570      	push	{r4, r5, r6, lr}
 80106c8:	460c      	mov	r4, r1
 80106ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ce:	2900      	cmp	r1, #0
 80106d0:	b096      	sub	sp, #88	@ 0x58
 80106d2:	4615      	mov	r5, r2
 80106d4:	461e      	mov	r6, r3
 80106d6:	da0d      	bge.n	80106f4 <__swhatbuf_r+0x2e>
 80106d8:	89a3      	ldrh	r3, [r4, #12]
 80106da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80106de:	f04f 0100 	mov.w	r1, #0
 80106e2:	bf14      	ite	ne
 80106e4:	2340      	movne	r3, #64	@ 0x40
 80106e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80106ea:	2000      	movs	r0, #0
 80106ec:	6031      	str	r1, [r6, #0]
 80106ee:	602b      	str	r3, [r5, #0]
 80106f0:	b016      	add	sp, #88	@ 0x58
 80106f2:	bd70      	pop	{r4, r5, r6, pc}
 80106f4:	466a      	mov	r2, sp
 80106f6:	f000 f879 	bl	80107ec <_fstat_r>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	dbec      	blt.n	80106d8 <__swhatbuf_r+0x12>
 80106fe:	9901      	ldr	r1, [sp, #4]
 8010700:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010704:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010708:	4259      	negs	r1, r3
 801070a:	4159      	adcs	r1, r3
 801070c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010710:	e7eb      	b.n	80106ea <__swhatbuf_r+0x24>

08010712 <__smakebuf_r>:
 8010712:	898b      	ldrh	r3, [r1, #12]
 8010714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010716:	079d      	lsls	r5, r3, #30
 8010718:	4606      	mov	r6, r0
 801071a:	460c      	mov	r4, r1
 801071c:	d507      	bpl.n	801072e <__smakebuf_r+0x1c>
 801071e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010722:	6023      	str	r3, [r4, #0]
 8010724:	6123      	str	r3, [r4, #16]
 8010726:	2301      	movs	r3, #1
 8010728:	6163      	str	r3, [r4, #20]
 801072a:	b003      	add	sp, #12
 801072c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801072e:	ab01      	add	r3, sp, #4
 8010730:	466a      	mov	r2, sp
 8010732:	f7ff ffc8 	bl	80106c6 <__swhatbuf_r>
 8010736:	9f00      	ldr	r7, [sp, #0]
 8010738:	4605      	mov	r5, r0
 801073a:	4639      	mov	r1, r7
 801073c:	4630      	mov	r0, r6
 801073e:	f7fc f87d 	bl	800c83c <_malloc_r>
 8010742:	b948      	cbnz	r0, 8010758 <__smakebuf_r+0x46>
 8010744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010748:	059a      	lsls	r2, r3, #22
 801074a:	d4ee      	bmi.n	801072a <__smakebuf_r+0x18>
 801074c:	f023 0303 	bic.w	r3, r3, #3
 8010750:	f043 0302 	orr.w	r3, r3, #2
 8010754:	81a3      	strh	r3, [r4, #12]
 8010756:	e7e2      	b.n	801071e <__smakebuf_r+0xc>
 8010758:	89a3      	ldrh	r3, [r4, #12]
 801075a:	6020      	str	r0, [r4, #0]
 801075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010760:	81a3      	strh	r3, [r4, #12]
 8010762:	9b01      	ldr	r3, [sp, #4]
 8010764:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010768:	b15b      	cbz	r3, 8010782 <__smakebuf_r+0x70>
 801076a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801076e:	4630      	mov	r0, r6
 8010770:	f000 f84e 	bl	8010810 <_isatty_r>
 8010774:	b128      	cbz	r0, 8010782 <__smakebuf_r+0x70>
 8010776:	89a3      	ldrh	r3, [r4, #12]
 8010778:	f023 0303 	bic.w	r3, r3, #3
 801077c:	f043 0301 	orr.w	r3, r3, #1
 8010780:	81a3      	strh	r3, [r4, #12]
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	431d      	orrs	r5, r3
 8010786:	81a5      	strh	r5, [r4, #12]
 8010788:	e7cf      	b.n	801072a <__smakebuf_r+0x18>

0801078a <_raise_r>:
 801078a:	291f      	cmp	r1, #31
 801078c:	b538      	push	{r3, r4, r5, lr}
 801078e:	4605      	mov	r5, r0
 8010790:	460c      	mov	r4, r1
 8010792:	d904      	bls.n	801079e <_raise_r+0x14>
 8010794:	2316      	movs	r3, #22
 8010796:	6003      	str	r3, [r0, #0]
 8010798:	f04f 30ff 	mov.w	r0, #4294967295
 801079c:	bd38      	pop	{r3, r4, r5, pc}
 801079e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80107a0:	b112      	cbz	r2, 80107a8 <_raise_r+0x1e>
 80107a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80107a6:	b94b      	cbnz	r3, 80107bc <_raise_r+0x32>
 80107a8:	4628      	mov	r0, r5
 80107aa:	f000 f853 	bl	8010854 <_getpid_r>
 80107ae:	4622      	mov	r2, r4
 80107b0:	4601      	mov	r1, r0
 80107b2:	4628      	mov	r0, r5
 80107b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107b8:	f000 b83a 	b.w	8010830 <_kill_r>
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d00a      	beq.n	80107d6 <_raise_r+0x4c>
 80107c0:	1c59      	adds	r1, r3, #1
 80107c2:	d103      	bne.n	80107cc <_raise_r+0x42>
 80107c4:	2316      	movs	r3, #22
 80107c6:	6003      	str	r3, [r0, #0]
 80107c8:	2001      	movs	r0, #1
 80107ca:	e7e7      	b.n	801079c <_raise_r+0x12>
 80107cc:	2100      	movs	r1, #0
 80107ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80107d2:	4620      	mov	r0, r4
 80107d4:	4798      	blx	r3
 80107d6:	2000      	movs	r0, #0
 80107d8:	e7e0      	b.n	801079c <_raise_r+0x12>
	...

080107dc <raise>:
 80107dc:	4b02      	ldr	r3, [pc, #8]	@ (80107e8 <raise+0xc>)
 80107de:	4601      	mov	r1, r0
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	f7ff bfd2 	b.w	801078a <_raise_r>
 80107e6:	bf00      	nop
 80107e8:	20000374 	.word	0x20000374

080107ec <_fstat_r>:
 80107ec:	b538      	push	{r3, r4, r5, lr}
 80107ee:	4d07      	ldr	r5, [pc, #28]	@ (801080c <_fstat_r+0x20>)
 80107f0:	2300      	movs	r3, #0
 80107f2:	4604      	mov	r4, r0
 80107f4:	4608      	mov	r0, r1
 80107f6:	4611      	mov	r1, r2
 80107f8:	602b      	str	r3, [r5, #0]
 80107fa:	f7f1 fff9 	bl	80027f0 <_fstat>
 80107fe:	1c43      	adds	r3, r0, #1
 8010800:	d102      	bne.n	8010808 <_fstat_r+0x1c>
 8010802:	682b      	ldr	r3, [r5, #0]
 8010804:	b103      	cbz	r3, 8010808 <_fstat_r+0x1c>
 8010806:	6023      	str	r3, [r4, #0]
 8010808:	bd38      	pop	{r3, r4, r5, pc}
 801080a:	bf00      	nop
 801080c:	20002c24 	.word	0x20002c24

08010810 <_isatty_r>:
 8010810:	b538      	push	{r3, r4, r5, lr}
 8010812:	4d06      	ldr	r5, [pc, #24]	@ (801082c <_isatty_r+0x1c>)
 8010814:	2300      	movs	r3, #0
 8010816:	4604      	mov	r4, r0
 8010818:	4608      	mov	r0, r1
 801081a:	602b      	str	r3, [r5, #0]
 801081c:	f7f1 fff8 	bl	8002810 <_isatty>
 8010820:	1c43      	adds	r3, r0, #1
 8010822:	d102      	bne.n	801082a <_isatty_r+0x1a>
 8010824:	682b      	ldr	r3, [r5, #0]
 8010826:	b103      	cbz	r3, 801082a <_isatty_r+0x1a>
 8010828:	6023      	str	r3, [r4, #0]
 801082a:	bd38      	pop	{r3, r4, r5, pc}
 801082c:	20002c24 	.word	0x20002c24

08010830 <_kill_r>:
 8010830:	b538      	push	{r3, r4, r5, lr}
 8010832:	4d07      	ldr	r5, [pc, #28]	@ (8010850 <_kill_r+0x20>)
 8010834:	2300      	movs	r3, #0
 8010836:	4604      	mov	r4, r0
 8010838:	4608      	mov	r0, r1
 801083a:	4611      	mov	r1, r2
 801083c:	602b      	str	r3, [r5, #0]
 801083e:	f7f1 ff93 	bl	8002768 <_kill>
 8010842:	1c43      	adds	r3, r0, #1
 8010844:	d102      	bne.n	801084c <_kill_r+0x1c>
 8010846:	682b      	ldr	r3, [r5, #0]
 8010848:	b103      	cbz	r3, 801084c <_kill_r+0x1c>
 801084a:	6023      	str	r3, [r4, #0]
 801084c:	bd38      	pop	{r3, r4, r5, pc}
 801084e:	bf00      	nop
 8010850:	20002c24 	.word	0x20002c24

08010854 <_getpid_r>:
 8010854:	f7f1 bf80 	b.w	8002758 <_getpid>

08010858 <_init>:
 8010858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801085a:	bf00      	nop
 801085c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801085e:	bc08      	pop	{r3}
 8010860:	469e      	mov	lr, r3
 8010862:	4770      	bx	lr

08010864 <_fini>:
 8010864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010866:	bf00      	nop
 8010868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801086a:	bc08      	pop	{r3}
 801086c:	469e      	mov	lr, r3
 801086e:	4770      	bx	lr
